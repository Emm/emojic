// Code generated by github.com/orhanbalci/emojic/emojic-gen DO NOT EDIT.

// Source: https://unicode.org/Public/emoji/13.1/emoji-test.txt
// Created at: 2022-10-24 05:19:18.898747236 UTC

#![allow(unused_imports)]

//! Grouped list of all emojis with sub modules.
//!
//! This module contains the same set of emojis as the [`crate::flat`] module, but
//! categorized into their respective groups and subgroups via sub modules.
//! This make it easier to browse all the emojis in an intelligible way.
//!
//! # Examples
//!
//! ```rust
//! // prints: üñºÔ∏è
//! println!("{}", emojic::grouped::activities::arts_and_crafts::FRAMED_PICTURE);
//! ```

use crate::emojis::Emoji;



/// activities üé®ü•áüéüÔ∏è
pub mod activities {
	use crate::emojis::Emoji;

	
	/// arts_and_crafts üé®üñºÔ∏èü™¢
	pub mod arts_and_crafts {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="artist palette üé®"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ARTIST_PALETTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ARTIST_PALETTE); // üé® (`U+1F3A8`)"] #[doc="# assert_eq!(ARTIST_PALETTE.to_string().as_str(), \"üé®\");"]
#[doc="```"]
pub static ARTIST_PALETTE :  Emoji = Emoji::new("artist palette", Version(0, 6), "üé®"); // artist palette
		
		#[doc="framed picture üñºÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FRAMED_PICTURE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FRAMED_PICTURE); // üñºÔ∏è (`U+1F5BC U+FE0F`)"] #[doc="# assert_eq!(FRAMED_PICTURE.to_string().as_str(), \"üñºÔ∏è\");"]
#[doc="```"]
pub static FRAMED_PICTURE :  Emoji = Emoji::new("framed picture", Version(0, 7), "üñºÔ∏è"); // framed picture
		
		#[doc="knot ü™¢"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KNOT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KNOT); // ü™¢ (`U+1FAA2`)"] #[doc="# assert_eq!(KNOT.to_string().as_str(), \"ü™¢\");"]
#[doc="```"]
pub static KNOT :  Emoji = Emoji::new("knot", Version(13, 0), "ü™¢"); // knot
		
		#[doc="performing arts üé≠"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERFORMING_ARTS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERFORMING_ARTS); // üé≠ (`U+1F3AD`)"] #[doc="# assert_eq!(PERFORMING_ARTS.to_string().as_str(), \"üé≠\");"]
#[doc="```"]
pub static PERFORMING_ARTS :  Emoji = Emoji::new("performing arts", Version(0, 6), "üé≠"); // performing arts
		
		#[doc="sewing needle ü™°"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SEWING_NEEDLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SEWING_NEEDLE); // ü™° (`U+1FAA1`)"] #[doc="# assert_eq!(SEWING_NEEDLE.to_string().as_str(), \"ü™°\");"]
#[doc="```"]
pub static SEWING_NEEDLE :  Emoji = Emoji::new("sewing needle", Version(13, 0), "ü™°"); // sewing needle
		
		#[doc="thread üßµ"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::THREAD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", THREAD); // üßµ (`U+1F9F5`)"] #[doc="# assert_eq!(THREAD.to_string().as_str(), \"üßµ\");"]
#[doc="```"]
pub static THREAD :  Emoji = Emoji::new("thread", Version(11, 0), "üßµ"); // thread
		
		#[doc="yarn üß∂"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::YARN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", YARN); // üß∂ (`U+1F9F6`)"] #[doc="# assert_eq!(YARN.to_string().as_str(), \"üß∂\");"]
#[doc="```"]
pub static YARN :  Emoji = Emoji::new("yarn", Version(11, 0), "üß∂"); // yarn
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // ARTIST_PALETTE
				
				&ARTIST_PALETTE,
				
			],
			
			&[ // FRAMED_PICTURE
				
				&FRAMED_PICTURE,
				
			],
			
			&[ // KNOT
				
				&KNOT,
				
			],
			
			&[ // PERFORMING_ARTS
				
				&PERFORMING_ARTS,
				
			],
			
			&[ // SEWING_NEEDLE
				
				&SEWING_NEEDLE,
				
			],
			
			&[ // THREAD
				
				&THREAD,
				
			],
			
			&[ // YARN
				
				&YARN,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&ARTIST_PALETTE, // ARTIST_PALETTE
				
			
				
				&FRAMED_PICTURE, // FRAMED_PICTURE
				
			
				
				&KNOT, // KNOT
				
			
				
				&PERFORMING_ARTS, // PERFORMING_ARTS
				
			
				
				&SEWING_NEEDLE, // SEWING_NEEDLE
				
			
				
				&THREAD, // THREAD
				
			
				
				&YARN, // YARN
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // arts_and_crafts
	
	/// award_medal ü•áüéñÔ∏èü•à
	pub mod award_medal {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="1st place medal ü•á"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FIRST_PLACE_MEDAL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FIRST_PLACE_MEDAL); // ü•á (`U+1F947`)"] #[doc="# assert_eq!(FIRST_PLACE_MEDAL.to_string().as_str(), \"ü•á\");"]
#[doc="```"]
pub static FIRST_PLACE_MEDAL :  Emoji = Emoji::new("1st place medal", Version(3, 0), "ü•á"); // 1st place medal
		
		#[doc="military medal üéñÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MILITARY_MEDAL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MILITARY_MEDAL); // üéñÔ∏è (`U+1F396 U+FE0F`)"] #[doc="# assert_eq!(MILITARY_MEDAL.to_string().as_str(), \"üéñÔ∏è\");"]
#[doc="```"]
pub static MILITARY_MEDAL :  Emoji = Emoji::new("military medal", Version(0, 7), "üéñÔ∏è"); // military medal
		
		#[doc="2nd place medal ü•à"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SECOND_PLACE_MEDAL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SECOND_PLACE_MEDAL); // ü•à (`U+1F948`)"] #[doc="# assert_eq!(SECOND_PLACE_MEDAL.to_string().as_str(), \"ü•à\");"]
#[doc="```"]
pub static SECOND_PLACE_MEDAL :  Emoji = Emoji::new("2nd place medal", Version(3, 0), "ü•à"); // 2nd place medal
		
		#[doc="sports medal üèÖ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPORTS_MEDAL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPORTS_MEDAL); // üèÖ (`U+1F3C5`)"] #[doc="# assert_eq!(SPORTS_MEDAL.to_string().as_str(), \"üèÖ\");"]
#[doc="```"]
pub static SPORTS_MEDAL :  Emoji = Emoji::new("sports medal", Version(1, 0), "üèÖ"); // sports medal
		
		#[doc="3rd place medal ü•â"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::THIRD_PLACE_MEDAL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", THIRD_PLACE_MEDAL); // ü•â (`U+1F949`)"] #[doc="# assert_eq!(THIRD_PLACE_MEDAL.to_string().as_str(), \"ü•â\");"]
#[doc="```"]
pub static THIRD_PLACE_MEDAL :  Emoji = Emoji::new("3rd place medal", Version(3, 0), "ü•â"); // 3rd place medal
		
		#[doc="trophy üèÜ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TROPHY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TROPHY); // üèÜ (`U+1F3C6`)"] #[doc="# assert_eq!(TROPHY.to_string().as_str(), \"üèÜ\");"]
#[doc="```"]
pub static TROPHY :  Emoji = Emoji::new("trophy", Version(0, 6), "üèÜ"); // trophy
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // FIRST_PLACE_MEDAL
				
				&FIRST_PLACE_MEDAL,
				
			],
			
			&[ // MILITARY_MEDAL
				
				&MILITARY_MEDAL,
				
			],
			
			&[ // SECOND_PLACE_MEDAL
				
				&SECOND_PLACE_MEDAL,
				
			],
			
			&[ // SPORTS_MEDAL
				
				&SPORTS_MEDAL,
				
			],
			
			&[ // THIRD_PLACE_MEDAL
				
				&THIRD_PLACE_MEDAL,
				
			],
			
			&[ // TROPHY
				
				&TROPHY,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&FIRST_PLACE_MEDAL, // FIRST_PLACE_MEDAL
				
			
				
				&MILITARY_MEDAL, // MILITARY_MEDAL
				
			
				
				&SECOND_PLACE_MEDAL, // SECOND_PLACE_MEDAL
				
			
				
				&SPORTS_MEDAL, // SPORTS_MEDAL
				
			
				
				&THIRD_PLACE_MEDAL, // THIRD_PLACE_MEDAL
				
			
				
				&TROPHY, // TROPHY
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // award_medal
	
	/// event üéüÔ∏èüéàüéè
	pub mod event {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="admission tickets üéüÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ADMISSION_TICKETS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ADMISSION_TICKETS); // üéüÔ∏è (`U+1F39F U+FE0F`)"] #[doc="# assert_eq!(ADMISSION_TICKETS.to_string().as_str(), \"üéüÔ∏è\");"]
#[doc="```"]
pub static ADMISSION_TICKETS :  Emoji = Emoji::new("admission tickets", Version(0, 7), "üéüÔ∏è"); // admission tickets
		
		#[doc="balloon üéà"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BALLOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BALLOON); // üéà (`U+1F388`)"] #[doc="# assert_eq!(BALLOON.to_string().as_str(), \"üéà\");"]
#[doc="```"]
pub static BALLOON :  Emoji = Emoji::new("balloon", Version(0, 6), "üéà"); // balloon
		
		#[doc="carp streamer üéè"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CARP_STREAMER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CARP_STREAMER); // üéè (`U+1F38F`)"] #[doc="# assert_eq!(CARP_STREAMER.to_string().as_str(), \"üéè\");"]
#[doc="```"]
pub static CARP_STREAMER :  Emoji = Emoji::new("carp streamer", Version(0, 6), "üéè"); // carp streamer
		
		#[doc="Christmas tree üéÑ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHRISTMAS_TREE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHRISTMAS_TREE); // üéÑ (`U+1F384`)"] #[doc="# assert_eq!(CHRISTMAS_TREE.to_string().as_str(), \"üéÑ\");"]
#[doc="```"]
pub static CHRISTMAS_TREE :  Emoji = Emoji::new("Christmas tree", Version(0, 6), "üéÑ"); // Christmas tree
		
		#[doc="confetti ball üéä"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CONFETTI_BALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CONFETTI_BALL); // üéä (`U+1F38A`)"] #[doc="# assert_eq!(CONFETTI_BALL.to_string().as_str(), \"üéä\");"]
#[doc="```"]
pub static CONFETTI_BALL :  Emoji = Emoji::new("confetti ball", Version(0, 6), "üéä"); // confetti ball
		
		#[doc="firecracker üß®"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FIRECRACKER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FIRECRACKER); // üß® (`U+1F9E8`)"] #[doc="# assert_eq!(FIRECRACKER.to_string().as_str(), \"üß®\");"]
#[doc="```"]
pub static FIRECRACKER :  Emoji = Emoji::new("firecracker", Version(11, 0), "üß®"); // firecracker
		
		#[doc="fireworks üéÜ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FIREWORKS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FIREWORKS); // üéÜ (`U+1F386`)"] #[doc="# assert_eq!(FIREWORKS.to_string().as_str(), \"üéÜ\");"]
#[doc="```"]
pub static FIREWORKS :  Emoji = Emoji::new("fireworks", Version(0, 6), "üéÜ"); // fireworks
		
		#[doc="jack-o-lantern üéÉ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JACK_O_LANTERN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JACK_O_LANTERN); // üéÉ (`U+1F383`)"] #[doc="# assert_eq!(JACK_O_LANTERN.to_string().as_str(), \"üéÉ\");"]
#[doc="```"]
pub static JACK_O_LANTERN :  Emoji = Emoji::new("jack-o-lantern", Version(0, 6), "üéÉ"); // jack-o-lantern
		
		#[doc="Japanese dolls üéé"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_DOLLS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_DOLLS); // üéé (`U+1F38E`)"] #[doc="# assert_eq!(JAPANESE_DOLLS.to_string().as_str(), \"üéé\");"]
#[doc="```"]
pub static JAPANESE_DOLLS :  Emoji = Emoji::new("Japanese dolls", Version(0, 6), "üéé"); // Japanese dolls
		
		#[doc="moon viewing ceremony üéë"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOON_VIEWING_CEREMONY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOON_VIEWING_CEREMONY); // üéë (`U+1F391`)"] #[doc="# assert_eq!(MOON_VIEWING_CEREMONY.to_string().as_str(), \"üéë\");"]
#[doc="```"]
pub static MOON_VIEWING_CEREMONY :  Emoji = Emoji::new("moon viewing ceremony", Version(0, 6), "üéë"); // moon viewing ceremony
		
		#[doc="party popper üéâ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PARTY_POPPER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PARTY_POPPER); // üéâ (`U+1F389`)"] #[doc="# assert_eq!(PARTY_POPPER.to_string().as_str(), \"üéâ\");"]
#[doc="```"]
pub static PARTY_POPPER :  Emoji = Emoji::new("party popper", Version(0, 6), "üéâ"); // party popper
		
		#[doc="pine decoration üéç"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PINE_DECORATION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PINE_DECORATION); // üéç (`U+1F38D`)"] #[doc="# assert_eq!(PINE_DECORATION.to_string().as_str(), \"üéç\");"]
#[doc="```"]
pub static PINE_DECORATION :  Emoji = Emoji::new("pine decoration", Version(0, 6), "üéç"); // pine decoration
		
		#[doc="red envelope üßß"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RED_ENVELOPE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RED_ENVELOPE); // üßß (`U+1F9E7`)"] #[doc="# assert_eq!(RED_ENVELOPE.to_string().as_str(), \"üßß\");"]
#[doc="```"]
pub static RED_ENVELOPE :  Emoji = Emoji::new("red envelope", Version(11, 0), "üßß"); // red envelope
		
		#[doc="reminder ribbon üéóÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::REMINDER_RIBBON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", REMINDER_RIBBON); // üéóÔ∏è (`U+1F397 U+FE0F`)"] #[doc="# assert_eq!(REMINDER_RIBBON.to_string().as_str(), \"üéóÔ∏è\");"]
#[doc="```"]
pub static REMINDER_RIBBON :  Emoji = Emoji::new("reminder ribbon", Version(0, 7), "üéóÔ∏è"); // reminder ribbon
		
		#[doc="ribbon üéÄ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RIBBON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RIBBON); // üéÄ (`U+1F380`)"] #[doc="# assert_eq!(RIBBON.to_string().as_str(), \"üéÄ\");"]
#[doc="```"]
pub static RIBBON :  Emoji = Emoji::new("ribbon", Version(0, 6), "üéÄ"); // ribbon
		
		#[doc="sparkler üéá"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPARKLER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPARKLER); // üéá (`U+1F387`)"] #[doc="# assert_eq!(SPARKLER.to_string().as_str(), \"üéá\");"]
#[doc="```"]
pub static SPARKLER :  Emoji = Emoji::new("sparkler", Version(0, 6), "üéá"); // sparkler
		
		#[doc="sparkles ‚ú®"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPARKLES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPARKLES); // ‚ú® (`U+2728`)"] #[doc="# assert_eq!(SPARKLES.to_string().as_str(), \"‚ú®\");"]
#[doc="```"]
pub static SPARKLES :  Emoji = Emoji::new("sparkles", Version(0, 6), "‚ú®"); // sparkles
		
		#[doc="tanabata tree üéã"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TANABATA_TREE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TANABATA_TREE); // üéã (`U+1F38B`)"] #[doc="# assert_eq!(TANABATA_TREE.to_string().as_str(), \"üéã\");"]
#[doc="```"]
pub static TANABATA_TREE :  Emoji = Emoji::new("tanabata tree", Version(0, 6), "üéã"); // tanabata tree
		
		#[doc="ticket üé´"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TICKET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TICKET); // üé´ (`U+1F3AB`)"] #[doc="# assert_eq!(TICKET.to_string().as_str(), \"üé´\");"]
#[doc="```"]
pub static TICKET :  Emoji = Emoji::new("ticket", Version(0, 6), "üé´"); // ticket
		
		#[doc="wind chime üéê"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WIND_CHIME;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WIND_CHIME); // üéê (`U+1F390`)"] #[doc="# assert_eq!(WIND_CHIME.to_string().as_str(), \"üéê\");"]
#[doc="```"]
pub static WIND_CHIME :  Emoji = Emoji::new("wind chime", Version(0, 6), "üéê"); // wind chime
		
		#[doc="wrapped gift üéÅ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WRAPPED_GIFT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WRAPPED_GIFT); // üéÅ (`U+1F381`)"] #[doc="# assert_eq!(WRAPPED_GIFT.to_string().as_str(), \"üéÅ\");"]
#[doc="```"]
pub static WRAPPED_GIFT :  Emoji = Emoji::new("wrapped gift", Version(0, 6), "üéÅ"); // wrapped gift
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // ADMISSION_TICKETS
				
				&ADMISSION_TICKETS,
				
			],
			
			&[ // BALLOON
				
				&BALLOON,
				
			],
			
			&[ // CARP_STREAMER
				
				&CARP_STREAMER,
				
			],
			
			&[ // CHRISTMAS_TREE
				
				&CHRISTMAS_TREE,
				
			],
			
			&[ // CONFETTI_BALL
				
				&CONFETTI_BALL,
				
			],
			
			&[ // FIRECRACKER
				
				&FIRECRACKER,
				
			],
			
			&[ // FIREWORKS
				
				&FIREWORKS,
				
			],
			
			&[ // JACK_O_LANTERN
				
				&JACK_O_LANTERN,
				
			],
			
			&[ // JAPANESE_DOLLS
				
				&JAPANESE_DOLLS,
				
			],
			
			&[ // MOON_VIEWING_CEREMONY
				
				&MOON_VIEWING_CEREMONY,
				
			],
			
			&[ // PARTY_POPPER
				
				&PARTY_POPPER,
				
			],
			
			&[ // PINE_DECORATION
				
				&PINE_DECORATION,
				
			],
			
			&[ // RED_ENVELOPE
				
				&RED_ENVELOPE,
				
			],
			
			&[ // REMINDER_RIBBON
				
				&REMINDER_RIBBON,
				
			],
			
			&[ // RIBBON
				
				&RIBBON,
				
			],
			
			&[ // SPARKLER
				
				&SPARKLER,
				
			],
			
			&[ // SPARKLES
				
				&SPARKLES,
				
			],
			
			&[ // TANABATA_TREE
				
				&TANABATA_TREE,
				
			],
			
			&[ // TICKET
				
				&TICKET,
				
			],
			
			&[ // WIND_CHIME
				
				&WIND_CHIME,
				
			],
			
			&[ // WRAPPED_GIFT
				
				&WRAPPED_GIFT,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&ADMISSION_TICKETS, // ADMISSION_TICKETS
				
			
				
				&BALLOON, // BALLOON
				
			
				
				&CARP_STREAMER, // CARP_STREAMER
				
			
				
				&CHRISTMAS_TREE, // CHRISTMAS_TREE
				
			
				
				&CONFETTI_BALL, // CONFETTI_BALL
				
			
				
				&FIRECRACKER, // FIRECRACKER
				
			
				
				&FIREWORKS, // FIREWORKS
				
			
				
				&JACK_O_LANTERN, // JACK_O_LANTERN
				
			
				
				&JAPANESE_DOLLS, // JAPANESE_DOLLS
				
			
				
				&MOON_VIEWING_CEREMONY, // MOON_VIEWING_CEREMONY
				
			
				
				&PARTY_POPPER, // PARTY_POPPER
				
			
				
				&PINE_DECORATION, // PINE_DECORATION
				
			
				
				&RED_ENVELOPE, // RED_ENVELOPE
				
			
				
				&REMINDER_RIBBON, // REMINDER_RIBBON
				
			
				
				&RIBBON, // RIBBON
				
			
				
				&SPARKLER, // SPARKLER
				
			
				
				&SPARKLES, // SPARKLES
				
			
				
				&TANABATA_TREE, // TANABATA_TREE
				
			
				
				&TICKET, // TICKET
				
			
				
				&WIND_CHIME, // WIND_CHIME
				
			
				
				&WRAPPED_GIFT, // WRAPPED_GIFT
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // event
	
	/// game üéØ‚ôüÔ∏è‚ô£Ô∏è
	pub mod game {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="bullseye üéØ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BULLSEYE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BULLSEYE); // üéØ (`U+1F3AF`)"] #[doc="# assert_eq!(BULLSEYE.to_string().as_str(), \"üéØ\");"]
#[doc="```"]
pub static BULLSEYE :  Emoji = Emoji::new("bullseye", Version(0, 6), "üéØ"); // bullseye
		
		#[doc="chess pawn ‚ôüÔ∏è"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHESS_PAWN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHESS_PAWN); // ‚ôüÔ∏è (`U+265F U+FE0F`)"] #[doc="# assert_eq!(CHESS_PAWN.to_string().as_str(), \"‚ôüÔ∏è\");"]
#[doc="```"]
pub static CHESS_PAWN :  Emoji = Emoji::new("chess pawn", Version(11, 0), "‚ôüÔ∏è"); // chess pawn
		
		#[doc="club suit ‚ô£Ô∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLUB_SUIT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLUB_SUIT); // ‚ô£Ô∏è (`U+2663 U+FE0F`)"] #[doc="# assert_eq!(CLUB_SUIT.to_string().as_str(), \"‚ô£Ô∏è\");"]
#[doc="```"]
pub static CLUB_SUIT :  Emoji = Emoji::new("club suit", Version(0, 6), "‚ô£Ô∏è"); // club suit
		
		#[doc="crystal ball üîÆ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CRYSTAL_BALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CRYSTAL_BALL); // üîÆ (`U+1F52E`)"] #[doc="# assert_eq!(CRYSTAL_BALL.to_string().as_str(), \"üîÆ\");"]
#[doc="```"]
pub static CRYSTAL_BALL :  Emoji = Emoji::new("crystal ball", Version(0, 6), "üîÆ"); // crystal ball
		
		#[doc="diamond suit ‚ô¶Ô∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DIAMOND_SUIT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DIAMOND_SUIT); // ‚ô¶Ô∏è (`U+2666 U+FE0F`)"] #[doc="# assert_eq!(DIAMOND_SUIT.to_string().as_str(), \"‚ô¶Ô∏è\");"]
#[doc="```"]
pub static DIAMOND_SUIT :  Emoji = Emoji::new("diamond suit", Version(0, 6), "‚ô¶Ô∏è"); // diamond suit
		
		#[doc="flower playing cards üé¥"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLOWER_PLAYING_CARDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLOWER_PLAYING_CARDS); // üé¥ (`U+1F3B4`)"] #[doc="# assert_eq!(FLOWER_PLAYING_CARDS.to_string().as_str(), \"üé¥\");"]
#[doc="```"]
pub static FLOWER_PLAYING_CARDS :  Emoji = Emoji::new("flower playing cards", Version(0, 6), "üé¥"); // flower playing cards
		
		#[doc="game die üé≤"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GAME_DIE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GAME_DIE); // üé≤ (`U+1F3B2`)"] #[doc="# assert_eq!(GAME_DIE.to_string().as_str(), \"üé≤\");"]
#[doc="```"]
pub static GAME_DIE :  Emoji = Emoji::new("game die", Version(0, 6), "üé≤"); // game die
		
		#[doc="heart suit ‚ô•Ô∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HEART_SUIT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HEART_SUIT); // ‚ô•Ô∏è (`U+2665 U+FE0F`)"] #[doc="# assert_eq!(HEART_SUIT.to_string().as_str(), \"‚ô•Ô∏è\");"]
#[doc="```"]
pub static HEART_SUIT :  Emoji = Emoji::new("heart suit", Version(0, 6), "‚ô•Ô∏è"); // heart suit
		
		#[doc="joker üÉè"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JOKER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JOKER); // üÉè (`U+1F0CF`)"] #[doc="# assert_eq!(JOKER.to_string().as_str(), \"üÉè\");"]
#[doc="```"]
pub static JOKER :  Emoji = Emoji::new("joker", Version(0, 6), "üÉè"); // joker
		
		#[doc="joystick üïπÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JOYSTICK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JOYSTICK); // üïπÔ∏è (`U+1F579 U+FE0F`)"] #[doc="# assert_eq!(JOYSTICK.to_string().as_str(), \"üïπÔ∏è\");"]
#[doc="```"]
pub static JOYSTICK :  Emoji = Emoji::new("joystick", Version(0, 7), "üïπÔ∏è"); // joystick
		
		#[doc="kite ü™Å"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KITE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KITE); // ü™Å (`U+1FA81`)"] #[doc="# assert_eq!(KITE.to_string().as_str(), \"ü™Å\");"]
#[doc="```"]
pub static KITE :  Emoji = Emoji::new("kite", Version(12, 0), "ü™Å"); // kite
		
		#[doc="magic wand ü™Ñ"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MAGIC_WAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MAGIC_WAND); // ü™Ñ (`U+1FA84`)"] #[doc="# assert_eq!(MAGIC_WAND.to_string().as_str(), \"ü™Ñ\");"]
#[doc="```"]
pub static MAGIC_WAND :  Emoji = Emoji::new("magic wand", Version(13, 0), "ü™Ñ"); // magic wand
		
		#[doc="mahjong red dragon üÄÑ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MAHJONG_RED_DRAGON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MAHJONG_RED_DRAGON); // üÄÑ (`U+1F004`)"] #[doc="# assert_eq!(MAHJONG_RED_DRAGON.to_string().as_str(), \"üÄÑ\");"]
#[doc="```"]
pub static MAHJONG_RED_DRAGON :  Emoji = Emoji::new("mahjong red dragon", Version(0, 6), "üÄÑ"); // mahjong red dragon
		
		#[doc="nazar amulet üßø"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NAZAR_AMULET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NAZAR_AMULET); // üßø (`U+1F9FF`)"] #[doc="# assert_eq!(NAZAR_AMULET.to_string().as_str(), \"üßø\");"]
#[doc="```"]
pub static NAZAR_AMULET :  Emoji = Emoji::new("nazar amulet", Version(11, 0), "üßø"); // nazar amulet
		
		#[doc="nesting dolls ü™Ü"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NESTING_DOLLS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NESTING_DOLLS); // ü™Ü (`U+1FA86`)"] #[doc="# assert_eq!(NESTING_DOLLS.to_string().as_str(), \"ü™Ü\");"]
#[doc="```"]
pub static NESTING_DOLLS :  Emoji = Emoji::new("nesting dolls", Version(13, 0), "ü™Ü"); // nesting dolls
		
		#[doc="pi√±ata ü™Ö"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PINATA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PINATA); // ü™Ö (`U+1FA85`)"] #[doc="# assert_eq!(PINATA.to_string().as_str(), \"ü™Ö\");"]
#[doc="```"]
pub static PINATA :  Emoji = Emoji::new("pi√±ata", Version(13, 0), "ü™Ö"); // pi√±ata
		
		#[doc="pool 8 ball üé±"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POOL_8_BALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POOL_8_BALL); // üé± (`U+1F3B1`)"] #[doc="# assert_eq!(POOL_8_BALL.to_string().as_str(), \"üé±\");"]
#[doc="```"]
pub static POOL_8_BALL :  Emoji = Emoji::new("pool 8 ball", Version(0, 6), "üé±"); // pool 8 ball
		
		#[doc="puzzle piece üß©"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PUZZLE_PIECE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PUZZLE_PIECE); // üß© (`U+1F9E9`)"] #[doc="# assert_eq!(PUZZLE_PIECE.to_string().as_str(), \"üß©\");"]
#[doc="```"]
pub static PUZZLE_PIECE :  Emoji = Emoji::new("puzzle piece", Version(11, 0), "üß©"); // puzzle piece
		
		#[doc="slot machine üé∞"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SLOT_MACHINE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SLOT_MACHINE); // üé∞ (`U+1F3B0`)"] #[doc="# assert_eq!(SLOT_MACHINE.to_string().as_str(), \"üé∞\");"]
#[doc="```"]
pub static SLOT_MACHINE :  Emoji = Emoji::new("slot machine", Version(0, 6), "üé∞"); // slot machine
		
		#[doc="spade suit ‚ô†Ô∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPADE_SUIT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPADE_SUIT); // ‚ô†Ô∏è (`U+2660 U+FE0F`)"] #[doc="# assert_eq!(SPADE_SUIT.to_string().as_str(), \"‚ô†Ô∏è\");"]
#[doc="```"]
pub static SPADE_SUIT :  Emoji = Emoji::new("spade suit", Version(0, 6), "‚ô†Ô∏è"); // spade suit
		
		#[doc="teddy bear üß∏"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TEDDY_BEAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TEDDY_BEAR); // üß∏ (`U+1F9F8`)"] #[doc="# assert_eq!(TEDDY_BEAR.to_string().as_str(), \"üß∏\");"]
#[doc="```"]
pub static TEDDY_BEAR :  Emoji = Emoji::new("teddy bear", Version(11, 0), "üß∏"); // teddy bear
		
		#[doc="video game üéÆ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::VIDEO_GAME;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", VIDEO_GAME); // üéÆ (`U+1F3AE`)"] #[doc="# assert_eq!(VIDEO_GAME.to_string().as_str(), \"üéÆ\");"]
#[doc="```"]
pub static VIDEO_GAME :  Emoji = Emoji::new("video game", Version(0, 6), "üéÆ"); // video game
		
		#[doc="yo-yo ü™Ä"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::YO_YO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", YO_YO); // ü™Ä (`U+1FA80`)"] #[doc="# assert_eq!(YO_YO.to_string().as_str(), \"ü™Ä\");"]
#[doc="```"]
pub static YO_YO :  Emoji = Emoji::new("yo-yo", Version(12, 0), "ü™Ä"); // yo-yo
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BULLSEYE
				
				&BULLSEYE,
				
			],
			
			&[ // CHESS_PAWN
				
				&CHESS_PAWN,
				
			],
			
			&[ // CLUB_SUIT
				
				&CLUB_SUIT,
				
			],
			
			&[ // CRYSTAL_BALL
				
				&CRYSTAL_BALL,
				
			],
			
			&[ // DIAMOND_SUIT
				
				&DIAMOND_SUIT,
				
			],
			
			&[ // FLOWER_PLAYING_CARDS
				
				&FLOWER_PLAYING_CARDS,
				
			],
			
			&[ // GAME_DIE
				
				&GAME_DIE,
				
			],
			
			&[ // HEART_SUIT
				
				&HEART_SUIT,
				
			],
			
			&[ // JOKER
				
				&JOKER,
				
			],
			
			&[ // JOYSTICK
				
				&JOYSTICK,
				
			],
			
			&[ // KITE
				
				&KITE,
				
			],
			
			&[ // MAGIC_WAND
				
				&MAGIC_WAND,
				
			],
			
			&[ // MAHJONG_RED_DRAGON
				
				&MAHJONG_RED_DRAGON,
				
			],
			
			&[ // NAZAR_AMULET
				
				&NAZAR_AMULET,
				
			],
			
			&[ // NESTING_DOLLS
				
				&NESTING_DOLLS,
				
			],
			
			&[ // PINATA
				
				&PINATA,
				
			],
			
			&[ // POOL_8_BALL
				
				&POOL_8_BALL,
				
			],
			
			&[ // PUZZLE_PIECE
				
				&PUZZLE_PIECE,
				
			],
			
			&[ // SLOT_MACHINE
				
				&SLOT_MACHINE,
				
			],
			
			&[ // SPADE_SUIT
				
				&SPADE_SUIT,
				
			],
			
			&[ // TEDDY_BEAR
				
				&TEDDY_BEAR,
				
			],
			
			&[ // VIDEO_GAME
				
				&VIDEO_GAME,
				
			],
			
			&[ // YO_YO
				
				&YO_YO,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BULLSEYE, // BULLSEYE
				
			
				
				&CHESS_PAWN, // CHESS_PAWN
				
			
				
				&CLUB_SUIT, // CLUB_SUIT
				
			
				
				&CRYSTAL_BALL, // CRYSTAL_BALL
				
			
				
				&DIAMOND_SUIT, // DIAMOND_SUIT
				
			
				
				&FLOWER_PLAYING_CARDS, // FLOWER_PLAYING_CARDS
				
			
				
				&GAME_DIE, // GAME_DIE
				
			
				
				&HEART_SUIT, // HEART_SUIT
				
			
				
				&JOKER, // JOKER
				
			
				
				&JOYSTICK, // JOYSTICK
				
			
				
				&KITE, // KITE
				
			
				
				&MAGIC_WAND, // MAGIC_WAND
				
			
				
				&MAHJONG_RED_DRAGON, // MAHJONG_RED_DRAGON
				
			
				
				&NAZAR_AMULET, // NAZAR_AMULET
				
			
				
				&NESTING_DOLLS, // NESTING_DOLLS
				
			
				
				&PINATA, // PINATA
				
			
				
				&POOL_8_BALL, // POOL_8_BALL
				
			
				
				&PUZZLE_PIECE, // PUZZLE_PIECE
				
			
				
				&SLOT_MACHINE, // SLOT_MACHINE
				
			
				
				&SPADE_SUIT, // SPADE_SUIT
				
			
				
				&TEDDY_BEAR, // TEDDY_BEAR
				
			
				
				&VIDEO_GAME, // VIDEO_GAME
				
			
				
				&YO_YO, // YO_YO
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // game
	
	/// sport üèàüè∏‚öæ
	pub mod sport {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="american football üèà"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::AMERICAN_FOOTBALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", AMERICAN_FOOTBALL); // üèà (`U+1F3C8`)"] #[doc="# assert_eq!(AMERICAN_FOOTBALL.to_string().as_str(), \"üèà\");"]
#[doc="```"]
pub static AMERICAN_FOOTBALL :  Emoji = Emoji::new("american football", Version(0, 6), "üèà"); // american football
		
		#[doc="badminton üè∏"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BADMINTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BADMINTON); // üè∏ (`U+1F3F8`)"] #[doc="# assert_eq!(BADMINTON.to_string().as_str(), \"üè∏\");"]
#[doc="```"]
pub static BADMINTON :  Emoji = Emoji::new("badminton", Version(1, 0), "üè∏"); // badminton
		
		#[doc="baseball ‚öæ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BASEBALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BASEBALL); // ‚öæ (`U+26BE`)"] #[doc="# assert_eq!(BASEBALL.to_string().as_str(), \"‚öæ\");"]
#[doc="```"]
pub static BASEBALL :  Emoji = Emoji::new("baseball", Version(0, 6), "‚öæ"); // baseball
		
		#[doc="basketball üèÄ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BASKETBALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BASKETBALL); // üèÄ (`U+1F3C0`)"] #[doc="# assert_eq!(BASKETBALL.to_string().as_str(), \"üèÄ\");"]
#[doc="```"]
pub static BASKETBALL :  Emoji = Emoji::new("basketball", Version(0, 6), "üèÄ"); // basketball
		
		#[doc="bowling üé≥"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BOWLING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BOWLING); // üé≥ (`U+1F3B3`)"] #[doc="# assert_eq!(BOWLING.to_string().as_str(), \"üé≥\");"]
#[doc="```"]
pub static BOWLING :  Emoji = Emoji::new("bowling", Version(0, 6), "üé≥"); // bowling
		
		#[doc="boxing glove ü•ä"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BOXING_GLOVE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BOXING_GLOVE); // ü•ä (`U+1F94A`)"] #[doc="# assert_eq!(BOXING_GLOVE.to_string().as_str(), \"ü•ä\");"]
#[doc="```"]
pub static BOXING_GLOVE :  Emoji = Emoji::new("boxing glove", Version(3, 0), "ü•ä"); // boxing glove
		
		#[doc="cricket game üèè"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CRICKET_GAME;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CRICKET_GAME); // üèè (`U+1F3CF`)"] #[doc="# assert_eq!(CRICKET_GAME.to_string().as_str(), \"üèè\");"]
#[doc="```"]
pub static CRICKET_GAME :  Emoji = Emoji::new("cricket game", Version(1, 0), "üèè"); // cricket game
		
		#[doc="curling stone ü•å"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CURLING_STONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CURLING_STONE); // ü•å (`U+1F94C`)"] #[doc="# assert_eq!(CURLING_STONE.to_string().as_str(), \"ü•å\");"]
#[doc="```"]
pub static CURLING_STONE :  Emoji = Emoji::new("curling stone", Version(5, 0), "ü•å"); // curling stone
		
		#[doc="diving mask ü§ø"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DIVING_MASK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DIVING_MASK); // ü§ø (`U+1F93F`)"] #[doc="# assert_eq!(DIVING_MASK.to_string().as_str(), \"ü§ø\");"]
#[doc="```"]
pub static DIVING_MASK :  Emoji = Emoji::new("diving mask", Version(12, 0), "ü§ø"); // diving mask
		
		#[doc="field hockey üèë"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FIELD_HOCKEY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FIELD_HOCKEY); // üèë (`U+1F3D1`)"] #[doc="# assert_eq!(FIELD_HOCKEY.to_string().as_str(), \"üèë\");"]
#[doc="```"]
pub static FIELD_HOCKEY :  Emoji = Emoji::new("field hockey", Version(1, 0), "üèë"); // field hockey
		
		#[doc="fishing pole üé£"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FISHING_POLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FISHING_POLE); // üé£ (`U+1F3A3`)"] #[doc="# assert_eq!(FISHING_POLE.to_string().as_str(), \"üé£\");"]
#[doc="```"]
pub static FISHING_POLE :  Emoji = Emoji::new("fishing pole", Version(0, 6), "üé£"); // fishing pole
		
		#[doc="flag in hole ‚õ≥"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_IN_HOLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_IN_HOLE); // ‚õ≥ (`U+26F3`)"] #[doc="# assert_eq!(FLAG_IN_HOLE.to_string().as_str(), \"‚õ≥\");"]
#[doc="```"]
pub static FLAG_IN_HOLE :  Emoji = Emoji::new("flag in hole", Version(0, 6), "‚õ≥"); // flag in hole
		
		#[doc="flying disc ü•è"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLYING_DISC;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLYING_DISC); // ü•è (`U+1F94F`)"] #[doc="# assert_eq!(FLYING_DISC.to_string().as_str(), \"ü•è\");"]
#[doc="```"]
pub static FLYING_DISC :  Emoji = Emoji::new("flying disc", Version(11, 0), "ü•è"); // flying disc
		
		#[doc="goal net ü•Ö"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GOAL_NET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GOAL_NET); // ü•Ö (`U+1F945`)"] #[doc="# assert_eq!(GOAL_NET.to_string().as_str(), \"ü•Ö\");"]
#[doc="```"]
pub static GOAL_NET :  Emoji = Emoji::new("goal net", Version(3, 0), "ü•Ö"); // goal net
		
		#[doc="ice hockey üèí"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ICE_HOCKEY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ICE_HOCKEY); // üèí (`U+1F3D2`)"] #[doc="# assert_eq!(ICE_HOCKEY.to_string().as_str(), \"üèí\");"]
#[doc="```"]
pub static ICE_HOCKEY :  Emoji = Emoji::new("ice hockey", Version(1, 0), "üèí"); // ice hockey
		
		#[doc="ice skate ‚õ∏Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ICE_SKATE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ICE_SKATE); // ‚õ∏Ô∏è (`U+26F8 U+FE0F`)"] #[doc="# assert_eq!(ICE_SKATE.to_string().as_str(), \"‚õ∏Ô∏è\");"]
#[doc="```"]
pub static ICE_SKATE :  Emoji = Emoji::new("ice skate", Version(0, 7), "‚õ∏Ô∏è"); // ice skate
		
		#[doc="lacrosse ü•ç"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LACROSSE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LACROSSE); // ü•ç (`U+1F94D`)"] #[doc="# assert_eq!(LACROSSE.to_string().as_str(), \"ü•ç\");"]
#[doc="```"]
pub static LACROSSE :  Emoji = Emoji::new("lacrosse", Version(11, 0), "ü•ç"); // lacrosse
		
		#[doc="martial arts uniform ü•ã"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MARTIAL_ARTS_UNIFORM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MARTIAL_ARTS_UNIFORM); // ü•ã (`U+1F94B`)"] #[doc="# assert_eq!(MARTIAL_ARTS_UNIFORM.to_string().as_str(), \"ü•ã\");"]
#[doc="```"]
pub static MARTIAL_ARTS_UNIFORM :  Emoji = Emoji::new("martial arts uniform", Version(3, 0), "ü•ã"); // martial arts uniform
		
		#[doc="ping pong üèì"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PING_PONG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PING_PONG); // üèì (`U+1F3D3`)"] #[doc="# assert_eq!(PING_PONG.to_string().as_str(), \"üèì\");"]
#[doc="```"]
pub static PING_PONG :  Emoji = Emoji::new("ping pong", Version(1, 0), "üèì"); // ping pong
		
		#[doc="rugby football üèâ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RUGBY_FOOTBALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RUGBY_FOOTBALL); // üèâ (`U+1F3C9`)"] #[doc="# assert_eq!(RUGBY_FOOTBALL.to_string().as_str(), \"üèâ\");"]
#[doc="```"]
pub static RUGBY_FOOTBALL :  Emoji = Emoji::new("rugby football", Version(1, 0), "üèâ"); // rugby football
		
		#[doc="running shirt üéΩ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RUNNING_SHIRT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RUNNING_SHIRT); // üéΩ (`U+1F3BD`)"] #[doc="# assert_eq!(RUNNING_SHIRT.to_string().as_str(), \"üéΩ\");"]
#[doc="```"]
pub static RUNNING_SHIRT :  Emoji = Emoji::new("running shirt", Version(0, 6), "üéΩ"); // running shirt
		
		#[doc="skis üéø"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SKIS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SKIS); // üéø (`U+1F3BF`)"] #[doc="# assert_eq!(SKIS.to_string().as_str(), \"üéø\");"]
#[doc="```"]
pub static SKIS :  Emoji = Emoji::new("skis", Version(0, 6), "üéø"); // skis
		
		#[doc="sled üõ∑"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SLED;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SLED); // üõ∑ (`U+1F6F7`)"] #[doc="# assert_eq!(SLED.to_string().as_str(), \"üõ∑\");"]
#[doc="```"]
pub static SLED :  Emoji = Emoji::new("sled", Version(5, 0), "üõ∑"); // sled
		
		#[doc="soccer ball ‚öΩ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SOCCER_BALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SOCCER_BALL); // ‚öΩ (`U+26BD`)"] #[doc="# assert_eq!(SOCCER_BALL.to_string().as_str(), \"‚öΩ\");"]
#[doc="```"]
pub static SOCCER_BALL :  Emoji = Emoji::new("soccer ball", Version(0, 6), "‚öΩ"); // soccer ball
		
		#[doc="softball ü•é"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SOFTBALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SOFTBALL); // ü•é (`U+1F94E`)"] #[doc="# assert_eq!(SOFTBALL.to_string().as_str(), \"ü•é\");"]
#[doc="```"]
pub static SOFTBALL :  Emoji = Emoji::new("softball", Version(11, 0), "ü•é"); // softball
		
		#[doc="tennis üéæ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TENNIS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TENNIS); // üéæ (`U+1F3BE`)"] #[doc="# assert_eq!(TENNIS.to_string().as_str(), \"üéæ\");"]
#[doc="```"]
pub static TENNIS :  Emoji = Emoji::new("tennis", Version(0, 6), "üéæ"); // tennis
		
		#[doc="volleyball üèê"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::VOLLEYBALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", VOLLEYBALL); // üèê (`U+1F3D0`)"] #[doc="# assert_eq!(VOLLEYBALL.to_string().as_str(), \"üèê\");"]
#[doc="```"]
pub static VOLLEYBALL :  Emoji = Emoji::new("volleyball", Version(1, 0), "üèê"); // volleyball
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // AMERICAN_FOOTBALL
				
				&AMERICAN_FOOTBALL,
				
			],
			
			&[ // BADMINTON
				
				&BADMINTON,
				
			],
			
			&[ // BASEBALL
				
				&BASEBALL,
				
			],
			
			&[ // BASKETBALL
				
				&BASKETBALL,
				
			],
			
			&[ // BOWLING
				
				&BOWLING,
				
			],
			
			&[ // BOXING_GLOVE
				
				&BOXING_GLOVE,
				
			],
			
			&[ // CRICKET_GAME
				
				&CRICKET_GAME,
				
			],
			
			&[ // CURLING_STONE
				
				&CURLING_STONE,
				
			],
			
			&[ // DIVING_MASK
				
				&DIVING_MASK,
				
			],
			
			&[ // FIELD_HOCKEY
				
				&FIELD_HOCKEY,
				
			],
			
			&[ // FISHING_POLE
				
				&FISHING_POLE,
				
			],
			
			&[ // FLAG_IN_HOLE
				
				&FLAG_IN_HOLE,
				
			],
			
			&[ // FLYING_DISC
				
				&FLYING_DISC,
				
			],
			
			&[ // GOAL_NET
				
				&GOAL_NET,
				
			],
			
			&[ // ICE_HOCKEY
				
				&ICE_HOCKEY,
				
			],
			
			&[ // ICE_SKATE
				
				&ICE_SKATE,
				
			],
			
			&[ // LACROSSE
				
				&LACROSSE,
				
			],
			
			&[ // MARTIAL_ARTS_UNIFORM
				
				&MARTIAL_ARTS_UNIFORM,
				
			],
			
			&[ // PING_PONG
				
				&PING_PONG,
				
			],
			
			&[ // RUGBY_FOOTBALL
				
				&RUGBY_FOOTBALL,
				
			],
			
			&[ // RUNNING_SHIRT
				
				&RUNNING_SHIRT,
				
			],
			
			&[ // SKIS
				
				&SKIS,
				
			],
			
			&[ // SLED
				
				&SLED,
				
			],
			
			&[ // SOCCER_BALL
				
				&SOCCER_BALL,
				
			],
			
			&[ // SOFTBALL
				
				&SOFTBALL,
				
			],
			
			&[ // TENNIS
				
				&TENNIS,
				
			],
			
			&[ // VOLLEYBALL
				
				&VOLLEYBALL,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&AMERICAN_FOOTBALL, // AMERICAN_FOOTBALL
				
			
				
				&BADMINTON, // BADMINTON
				
			
				
				&BASEBALL, // BASEBALL
				
			
				
				&BASKETBALL, // BASKETBALL
				
			
				
				&BOWLING, // BOWLING
				
			
				
				&BOXING_GLOVE, // BOXING_GLOVE
				
			
				
				&CRICKET_GAME, // CRICKET_GAME
				
			
				
				&CURLING_STONE, // CURLING_STONE
				
			
				
				&DIVING_MASK, // DIVING_MASK
				
			
				
				&FIELD_HOCKEY, // FIELD_HOCKEY
				
			
				
				&FISHING_POLE, // FISHING_POLE
				
			
				
				&FLAG_IN_HOLE, // FLAG_IN_HOLE
				
			
				
				&FLYING_DISC, // FLYING_DISC
				
			
				
				&GOAL_NET, // GOAL_NET
				
			
				
				&ICE_HOCKEY, // ICE_HOCKEY
				
			
				
				&ICE_SKATE, // ICE_SKATE
				
			
				
				&LACROSSE, // LACROSSE
				
			
				
				&MARTIAL_ARTS_UNIFORM, // MARTIAL_ARTS_UNIFORM
				
			
				
				&PING_PONG, // PING_PONG
				
			
				
				&RUGBY_FOOTBALL, // RUGBY_FOOTBALL
				
			
				
				&RUNNING_SHIRT, // RUNNING_SHIRT
				
			
				
				&SKIS, // SKIS
				
			
				
				&SLED, // SLED
				
			
				
				&SOCCER_BALL, // SOCCER_BALL
				
			
				
				&SOFTBALL, // SOFTBALL
				
			
				
				&TENNIS, // TENNIS
				
			
				
				&VOLLEYBALL, // VOLLEYBALL
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // sport
	


	// Emoji iterators

	/// Returns an iterator over all emoji variants of these subgroups grouped by base emojis
	pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
		core::iter::empty()
		
			.chain(arts_and_crafts::all_variants())
		
			.chain(award_medal::all_variants())
		
			.chain(event::all_variants())
		
			.chain(game::all_variants())
		
			.chain(sport::all_variants())
		
	}

	/// Returns an iterator over all base emojis of these subgroups (i.e. one for each static)
	pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
		core::iter::empty()
		
			.chain(arts_and_crafts::base_emojis())
		
			.chain(award_medal::base_emojis())
		
			.chain(event::base_emojis())
		
			.chain(game::base_emojis())
		
			.chain(sport::base_emojis())
		
	}

} // activities

/// animals_and_nature üê∏üê§üêú
pub mod animals_and_nature {
	use crate::emojis::Emoji;

	
	/// animal_amphibian üê∏
	pub mod animal_amphibian {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="frog üê∏"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FROG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FROG); // üê∏ (`U+1F438`)"] #[doc="# assert_eq!(FROG.to_string().as_str(), \"üê∏\");"]
#[doc="```"]
pub static FROG :  Emoji = Emoji::new("frog", Version(0, 6), "üê∏"); // frog
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // FROG
				
				&FROG,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&FROG, // FROG
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // animal_amphibian
	
	/// animal_bird üê§üê¶üêî
	pub mod animal_bird {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="baby chick üê§"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BABY_CHICK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BABY_CHICK); // üê§ (`U+1F424`)"] #[doc="# assert_eq!(BABY_CHICK.to_string().as_str(), \"üê§\");"]
#[doc="```"]
pub static BABY_CHICK :  Emoji = Emoji::new("baby chick", Version(0, 6), "üê§"); // baby chick
		
		#[doc="bird üê¶"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BIRD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BIRD); // üê¶ (`U+1F426`)"] #[doc="# assert_eq!(BIRD.to_string().as_str(), \"üê¶\");"]
#[doc="```"]
pub static BIRD :  Emoji = Emoji::new("bird", Version(0, 6), "üê¶"); // bird
		
		#[doc="chicken üêî"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHICKEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHICKEN); // üêî (`U+1F414`)"] #[doc="# assert_eq!(CHICKEN.to_string().as_str(), \"üêî\");"]
#[doc="```"]
pub static CHICKEN :  Emoji = Emoji::new("chicken", Version(0, 6), "üêî"); // chicken
		
		#[doc="dodo ü¶§"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DODO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DODO); // ü¶§ (`U+1F9A4`)"] #[doc="# assert_eq!(DODO.to_string().as_str(), \"ü¶§\");"]
#[doc="```"]
pub static DODO :  Emoji = Emoji::new("dodo", Version(13, 0), "ü¶§"); // dodo
		
		#[doc="dove üïäÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOVE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOVE); // üïäÔ∏è (`U+1F54A U+FE0F`)"] #[doc="# assert_eq!(DOVE.to_string().as_str(), \"üïäÔ∏è\");"]
#[doc="```"]
pub static DOVE :  Emoji = Emoji::new("dove", Version(0, 7), "üïäÔ∏è"); // dove
		
		#[doc="duck ü¶Ü"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DUCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DUCK); // ü¶Ü (`U+1F986`)"] #[doc="# assert_eq!(DUCK.to_string().as_str(), \"ü¶Ü\");"]
#[doc="```"]
pub static DUCK :  Emoji = Emoji::new("duck", Version(3, 0), "ü¶Ü"); // duck
		
		#[doc="eagle ü¶Ö"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EAGLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EAGLE); // ü¶Ö (`U+1F985`)"] #[doc="# assert_eq!(EAGLE.to_string().as_str(), \"ü¶Ö\");"]
#[doc="```"]
pub static EAGLE :  Emoji = Emoji::new("eagle", Version(3, 0), "ü¶Ö"); // eagle
		
		#[doc="feather ü™∂"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FEATHER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FEATHER); // ü™∂ (`U+1FAB6`)"] #[doc="# assert_eq!(FEATHER.to_string().as_str(), \"ü™∂\");"]
#[doc="```"]
pub static FEATHER :  Emoji = Emoji::new("feather", Version(13, 0), "ü™∂"); // feather
		
		#[doc="flamingo ü¶©"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAMINGO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAMINGO); // ü¶© (`U+1F9A9`)"] #[doc="# assert_eq!(FLAMINGO.to_string().as_str(), \"ü¶©\");"]
#[doc="```"]
pub static FLAMINGO :  Emoji = Emoji::new("flamingo", Version(12, 0), "ü¶©"); // flamingo
		
		#[doc="front-facing baby chick üê•"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FRONT_FACING_BABY_CHICK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FRONT_FACING_BABY_CHICK); // üê• (`U+1F425`)"] #[doc="# assert_eq!(FRONT_FACING_BABY_CHICK.to_string().as_str(), \"üê•\");"]
#[doc="```"]
pub static FRONT_FACING_BABY_CHICK :  Emoji = Emoji::new("front-facing baby chick", Version(0, 6), "üê•"); // front-facing baby chick
		
		#[doc="hatching chick üê£"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HATCHING_CHICK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HATCHING_CHICK); // üê£ (`U+1F423`)"] #[doc="# assert_eq!(HATCHING_CHICK.to_string().as_str(), \"üê£\");"]
#[doc="```"]
pub static HATCHING_CHICK :  Emoji = Emoji::new("hatching chick", Version(0, 6), "üê£"); // hatching chick
		
		#[doc="owl ü¶â"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OWL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OWL); // ü¶â (`U+1F989`)"] #[doc="# assert_eq!(OWL.to_string().as_str(), \"ü¶â\");"]
#[doc="```"]
pub static OWL :  Emoji = Emoji::new("owl", Version(3, 0), "ü¶â"); // owl
		
		#[doc="parrot ü¶ú"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PARROT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PARROT); // ü¶ú (`U+1F99C`)"] #[doc="# assert_eq!(PARROT.to_string().as_str(), \"ü¶ú\");"]
#[doc="```"]
pub static PARROT :  Emoji = Emoji::new("parrot", Version(11, 0), "ü¶ú"); // parrot
		
		#[doc="peacock ü¶ö"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PEACOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PEACOCK); // ü¶ö (`U+1F99A`)"] #[doc="# assert_eq!(PEACOCK.to_string().as_str(), \"ü¶ö\");"]
#[doc="```"]
pub static PEACOCK :  Emoji = Emoji::new("peacock", Version(11, 0), "ü¶ö"); // peacock
		
		#[doc="penguin üêß"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PENGUIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PENGUIN); // üêß (`U+1F427`)"] #[doc="# assert_eq!(PENGUIN.to_string().as_str(), \"üêß\");"]
#[doc="```"]
pub static PENGUIN :  Emoji = Emoji::new("penguin", Version(0, 6), "üêß"); // penguin
		
		#[doc="rooster üêì"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ROOSTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ROOSTER); // üêì (`U+1F413`)"] #[doc="# assert_eq!(ROOSTER.to_string().as_str(), \"üêì\");"]
#[doc="```"]
pub static ROOSTER :  Emoji = Emoji::new("rooster", Version(1, 0), "üêì"); // rooster
		
		#[doc="swan ü¶¢"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SWAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SWAN); // ü¶¢ (`U+1F9A2`)"] #[doc="# assert_eq!(SWAN.to_string().as_str(), \"ü¶¢\");"]
#[doc="```"]
pub static SWAN :  Emoji = Emoji::new("swan", Version(11, 0), "ü¶¢"); // swan
		
		#[doc="turkey ü¶É"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TURKEY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TURKEY); // ü¶É (`U+1F983`)"] #[doc="# assert_eq!(TURKEY.to_string().as_str(), \"ü¶É\");"]
#[doc="```"]
pub static TURKEY :  Emoji = Emoji::new("turkey", Version(1, 0), "ü¶É"); // turkey
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BABY_CHICK
				
				&BABY_CHICK,
				
			],
			
			&[ // BIRD
				
				&BIRD,
				
			],
			
			&[ // CHICKEN
				
				&CHICKEN,
				
			],
			
			&[ // DODO
				
				&DODO,
				
			],
			
			&[ // DOVE
				
				&DOVE,
				
			],
			
			&[ // DUCK
				
				&DUCK,
				
			],
			
			&[ // EAGLE
				
				&EAGLE,
				
			],
			
			&[ // FEATHER
				
				&FEATHER,
				
			],
			
			&[ // FLAMINGO
				
				&FLAMINGO,
				
			],
			
			&[ // FRONT_FACING_BABY_CHICK
				
				&FRONT_FACING_BABY_CHICK,
				
			],
			
			&[ // HATCHING_CHICK
				
				&HATCHING_CHICK,
				
			],
			
			&[ // OWL
				
				&OWL,
				
			],
			
			&[ // PARROT
				
				&PARROT,
				
			],
			
			&[ // PEACOCK
				
				&PEACOCK,
				
			],
			
			&[ // PENGUIN
				
				&PENGUIN,
				
			],
			
			&[ // ROOSTER
				
				&ROOSTER,
				
			],
			
			&[ // SWAN
				
				&SWAN,
				
			],
			
			&[ // TURKEY
				
				&TURKEY,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BABY_CHICK, // BABY_CHICK
				
			
				
				&BIRD, // BIRD
				
			
				
				&CHICKEN, // CHICKEN
				
			
				
				&DODO, // DODO
				
			
				
				&DOVE, // DOVE
				
			
				
				&DUCK, // DUCK
				
			
				
				&EAGLE, // EAGLE
				
			
				
				&FEATHER, // FEATHER
				
			
				
				&FLAMINGO, // FLAMINGO
				
			
				
				&FRONT_FACING_BABY_CHICK, // FRONT_FACING_BABY_CHICK
				
			
				
				&HATCHING_CHICK, // HATCHING_CHICK
				
			
				
				&OWL, // OWL
				
			
				
				&PARROT, // PARROT
				
			
				
				&PEACOCK, // PEACOCK
				
			
				
				&PENGUIN, // PENGUIN
				
			
				
				&ROOSTER, // ROOSTER
				
			
				
				&SWAN, // SWAN
				
			
				
				&TURKEY, // TURKEY
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // animal_bird
	
	/// animal_bug üêúü™≤üêõ
	pub mod animal_bug {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="ant üêú"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ANT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ANT); // üêú (`U+1F41C`)"] #[doc="# assert_eq!(ANT.to_string().as_str(), \"üêú\");"]
#[doc="```"]
pub static ANT :  Emoji = Emoji::new("ant", Version(0, 6), "üêú"); // ant
		
		#[doc="beetle ü™≤"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BEETLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BEETLE); // ü™≤ (`U+1FAB2`)"] #[doc="# assert_eq!(BEETLE.to_string().as_str(), \"ü™≤\");"]
#[doc="```"]
pub static BEETLE :  Emoji = Emoji::new("beetle", Version(13, 0), "ü™≤"); // beetle
		
		#[doc="bug üêõ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BUG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BUG); // üêõ (`U+1F41B`)"] #[doc="# assert_eq!(BUG.to_string().as_str(), \"üêõ\");"]
#[doc="```"]
pub static BUG :  Emoji = Emoji::new("bug", Version(0, 6), "üêõ"); // bug
		
		#[doc="butterfly ü¶ã"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BUTTERFLY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BUTTERFLY); // ü¶ã (`U+1F98B`)"] #[doc="# assert_eq!(BUTTERFLY.to_string().as_str(), \"ü¶ã\");"]
#[doc="```"]
pub static BUTTERFLY :  Emoji = Emoji::new("butterfly", Version(3, 0), "ü¶ã"); // butterfly
		
		#[doc="cockroach ü™≥"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COCKROACH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COCKROACH); // ü™≥ (`U+1FAB3`)"] #[doc="# assert_eq!(COCKROACH.to_string().as_str(), \"ü™≥\");"]
#[doc="```"]
pub static COCKROACH :  Emoji = Emoji::new("cockroach", Version(13, 0), "ü™≥"); // cockroach
		
		#[doc="cricket ü¶ó"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CRICKET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CRICKET); // ü¶ó (`U+1F997`)"] #[doc="# assert_eq!(CRICKET.to_string().as_str(), \"ü¶ó\");"]
#[doc="```"]
pub static CRICKET :  Emoji = Emoji::new("cricket", Version(5, 0), "ü¶ó"); // cricket
		
		#[doc="fly ü™∞"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLY); // ü™∞ (`U+1FAB0`)"] #[doc="# assert_eq!(FLY.to_string().as_str(), \"ü™∞\");"]
#[doc="```"]
pub static FLY :  Emoji = Emoji::new("fly", Version(13, 0), "ü™∞"); // fly
		
		#[doc="honeybee üêù"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HONEYBEE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HONEYBEE); // üêù (`U+1F41D`)"] #[doc="# assert_eq!(HONEYBEE.to_string().as_str(), \"üêù\");"]
#[doc="```"]
pub static HONEYBEE :  Emoji = Emoji::new("honeybee", Version(0, 6), "üêù"); // honeybee
		
		#[doc="lady beetle üêû"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LADY_BEETLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LADY_BEETLE); // üêû (`U+1F41E`)"] #[doc="# assert_eq!(LADY_BEETLE.to_string().as_str(), \"üêû\");"]
#[doc="```"]
pub static LADY_BEETLE :  Emoji = Emoji::new("lady beetle", Version(0, 6), "üêû"); // lady beetle
		
		#[doc="microbe ü¶†"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MICROBE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MICROBE); // ü¶† (`U+1F9A0`)"] #[doc="# assert_eq!(MICROBE.to_string().as_str(), \"ü¶†\");"]
#[doc="```"]
pub static MICROBE :  Emoji = Emoji::new("microbe", Version(11, 0), "ü¶†"); // microbe
		
		#[doc="mosquito ü¶ü"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOSQUITO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOSQUITO); // ü¶ü (`U+1F99F`)"] #[doc="# assert_eq!(MOSQUITO.to_string().as_str(), \"ü¶ü\");"]
#[doc="```"]
pub static MOSQUITO :  Emoji = Emoji::new("mosquito", Version(11, 0), "ü¶ü"); // mosquito
		
		#[doc="scorpion ü¶Ç"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SCORPION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SCORPION); // ü¶Ç (`U+1F982`)"] #[doc="# assert_eq!(SCORPION.to_string().as_str(), \"ü¶Ç\");"]
#[doc="```"]
pub static SCORPION :  Emoji = Emoji::new("scorpion", Version(1, 0), "ü¶Ç"); // scorpion
		
		#[doc="snail üêå"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SNAIL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SNAIL); // üêå (`U+1F40C`)"] #[doc="# assert_eq!(SNAIL.to_string().as_str(), \"üêå\");"]
#[doc="```"]
pub static SNAIL :  Emoji = Emoji::new("snail", Version(0, 6), "üêå"); // snail
		
		#[doc="spider üï∑Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPIDER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPIDER); // üï∑Ô∏è (`U+1F577 U+FE0F`)"] #[doc="# assert_eq!(SPIDER.to_string().as_str(), \"üï∑Ô∏è\");"]
#[doc="```"]
pub static SPIDER :  Emoji = Emoji::new("spider", Version(0, 7), "üï∑Ô∏è"); // spider
		
		#[doc="spider web üï∏Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPIDER_WEB;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPIDER_WEB); // üï∏Ô∏è (`U+1F578 U+FE0F`)"] #[doc="# assert_eq!(SPIDER_WEB.to_string().as_str(), \"üï∏Ô∏è\");"]
#[doc="```"]
pub static SPIDER_WEB :  Emoji = Emoji::new("spider web", Version(0, 7), "üï∏Ô∏è"); // spider web
		
		#[doc="worm ü™±"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WORM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WORM); // ü™± (`U+1FAB1`)"] #[doc="# assert_eq!(WORM.to_string().as_str(), \"ü™±\");"]
#[doc="```"]
pub static WORM :  Emoji = Emoji::new("worm", Version(13, 0), "ü™±"); // worm
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // ANT
				
				&ANT,
				
			],
			
			&[ // BEETLE
				
				&BEETLE,
				
			],
			
			&[ // BUG
				
				&BUG,
				
			],
			
			&[ // BUTTERFLY
				
				&BUTTERFLY,
				
			],
			
			&[ // COCKROACH
				
				&COCKROACH,
				
			],
			
			&[ // CRICKET
				
				&CRICKET,
				
			],
			
			&[ // FLY
				
				&FLY,
				
			],
			
			&[ // HONEYBEE
				
				&HONEYBEE,
				
			],
			
			&[ // LADY_BEETLE
				
				&LADY_BEETLE,
				
			],
			
			&[ // MICROBE
				
				&MICROBE,
				
			],
			
			&[ // MOSQUITO
				
				&MOSQUITO,
				
			],
			
			&[ // SCORPION
				
				&SCORPION,
				
			],
			
			&[ // SNAIL
				
				&SNAIL,
				
			],
			
			&[ // SPIDER
				
				&SPIDER,
				
			],
			
			&[ // SPIDER_WEB
				
				&SPIDER_WEB,
				
			],
			
			&[ // WORM
				
				&WORM,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&ANT, // ANT
				
			
				
				&BEETLE, // BEETLE
				
			
				
				&BUG, // BUG
				
			
				
				&BUTTERFLY, // BUTTERFLY
				
			
				
				&COCKROACH, // COCKROACH
				
			
				
				&CRICKET, // CRICKET
				
			
				
				&FLY, // FLY
				
			
				
				&HONEYBEE, // HONEYBEE
				
			
				
				&LADY_BEETLE, // LADY_BEETLE
				
			
				
				&MICROBE, // MICROBE
				
			
				
				&MOSQUITO, // MOSQUITO
				
			
				
				&SCORPION, // SCORPION
				
			
				
				&SNAIL, // SNAIL
				
			
				
				&SPIDER, // SPIDER
				
			
				
				&SPIDER_WEB, // SPIDER_WEB
				
			
				
				&WORM, // WORM
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // animal_bug
	
	/// animal_mammal ü¶°ü¶áüêª
	pub mod animal_mammal {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="badger ü¶°"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BADGER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BADGER); // ü¶° (`U+1F9A1`)"] #[doc="# assert_eq!(BADGER.to_string().as_str(), \"ü¶°\");"]
#[doc="```"]
pub static BADGER :  Emoji = Emoji::new("badger", Version(11, 0), "ü¶°"); // badger
		
		#[doc="bat ü¶á"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BAT); // ü¶á (`U+1F987`)"] #[doc="# assert_eq!(BAT.to_string().as_str(), \"ü¶á\");"]
#[doc="```"]
pub static BAT :  Emoji = Emoji::new("bat", Version(3, 0), "ü¶á"); // bat
		
		#[doc="bear üêª"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BEAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BEAR); // üêª (`U+1F43B`)"] #[doc="# assert_eq!(BEAR.to_string().as_str(), \"üêª\");"]
#[doc="```"]
pub static BEAR :  Emoji = Emoji::new("bear", Version(0, 6), "üêª"); // bear
		
		#[doc="beaver ü¶´"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BEAVER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BEAVER); // ü¶´ (`U+1F9AB`)"] #[doc="# assert_eq!(BEAVER.to_string().as_str(), \"ü¶´\");"]
#[doc="```"]
pub static BEAVER :  Emoji = Emoji::new("beaver", Version(13, 0), "ü¶´"); // beaver
		
		#[doc="bison ü¶¨"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BISON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BISON); // ü¶¨ (`U+1F9AC`)"] #[doc="# assert_eq!(BISON.to_string().as_str(), \"ü¶¨\");"]
#[doc="```"]
pub static BISON :  Emoji = Emoji::new("bison", Version(13, 0), "ü¶¨"); // bison
		
		#[doc="black cat üêà‚Äç‚¨õ"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLACK_CAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLACK_CAT); // üêà‚Äç‚¨õ (`U+1F408 U+200D U+2B1B`)"] #[doc="# assert_eq!(BLACK_CAT.to_string().as_str(), \"üêà‚Äç‚¨õ\");"]
#[doc="```"]
pub static BLACK_CAT :  Emoji = Emoji::new("black cat", Version(13, 0), "üêà‚Äç‚¨õ"); // black cat
		
		#[doc="boar üêó"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BOAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BOAR); // üêó (`U+1F417`)"] #[doc="# assert_eq!(BOAR.to_string().as_str(), \"üêó\");"]
#[doc="```"]
pub static BOAR :  Emoji = Emoji::new("boar", Version(0, 6), "üêó"); // boar
		
		#[doc="camel üê™"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CAMEL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CAMEL); // üê™ (`U+1F42A`)"] #[doc="# assert_eq!(CAMEL.to_string().as_str(), \"üê™\");"]
#[doc="```"]
pub static CAMEL :  Emoji = Emoji::new("camel", Version(1, 0), "üê™"); // camel
		
		#[doc="cat üêà"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CAT); // üêà (`U+1F408`)"] #[doc="# assert_eq!(CAT.to_string().as_str(), \"üêà\");"]
#[doc="```"]
pub static CAT :  Emoji = Emoji::new("cat", Version(0, 7), "üêà"); // cat
		
		#[doc="cat face üê±"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CAT_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CAT_FACE); // üê± (`U+1F431`)"] #[doc="# assert_eq!(CAT_FACE.to_string().as_str(), \"üê±\");"]
#[doc="```"]
pub static CAT_FACE :  Emoji = Emoji::new("cat face", Version(0, 6), "üê±"); // cat face
		
		#[doc="chipmunk üêøÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHIPMUNK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHIPMUNK); // üêøÔ∏è (`U+1F43F U+FE0F`)"] #[doc="# assert_eq!(CHIPMUNK.to_string().as_str(), \"üêøÔ∏è\");"]
#[doc="```"]
pub static CHIPMUNK :  Emoji = Emoji::new("chipmunk", Version(0, 7), "üêøÔ∏è"); // chipmunk
		
		#[doc="cow üêÑ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COW); // üêÑ (`U+1F404`)"] #[doc="# assert_eq!(COW.to_string().as_str(), \"üêÑ\");"]
#[doc="```"]
pub static COW :  Emoji = Emoji::new("cow", Version(1, 0), "üêÑ"); // cow
		
		#[doc="cow face üêÆ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COW_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COW_FACE); // üêÆ (`U+1F42E`)"] #[doc="# assert_eq!(COW_FACE.to_string().as_str(), \"üêÆ\");"]
#[doc="```"]
pub static COW_FACE :  Emoji = Emoji::new("cow face", Version(0, 6), "üêÆ"); // cow face
		
		#[doc="deer ü¶å"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DEER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DEER); // ü¶å (`U+1F98C`)"] #[doc="# assert_eq!(DEER.to_string().as_str(), \"ü¶å\");"]
#[doc="```"]
pub static DEER :  Emoji = Emoji::new("deer", Version(3, 0), "ü¶å"); // deer
		
		#[doc="dog üêï"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOG); // üêï (`U+1F415`)"] #[doc="# assert_eq!(DOG.to_string().as_str(), \"üêï\");"]
#[doc="```"]
pub static DOG :  Emoji = Emoji::new("dog", Version(0, 7), "üêï"); // dog
		
		#[doc="dog face üê∂"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOG_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOG_FACE); // üê∂ (`U+1F436`)"] #[doc="# assert_eq!(DOG_FACE.to_string().as_str(), \"üê∂\");"]
#[doc="```"]
pub static DOG_FACE :  Emoji = Emoji::new("dog face", Version(0, 6), "üê∂"); // dog face
		
		#[doc="elephant üêò"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ELEPHANT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ELEPHANT); // üêò (`U+1F418`)"] #[doc="# assert_eq!(ELEPHANT.to_string().as_str(), \"üêò\");"]
#[doc="```"]
pub static ELEPHANT :  Emoji = Emoji::new("elephant", Version(0, 6), "üêò"); // elephant
		
		#[doc="ewe üêë"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EWE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EWE); // üêë (`U+1F411`)"] #[doc="# assert_eq!(EWE.to_string().as_str(), \"üêë\");"]
#[doc="```"]
pub static EWE :  Emoji = Emoji::new("ewe", Version(0, 6), "üêë"); // ewe
		
		#[doc="fox ü¶ä"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FOX;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FOX); // ü¶ä (`U+1F98A`)"] #[doc="# assert_eq!(FOX.to_string().as_str(), \"ü¶ä\");"]
#[doc="```"]
pub static FOX :  Emoji = Emoji::new("fox", Version(3, 0), "ü¶ä"); // fox
		
		#[doc="giraffe ü¶í"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GIRAFFE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GIRAFFE); // ü¶í (`U+1F992`)"] #[doc="# assert_eq!(GIRAFFE.to_string().as_str(), \"ü¶í\");"]
#[doc="```"]
pub static GIRAFFE :  Emoji = Emoji::new("giraffe", Version(5, 0), "ü¶í"); // giraffe
		
		#[doc="goat üêê"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GOAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GOAT); // üêê (`U+1F410`)"] #[doc="# assert_eq!(GOAT.to_string().as_str(), \"üêê\");"]
#[doc="```"]
pub static GOAT :  Emoji = Emoji::new("goat", Version(1, 0), "üêê"); // goat
		
		#[doc="gorilla ü¶ç"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GORILLA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GORILLA); // ü¶ç (`U+1F98D`)"] #[doc="# assert_eq!(GORILLA.to_string().as_str(), \"ü¶ç\");"]
#[doc="```"]
pub static GORILLA :  Emoji = Emoji::new("gorilla", Version(3, 0), "ü¶ç"); // gorilla
		
		#[doc="guide dog ü¶Æ"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GUIDE_DOG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GUIDE_DOG); // ü¶Æ (`U+1F9AE`)"] #[doc="# assert_eq!(GUIDE_DOG.to_string().as_str(), \"ü¶Æ\");"]
#[doc="```"]
pub static GUIDE_DOG :  Emoji = Emoji::new("guide dog", Version(12, 0), "ü¶Æ"); // guide dog
		
		#[doc="hamster üêπ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HAMSTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HAMSTER); // üêπ (`U+1F439`)"] #[doc="# assert_eq!(HAMSTER.to_string().as_str(), \"üêπ\");"]
#[doc="```"]
pub static HAMSTER :  Emoji = Emoji::new("hamster", Version(0, 6), "üêπ"); // hamster
		
		#[doc="hedgehog ü¶î"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HEDGEHOG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HEDGEHOG); // ü¶î (`U+1F994`)"] #[doc="# assert_eq!(HEDGEHOG.to_string().as_str(), \"ü¶î\");"]
#[doc="```"]
pub static HEDGEHOG :  Emoji = Emoji::new("hedgehog", Version(5, 0), "ü¶î"); // hedgehog
		
		#[doc="hippopotamus ü¶õ"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HIPPOPOTAMUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HIPPOPOTAMUS); // ü¶õ (`U+1F99B`)"] #[doc="# assert_eq!(HIPPOPOTAMUS.to_string().as_str(), \"ü¶õ\");"]
#[doc="```"]
pub static HIPPOPOTAMUS :  Emoji = Emoji::new("hippopotamus", Version(11, 0), "ü¶õ"); // hippopotamus
		
		#[doc="horse üêé"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HORSE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HORSE); // üêé (`U+1F40E`)"] #[doc="# assert_eq!(HORSE.to_string().as_str(), \"üêé\");"]
#[doc="```"]
pub static HORSE :  Emoji = Emoji::new("horse", Version(0, 6), "üêé"); // horse
		
		#[doc="horse face üê¥"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HORSE_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HORSE_FACE); // üê¥ (`U+1F434`)"] #[doc="# assert_eq!(HORSE_FACE.to_string().as_str(), \"üê¥\");"]
#[doc="```"]
pub static HORSE_FACE :  Emoji = Emoji::new("horse face", Version(0, 6), "üê¥"); // horse face
		
		#[doc="kangaroo ü¶ò"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KANGAROO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KANGAROO); // ü¶ò (`U+1F998`)"] #[doc="# assert_eq!(KANGAROO.to_string().as_str(), \"ü¶ò\");"]
#[doc="```"]
pub static KANGAROO :  Emoji = Emoji::new("kangaroo", Version(11, 0), "ü¶ò"); // kangaroo
		
		#[doc="koala üê®"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KOALA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KOALA); // üê® (`U+1F428`)"] #[doc="# assert_eq!(KOALA.to_string().as_str(), \"üê®\");"]
#[doc="```"]
pub static KOALA :  Emoji = Emoji::new("koala", Version(0, 6), "üê®"); // koala
		
		#[doc="leopard üêÜ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEOPARD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEOPARD); // üêÜ (`U+1F406`)"] #[doc="# assert_eq!(LEOPARD.to_string().as_str(), \"üêÜ\");"]
#[doc="```"]
pub static LEOPARD :  Emoji = Emoji::new("leopard", Version(1, 0), "üêÜ"); // leopard
		
		#[doc="lion ü¶Å"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LION); // ü¶Å (`U+1F981`)"] #[doc="# assert_eq!(LION.to_string().as_str(), \"ü¶Å\");"]
#[doc="```"]
pub static LION :  Emoji = Emoji::new("lion", Version(1, 0), "ü¶Å"); // lion
		
		#[doc="llama ü¶ô"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LLAMA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LLAMA); // ü¶ô (`U+1F999`)"] #[doc="# assert_eq!(LLAMA.to_string().as_str(), \"ü¶ô\");"]
#[doc="```"]
pub static LLAMA :  Emoji = Emoji::new("llama", Version(11, 0), "ü¶ô"); // llama
		
		#[doc="mammoth ü¶£"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MAMMOTH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MAMMOTH); // ü¶£ (`U+1F9A3`)"] #[doc="# assert_eq!(MAMMOTH.to_string().as_str(), \"ü¶£\");"]
#[doc="```"]
pub static MAMMOTH :  Emoji = Emoji::new("mammoth", Version(13, 0), "ü¶£"); // mammoth
		
		#[doc="monkey üêí"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MONKEY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MONKEY); // üêí (`U+1F412`)"] #[doc="# assert_eq!(MONKEY.to_string().as_str(), \"üêí\");"]
#[doc="```"]
pub static MONKEY :  Emoji = Emoji::new("monkey", Version(0, 6), "üêí"); // monkey
		
		#[doc="monkey face üêµ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MONKEY_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MONKEY_FACE); // üêµ (`U+1F435`)"] #[doc="# assert_eq!(MONKEY_FACE.to_string().as_str(), \"üêµ\");"]
#[doc="```"]
pub static MONKEY_FACE :  Emoji = Emoji::new("monkey face", Version(0, 6), "üêµ"); // monkey face
		
		#[doc="mouse üêÅ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOUSE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOUSE); // üêÅ (`U+1F401`)"] #[doc="# assert_eq!(MOUSE.to_string().as_str(), \"üêÅ\");"]
#[doc="```"]
pub static MOUSE :  Emoji = Emoji::new("mouse", Version(1, 0), "üêÅ"); // mouse
		
		#[doc="mouse face üê≠"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOUSE_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOUSE_FACE); // üê≠ (`U+1F42D`)"] #[doc="# assert_eq!(MOUSE_FACE.to_string().as_str(), \"üê≠\");"]
#[doc="```"]
pub static MOUSE_FACE :  Emoji = Emoji::new("mouse face", Version(0, 6), "üê≠"); // mouse face
		
		#[doc="orangutan ü¶ß"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ORANGUTAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ORANGUTAN); // ü¶ß (`U+1F9A7`)"] #[doc="# assert_eq!(ORANGUTAN.to_string().as_str(), \"ü¶ß\");"]
#[doc="```"]
pub static ORANGUTAN :  Emoji = Emoji::new("orangutan", Version(12, 0), "ü¶ß"); // orangutan
		
		#[doc="otter ü¶¶"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OTTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OTTER); // ü¶¶ (`U+1F9A6`)"] #[doc="# assert_eq!(OTTER.to_string().as_str(), \"ü¶¶\");"]
#[doc="```"]
pub static OTTER :  Emoji = Emoji::new("otter", Version(12, 0), "ü¶¶"); // otter
		
		#[doc="ox üêÇ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OX;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OX); // üêÇ (`U+1F402`)"] #[doc="# assert_eq!(OX.to_string().as_str(), \"üêÇ\");"]
#[doc="```"]
pub static OX :  Emoji = Emoji::new("ox", Version(1, 0), "üêÇ"); // ox
		
		#[doc="panda üêº"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PANDA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PANDA); // üêº (`U+1F43C`)"] #[doc="# assert_eq!(PANDA.to_string().as_str(), \"üêº\");"]
#[doc="```"]
pub static PANDA :  Emoji = Emoji::new("panda", Version(0, 6), "üêº"); // panda
		
		#[doc="paw prints üêæ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PAW_PRINTS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PAW_PRINTS); // üêæ (`U+1F43E`)"] #[doc="# assert_eq!(PAW_PRINTS.to_string().as_str(), \"üêæ\");"]
#[doc="```"]
pub static PAW_PRINTS :  Emoji = Emoji::new("paw prints", Version(0, 6), "üêæ"); // paw prints
		
		#[doc="pig üêñ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PIG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PIG); // üêñ (`U+1F416`)"] #[doc="# assert_eq!(PIG.to_string().as_str(), \"üêñ\");"]
#[doc="```"]
pub static PIG :  Emoji = Emoji::new("pig", Version(1, 0), "üêñ"); // pig
		
		#[doc="pig face üê∑"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PIG_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PIG_FACE); // üê∑ (`U+1F437`)"] #[doc="# assert_eq!(PIG_FACE.to_string().as_str(), \"üê∑\");"]
#[doc="```"]
pub static PIG_FACE :  Emoji = Emoji::new("pig face", Version(0, 6), "üê∑"); // pig face
		
		#[doc="pig nose üêΩ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PIG_NOSE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PIG_NOSE); // üêΩ (`U+1F43D`)"] #[doc="# assert_eq!(PIG_NOSE.to_string().as_str(), \"üêΩ\");"]
#[doc="```"]
pub static PIG_NOSE :  Emoji = Emoji::new("pig nose", Version(0, 6), "üêΩ"); // pig nose
		
		#[doc="polar bear üêª‚Äç‚ùÑÔ∏è"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POLAR_BEAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POLAR_BEAR); // üêª‚Äç‚ùÑÔ∏è (`U+1F43B U+200D U+2744 U+FE0F`)"] #[doc="# assert_eq!(POLAR_BEAR.to_string().as_str(), \"üêª‚Äç‚ùÑÔ∏è\");"]
#[doc="```"]
pub static POLAR_BEAR :  Emoji = Emoji::new("polar bear", Version(13, 0), "üêª‚Äç‚ùÑÔ∏è"); // polar bear
		
		#[doc="poodle üê©"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POODLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POODLE); // üê© (`U+1F429`)"] #[doc="# assert_eq!(POODLE.to_string().as_str(), \"üê©\");"]
#[doc="```"]
pub static POODLE :  Emoji = Emoji::new("poodle", Version(0, 6), "üê©"); // poodle
		
		#[doc="rabbit üêá"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RABBIT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RABBIT); // üêá (`U+1F407`)"] #[doc="# assert_eq!(RABBIT.to_string().as_str(), \"üêá\");"]
#[doc="```"]
pub static RABBIT :  Emoji = Emoji::new("rabbit", Version(1, 0), "üêá"); // rabbit
		
		#[doc="rabbit face üê∞"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RABBIT_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RABBIT_FACE); // üê∞ (`U+1F430`)"] #[doc="# assert_eq!(RABBIT_FACE.to_string().as_str(), \"üê∞\");"]
#[doc="```"]
pub static RABBIT_FACE :  Emoji = Emoji::new("rabbit face", Version(0, 6), "üê∞"); // rabbit face
		
		#[doc="raccoon ü¶ù"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RACCOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RACCOON); // ü¶ù (`U+1F99D`)"] #[doc="# assert_eq!(RACCOON.to_string().as_str(), \"ü¶ù\");"]
#[doc="```"]
pub static RACCOON :  Emoji = Emoji::new("raccoon", Version(11, 0), "ü¶ù"); // raccoon
		
		#[doc="ram üêè"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RAM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RAM); // üêè (`U+1F40F`)"] #[doc="# assert_eq!(RAM.to_string().as_str(), \"üêè\");"]
#[doc="```"]
pub static RAM :  Emoji = Emoji::new("ram", Version(1, 0), "üêè"); // ram
		
		#[doc="rat üêÄ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RAT); // üêÄ (`U+1F400`)"] #[doc="# assert_eq!(RAT.to_string().as_str(), \"üêÄ\");"]
#[doc="```"]
pub static RAT :  Emoji = Emoji::new("rat", Version(1, 0), "üêÄ"); // rat
		
		#[doc="rhinoceros ü¶è"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RHINOCEROS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RHINOCEROS); // ü¶è (`U+1F98F`)"] #[doc="# assert_eq!(RHINOCEROS.to_string().as_str(), \"ü¶è\");"]
#[doc="```"]
pub static RHINOCEROS :  Emoji = Emoji::new("rhinoceros", Version(3, 0), "ü¶è"); // rhinoceros
		
		#[doc="service dog üêï‚Äçü¶∫"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SERVICE_DOG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SERVICE_DOG); // üêï‚Äçü¶∫ (`U+1F415 U+200D U+1F9BA`)"] #[doc="# assert_eq!(SERVICE_DOG.to_string().as_str(), \"üêï‚Äçü¶∫\");"]
#[doc="```"]
pub static SERVICE_DOG :  Emoji = Emoji::new("service dog", Version(12, 0), "üêï‚Äçü¶∫"); // service dog
		
		#[doc="skunk ü¶®"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SKUNK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SKUNK); // ü¶® (`U+1F9A8`)"] #[doc="# assert_eq!(SKUNK.to_string().as_str(), \"ü¶®\");"]
#[doc="```"]
pub static SKUNK :  Emoji = Emoji::new("skunk", Version(12, 0), "ü¶®"); // skunk
		
		#[doc="sloth ü¶•"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SLOTH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SLOTH); // ü¶• (`U+1F9A5`)"] #[doc="# assert_eq!(SLOTH.to_string().as_str(), \"ü¶•\");"]
#[doc="```"]
pub static SLOTH :  Emoji = Emoji::new("sloth", Version(12, 0), "ü¶•"); // sloth
		
		#[doc="tiger üêÖ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TIGER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TIGER); // üêÖ (`U+1F405`)"] #[doc="# assert_eq!(TIGER.to_string().as_str(), \"üêÖ\");"]
#[doc="```"]
pub static TIGER :  Emoji = Emoji::new("tiger", Version(1, 0), "üêÖ"); // tiger
		
		#[doc="tiger face üêØ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TIGER_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TIGER_FACE); // üêØ (`U+1F42F`)"] #[doc="# assert_eq!(TIGER_FACE.to_string().as_str(), \"üêØ\");"]
#[doc="```"]
pub static TIGER_FACE :  Emoji = Emoji::new("tiger face", Version(0, 6), "üêØ"); // tiger face
		
		#[doc="two-hump camel üê´"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TWO_HUMP_CAMEL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TWO_HUMP_CAMEL); // üê´ (`U+1F42B`)"] #[doc="# assert_eq!(TWO_HUMP_CAMEL.to_string().as_str(), \"üê´\");"]
#[doc="```"]
pub static TWO_HUMP_CAMEL :  Emoji = Emoji::new("two-hump camel", Version(0, 6), "üê´"); // two-hump camel
		
		#[doc="unicorn ü¶Ñ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::UNICORN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", UNICORN); // ü¶Ñ (`U+1F984`)"] #[doc="# assert_eq!(UNICORN.to_string().as_str(), \"ü¶Ñ\");"]
#[doc="```"]
pub static UNICORN :  Emoji = Emoji::new("unicorn", Version(1, 0), "ü¶Ñ"); // unicorn
		
		#[doc="water buffalo üêÉ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WATER_BUFFALO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WATER_BUFFALO); // üêÉ (`U+1F403`)"] #[doc="# assert_eq!(WATER_BUFFALO.to_string().as_str(), \"üêÉ\");"]
#[doc="```"]
pub static WATER_BUFFALO :  Emoji = Emoji::new("water buffalo", Version(1, 0), "üêÉ"); // water buffalo
		
		#[doc="wolf üê∫"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WOLF;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WOLF); // üê∫ (`U+1F43A`)"] #[doc="# assert_eq!(WOLF.to_string().as_str(), \"üê∫\");"]
#[doc="```"]
pub static WOLF :  Emoji = Emoji::new("wolf", Version(0, 6), "üê∫"); // wolf
		
		#[doc="zebra ü¶ì"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ZEBRA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ZEBRA); // ü¶ì (`U+1F993`)"] #[doc="# assert_eq!(ZEBRA.to_string().as_str(), \"ü¶ì\");"]
#[doc="```"]
pub static ZEBRA :  Emoji = Emoji::new("zebra", Version(5, 0), "ü¶ì"); // zebra
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BADGER
				
				&BADGER,
				
			],
			
			&[ // BAT
				
				&BAT,
				
			],
			
			&[ // BEAR
				
				&BEAR,
				
			],
			
			&[ // BEAVER
				
				&BEAVER,
				
			],
			
			&[ // BISON
				
				&BISON,
				
			],
			
			&[ // BLACK_CAT
				
				&BLACK_CAT,
				
			],
			
			&[ // BOAR
				
				&BOAR,
				
			],
			
			&[ // CAMEL
				
				&CAMEL,
				
			],
			
			&[ // CAT
				
				&CAT,
				
			],
			
			&[ // CAT_FACE
				
				&CAT_FACE,
				
			],
			
			&[ // CHIPMUNK
				
				&CHIPMUNK,
				
			],
			
			&[ // COW
				
				&COW,
				
			],
			
			&[ // COW_FACE
				
				&COW_FACE,
				
			],
			
			&[ // DEER
				
				&DEER,
				
			],
			
			&[ // DOG
				
				&DOG,
				
			],
			
			&[ // DOG_FACE
				
				&DOG_FACE,
				
			],
			
			&[ // ELEPHANT
				
				&ELEPHANT,
				
			],
			
			&[ // EWE
				
				&EWE,
				
			],
			
			&[ // FOX
				
				&FOX,
				
			],
			
			&[ // GIRAFFE
				
				&GIRAFFE,
				
			],
			
			&[ // GOAT
				
				&GOAT,
				
			],
			
			&[ // GORILLA
				
				&GORILLA,
				
			],
			
			&[ // GUIDE_DOG
				
				&GUIDE_DOG,
				
			],
			
			&[ // HAMSTER
				
				&HAMSTER,
				
			],
			
			&[ // HEDGEHOG
				
				&HEDGEHOG,
				
			],
			
			&[ // HIPPOPOTAMUS
				
				&HIPPOPOTAMUS,
				
			],
			
			&[ // HORSE
				
				&HORSE,
				
			],
			
			&[ // HORSE_FACE
				
				&HORSE_FACE,
				
			],
			
			&[ // KANGAROO
				
				&KANGAROO,
				
			],
			
			&[ // KOALA
				
				&KOALA,
				
			],
			
			&[ // LEOPARD
				
				&LEOPARD,
				
			],
			
			&[ // LION
				
				&LION,
				
			],
			
			&[ // LLAMA
				
				&LLAMA,
				
			],
			
			&[ // MAMMOTH
				
				&MAMMOTH,
				
			],
			
			&[ // MONKEY
				
				&MONKEY,
				
			],
			
			&[ // MONKEY_FACE
				
				&MONKEY_FACE,
				
			],
			
			&[ // MOUSE
				
				&MOUSE,
				
			],
			
			&[ // MOUSE_FACE
				
				&MOUSE_FACE,
				
			],
			
			&[ // ORANGUTAN
				
				&ORANGUTAN,
				
			],
			
			&[ // OTTER
				
				&OTTER,
				
			],
			
			&[ // OX
				
				&OX,
				
			],
			
			&[ // PANDA
				
				&PANDA,
				
			],
			
			&[ // PAW_PRINTS
				
				&PAW_PRINTS,
				
			],
			
			&[ // PIG
				
				&PIG,
				
			],
			
			&[ // PIG_FACE
				
				&PIG_FACE,
				
			],
			
			&[ // PIG_NOSE
				
				&PIG_NOSE,
				
			],
			
			&[ // POLAR_BEAR
				
				&POLAR_BEAR,
				
			],
			
			&[ // POODLE
				
				&POODLE,
				
			],
			
			&[ // RABBIT
				
				&RABBIT,
				
			],
			
			&[ // RABBIT_FACE
				
				&RABBIT_FACE,
				
			],
			
			&[ // RACCOON
				
				&RACCOON,
				
			],
			
			&[ // RAM
				
				&RAM,
				
			],
			
			&[ // RAT
				
				&RAT,
				
			],
			
			&[ // RHINOCEROS
				
				&RHINOCEROS,
				
			],
			
			&[ // SERVICE_DOG
				
				&SERVICE_DOG,
				
			],
			
			&[ // SKUNK
				
				&SKUNK,
				
			],
			
			&[ // SLOTH
				
				&SLOTH,
				
			],
			
			&[ // TIGER
				
				&TIGER,
				
			],
			
			&[ // TIGER_FACE
				
				&TIGER_FACE,
				
			],
			
			&[ // TWO_HUMP_CAMEL
				
				&TWO_HUMP_CAMEL,
				
			],
			
			&[ // UNICORN
				
				&UNICORN,
				
			],
			
			&[ // WATER_BUFFALO
				
				&WATER_BUFFALO,
				
			],
			
			&[ // WOLF
				
				&WOLF,
				
			],
			
			&[ // ZEBRA
				
				&ZEBRA,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BADGER, // BADGER
				
			
				
				&BAT, // BAT
				
			
				
				&BEAR, // BEAR
				
			
				
				&BEAVER, // BEAVER
				
			
				
				&BISON, // BISON
				
			
				
				&BLACK_CAT, // BLACK_CAT
				
			
				
				&BOAR, // BOAR
				
			
				
				&CAMEL, // CAMEL
				
			
				
				&CAT, // CAT
				
			
				
				&CAT_FACE, // CAT_FACE
				
			
				
				&CHIPMUNK, // CHIPMUNK
				
			
				
				&COW, // COW
				
			
				
				&COW_FACE, // COW_FACE
				
			
				
				&DEER, // DEER
				
			
				
				&DOG, // DOG
				
			
				
				&DOG_FACE, // DOG_FACE
				
			
				
				&ELEPHANT, // ELEPHANT
				
			
				
				&EWE, // EWE
				
			
				
				&FOX, // FOX
				
			
				
				&GIRAFFE, // GIRAFFE
				
			
				
				&GOAT, // GOAT
				
			
				
				&GORILLA, // GORILLA
				
			
				
				&GUIDE_DOG, // GUIDE_DOG
				
			
				
				&HAMSTER, // HAMSTER
				
			
				
				&HEDGEHOG, // HEDGEHOG
				
			
				
				&HIPPOPOTAMUS, // HIPPOPOTAMUS
				
			
				
				&HORSE, // HORSE
				
			
				
				&HORSE_FACE, // HORSE_FACE
				
			
				
				&KANGAROO, // KANGAROO
				
			
				
				&KOALA, // KOALA
				
			
				
				&LEOPARD, // LEOPARD
				
			
				
				&LION, // LION
				
			
				
				&LLAMA, // LLAMA
				
			
				
				&MAMMOTH, // MAMMOTH
				
			
				
				&MONKEY, // MONKEY
				
			
				
				&MONKEY_FACE, // MONKEY_FACE
				
			
				
				&MOUSE, // MOUSE
				
			
				
				&MOUSE_FACE, // MOUSE_FACE
				
			
				
				&ORANGUTAN, // ORANGUTAN
				
			
				
				&OTTER, // OTTER
				
			
				
				&OX, // OX
				
			
				
				&PANDA, // PANDA
				
			
				
				&PAW_PRINTS, // PAW_PRINTS
				
			
				
				&PIG, // PIG
				
			
				
				&PIG_FACE, // PIG_FACE
				
			
				
				&PIG_NOSE, // PIG_NOSE
				
			
				
				&POLAR_BEAR, // POLAR_BEAR
				
			
				
				&POODLE, // POODLE
				
			
				
				&RABBIT, // RABBIT
				
			
				
				&RABBIT_FACE, // RABBIT_FACE
				
			
				
				&RACCOON, // RACCOON
				
			
				
				&RAM, // RAM
				
			
				
				&RAT, // RAT
				
			
				
				&RHINOCEROS, // RHINOCEROS
				
			
				
				&SERVICE_DOG, // SERVICE_DOG
				
			
				
				&SKUNK, // SKUNK
				
			
				
				&SLOTH, // SLOTH
				
			
				
				&TIGER, // TIGER
				
			
				
				&TIGER_FACE, // TIGER_FACE
				
			
				
				&TWO_HUMP_CAMEL, // TWO_HUMP_CAMEL
				
			
				
				&UNICORN, // UNICORN
				
			
				
				&WATER_BUFFALO, // WATER_BUFFALO
				
			
				
				&WOLF, // WOLF
				
			
				
				&ZEBRA, // ZEBRA
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // animal_mammal
	
	/// animal_marine üê°üê¨üêü
	pub mod animal_marine {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="blowfish üê°"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLOWFISH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLOWFISH); // üê° (`U+1F421`)"] #[doc="# assert_eq!(BLOWFISH.to_string().as_str(), \"üê°\");"]
#[doc="```"]
pub static BLOWFISH :  Emoji = Emoji::new("blowfish", Version(0, 6), "üê°"); // blowfish
		
		#[doc="dolphin üê¨"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOLPHIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOLPHIN); // üê¨ (`U+1F42C`)"] #[doc="# assert_eq!(DOLPHIN.to_string().as_str(), \"üê¨\");"]
#[doc="```"]
pub static DOLPHIN :  Emoji = Emoji::new("dolphin", Version(0, 6), "üê¨"); // dolphin
		
		#[doc="fish üêü"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FISH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FISH); // üêü (`U+1F41F`)"] #[doc="# assert_eq!(FISH.to_string().as_str(), \"üêü\");"]
#[doc="```"]
pub static FISH :  Emoji = Emoji::new("fish", Version(0, 6), "üêü"); // fish
		
		#[doc="octopus üêô"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OCTOPUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OCTOPUS); // üêô (`U+1F419`)"] #[doc="# assert_eq!(OCTOPUS.to_string().as_str(), \"üêô\");"]
#[doc="```"]
pub static OCTOPUS :  Emoji = Emoji::new("octopus", Version(0, 6), "üêô"); // octopus
		
		#[doc="seal ü¶≠"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SEAL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SEAL); // ü¶≠ (`U+1F9AD`)"] #[doc="# assert_eq!(SEAL.to_string().as_str(), \"ü¶≠\");"]
#[doc="```"]
pub static SEAL :  Emoji = Emoji::new("seal", Version(13, 0), "ü¶≠"); // seal
		
		#[doc="shark ü¶à"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHARK); // ü¶à (`U+1F988`)"] #[doc="# assert_eq!(SHARK.to_string().as_str(), \"ü¶à\");"]
#[doc="```"]
pub static SHARK :  Emoji = Emoji::new("shark", Version(3, 0), "ü¶à"); // shark
		
		#[doc="spiral shell üêö"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPIRAL_SHELL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPIRAL_SHELL); // üêö (`U+1F41A`)"] #[doc="# assert_eq!(SPIRAL_SHELL.to_string().as_str(), \"üêö\");"]
#[doc="```"]
pub static SPIRAL_SHELL :  Emoji = Emoji::new("spiral shell", Version(0, 6), "üêö"); // spiral shell
		
		#[doc="spouting whale üê≥"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPOUTING_WHALE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPOUTING_WHALE); // üê≥ (`U+1F433`)"] #[doc="# assert_eq!(SPOUTING_WHALE.to_string().as_str(), \"üê≥\");"]
#[doc="```"]
pub static SPOUTING_WHALE :  Emoji = Emoji::new("spouting whale", Version(0, 6), "üê≥"); // spouting whale
		
		#[doc="tropical fish üê†"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TROPICAL_FISH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TROPICAL_FISH); // üê† (`U+1F420`)"] #[doc="# assert_eq!(TROPICAL_FISH.to_string().as_str(), \"üê†\");"]
#[doc="```"]
pub static TROPICAL_FISH :  Emoji = Emoji::new("tropical fish", Version(0, 6), "üê†"); // tropical fish
		
		#[doc="whale üêã"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHALE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHALE); // üêã (`U+1F40B`)"] #[doc="# assert_eq!(WHALE.to_string().as_str(), \"üêã\");"]
#[doc="```"]
pub static WHALE :  Emoji = Emoji::new("whale", Version(1, 0), "üêã"); // whale
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BLOWFISH
				
				&BLOWFISH,
				
			],
			
			&[ // DOLPHIN
				
				&DOLPHIN,
				
			],
			
			&[ // FISH
				
				&FISH,
				
			],
			
			&[ // OCTOPUS
				
				&OCTOPUS,
				
			],
			
			&[ // SEAL
				
				&SEAL,
				
			],
			
			&[ // SHARK
				
				&SHARK,
				
			],
			
			&[ // SPIRAL_SHELL
				
				&SPIRAL_SHELL,
				
			],
			
			&[ // SPOUTING_WHALE
				
				&SPOUTING_WHALE,
				
			],
			
			&[ // TROPICAL_FISH
				
				&TROPICAL_FISH,
				
			],
			
			&[ // WHALE
				
				&WHALE,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BLOWFISH, // BLOWFISH
				
			
				
				&DOLPHIN, // DOLPHIN
				
			
				
				&FISH, // FISH
				
			
				
				&OCTOPUS, // OCTOPUS
				
			
				
				&SEAL, // SEAL
				
			
				
				&SHARK, // SHARK
				
			
				
				&SPIRAL_SHELL, // SPIRAL_SHELL
				
			
				
				&SPOUTING_WHALE, // SPOUTING_WHALE
				
			
				
				&TROPICAL_FISH, // TROPICAL_FISH
				
			
				
				&WHALE, // WHALE
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // animal_marine
	
	/// animal_reptile üêäüêâüê≤
	pub mod animal_reptile {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="crocodile üêä"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CROCODILE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CROCODILE); // üêä (`U+1F40A`)"] #[doc="# assert_eq!(CROCODILE.to_string().as_str(), \"üêä\");"]
#[doc="```"]
pub static CROCODILE :  Emoji = Emoji::new("crocodile", Version(1, 0), "üêä"); // crocodile
		
		#[doc="dragon üêâ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DRAGON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DRAGON); // üêâ (`U+1F409`)"] #[doc="# assert_eq!(DRAGON.to_string().as_str(), \"üêâ\");"]
#[doc="```"]
pub static DRAGON :  Emoji = Emoji::new("dragon", Version(1, 0), "üêâ"); // dragon
		
		#[doc="dragon face üê≤"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DRAGON_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DRAGON_FACE); // üê≤ (`U+1F432`)"] #[doc="# assert_eq!(DRAGON_FACE.to_string().as_str(), \"üê≤\");"]
#[doc="```"]
pub static DRAGON_FACE :  Emoji = Emoji::new("dragon face", Version(0, 6), "üê≤"); // dragon face
		
		#[doc="lizard ü¶é"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LIZARD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LIZARD); // ü¶é (`U+1F98E`)"] #[doc="# assert_eq!(LIZARD.to_string().as_str(), \"ü¶é\");"]
#[doc="```"]
pub static LIZARD :  Emoji = Emoji::new("lizard", Version(3, 0), "ü¶é"); // lizard
		
		#[doc="sauropod ü¶ï"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SAUROPOD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SAUROPOD); // ü¶ï (`U+1F995`)"] #[doc="# assert_eq!(SAUROPOD.to_string().as_str(), \"ü¶ï\");"]
#[doc="```"]
pub static SAUROPOD :  Emoji = Emoji::new("sauropod", Version(5, 0), "ü¶ï"); // sauropod
		
		#[doc="snake üêç"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SNAKE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SNAKE); // üêç (`U+1F40D`)"] #[doc="# assert_eq!(SNAKE.to_string().as_str(), \"üêç\");"]
#[doc="```"]
pub static SNAKE :  Emoji = Emoji::new("snake", Version(0, 6), "üêç"); // snake
		
		#[doc="turtle üê¢"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TURTLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TURTLE); // üê¢ (`U+1F422`)"] #[doc="# assert_eq!(TURTLE.to_string().as_str(), \"üê¢\");"]
#[doc="```"]
pub static TURTLE :  Emoji = Emoji::new("turtle", Version(0, 6), "üê¢"); // turtle
		
		#[doc="T-Rex ü¶ñ"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::T_REX;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", T_REX); // ü¶ñ (`U+1F996`)"] #[doc="# assert_eq!(T_REX.to_string().as_str(), \"ü¶ñ\");"]
#[doc="```"]
pub static T_REX :  Emoji = Emoji::new("T-Rex", Version(5, 0), "ü¶ñ"); // T-Rex
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // CROCODILE
				
				&CROCODILE,
				
			],
			
			&[ // DRAGON
				
				&DRAGON,
				
			],
			
			&[ // DRAGON_FACE
				
				&DRAGON_FACE,
				
			],
			
			&[ // LIZARD
				
				&LIZARD,
				
			],
			
			&[ // SAUROPOD
				
				&SAUROPOD,
				
			],
			
			&[ // SNAKE
				
				&SNAKE,
				
			],
			
			&[ // TURTLE
				
				&TURTLE,
				
			],
			
			&[ // T_REX
				
				&T_REX,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&CROCODILE, // CROCODILE
				
			
				
				&DRAGON, // DRAGON
				
			
				
				&DRAGON_FACE, // DRAGON_FACE
				
			
				
				&LIZARD, // LIZARD
				
			
				
				&SAUROPOD, // SAUROPOD
				
			
				
				&SNAKE, // SNAKE
				
			
				
				&TURTLE, // TURTLE
				
			
				
				&T_REX, // T_REX
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // animal_reptile
	
	/// plant_flower üåºüíêüå∏
	pub mod plant_flower {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="blossom üåº"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLOSSOM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLOSSOM); // üåº (`U+1F33C`)"] #[doc="# assert_eq!(BLOSSOM.to_string().as_str(), \"üåº\");"]
#[doc="```"]
pub static BLOSSOM :  Emoji = Emoji::new("blossom", Version(0, 6), "üåº"); // blossom
		
		#[doc="bouquet üíê"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BOUQUET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BOUQUET); // üíê (`U+1F490`)"] #[doc="# assert_eq!(BOUQUET.to_string().as_str(), \"üíê\");"]
#[doc="```"]
pub static BOUQUET :  Emoji = Emoji::new("bouquet", Version(0, 6), "üíê"); // bouquet
		
		#[doc="cherry blossom üå∏"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHERRY_BLOSSOM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHERRY_BLOSSOM); // üå∏ (`U+1F338`)"] #[doc="# assert_eq!(CHERRY_BLOSSOM.to_string().as_str(), \"üå∏\");"]
#[doc="```"]
pub static CHERRY_BLOSSOM :  Emoji = Emoji::new("cherry blossom", Version(0, 6), "üå∏"); // cherry blossom
		
		#[doc="hibiscus üå∫"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HIBISCUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HIBISCUS); // üå∫ (`U+1F33A`)"] #[doc="# assert_eq!(HIBISCUS.to_string().as_str(), \"üå∫\");"]
#[doc="```"]
pub static HIBISCUS :  Emoji = Emoji::new("hibiscus", Version(0, 6), "üå∫"); // hibiscus
		
		#[doc="rose üåπ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ROSE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ROSE); // üåπ (`U+1F339`)"] #[doc="# assert_eq!(ROSE.to_string().as_str(), \"üåπ\");"]
#[doc="```"]
pub static ROSE :  Emoji = Emoji::new("rose", Version(0, 6), "üåπ"); // rose
		
		#[doc="rosette üèµÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ROSETTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ROSETTE); // üèµÔ∏è (`U+1F3F5 U+FE0F`)"] #[doc="# assert_eq!(ROSETTE.to_string().as_str(), \"üèµÔ∏è\");"]
#[doc="```"]
pub static ROSETTE :  Emoji = Emoji::new("rosette", Version(0, 7), "üèµÔ∏è"); // rosette
		
		#[doc="sunflower üåª"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUNFLOWER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUNFLOWER); // üåª (`U+1F33B`)"] #[doc="# assert_eq!(SUNFLOWER.to_string().as_str(), \"üåª\");"]
#[doc="```"]
pub static SUNFLOWER :  Emoji = Emoji::new("sunflower", Version(0, 6), "üåª"); // sunflower
		
		#[doc="tulip üå∑"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TULIP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TULIP); // üå∑ (`U+1F337`)"] #[doc="# assert_eq!(TULIP.to_string().as_str(), \"üå∑\");"]
#[doc="```"]
pub static TULIP :  Emoji = Emoji::new("tulip", Version(0, 6), "üå∑"); // tulip
		
		#[doc="white flower üíÆ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHITE_FLOWER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHITE_FLOWER); // üíÆ (`U+1F4AE`)"] #[doc="# assert_eq!(WHITE_FLOWER.to_string().as_str(), \"üíÆ\");"]
#[doc="```"]
pub static WHITE_FLOWER :  Emoji = Emoji::new("white flower", Version(0, 6), "üíÆ"); // white flower
		
		#[doc="wilted flower ü•Ä"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WILTED_FLOWER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WILTED_FLOWER); // ü•Ä (`U+1F940`)"] #[doc="# assert_eq!(WILTED_FLOWER.to_string().as_str(), \"ü•Ä\");"]
#[doc="```"]
pub static WILTED_FLOWER :  Emoji = Emoji::new("wilted flower", Version(3, 0), "ü•Ä"); // wilted flower
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BLOSSOM
				
				&BLOSSOM,
				
			],
			
			&[ // BOUQUET
				
				&BOUQUET,
				
			],
			
			&[ // CHERRY_BLOSSOM
				
				&CHERRY_BLOSSOM,
				
			],
			
			&[ // HIBISCUS
				
				&HIBISCUS,
				
			],
			
			&[ // ROSE
				
				&ROSE,
				
			],
			
			&[ // ROSETTE
				
				&ROSETTE,
				
			],
			
			&[ // SUNFLOWER
				
				&SUNFLOWER,
				
			],
			
			&[ // TULIP
				
				&TULIP,
				
			],
			
			&[ // WHITE_FLOWER
				
				&WHITE_FLOWER,
				
			],
			
			&[ // WILTED_FLOWER
				
				&WILTED_FLOWER,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BLOSSOM, // BLOSSOM
				
			
				
				&BOUQUET, // BOUQUET
				
			
				
				&CHERRY_BLOSSOM, // CHERRY_BLOSSOM
				
			
				
				&HIBISCUS, // HIBISCUS
				
			
				
				&ROSE, // ROSE
				
			
				
				&ROSETTE, // ROSETTE
				
			
				
				&SUNFLOWER, // SUNFLOWER
				
			
				
				&TULIP, // TULIP
				
			
				
				&WHITE_FLOWER, // WHITE_FLOWER
				
			
				
				&WILTED_FLOWER, // WILTED_FLOWER
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // plant_flower
	
	/// plant_other üåµüå≥üå≤
	pub mod plant_other {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="cactus üåµ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CACTUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CACTUS); // üåµ (`U+1F335`)"] #[doc="# assert_eq!(CACTUS.to_string().as_str(), \"üåµ\");"]
#[doc="```"]
pub static CACTUS :  Emoji = Emoji::new("cactus", Version(0, 6), "üåµ"); // cactus
		
		#[doc="deciduous tree üå≥"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DECIDUOUS_TREE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DECIDUOUS_TREE); // üå≥ (`U+1F333`)"] #[doc="# assert_eq!(DECIDUOUS_TREE.to_string().as_str(), \"üå≥\");"]
#[doc="```"]
pub static DECIDUOUS_TREE :  Emoji = Emoji::new("deciduous tree", Version(1, 0), "üå≥"); // deciduous tree
		
		#[doc="evergreen tree üå≤"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EVERGREEN_TREE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EVERGREEN_TREE); // üå≤ (`U+1F332`)"] #[doc="# assert_eq!(EVERGREEN_TREE.to_string().as_str(), \"üå≤\");"]
#[doc="```"]
pub static EVERGREEN_TREE :  Emoji = Emoji::new("evergreen tree", Version(1, 0), "üå≤"); // evergreen tree
		
		#[doc="fallen leaf üçÇ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FALLEN_LEAF;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FALLEN_LEAF); // üçÇ (`U+1F342`)"] #[doc="# assert_eq!(FALLEN_LEAF.to_string().as_str(), \"üçÇ\");"]
#[doc="```"]
pub static FALLEN_LEAF :  Emoji = Emoji::new("fallen leaf", Version(0, 6), "üçÇ"); // fallen leaf
		
		#[doc="four leaf clover üçÄ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FOUR_LEAF_CLOVER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FOUR_LEAF_CLOVER); // üçÄ (`U+1F340`)"] #[doc="# assert_eq!(FOUR_LEAF_CLOVER.to_string().as_str(), \"üçÄ\");"]
#[doc="```"]
pub static FOUR_LEAF_CLOVER :  Emoji = Emoji::new("four leaf clover", Version(0, 6), "üçÄ"); // four leaf clover
		
		#[doc="herb üåø"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HERB;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HERB); // üåø (`U+1F33F`)"] #[doc="# assert_eq!(HERB.to_string().as_str(), \"üåø\");"]
#[doc="```"]
pub static HERB :  Emoji = Emoji::new("herb", Version(0, 6), "üåø"); // herb
		
		#[doc="leaf fluttering in wind üçÉ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEAF_FLUTTERING_IN_WIND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEAF_FLUTTERING_IN_WIND); // üçÉ (`U+1F343`)"] #[doc="# assert_eq!(LEAF_FLUTTERING_IN_WIND.to_string().as_str(), \"üçÉ\");"]
#[doc="```"]
pub static LEAF_FLUTTERING_IN_WIND :  Emoji = Emoji::new("leaf fluttering in wind", Version(0, 6), "üçÉ"); // leaf fluttering in wind
		
		#[doc="maple leaf üçÅ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MAPLE_LEAF;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MAPLE_LEAF); // üçÅ (`U+1F341`)"] #[doc="# assert_eq!(MAPLE_LEAF.to_string().as_str(), \"üçÅ\");"]
#[doc="```"]
pub static MAPLE_LEAF :  Emoji = Emoji::new("maple leaf", Version(0, 6), "üçÅ"); // maple leaf
		
		#[doc="palm tree üå¥"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PALM_TREE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PALM_TREE); // üå¥ (`U+1F334`)"] #[doc="# assert_eq!(PALM_TREE.to_string().as_str(), \"üå¥\");"]
#[doc="```"]
pub static PALM_TREE :  Emoji = Emoji::new("palm tree", Version(0, 6), "üå¥"); // palm tree
		
		#[doc="potted plant ü™¥"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POTTED_PLANT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POTTED_PLANT); // ü™¥ (`U+1FAB4`)"] #[doc="# assert_eq!(POTTED_PLANT.to_string().as_str(), \"ü™¥\");"]
#[doc="```"]
pub static POTTED_PLANT :  Emoji = Emoji::new("potted plant", Version(13, 0), "ü™¥"); // potted plant
		
		#[doc="seedling üå±"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SEEDLING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SEEDLING); // üå± (`U+1F331`)"] #[doc="# assert_eq!(SEEDLING.to_string().as_str(), \"üå±\");"]
#[doc="```"]
pub static SEEDLING :  Emoji = Emoji::new("seedling", Version(0, 6), "üå±"); // seedling
		
		#[doc="shamrock ‚òòÔ∏è"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHAMROCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHAMROCK); // ‚òòÔ∏è (`U+2618 U+FE0F`)"] #[doc="# assert_eq!(SHAMROCK.to_string().as_str(), \"‚òòÔ∏è\");"]
#[doc="```"]
pub static SHAMROCK :  Emoji = Emoji::new("shamrock", Version(1, 0), "‚òòÔ∏è"); // shamrock
		
		#[doc="sheaf of rice üåæ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHEAF_OF_RICE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHEAF_OF_RICE); // üåæ (`U+1F33E`)"] #[doc="# assert_eq!(SHEAF_OF_RICE.to_string().as_str(), \"üåæ\");"]
#[doc="```"]
pub static SHEAF_OF_RICE :  Emoji = Emoji::new("sheaf of rice", Version(0, 6), "üåæ"); // sheaf of rice
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // CACTUS
				
				&CACTUS,
				
			],
			
			&[ // DECIDUOUS_TREE
				
				&DECIDUOUS_TREE,
				
			],
			
			&[ // EVERGREEN_TREE
				
				&EVERGREEN_TREE,
				
			],
			
			&[ // FALLEN_LEAF
				
				&FALLEN_LEAF,
				
			],
			
			&[ // FOUR_LEAF_CLOVER
				
				&FOUR_LEAF_CLOVER,
				
			],
			
			&[ // HERB
				
				&HERB,
				
			],
			
			&[ // LEAF_FLUTTERING_IN_WIND
				
				&LEAF_FLUTTERING_IN_WIND,
				
			],
			
			&[ // MAPLE_LEAF
				
				&MAPLE_LEAF,
				
			],
			
			&[ // PALM_TREE
				
				&PALM_TREE,
				
			],
			
			&[ // POTTED_PLANT
				
				&POTTED_PLANT,
				
			],
			
			&[ // SEEDLING
				
				&SEEDLING,
				
			],
			
			&[ // SHAMROCK
				
				&SHAMROCK,
				
			],
			
			&[ // SHEAF_OF_RICE
				
				&SHEAF_OF_RICE,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&CACTUS, // CACTUS
				
			
				
				&DECIDUOUS_TREE, // DECIDUOUS_TREE
				
			
				
				&EVERGREEN_TREE, // EVERGREEN_TREE
				
			
				
				&FALLEN_LEAF, // FALLEN_LEAF
				
			
				
				&FOUR_LEAF_CLOVER, // FOUR_LEAF_CLOVER
				
			
				
				&HERB, // HERB
				
			
				
				&LEAF_FLUTTERING_IN_WIND, // LEAF_FLUTTERING_IN_WIND
				
			
				
				&MAPLE_LEAF, // MAPLE_LEAF
				
			
				
				&PALM_TREE, // PALM_TREE
				
			
				
				&POTTED_PLANT, // POTTED_PLANT
				
			
				
				&SEEDLING, // SEEDLING
				
			
				
				&SHAMROCK, // SHAMROCK
				
			
				
				&SHEAF_OF_RICE, // SHEAF_OF_RICE
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // plant_other
	


	// Emoji iterators

	/// Returns an iterator over all emoji variants of these subgroups grouped by base emojis
	pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
		core::iter::empty()
		
			.chain(animal_amphibian::all_variants())
		
			.chain(animal_bird::all_variants())
		
			.chain(animal_bug::all_variants())
		
			.chain(animal_mammal::all_variants())
		
			.chain(animal_marine::all_variants())
		
			.chain(animal_reptile::all_variants())
		
			.chain(plant_flower::all_variants())
		
			.chain(plant_other::all_variants())
		
	}

	/// Returns an iterator over all base emojis of these subgroups (i.e. one for each static)
	pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
		core::iter::empty()
		
			.chain(animal_amphibian::base_emojis())
		
			.chain(animal_bird::base_emojis())
		
			.chain(animal_bug::base_emojis())
		
			.chain(animal_mammal::base_emojis())
		
			.chain(animal_marine::base_emojis())
		
			.chain(animal_reptile::base_emojis())
		
			.chain(plant_flower::base_emojis())
		
			.chain(plant_other::base_emojis())
		
	}

} // animals_and_nature

/// component ü¶≤üèø
pub mod component {
	use crate::emojis::Emoji;

	
	/// hair_style ü¶≤ü¶±ü¶∞
	pub mod hair_style {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="bald ü¶≤"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BALD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BALD); // ü¶≤ (`U+1F9B2`)"] #[doc="# assert_eq!(BALD.to_string().as_str(), \"ü¶≤\");"]
#[doc="```"]
pub static BALD :  Emoji = Emoji::new("bald", Version(11, 0), "ü¶≤"); // bald
		
		#[doc="curly hair ü¶±"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CURLY_HAIR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CURLY_HAIR); // ü¶± (`U+1F9B1`)"] #[doc="# assert_eq!(CURLY_HAIR.to_string().as_str(), \"ü¶±\");"]
#[doc="```"]
pub static CURLY_HAIR :  Emoji = Emoji::new("curly hair", Version(11, 0), "ü¶±"); // curly hair
		
		#[doc="red hair ü¶∞"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RED_HAIR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RED_HAIR); // ü¶∞ (`U+1F9B0`)"] #[doc="# assert_eq!(RED_HAIR.to_string().as_str(), \"ü¶∞\");"]
#[doc="```"]
pub static RED_HAIR :  Emoji = Emoji::new("red hair", Version(11, 0), "ü¶∞"); // red hair
		
		#[doc="white hair ü¶≥"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHITE_HAIR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHITE_HAIR); // ü¶≥ (`U+1F9B3`)"] #[doc="# assert_eq!(WHITE_HAIR.to_string().as_str(), \"ü¶≥\");"]
#[doc="```"]
pub static WHITE_HAIR :  Emoji = Emoji::new("white hair", Version(11, 0), "ü¶≥"); // white hair
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BALD
				
				&BALD,
				
			],
			
			&[ // CURLY_HAIR
				
				&CURLY_HAIR,
				
			],
			
			&[ // RED_HAIR
				
				&RED_HAIR,
				
			],
			
			&[ // WHITE_HAIR
				
				&WHITE_HAIR,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BALD, // BALD
				
			
				
				&CURLY_HAIR, // CURLY_HAIR
				
			
				
				&RED_HAIR, // RED_HAIR
				
			
				
				&WHITE_HAIR, // WHITE_HAIR
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // hair_style
	
	/// skin_tone üèøüèªüèæ
	pub mod skin_tone {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="dark skin tone üèø"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DARK_SKIN_TONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DARK_SKIN_TONE); // üèø (`U+1F3FF`)"] #[doc="# assert_eq!(DARK_SKIN_TONE.to_string().as_str(), \"üèø\");"]
#[doc="```"]
pub static DARK_SKIN_TONE :  Emoji = Emoji::new("dark skin tone", Version(1, 0), "üèø"); // dark skin tone
		
		#[doc="light skin tone üèª"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LIGHT_SKIN_TONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LIGHT_SKIN_TONE); // üèª (`U+1F3FB`)"] #[doc="# assert_eq!(LIGHT_SKIN_TONE.to_string().as_str(), \"üèª\");"]
#[doc="```"]
pub static LIGHT_SKIN_TONE :  Emoji = Emoji::new("light skin tone", Version(1, 0), "üèª"); // light skin tone
		
		#[doc="medium-dark skin tone üèæ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MEDIUM_DARK_SKIN_TONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MEDIUM_DARK_SKIN_TONE); // üèæ (`U+1F3FE`)"] #[doc="# assert_eq!(MEDIUM_DARK_SKIN_TONE.to_string().as_str(), \"üèæ\");"]
#[doc="```"]
pub static MEDIUM_DARK_SKIN_TONE :  Emoji = Emoji::new("medium-dark skin tone", Version(1, 0), "üèæ"); // medium-dark skin tone
		
		#[doc="medium-light skin tone üèº"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MEDIUM_LIGHT_SKIN_TONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MEDIUM_LIGHT_SKIN_TONE); // üèº (`U+1F3FC`)"] #[doc="# assert_eq!(MEDIUM_LIGHT_SKIN_TONE.to_string().as_str(), \"üèº\");"]
#[doc="```"]
pub static MEDIUM_LIGHT_SKIN_TONE :  Emoji = Emoji::new("medium-light skin tone", Version(1, 0), "üèº"); // medium-light skin tone
		
		#[doc="medium skin tone üèΩ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MEDIUM_SKIN_TONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MEDIUM_SKIN_TONE); // üèΩ (`U+1F3FD`)"] #[doc="# assert_eq!(MEDIUM_SKIN_TONE.to_string().as_str(), \"üèΩ\");"]
#[doc="```"]
pub static MEDIUM_SKIN_TONE :  Emoji = Emoji::new("medium skin tone", Version(1, 0), "üèΩ"); // medium skin tone
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // DARK_SKIN_TONE
				
				&DARK_SKIN_TONE,
				
			],
			
			&[ // LIGHT_SKIN_TONE
				
				&LIGHT_SKIN_TONE,
				
			],
			
			&[ // MEDIUM_DARK_SKIN_TONE
				
				&MEDIUM_DARK_SKIN_TONE,
				
			],
			
			&[ // MEDIUM_LIGHT_SKIN_TONE
				
				&MEDIUM_LIGHT_SKIN_TONE,
				
			],
			
			&[ // MEDIUM_SKIN_TONE
				
				&MEDIUM_SKIN_TONE,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&DARK_SKIN_TONE, // DARK_SKIN_TONE
				
			
				
				&LIGHT_SKIN_TONE, // LIGHT_SKIN_TONE
				
			
				
				&MEDIUM_DARK_SKIN_TONE, // MEDIUM_DARK_SKIN_TONE
				
			
				
				&MEDIUM_LIGHT_SKIN_TONE, // MEDIUM_LIGHT_SKIN_TONE
				
			
				
				&MEDIUM_SKIN_TONE, // MEDIUM_SKIN_TONE
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // skin_tone
	


	// Emoji iterators

	/// Returns an iterator over all emoji variants of these subgroups grouped by base emojis
	pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
		core::iter::empty()
		
			.chain(hair_style::all_variants())
		
			.chain(skin_tone::all_variants())
		
	}

	/// Returns an iterator over all base emojis of these subgroups (i.e. one for each static)
	pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
		core::iter::empty()
		
			.chain(hair_style::base_emojis())
		
			.chain(skin_tone::base_emojis())
		
	}

} // component

/// flags üá¶üá´üè¥üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø
pub mod flags {
	use crate::emojis::Emoji;

	
	/// country_flag üá¶üá´üá¶üáΩüá¶üá±
	pub mod country_flag {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="flag: Afghanistan üá¶üá´"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_AFGHANISTAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_AFGHANISTAN); // üá¶üá´ (`U+1F1E6 U+1F1EB`)"] #[doc="# assert_eq!(FLAG_AFGHANISTAN.to_string().as_str(), \"üá¶üá´\");"]
#[doc="```"]
pub static FLAG_AFGHANISTAN :  Emoji = Emoji::new("flag: Afghanistan", Version(2, 0), "üá¶üá´"); // flag: Afghanistan
		
		#[doc="flag: √Öland Islands üá¶üáΩ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ALAND_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ALAND_ISLANDS); // üá¶üáΩ (`U+1F1E6 U+1F1FD`)"] #[doc="# assert_eq!(FLAG_ALAND_ISLANDS.to_string().as_str(), \"üá¶üáΩ\");"]
#[doc="```"]
pub static FLAG_ALAND_ISLANDS :  Emoji = Emoji::new("flag: √Öland Islands", Version(2, 0), "üá¶üáΩ"); // flag: √Öland Islands
		
		#[doc="flag: Albania üá¶üá±"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ALBANIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ALBANIA); // üá¶üá± (`U+1F1E6 U+1F1F1`)"] #[doc="# assert_eq!(FLAG_ALBANIA.to_string().as_str(), \"üá¶üá±\");"]
#[doc="```"]
pub static FLAG_ALBANIA :  Emoji = Emoji::new("flag: Albania", Version(2, 0), "üá¶üá±"); // flag: Albania
		
		#[doc="flag: Algeria üá©üáø"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ALGERIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ALGERIA); // üá©üáø (`U+1F1E9 U+1F1FF`)"] #[doc="# assert_eq!(FLAG_ALGERIA.to_string().as_str(), \"üá©üáø\");"]
#[doc="```"]
pub static FLAG_ALGERIA :  Emoji = Emoji::new("flag: Algeria", Version(2, 0), "üá©üáø"); // flag: Algeria
		
		#[doc="flag: American Samoa üá¶üá∏"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_AMERICAN_SAMOA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_AMERICAN_SAMOA); // üá¶üá∏ (`U+1F1E6 U+1F1F8`)"] #[doc="# assert_eq!(FLAG_AMERICAN_SAMOA.to_string().as_str(), \"üá¶üá∏\");"]
#[doc="```"]
pub static FLAG_AMERICAN_SAMOA :  Emoji = Emoji::new("flag: American Samoa", Version(2, 0), "üá¶üá∏"); // flag: American Samoa
		
		#[doc="flag: Andorra üá¶üá©"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ANDORRA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ANDORRA); // üá¶üá© (`U+1F1E6 U+1F1E9`)"] #[doc="# assert_eq!(FLAG_ANDORRA.to_string().as_str(), \"üá¶üá©\");"]
#[doc="```"]
pub static FLAG_ANDORRA :  Emoji = Emoji::new("flag: Andorra", Version(2, 0), "üá¶üá©"); // flag: Andorra
		
		#[doc="flag: Angola üá¶üá¥"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ANGOLA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ANGOLA); // üá¶üá¥ (`U+1F1E6 U+1F1F4`)"] #[doc="# assert_eq!(FLAG_ANGOLA.to_string().as_str(), \"üá¶üá¥\");"]
#[doc="```"]
pub static FLAG_ANGOLA :  Emoji = Emoji::new("flag: Angola", Version(2, 0), "üá¶üá¥"); // flag: Angola
		
		#[doc="flag: Anguilla üá¶üáÆ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ANGUILLA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ANGUILLA); // üá¶üáÆ (`U+1F1E6 U+1F1EE`)"] #[doc="# assert_eq!(FLAG_ANGUILLA.to_string().as_str(), \"üá¶üáÆ\");"]
#[doc="```"]
pub static FLAG_ANGUILLA :  Emoji = Emoji::new("flag: Anguilla", Version(2, 0), "üá¶üáÆ"); // flag: Anguilla
		
		#[doc="flag: Antarctica üá¶üá∂"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ANTARCTICA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ANTARCTICA); // üá¶üá∂ (`U+1F1E6 U+1F1F6`)"] #[doc="# assert_eq!(FLAG_ANTARCTICA.to_string().as_str(), \"üá¶üá∂\");"]
#[doc="```"]
pub static FLAG_ANTARCTICA :  Emoji = Emoji::new("flag: Antarctica", Version(2, 0), "üá¶üá∂"); // flag: Antarctica
		
		#[doc="flag: Antigua & Barbuda üá¶üá¨"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ANTIGUA_AND_BARBUDA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ANTIGUA_AND_BARBUDA); // üá¶üá¨ (`U+1F1E6 U+1F1EC`)"] #[doc="# assert_eq!(FLAG_ANTIGUA_AND_BARBUDA.to_string().as_str(), \"üá¶üá¨\");"]
#[doc="```"]
pub static FLAG_ANTIGUA_AND_BARBUDA :  Emoji = Emoji::new("flag: Antigua & Barbuda", Version(2, 0), "üá¶üá¨"); // flag: Antigua & Barbuda
		
		#[doc="flag: Argentina üá¶üá∑"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ARGENTINA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ARGENTINA); // üá¶üá∑ (`U+1F1E6 U+1F1F7`)"] #[doc="# assert_eq!(FLAG_ARGENTINA.to_string().as_str(), \"üá¶üá∑\");"]
#[doc="```"]
pub static FLAG_ARGENTINA :  Emoji = Emoji::new("flag: Argentina", Version(2, 0), "üá¶üá∑"); // flag: Argentina
		
		#[doc="flag: Armenia üá¶üá≤"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ARMENIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ARMENIA); // üá¶üá≤ (`U+1F1E6 U+1F1F2`)"] #[doc="# assert_eq!(FLAG_ARMENIA.to_string().as_str(), \"üá¶üá≤\");"]
#[doc="```"]
pub static FLAG_ARMENIA :  Emoji = Emoji::new("flag: Armenia", Version(2, 0), "üá¶üá≤"); // flag: Armenia
		
		#[doc="flag: Aruba üá¶üáº"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ARUBA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ARUBA); // üá¶üáº (`U+1F1E6 U+1F1FC`)"] #[doc="# assert_eq!(FLAG_ARUBA.to_string().as_str(), \"üá¶üáº\");"]
#[doc="```"]
pub static FLAG_ARUBA :  Emoji = Emoji::new("flag: Aruba", Version(2, 0), "üá¶üáº"); // flag: Aruba
		
		#[doc="flag: Ascension Island üá¶üá®"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ASCENSION_ISLAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ASCENSION_ISLAND); // üá¶üá® (`U+1F1E6 U+1F1E8`)"] #[doc="# assert_eq!(FLAG_ASCENSION_ISLAND.to_string().as_str(), \"üá¶üá®\");"]
#[doc="```"]
pub static FLAG_ASCENSION_ISLAND :  Emoji = Emoji::new("flag: Ascension Island", Version(2, 0), "üá¶üá®"); // flag: Ascension Island
		
		#[doc="flag: Australia üá¶üá∫"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_AUSTRALIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_AUSTRALIA); // üá¶üá∫ (`U+1F1E6 U+1F1FA`)"] #[doc="# assert_eq!(FLAG_AUSTRALIA.to_string().as_str(), \"üá¶üá∫\");"]
#[doc="```"]
pub static FLAG_AUSTRALIA :  Emoji = Emoji::new("flag: Australia", Version(2, 0), "üá¶üá∫"); // flag: Australia
		
		#[doc="flag: Austria üá¶üáπ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_AUSTRIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_AUSTRIA); // üá¶üáπ (`U+1F1E6 U+1F1F9`)"] #[doc="# assert_eq!(FLAG_AUSTRIA.to_string().as_str(), \"üá¶üáπ\");"]
#[doc="```"]
pub static FLAG_AUSTRIA :  Emoji = Emoji::new("flag: Austria", Version(2, 0), "üá¶üáπ"); // flag: Austria
		
		#[doc="flag: Azerbaijan üá¶üáø"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_AZERBAIJAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_AZERBAIJAN); // üá¶üáø (`U+1F1E6 U+1F1FF`)"] #[doc="# assert_eq!(FLAG_AZERBAIJAN.to_string().as_str(), \"üá¶üáø\");"]
#[doc="```"]
pub static FLAG_AZERBAIJAN :  Emoji = Emoji::new("flag: Azerbaijan", Version(2, 0), "üá¶üáø"); // flag: Azerbaijan
		
		#[doc="flag: Bahamas üáßüá∏"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BAHAMAS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BAHAMAS); // üáßüá∏ (`U+1F1E7 U+1F1F8`)"] #[doc="# assert_eq!(FLAG_BAHAMAS.to_string().as_str(), \"üáßüá∏\");"]
#[doc="```"]
pub static FLAG_BAHAMAS :  Emoji = Emoji::new("flag: Bahamas", Version(2, 0), "üáßüá∏"); // flag: Bahamas
		
		#[doc="flag: Bahrain üáßüá≠"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BAHRAIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BAHRAIN); // üáßüá≠ (`U+1F1E7 U+1F1ED`)"] #[doc="# assert_eq!(FLAG_BAHRAIN.to_string().as_str(), \"üáßüá≠\");"]
#[doc="```"]
pub static FLAG_BAHRAIN :  Emoji = Emoji::new("flag: Bahrain", Version(2, 0), "üáßüá≠"); // flag: Bahrain
		
		#[doc="flag: Bangladesh üáßüá©"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BANGLADESH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BANGLADESH); // üáßüá© (`U+1F1E7 U+1F1E9`)"] #[doc="# assert_eq!(FLAG_BANGLADESH.to_string().as_str(), \"üáßüá©\");"]
#[doc="```"]
pub static FLAG_BANGLADESH :  Emoji = Emoji::new("flag: Bangladesh", Version(2, 0), "üáßüá©"); // flag: Bangladesh
		
		#[doc="flag: Barbados üáßüáß"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BARBADOS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BARBADOS); // üáßüáß (`U+1F1E7 U+1F1E7`)"] #[doc="# assert_eq!(FLAG_BARBADOS.to_string().as_str(), \"üáßüáß\");"]
#[doc="```"]
pub static FLAG_BARBADOS :  Emoji = Emoji::new("flag: Barbados", Version(2, 0), "üáßüáß"); // flag: Barbados
		
		#[doc="flag: Belarus üáßüáæ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BELARUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BELARUS); // üáßüáæ (`U+1F1E7 U+1F1FE`)"] #[doc="# assert_eq!(FLAG_BELARUS.to_string().as_str(), \"üáßüáæ\");"]
#[doc="```"]
pub static FLAG_BELARUS :  Emoji = Emoji::new("flag: Belarus", Version(2, 0), "üáßüáæ"); // flag: Belarus
		
		#[doc="flag: Belgium üáßüá™"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BELGIUM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BELGIUM); // üáßüá™ (`U+1F1E7 U+1F1EA`)"] #[doc="# assert_eq!(FLAG_BELGIUM.to_string().as_str(), \"üáßüá™\");"]
#[doc="```"]
pub static FLAG_BELGIUM :  Emoji = Emoji::new("flag: Belgium", Version(2, 0), "üáßüá™"); // flag: Belgium
		
		#[doc="flag: Belize üáßüáø"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BELIZE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BELIZE); // üáßüáø (`U+1F1E7 U+1F1FF`)"] #[doc="# assert_eq!(FLAG_BELIZE.to_string().as_str(), \"üáßüáø\");"]
#[doc="```"]
pub static FLAG_BELIZE :  Emoji = Emoji::new("flag: Belize", Version(2, 0), "üáßüáø"); // flag: Belize
		
		#[doc="flag: Benin üáßüáØ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BENIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BENIN); // üáßüáØ (`U+1F1E7 U+1F1EF`)"] #[doc="# assert_eq!(FLAG_BENIN.to_string().as_str(), \"üáßüáØ\");"]
#[doc="```"]
pub static FLAG_BENIN :  Emoji = Emoji::new("flag: Benin", Version(2, 0), "üáßüáØ"); // flag: Benin
		
		#[doc="flag: Bermuda üáßüá≤"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BERMUDA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BERMUDA); // üáßüá≤ (`U+1F1E7 U+1F1F2`)"] #[doc="# assert_eq!(FLAG_BERMUDA.to_string().as_str(), \"üáßüá≤\");"]
#[doc="```"]
pub static FLAG_BERMUDA :  Emoji = Emoji::new("flag: Bermuda", Version(2, 0), "üáßüá≤"); // flag: Bermuda
		
		#[doc="flag: Bhutan üáßüáπ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BHUTAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BHUTAN); // üáßüáπ (`U+1F1E7 U+1F1F9`)"] #[doc="# assert_eq!(FLAG_BHUTAN.to_string().as_str(), \"üáßüáπ\");"]
#[doc="```"]
pub static FLAG_BHUTAN :  Emoji = Emoji::new("flag: Bhutan", Version(2, 0), "üáßüáπ"); // flag: Bhutan
		
		#[doc="flag: Bolivia üáßüá¥"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BOLIVIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BOLIVIA); // üáßüá¥ (`U+1F1E7 U+1F1F4`)"] #[doc="# assert_eq!(FLAG_BOLIVIA.to_string().as_str(), \"üáßüá¥\");"]
#[doc="```"]
pub static FLAG_BOLIVIA :  Emoji = Emoji::new("flag: Bolivia", Version(2, 0), "üáßüá¥"); // flag: Bolivia
		
		#[doc="flag: Bosnia & Herzegovina üáßüá¶"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BOSNIA_AND_HERZEGOVINA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BOSNIA_AND_HERZEGOVINA); // üáßüá¶ (`U+1F1E7 U+1F1E6`)"] #[doc="# assert_eq!(FLAG_BOSNIA_AND_HERZEGOVINA.to_string().as_str(), \"üáßüá¶\");"]
#[doc="```"]
pub static FLAG_BOSNIA_AND_HERZEGOVINA :  Emoji = Emoji::new("flag: Bosnia & Herzegovina", Version(2, 0), "üáßüá¶"); // flag: Bosnia & Herzegovina
		
		#[doc="flag: Botswana üáßüáº"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BOTSWANA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BOTSWANA); // üáßüáº (`U+1F1E7 U+1F1FC`)"] #[doc="# assert_eq!(FLAG_BOTSWANA.to_string().as_str(), \"üáßüáº\");"]
#[doc="```"]
pub static FLAG_BOTSWANA :  Emoji = Emoji::new("flag: Botswana", Version(2, 0), "üáßüáº"); // flag: Botswana
		
		#[doc="flag: Bouvet Island üáßüáª"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BOUVET_ISLAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BOUVET_ISLAND); // üáßüáª (`U+1F1E7 U+1F1FB`)"] #[doc="# assert_eq!(FLAG_BOUVET_ISLAND.to_string().as_str(), \"üáßüáª\");"]
#[doc="```"]
pub static FLAG_BOUVET_ISLAND :  Emoji = Emoji::new("flag: Bouvet Island", Version(2, 0), "üáßüáª"); // flag: Bouvet Island
		
		#[doc="flag: Brazil üáßüá∑"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BRAZIL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BRAZIL); // üáßüá∑ (`U+1F1E7 U+1F1F7`)"] #[doc="# assert_eq!(FLAG_BRAZIL.to_string().as_str(), \"üáßüá∑\");"]
#[doc="```"]
pub static FLAG_BRAZIL :  Emoji = Emoji::new("flag: Brazil", Version(2, 0), "üáßüá∑"); // flag: Brazil
		
		#[doc="flag: British Indian Ocean Territory üáÆüá¥"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BRITISH_INDIAN_OCEAN_TERRITORY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BRITISH_INDIAN_OCEAN_TERRITORY); // üáÆüá¥ (`U+1F1EE U+1F1F4`)"] #[doc="# assert_eq!(FLAG_BRITISH_INDIAN_OCEAN_TERRITORY.to_string().as_str(), \"üáÆüá¥\");"]
#[doc="```"]
pub static FLAG_BRITISH_INDIAN_OCEAN_TERRITORY :  Emoji = Emoji::new("flag: British Indian Ocean Territory", Version(2, 0), "üáÆüá¥"); // flag: British Indian Ocean Territory
		
		#[doc="flag: British Virgin Islands üáªüá¨"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BRITISH_VIRGIN_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BRITISH_VIRGIN_ISLANDS); // üáªüá¨ (`U+1F1FB U+1F1EC`)"] #[doc="# assert_eq!(FLAG_BRITISH_VIRGIN_ISLANDS.to_string().as_str(), \"üáªüá¨\");"]
#[doc="```"]
pub static FLAG_BRITISH_VIRGIN_ISLANDS :  Emoji = Emoji::new("flag: British Virgin Islands", Version(2, 0), "üáªüá¨"); // flag: British Virgin Islands
		
		#[doc="flag: Brunei üáßüá≥"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BRUNEI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BRUNEI); // üáßüá≥ (`U+1F1E7 U+1F1F3`)"] #[doc="# assert_eq!(FLAG_BRUNEI.to_string().as_str(), \"üáßüá≥\");"]
#[doc="```"]
pub static FLAG_BRUNEI :  Emoji = Emoji::new("flag: Brunei", Version(2, 0), "üáßüá≥"); // flag: Brunei
		
		#[doc="flag: Bulgaria üáßüá¨"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BULGARIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BULGARIA); // üáßüá¨ (`U+1F1E7 U+1F1EC`)"] #[doc="# assert_eq!(FLAG_BULGARIA.to_string().as_str(), \"üáßüá¨\");"]
#[doc="```"]
pub static FLAG_BULGARIA :  Emoji = Emoji::new("flag: Bulgaria", Version(2, 0), "üáßüá¨"); // flag: Bulgaria
		
		#[doc="flag: Burkina Faso üáßüá´"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BURKINA_FASO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BURKINA_FASO); // üáßüá´ (`U+1F1E7 U+1F1EB`)"] #[doc="# assert_eq!(FLAG_BURKINA_FASO.to_string().as_str(), \"üáßüá´\");"]
#[doc="```"]
pub static FLAG_BURKINA_FASO :  Emoji = Emoji::new("flag: Burkina Faso", Version(2, 0), "üáßüá´"); // flag: Burkina Faso
		
		#[doc="flag: Burundi üáßüáÆ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BURUNDI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BURUNDI); // üáßüáÆ (`U+1F1E7 U+1F1EE`)"] #[doc="# assert_eq!(FLAG_BURUNDI.to_string().as_str(), \"üáßüáÆ\");"]
#[doc="```"]
pub static FLAG_BURUNDI :  Emoji = Emoji::new("flag: Burundi", Version(2, 0), "üáßüáÆ"); // flag: Burundi
		
		#[doc="flag: Cambodia üá∞üá≠"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CAMBODIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CAMBODIA); // üá∞üá≠ (`U+1F1F0 U+1F1ED`)"] #[doc="# assert_eq!(FLAG_CAMBODIA.to_string().as_str(), \"üá∞üá≠\");"]
#[doc="```"]
pub static FLAG_CAMBODIA :  Emoji = Emoji::new("flag: Cambodia", Version(2, 0), "üá∞üá≠"); // flag: Cambodia
		
		#[doc="flag: Cameroon üá®üá≤"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CAMEROON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CAMEROON); // üá®üá≤ (`U+1F1E8 U+1F1F2`)"] #[doc="# assert_eq!(FLAG_CAMEROON.to_string().as_str(), \"üá®üá≤\");"]
#[doc="```"]
pub static FLAG_CAMEROON :  Emoji = Emoji::new("flag: Cameroon", Version(2, 0), "üá®üá≤"); // flag: Cameroon
		
		#[doc="flag: Canada üá®üá¶"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CANADA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CANADA); // üá®üá¶ (`U+1F1E8 U+1F1E6`)"] #[doc="# assert_eq!(FLAG_CANADA.to_string().as_str(), \"üá®üá¶\");"]
#[doc="```"]
pub static FLAG_CANADA :  Emoji = Emoji::new("flag: Canada", Version(2, 0), "üá®üá¶"); // flag: Canada
		
		#[doc="flag: Canary Islands üáÆüá®"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CANARY_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CANARY_ISLANDS); // üáÆüá® (`U+1F1EE U+1F1E8`)"] #[doc="# assert_eq!(FLAG_CANARY_ISLANDS.to_string().as_str(), \"üáÆüá®\");"]
#[doc="```"]
pub static FLAG_CANARY_ISLANDS :  Emoji = Emoji::new("flag: Canary Islands", Version(2, 0), "üáÆüá®"); // flag: Canary Islands
		
		#[doc="flag: Cape Verde üá®üáª"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CAPE_VERDE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CAPE_VERDE); // üá®üáª (`U+1F1E8 U+1F1FB`)"] #[doc="# assert_eq!(FLAG_CAPE_VERDE.to_string().as_str(), \"üá®üáª\");"]
#[doc="```"]
pub static FLAG_CAPE_VERDE :  Emoji = Emoji::new("flag: Cape Verde", Version(2, 0), "üá®üáª"); // flag: Cape Verde
		
		#[doc="flag: Caribbean Netherlands üáßüá∂"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CARIBBEAN_NETHERLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CARIBBEAN_NETHERLANDS); // üáßüá∂ (`U+1F1E7 U+1F1F6`)"] #[doc="# assert_eq!(FLAG_CARIBBEAN_NETHERLANDS.to_string().as_str(), \"üáßüá∂\");"]
#[doc="```"]
pub static FLAG_CARIBBEAN_NETHERLANDS :  Emoji = Emoji::new("flag: Caribbean Netherlands", Version(2, 0), "üáßüá∂"); // flag: Caribbean Netherlands
		
		#[doc="flag: Cayman Islands üá∞üáæ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CAYMAN_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CAYMAN_ISLANDS); // üá∞üáæ (`U+1F1F0 U+1F1FE`)"] #[doc="# assert_eq!(FLAG_CAYMAN_ISLANDS.to_string().as_str(), \"üá∞üáæ\");"]
#[doc="```"]
pub static FLAG_CAYMAN_ISLANDS :  Emoji = Emoji::new("flag: Cayman Islands", Version(2, 0), "üá∞üáæ"); // flag: Cayman Islands
		
		#[doc="flag: Central African Republic üá®üá´"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CENTRAL_AFRICAN_REPUBLIC;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CENTRAL_AFRICAN_REPUBLIC); // üá®üá´ (`U+1F1E8 U+1F1EB`)"] #[doc="# assert_eq!(FLAG_CENTRAL_AFRICAN_REPUBLIC.to_string().as_str(), \"üá®üá´\");"]
#[doc="```"]
pub static FLAG_CENTRAL_AFRICAN_REPUBLIC :  Emoji = Emoji::new("flag: Central African Republic", Version(2, 0), "üá®üá´"); // flag: Central African Republic
		
		#[doc="flag: Ceuta & Melilla üá™üá¶"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CEUTA_AND_MELILLA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CEUTA_AND_MELILLA); // üá™üá¶ (`U+1F1EA U+1F1E6`)"] #[doc="# assert_eq!(FLAG_CEUTA_AND_MELILLA.to_string().as_str(), \"üá™üá¶\");"]
#[doc="```"]
pub static FLAG_CEUTA_AND_MELILLA :  Emoji = Emoji::new("flag: Ceuta & Melilla", Version(2, 0), "üá™üá¶"); // flag: Ceuta & Melilla
		
		#[doc="flag: Chad üáπüá©"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CHAD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CHAD); // üáπüá© (`U+1F1F9 U+1F1E9`)"] #[doc="# assert_eq!(FLAG_CHAD.to_string().as_str(), \"üáπüá©\");"]
#[doc="```"]
pub static FLAG_CHAD :  Emoji = Emoji::new("flag: Chad", Version(2, 0), "üáπüá©"); // flag: Chad
		
		#[doc="flag: Chile üá®üá±"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CHILE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CHILE); // üá®üá± (`U+1F1E8 U+1F1F1`)"] #[doc="# assert_eq!(FLAG_CHILE.to_string().as_str(), \"üá®üá±\");"]
#[doc="```"]
pub static FLAG_CHILE :  Emoji = Emoji::new("flag: Chile", Version(2, 0), "üá®üá±"); // flag: Chile
		
		#[doc="flag: China üá®üá≥"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CHINA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CHINA); // üá®üá≥ (`U+1F1E8 U+1F1F3`)"] #[doc="# assert_eq!(FLAG_CHINA.to_string().as_str(), \"üá®üá≥\");"]
#[doc="```"]
pub static FLAG_CHINA :  Emoji = Emoji::new("flag: China", Version(0, 6), "üá®üá≥"); // flag: China
		
		#[doc="flag: Christmas Island üá®üáΩ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CHRISTMAS_ISLAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CHRISTMAS_ISLAND); // üá®üáΩ (`U+1F1E8 U+1F1FD`)"] #[doc="# assert_eq!(FLAG_CHRISTMAS_ISLAND.to_string().as_str(), \"üá®üáΩ\");"]
#[doc="```"]
pub static FLAG_CHRISTMAS_ISLAND :  Emoji = Emoji::new("flag: Christmas Island", Version(2, 0), "üá®üáΩ"); // flag: Christmas Island
		
		#[doc="flag: Clipperton Island üá®üáµ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CLIPPERTON_ISLAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CLIPPERTON_ISLAND); // üá®üáµ (`U+1F1E8 U+1F1F5`)"] #[doc="# assert_eq!(FLAG_CLIPPERTON_ISLAND.to_string().as_str(), \"üá®üáµ\");"]
#[doc="```"]
pub static FLAG_CLIPPERTON_ISLAND :  Emoji = Emoji::new("flag: Clipperton Island", Version(2, 0), "üá®üáµ"); // flag: Clipperton Island
		
		#[doc="flag: Cocos (Keeling) Islands üá®üá®"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_COCOS_KEELING_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_COCOS_KEELING_ISLANDS); // üá®üá® (`U+1F1E8 U+1F1E8`)"] #[doc="# assert_eq!(FLAG_COCOS_KEELING_ISLANDS.to_string().as_str(), \"üá®üá®\");"]
#[doc="```"]
pub static FLAG_COCOS_KEELING_ISLANDS :  Emoji = Emoji::new("flag: Cocos (Keeling) Islands", Version(2, 0), "üá®üá®"); // flag: Cocos (Keeling) Islands
		
		#[doc="flag: Colombia üá®üá¥"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_COLOMBIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_COLOMBIA); // üá®üá¥ (`U+1F1E8 U+1F1F4`)"] #[doc="# assert_eq!(FLAG_COLOMBIA.to_string().as_str(), \"üá®üá¥\");"]
#[doc="```"]
pub static FLAG_COLOMBIA :  Emoji = Emoji::new("flag: Colombia", Version(2, 0), "üá®üá¥"); // flag: Colombia
		
		#[doc="flag: Comoros üá∞üá≤"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_COMOROS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_COMOROS); // üá∞üá≤ (`U+1F1F0 U+1F1F2`)"] #[doc="# assert_eq!(FLAG_COMOROS.to_string().as_str(), \"üá∞üá≤\");"]
#[doc="```"]
pub static FLAG_COMOROS :  Emoji = Emoji::new("flag: Comoros", Version(2, 0), "üá∞üá≤"); // flag: Comoros
		
		#[doc="flag: Congo - Brazzaville üá®üá¨"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CONGO_BRAZZAVILLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CONGO_BRAZZAVILLE); // üá®üá¨ (`U+1F1E8 U+1F1EC`)"] #[doc="# assert_eq!(FLAG_CONGO_BRAZZAVILLE.to_string().as_str(), \"üá®üá¨\");"]
#[doc="```"]
pub static FLAG_CONGO_BRAZZAVILLE :  Emoji = Emoji::new("flag: Congo - Brazzaville", Version(2, 0), "üá®üá¨"); // flag: Congo - Brazzaville
		
		#[doc="flag: Congo - Kinshasa üá®üá©"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CONGO_KINSHASA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CONGO_KINSHASA); // üá®üá© (`U+1F1E8 U+1F1E9`)"] #[doc="# assert_eq!(FLAG_CONGO_KINSHASA.to_string().as_str(), \"üá®üá©\");"]
#[doc="```"]
pub static FLAG_CONGO_KINSHASA :  Emoji = Emoji::new("flag: Congo - Kinshasa", Version(2, 0), "üá®üá©"); // flag: Congo - Kinshasa
		
		#[doc="flag: Cook Islands üá®üá∞"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_COOK_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_COOK_ISLANDS); // üá®üá∞ (`U+1F1E8 U+1F1F0`)"] #[doc="# assert_eq!(FLAG_COOK_ISLANDS.to_string().as_str(), \"üá®üá∞\");"]
#[doc="```"]
pub static FLAG_COOK_ISLANDS :  Emoji = Emoji::new("flag: Cook Islands", Version(2, 0), "üá®üá∞"); // flag: Cook Islands
		
		#[doc="flag: Costa Rica üá®üá∑"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_COSTA_RICA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_COSTA_RICA); // üá®üá∑ (`U+1F1E8 U+1F1F7`)"] #[doc="# assert_eq!(FLAG_COSTA_RICA.to_string().as_str(), \"üá®üá∑\");"]
#[doc="```"]
pub static FLAG_COSTA_RICA :  Emoji = Emoji::new("flag: Costa Rica", Version(2, 0), "üá®üá∑"); // flag: Costa Rica
		
		#[doc="flag: C√¥te d‚ÄôIvoire üá®üáÆ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_COTE_D_IVOIRE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_COTE_D_IVOIRE); // üá®üáÆ (`U+1F1E8 U+1F1EE`)"] #[doc="# assert_eq!(FLAG_COTE_D_IVOIRE.to_string().as_str(), \"üá®üáÆ\");"]
#[doc="```"]
pub static FLAG_COTE_D_IVOIRE :  Emoji = Emoji::new("flag: C√¥te d‚ÄôIvoire", Version(2, 0), "üá®üáÆ"); // flag: C√¥te d‚ÄôIvoire
		
		#[doc="flag: Croatia üá≠üá∑"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CROATIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CROATIA); // üá≠üá∑ (`U+1F1ED U+1F1F7`)"] #[doc="# assert_eq!(FLAG_CROATIA.to_string().as_str(), \"üá≠üá∑\");"]
#[doc="```"]
pub static FLAG_CROATIA :  Emoji = Emoji::new("flag: Croatia", Version(2, 0), "üá≠üá∑"); // flag: Croatia
		
		#[doc="flag: Cuba üá®üá∫"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CUBA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CUBA); // üá®üá∫ (`U+1F1E8 U+1F1FA`)"] #[doc="# assert_eq!(FLAG_CUBA.to_string().as_str(), \"üá®üá∫\");"]
#[doc="```"]
pub static FLAG_CUBA :  Emoji = Emoji::new("flag: Cuba", Version(2, 0), "üá®üá∫"); // flag: Cuba
		
		#[doc="flag: Cura√ßao üá®üáº"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CURACAO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CURACAO); // üá®üáº (`U+1F1E8 U+1F1FC`)"] #[doc="# assert_eq!(FLAG_CURACAO.to_string().as_str(), \"üá®üáº\");"]
#[doc="```"]
pub static FLAG_CURACAO :  Emoji = Emoji::new("flag: Cura√ßao", Version(2, 0), "üá®üáº"); // flag: Cura√ßao
		
		#[doc="flag: Cyprus üá®üáæ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CYPRUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CYPRUS); // üá®üáæ (`U+1F1E8 U+1F1FE`)"] #[doc="# assert_eq!(FLAG_CYPRUS.to_string().as_str(), \"üá®üáæ\");"]
#[doc="```"]
pub static FLAG_CYPRUS :  Emoji = Emoji::new("flag: Cyprus", Version(2, 0), "üá®üáæ"); // flag: Cyprus
		
		#[doc="flag: Czechia üá®üáø"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CZECHIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CZECHIA); // üá®üáø (`U+1F1E8 U+1F1FF`)"] #[doc="# assert_eq!(FLAG_CZECHIA.to_string().as_str(), \"üá®üáø\");"]
#[doc="```"]
pub static FLAG_CZECHIA :  Emoji = Emoji::new("flag: Czechia", Version(2, 0), "üá®üáø"); // flag: Czechia
		
		#[doc="flag: Denmark üá©üá∞"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_DENMARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_DENMARK); // üá©üá∞ (`U+1F1E9 U+1F1F0`)"] #[doc="# assert_eq!(FLAG_DENMARK.to_string().as_str(), \"üá©üá∞\");"]
#[doc="```"]
pub static FLAG_DENMARK :  Emoji = Emoji::new("flag: Denmark", Version(2, 0), "üá©üá∞"); // flag: Denmark
		
		#[doc="flag: Diego Garcia üá©üá¨"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_DIEGO_GARCIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_DIEGO_GARCIA); // üá©üá¨ (`U+1F1E9 U+1F1EC`)"] #[doc="# assert_eq!(FLAG_DIEGO_GARCIA.to_string().as_str(), \"üá©üá¨\");"]
#[doc="```"]
pub static FLAG_DIEGO_GARCIA :  Emoji = Emoji::new("flag: Diego Garcia", Version(2, 0), "üá©üá¨"); // flag: Diego Garcia
		
		#[doc="flag: Djibouti üá©üáØ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_DJIBOUTI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_DJIBOUTI); // üá©üáØ (`U+1F1E9 U+1F1EF`)"] #[doc="# assert_eq!(FLAG_DJIBOUTI.to_string().as_str(), \"üá©üáØ\");"]
#[doc="```"]
pub static FLAG_DJIBOUTI :  Emoji = Emoji::new("flag: Djibouti", Version(2, 0), "üá©üáØ"); // flag: Djibouti
		
		#[doc="flag: Dominica üá©üá≤"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_DOMINICA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_DOMINICA); // üá©üá≤ (`U+1F1E9 U+1F1F2`)"] #[doc="# assert_eq!(FLAG_DOMINICA.to_string().as_str(), \"üá©üá≤\");"]
#[doc="```"]
pub static FLAG_DOMINICA :  Emoji = Emoji::new("flag: Dominica", Version(2, 0), "üá©üá≤"); // flag: Dominica
		
		#[doc="flag: Dominican Republic üá©üá¥"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_DOMINICAN_REPUBLIC;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_DOMINICAN_REPUBLIC); // üá©üá¥ (`U+1F1E9 U+1F1F4`)"] #[doc="# assert_eq!(FLAG_DOMINICAN_REPUBLIC.to_string().as_str(), \"üá©üá¥\");"]
#[doc="```"]
pub static FLAG_DOMINICAN_REPUBLIC :  Emoji = Emoji::new("flag: Dominican Republic", Version(2, 0), "üá©üá¥"); // flag: Dominican Republic
		
		#[doc="flag: Ecuador üá™üá®"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ECUADOR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ECUADOR); // üá™üá® (`U+1F1EA U+1F1E8`)"] #[doc="# assert_eq!(FLAG_ECUADOR.to_string().as_str(), \"üá™üá®\");"]
#[doc="```"]
pub static FLAG_ECUADOR :  Emoji = Emoji::new("flag: Ecuador", Version(2, 0), "üá™üá®"); // flag: Ecuador
		
		#[doc="flag: Egypt üá™üá¨"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_EGYPT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_EGYPT); // üá™üá¨ (`U+1F1EA U+1F1EC`)"] #[doc="# assert_eq!(FLAG_EGYPT.to_string().as_str(), \"üá™üá¨\");"]
#[doc="```"]
pub static FLAG_EGYPT :  Emoji = Emoji::new("flag: Egypt", Version(2, 0), "üá™üá¨"); // flag: Egypt
		
		#[doc="flag: El Salvador üá∏üáª"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_EL_SALVADOR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_EL_SALVADOR); // üá∏üáª (`U+1F1F8 U+1F1FB`)"] #[doc="# assert_eq!(FLAG_EL_SALVADOR.to_string().as_str(), \"üá∏üáª\");"]
#[doc="```"]
pub static FLAG_EL_SALVADOR :  Emoji = Emoji::new("flag: El Salvador", Version(2, 0), "üá∏üáª"); // flag: El Salvador
		
		#[doc="flag: Equatorial Guinea üá¨üá∂"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_EQUATORIAL_GUINEA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_EQUATORIAL_GUINEA); // üá¨üá∂ (`U+1F1EC U+1F1F6`)"] #[doc="# assert_eq!(FLAG_EQUATORIAL_GUINEA.to_string().as_str(), \"üá¨üá∂\");"]
#[doc="```"]
pub static FLAG_EQUATORIAL_GUINEA :  Emoji = Emoji::new("flag: Equatorial Guinea", Version(2, 0), "üá¨üá∂"); // flag: Equatorial Guinea
		
		#[doc="flag: Eritrea üá™üá∑"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ERITREA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ERITREA); // üá™üá∑ (`U+1F1EA U+1F1F7`)"] #[doc="# assert_eq!(FLAG_ERITREA.to_string().as_str(), \"üá™üá∑\");"]
#[doc="```"]
pub static FLAG_ERITREA :  Emoji = Emoji::new("flag: Eritrea", Version(2, 0), "üá™üá∑"); // flag: Eritrea
		
		#[doc="flag: Estonia üá™üá™"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ESTONIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ESTONIA); // üá™üá™ (`U+1F1EA U+1F1EA`)"] #[doc="# assert_eq!(FLAG_ESTONIA.to_string().as_str(), \"üá™üá™\");"]
#[doc="```"]
pub static FLAG_ESTONIA :  Emoji = Emoji::new("flag: Estonia", Version(2, 0), "üá™üá™"); // flag: Estonia
		
		#[doc="flag: Eswatini üá∏üáø"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ESWATINI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ESWATINI); // üá∏üáø (`U+1F1F8 U+1F1FF`)"] #[doc="# assert_eq!(FLAG_ESWATINI.to_string().as_str(), \"üá∏üáø\");"]
#[doc="```"]
pub static FLAG_ESWATINI :  Emoji = Emoji::new("flag: Eswatini", Version(2, 0), "üá∏üáø"); // flag: Eswatini
		
		#[doc="flag: Ethiopia üá™üáπ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ETHIOPIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ETHIOPIA); // üá™üáπ (`U+1F1EA U+1F1F9`)"] #[doc="# assert_eq!(FLAG_ETHIOPIA.to_string().as_str(), \"üá™üáπ\");"]
#[doc="```"]
pub static FLAG_ETHIOPIA :  Emoji = Emoji::new("flag: Ethiopia", Version(2, 0), "üá™üáπ"); // flag: Ethiopia
		
		#[doc="flag: European Union üá™üá∫"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_EUROPEAN_UNION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_EUROPEAN_UNION); // üá™üá∫ (`U+1F1EA U+1F1FA`)"] #[doc="# assert_eq!(FLAG_EUROPEAN_UNION.to_string().as_str(), \"üá™üá∫\");"]
#[doc="```"]
pub static FLAG_EUROPEAN_UNION :  Emoji = Emoji::new("flag: European Union", Version(2, 0), "üá™üá∫"); // flag: European Union
		
		#[doc="flag: Falkland Islands üá´üá∞"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_FALKLAND_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_FALKLAND_ISLANDS); // üá´üá∞ (`U+1F1EB U+1F1F0`)"] #[doc="# assert_eq!(FLAG_FALKLAND_ISLANDS.to_string().as_str(), \"üá´üá∞\");"]
#[doc="```"]
pub static FLAG_FALKLAND_ISLANDS :  Emoji = Emoji::new("flag: Falkland Islands", Version(2, 0), "üá´üá∞"); // flag: Falkland Islands
		
		#[doc="flag: Faroe Islands üá´üá¥"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_FAROE_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_FAROE_ISLANDS); // üá´üá¥ (`U+1F1EB U+1F1F4`)"] #[doc="# assert_eq!(FLAG_FAROE_ISLANDS.to_string().as_str(), \"üá´üá¥\");"]
#[doc="```"]
pub static FLAG_FAROE_ISLANDS :  Emoji = Emoji::new("flag: Faroe Islands", Version(2, 0), "üá´üá¥"); // flag: Faroe Islands
		
		#[doc="flag: Fiji üá´üáØ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_FIJI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_FIJI); // üá´üáØ (`U+1F1EB U+1F1EF`)"] #[doc="# assert_eq!(FLAG_FIJI.to_string().as_str(), \"üá´üáØ\");"]
#[doc="```"]
pub static FLAG_FIJI :  Emoji = Emoji::new("flag: Fiji", Version(2, 0), "üá´üáØ"); // flag: Fiji
		
		#[doc="flag: Finland üá´üáÆ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_FINLAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_FINLAND); // üá´üáÆ (`U+1F1EB U+1F1EE`)"] #[doc="# assert_eq!(FLAG_FINLAND.to_string().as_str(), \"üá´üáÆ\");"]
#[doc="```"]
pub static FLAG_FINLAND :  Emoji = Emoji::new("flag: Finland", Version(2, 0), "üá´üáÆ"); // flag: Finland
		
		#[doc="flag: France üá´üá∑"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_FRANCE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_FRANCE); // üá´üá∑ (`U+1F1EB U+1F1F7`)"] #[doc="# assert_eq!(FLAG_FRANCE.to_string().as_str(), \"üá´üá∑\");"]
#[doc="```"]
pub static FLAG_FRANCE :  Emoji = Emoji::new("flag: France", Version(0, 6), "üá´üá∑"); // flag: France
		
		#[doc="flag: French Guiana üá¨üá´"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_FRENCH_GUIANA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_FRENCH_GUIANA); // üá¨üá´ (`U+1F1EC U+1F1EB`)"] #[doc="# assert_eq!(FLAG_FRENCH_GUIANA.to_string().as_str(), \"üá¨üá´\");"]
#[doc="```"]
pub static FLAG_FRENCH_GUIANA :  Emoji = Emoji::new("flag: French Guiana", Version(2, 0), "üá¨üá´"); // flag: French Guiana
		
		#[doc="flag: French Polynesia üáµüá´"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_FRENCH_POLYNESIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_FRENCH_POLYNESIA); // üáµüá´ (`U+1F1F5 U+1F1EB`)"] #[doc="# assert_eq!(FLAG_FRENCH_POLYNESIA.to_string().as_str(), \"üáµüá´\");"]
#[doc="```"]
pub static FLAG_FRENCH_POLYNESIA :  Emoji = Emoji::new("flag: French Polynesia", Version(2, 0), "üáµüá´"); // flag: French Polynesia
		
		#[doc="flag: French Southern Territories üáπüá´"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_FRENCH_SOUTHERN_TERRITORIES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_FRENCH_SOUTHERN_TERRITORIES); // üáπüá´ (`U+1F1F9 U+1F1EB`)"] #[doc="# assert_eq!(FLAG_FRENCH_SOUTHERN_TERRITORIES.to_string().as_str(), \"üáπüá´\");"]
#[doc="```"]
pub static FLAG_FRENCH_SOUTHERN_TERRITORIES :  Emoji = Emoji::new("flag: French Southern Territories", Version(2, 0), "üáπüá´"); // flag: French Southern Territories
		
		#[doc="flag: Gabon üá¨üá¶"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GABON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GABON); // üá¨üá¶ (`U+1F1EC U+1F1E6`)"] #[doc="# assert_eq!(FLAG_GABON.to_string().as_str(), \"üá¨üá¶\");"]
#[doc="```"]
pub static FLAG_GABON :  Emoji = Emoji::new("flag: Gabon", Version(2, 0), "üá¨üá¶"); // flag: Gabon
		
		#[doc="flag: Gambia üá¨üá≤"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GAMBIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GAMBIA); // üá¨üá≤ (`U+1F1EC U+1F1F2`)"] #[doc="# assert_eq!(FLAG_GAMBIA.to_string().as_str(), \"üá¨üá≤\");"]
#[doc="```"]
pub static FLAG_GAMBIA :  Emoji = Emoji::new("flag: Gambia", Version(2, 0), "üá¨üá≤"); // flag: Gambia
		
		#[doc="flag: Georgia üá¨üá™"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GEORGIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GEORGIA); // üá¨üá™ (`U+1F1EC U+1F1EA`)"] #[doc="# assert_eq!(FLAG_GEORGIA.to_string().as_str(), \"üá¨üá™\");"]
#[doc="```"]
pub static FLAG_GEORGIA :  Emoji = Emoji::new("flag: Georgia", Version(2, 0), "üá¨üá™"); // flag: Georgia
		
		#[doc="flag: Germany üá©üá™"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GERMANY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GERMANY); // üá©üá™ (`U+1F1E9 U+1F1EA`)"] #[doc="# assert_eq!(FLAG_GERMANY.to_string().as_str(), \"üá©üá™\");"]
#[doc="```"]
pub static FLAG_GERMANY :  Emoji = Emoji::new("flag: Germany", Version(0, 6), "üá©üá™"); // flag: Germany
		
		#[doc="flag: Ghana üá¨üá≠"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GHANA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GHANA); // üá¨üá≠ (`U+1F1EC U+1F1ED`)"] #[doc="# assert_eq!(FLAG_GHANA.to_string().as_str(), \"üá¨üá≠\");"]
#[doc="```"]
pub static FLAG_GHANA :  Emoji = Emoji::new("flag: Ghana", Version(2, 0), "üá¨üá≠"); // flag: Ghana
		
		#[doc="flag: Gibraltar üá¨üáÆ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GIBRALTAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GIBRALTAR); // üá¨üáÆ (`U+1F1EC U+1F1EE`)"] #[doc="# assert_eq!(FLAG_GIBRALTAR.to_string().as_str(), \"üá¨üáÆ\");"]
#[doc="```"]
pub static FLAG_GIBRALTAR :  Emoji = Emoji::new("flag: Gibraltar", Version(2, 0), "üá¨üáÆ"); // flag: Gibraltar
		
		#[doc="flag: Greece üá¨üá∑"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GREECE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GREECE); // üá¨üá∑ (`U+1F1EC U+1F1F7`)"] #[doc="# assert_eq!(FLAG_GREECE.to_string().as_str(), \"üá¨üá∑\");"]
#[doc="```"]
pub static FLAG_GREECE :  Emoji = Emoji::new("flag: Greece", Version(2, 0), "üá¨üá∑"); // flag: Greece
		
		#[doc="flag: Greenland üá¨üá±"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GREENLAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GREENLAND); // üá¨üá± (`U+1F1EC U+1F1F1`)"] #[doc="# assert_eq!(FLAG_GREENLAND.to_string().as_str(), \"üá¨üá±\");"]
#[doc="```"]
pub static FLAG_GREENLAND :  Emoji = Emoji::new("flag: Greenland", Version(2, 0), "üá¨üá±"); // flag: Greenland
		
		#[doc="flag: Grenada üá¨üá©"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GRENADA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GRENADA); // üá¨üá© (`U+1F1EC U+1F1E9`)"] #[doc="# assert_eq!(FLAG_GRENADA.to_string().as_str(), \"üá¨üá©\");"]
#[doc="```"]
pub static FLAG_GRENADA :  Emoji = Emoji::new("flag: Grenada", Version(2, 0), "üá¨üá©"); // flag: Grenada
		
		#[doc="flag: Guadeloupe üá¨üáµ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GUADELOUPE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GUADELOUPE); // üá¨üáµ (`U+1F1EC U+1F1F5`)"] #[doc="# assert_eq!(FLAG_GUADELOUPE.to_string().as_str(), \"üá¨üáµ\");"]
#[doc="```"]
pub static FLAG_GUADELOUPE :  Emoji = Emoji::new("flag: Guadeloupe", Version(2, 0), "üá¨üáµ"); // flag: Guadeloupe
		
		#[doc="flag: Guam üá¨üá∫"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GUAM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GUAM); // üá¨üá∫ (`U+1F1EC U+1F1FA`)"] #[doc="# assert_eq!(FLAG_GUAM.to_string().as_str(), \"üá¨üá∫\");"]
#[doc="```"]
pub static FLAG_GUAM :  Emoji = Emoji::new("flag: Guam", Version(2, 0), "üá¨üá∫"); // flag: Guam
		
		#[doc="flag: Guatemala üá¨üáπ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GUATEMALA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GUATEMALA); // üá¨üáπ (`U+1F1EC U+1F1F9`)"] #[doc="# assert_eq!(FLAG_GUATEMALA.to_string().as_str(), \"üá¨üáπ\");"]
#[doc="```"]
pub static FLAG_GUATEMALA :  Emoji = Emoji::new("flag: Guatemala", Version(2, 0), "üá¨üáπ"); // flag: Guatemala
		
		#[doc="flag: Guernsey üá¨üá¨"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GUERNSEY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GUERNSEY); // üá¨üá¨ (`U+1F1EC U+1F1EC`)"] #[doc="# assert_eq!(FLAG_GUERNSEY.to_string().as_str(), \"üá¨üá¨\");"]
#[doc="```"]
pub static FLAG_GUERNSEY :  Emoji = Emoji::new("flag: Guernsey", Version(2, 0), "üá¨üá¨"); // flag: Guernsey
		
		#[doc="flag: Guinea üá¨üá≥"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GUINEA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GUINEA); // üá¨üá≥ (`U+1F1EC U+1F1F3`)"] #[doc="# assert_eq!(FLAG_GUINEA.to_string().as_str(), \"üá¨üá≥\");"]
#[doc="```"]
pub static FLAG_GUINEA :  Emoji = Emoji::new("flag: Guinea", Version(2, 0), "üá¨üá≥"); // flag: Guinea
		
		#[doc="flag: Guinea-Bissau üá¨üáº"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GUINEA_BISSAU;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GUINEA_BISSAU); // üá¨üáº (`U+1F1EC U+1F1FC`)"] #[doc="# assert_eq!(FLAG_GUINEA_BISSAU.to_string().as_str(), \"üá¨üáº\");"]
#[doc="```"]
pub static FLAG_GUINEA_BISSAU :  Emoji = Emoji::new("flag: Guinea-Bissau", Version(2, 0), "üá¨üáº"); // flag: Guinea-Bissau
		
		#[doc="flag: Guyana üá¨üáæ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GUYANA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GUYANA); // üá¨üáæ (`U+1F1EC U+1F1FE`)"] #[doc="# assert_eq!(FLAG_GUYANA.to_string().as_str(), \"üá¨üáæ\");"]
#[doc="```"]
pub static FLAG_GUYANA :  Emoji = Emoji::new("flag: Guyana", Version(2, 0), "üá¨üáæ"); // flag: Guyana
		
		#[doc="flag: Haiti üá≠üáπ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_HAITI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_HAITI); // üá≠üáπ (`U+1F1ED U+1F1F9`)"] #[doc="# assert_eq!(FLAG_HAITI.to_string().as_str(), \"üá≠üáπ\");"]
#[doc="```"]
pub static FLAG_HAITI :  Emoji = Emoji::new("flag: Haiti", Version(2, 0), "üá≠üáπ"); // flag: Haiti
		
		#[doc="flag: Heard & McDonald Islands üá≠üá≤"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_HEARD_AND_MCDONALD_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_HEARD_AND_MCDONALD_ISLANDS); // üá≠üá≤ (`U+1F1ED U+1F1F2`)"] #[doc="# assert_eq!(FLAG_HEARD_AND_MCDONALD_ISLANDS.to_string().as_str(), \"üá≠üá≤\");"]
#[doc="```"]
pub static FLAG_HEARD_AND_MCDONALD_ISLANDS :  Emoji = Emoji::new("flag: Heard & McDonald Islands", Version(2, 0), "üá≠üá≤"); // flag: Heard & McDonald Islands
		
		#[doc="flag: Honduras üá≠üá≥"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_HONDURAS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_HONDURAS); // üá≠üá≥ (`U+1F1ED U+1F1F3`)"] #[doc="# assert_eq!(FLAG_HONDURAS.to_string().as_str(), \"üá≠üá≥\");"]
#[doc="```"]
pub static FLAG_HONDURAS :  Emoji = Emoji::new("flag: Honduras", Version(2, 0), "üá≠üá≥"); // flag: Honduras
		
		#[doc="flag: Hong Kong SAR China üá≠üá∞"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_HONG_KONG_SAR_CHINA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_HONG_KONG_SAR_CHINA); // üá≠üá∞ (`U+1F1ED U+1F1F0`)"] #[doc="# assert_eq!(FLAG_HONG_KONG_SAR_CHINA.to_string().as_str(), \"üá≠üá∞\");"]
#[doc="```"]
pub static FLAG_HONG_KONG_SAR_CHINA :  Emoji = Emoji::new("flag: Hong Kong SAR China", Version(2, 0), "üá≠üá∞"); // flag: Hong Kong SAR China
		
		#[doc="flag: Hungary üá≠üá∫"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_HUNGARY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_HUNGARY); // üá≠üá∫ (`U+1F1ED U+1F1FA`)"] #[doc="# assert_eq!(FLAG_HUNGARY.to_string().as_str(), \"üá≠üá∫\");"]
#[doc="```"]
pub static FLAG_HUNGARY :  Emoji = Emoji::new("flag: Hungary", Version(2, 0), "üá≠üá∫"); // flag: Hungary
		
		#[doc="flag: Iceland üáÆüá∏"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ICELAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ICELAND); // üáÆüá∏ (`U+1F1EE U+1F1F8`)"] #[doc="# assert_eq!(FLAG_ICELAND.to_string().as_str(), \"üáÆüá∏\");"]
#[doc="```"]
pub static FLAG_ICELAND :  Emoji = Emoji::new("flag: Iceland", Version(2, 0), "üáÆüá∏"); // flag: Iceland
		
		#[doc="flag: India üáÆüá≥"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_INDIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_INDIA); // üáÆüá≥ (`U+1F1EE U+1F1F3`)"] #[doc="# assert_eq!(FLAG_INDIA.to_string().as_str(), \"üáÆüá≥\");"]
#[doc="```"]
pub static FLAG_INDIA :  Emoji = Emoji::new("flag: India", Version(2, 0), "üáÆüá≥"); // flag: India
		
		#[doc="flag: Indonesia üáÆüá©"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_INDONESIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_INDONESIA); // üáÆüá© (`U+1F1EE U+1F1E9`)"] #[doc="# assert_eq!(FLAG_INDONESIA.to_string().as_str(), \"üáÆüá©\");"]
#[doc="```"]
pub static FLAG_INDONESIA :  Emoji = Emoji::new("flag: Indonesia", Version(2, 0), "üáÆüá©"); // flag: Indonesia
		
		#[doc="flag: Iran üáÆüá∑"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_IRAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_IRAN); // üáÆüá∑ (`U+1F1EE U+1F1F7`)"] #[doc="# assert_eq!(FLAG_IRAN.to_string().as_str(), \"üáÆüá∑\");"]
#[doc="```"]
pub static FLAG_IRAN :  Emoji = Emoji::new("flag: Iran", Version(2, 0), "üáÆüá∑"); // flag: Iran
		
		#[doc="flag: Iraq üáÆüá∂"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_IRAQ;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_IRAQ); // üáÆüá∂ (`U+1F1EE U+1F1F6`)"] #[doc="# assert_eq!(FLAG_IRAQ.to_string().as_str(), \"üáÆüá∂\");"]
#[doc="```"]
pub static FLAG_IRAQ :  Emoji = Emoji::new("flag: Iraq", Version(2, 0), "üáÆüá∂"); // flag: Iraq
		
		#[doc="flag: Ireland üáÆüá™"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_IRELAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_IRELAND); // üáÆüá™ (`U+1F1EE U+1F1EA`)"] #[doc="# assert_eq!(FLAG_IRELAND.to_string().as_str(), \"üáÆüá™\");"]
#[doc="```"]
pub static FLAG_IRELAND :  Emoji = Emoji::new("flag: Ireland", Version(2, 0), "üáÆüá™"); // flag: Ireland
		
		#[doc="flag: Isle of Man üáÆüá≤"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ISLE_OF_MAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ISLE_OF_MAN); // üáÆüá≤ (`U+1F1EE U+1F1F2`)"] #[doc="# assert_eq!(FLAG_ISLE_OF_MAN.to_string().as_str(), \"üáÆüá≤\");"]
#[doc="```"]
pub static FLAG_ISLE_OF_MAN :  Emoji = Emoji::new("flag: Isle of Man", Version(2, 0), "üáÆüá≤"); // flag: Isle of Man
		
		#[doc="flag: Israel üáÆüá±"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ISRAEL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ISRAEL); // üáÆüá± (`U+1F1EE U+1F1F1`)"] #[doc="# assert_eq!(FLAG_ISRAEL.to_string().as_str(), \"üáÆüá±\");"]
#[doc="```"]
pub static FLAG_ISRAEL :  Emoji = Emoji::new("flag: Israel", Version(2, 0), "üáÆüá±"); // flag: Israel
		
		#[doc="flag: Italy üáÆüáπ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ITALY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ITALY); // üáÆüáπ (`U+1F1EE U+1F1F9`)"] #[doc="# assert_eq!(FLAG_ITALY.to_string().as_str(), \"üáÆüáπ\");"]
#[doc="```"]
pub static FLAG_ITALY :  Emoji = Emoji::new("flag: Italy", Version(0, 6), "üáÆüáπ"); // flag: Italy
		
		#[doc="flag: Jamaica üáØüá≤"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_JAMAICA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_JAMAICA); // üáØüá≤ (`U+1F1EF U+1F1F2`)"] #[doc="# assert_eq!(FLAG_JAMAICA.to_string().as_str(), \"üáØüá≤\");"]
#[doc="```"]
pub static FLAG_JAMAICA :  Emoji = Emoji::new("flag: Jamaica", Version(2, 0), "üáØüá≤"); // flag: Jamaica
		
		#[doc="flag: Japan üáØüáµ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_JAPAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_JAPAN); // üáØüáµ (`U+1F1EF U+1F1F5`)"] #[doc="# assert_eq!(FLAG_JAPAN.to_string().as_str(), \"üáØüáµ\");"]
#[doc="```"]
pub static FLAG_JAPAN :  Emoji = Emoji::new("flag: Japan", Version(0, 6), "üáØüáµ"); // flag: Japan
		
		#[doc="flag: Jersey üáØüá™"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_JERSEY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_JERSEY); // üáØüá™ (`U+1F1EF U+1F1EA`)"] #[doc="# assert_eq!(FLAG_JERSEY.to_string().as_str(), \"üáØüá™\");"]
#[doc="```"]
pub static FLAG_JERSEY :  Emoji = Emoji::new("flag: Jersey", Version(2, 0), "üáØüá™"); // flag: Jersey
		
		#[doc="flag: Jordan üáØüá¥"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_JORDAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_JORDAN); // üáØüá¥ (`U+1F1EF U+1F1F4`)"] #[doc="# assert_eq!(FLAG_JORDAN.to_string().as_str(), \"üáØüá¥\");"]
#[doc="```"]
pub static FLAG_JORDAN :  Emoji = Emoji::new("flag: Jordan", Version(2, 0), "üáØüá¥"); // flag: Jordan
		
		#[doc="flag: Kazakhstan üá∞üáø"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_KAZAKHSTAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_KAZAKHSTAN); // üá∞üáø (`U+1F1F0 U+1F1FF`)"] #[doc="# assert_eq!(FLAG_KAZAKHSTAN.to_string().as_str(), \"üá∞üáø\");"]
#[doc="```"]
pub static FLAG_KAZAKHSTAN :  Emoji = Emoji::new("flag: Kazakhstan", Version(2, 0), "üá∞üáø"); // flag: Kazakhstan
		
		#[doc="flag: Kenya üá∞üá™"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_KENYA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_KENYA); // üá∞üá™ (`U+1F1F0 U+1F1EA`)"] #[doc="# assert_eq!(FLAG_KENYA.to_string().as_str(), \"üá∞üá™\");"]
#[doc="```"]
pub static FLAG_KENYA :  Emoji = Emoji::new("flag: Kenya", Version(2, 0), "üá∞üá™"); // flag: Kenya
		
		#[doc="flag: Kiribati üá∞üáÆ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_KIRIBATI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_KIRIBATI); // üá∞üáÆ (`U+1F1F0 U+1F1EE`)"] #[doc="# assert_eq!(FLAG_KIRIBATI.to_string().as_str(), \"üá∞üáÆ\");"]
#[doc="```"]
pub static FLAG_KIRIBATI :  Emoji = Emoji::new("flag: Kiribati", Version(2, 0), "üá∞üáÆ"); // flag: Kiribati
		
		#[doc="flag: Kosovo üáΩüá∞"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_KOSOVO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_KOSOVO); // üáΩüá∞ (`U+1F1FD U+1F1F0`)"] #[doc="# assert_eq!(FLAG_KOSOVO.to_string().as_str(), \"üáΩüá∞\");"]
#[doc="```"]
pub static FLAG_KOSOVO :  Emoji = Emoji::new("flag: Kosovo", Version(2, 0), "üáΩüá∞"); // flag: Kosovo
		
		#[doc="flag: Kuwait üá∞üáº"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_KUWAIT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_KUWAIT); // üá∞üáº (`U+1F1F0 U+1F1FC`)"] #[doc="# assert_eq!(FLAG_KUWAIT.to_string().as_str(), \"üá∞üáº\");"]
#[doc="```"]
pub static FLAG_KUWAIT :  Emoji = Emoji::new("flag: Kuwait", Version(2, 0), "üá∞üáº"); // flag: Kuwait
		
		#[doc="flag: Kyrgyzstan üá∞üá¨"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_KYRGYZSTAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_KYRGYZSTAN); // üá∞üá¨ (`U+1F1F0 U+1F1EC`)"] #[doc="# assert_eq!(FLAG_KYRGYZSTAN.to_string().as_str(), \"üá∞üá¨\");"]
#[doc="```"]
pub static FLAG_KYRGYZSTAN :  Emoji = Emoji::new("flag: Kyrgyzstan", Version(2, 0), "üá∞üá¨"); // flag: Kyrgyzstan
		
		#[doc="flag: Laos üá±üá¶"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_LAOS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_LAOS); // üá±üá¶ (`U+1F1F1 U+1F1E6`)"] #[doc="# assert_eq!(FLAG_LAOS.to_string().as_str(), \"üá±üá¶\");"]
#[doc="```"]
pub static FLAG_LAOS :  Emoji = Emoji::new("flag: Laos", Version(2, 0), "üá±üá¶"); // flag: Laos
		
		#[doc="flag: Latvia üá±üáª"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_LATVIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_LATVIA); // üá±üáª (`U+1F1F1 U+1F1FB`)"] #[doc="# assert_eq!(FLAG_LATVIA.to_string().as_str(), \"üá±üáª\");"]
#[doc="```"]
pub static FLAG_LATVIA :  Emoji = Emoji::new("flag: Latvia", Version(2, 0), "üá±üáª"); // flag: Latvia
		
		#[doc="flag: Lebanon üá±üáß"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_LEBANON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_LEBANON); // üá±üáß (`U+1F1F1 U+1F1E7`)"] #[doc="# assert_eq!(FLAG_LEBANON.to_string().as_str(), \"üá±üáß\");"]
#[doc="```"]
pub static FLAG_LEBANON :  Emoji = Emoji::new("flag: Lebanon", Version(2, 0), "üá±üáß"); // flag: Lebanon
		
		#[doc="flag: Lesotho üá±üá∏"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_LESOTHO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_LESOTHO); // üá±üá∏ (`U+1F1F1 U+1F1F8`)"] #[doc="# assert_eq!(FLAG_LESOTHO.to_string().as_str(), \"üá±üá∏\");"]
#[doc="```"]
pub static FLAG_LESOTHO :  Emoji = Emoji::new("flag: Lesotho", Version(2, 0), "üá±üá∏"); // flag: Lesotho
		
		#[doc="flag: Liberia üá±üá∑"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_LIBERIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_LIBERIA); // üá±üá∑ (`U+1F1F1 U+1F1F7`)"] #[doc="# assert_eq!(FLAG_LIBERIA.to_string().as_str(), \"üá±üá∑\");"]
#[doc="```"]
pub static FLAG_LIBERIA :  Emoji = Emoji::new("flag: Liberia", Version(2, 0), "üá±üá∑"); // flag: Liberia
		
		#[doc="flag: Libya üá±üáæ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_LIBYA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_LIBYA); // üá±üáæ (`U+1F1F1 U+1F1FE`)"] #[doc="# assert_eq!(FLAG_LIBYA.to_string().as_str(), \"üá±üáæ\");"]
#[doc="```"]
pub static FLAG_LIBYA :  Emoji = Emoji::new("flag: Libya", Version(2, 0), "üá±üáæ"); // flag: Libya
		
		#[doc="flag: Liechtenstein üá±üáÆ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_LIECHTENSTEIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_LIECHTENSTEIN); // üá±üáÆ (`U+1F1F1 U+1F1EE`)"] #[doc="# assert_eq!(FLAG_LIECHTENSTEIN.to_string().as_str(), \"üá±üáÆ\");"]
#[doc="```"]
pub static FLAG_LIECHTENSTEIN :  Emoji = Emoji::new("flag: Liechtenstein", Version(2, 0), "üá±üáÆ"); // flag: Liechtenstein
		
		#[doc="flag: Lithuania üá±üáπ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_LITHUANIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_LITHUANIA); // üá±üáπ (`U+1F1F1 U+1F1F9`)"] #[doc="# assert_eq!(FLAG_LITHUANIA.to_string().as_str(), \"üá±üáπ\");"]
#[doc="```"]
pub static FLAG_LITHUANIA :  Emoji = Emoji::new("flag: Lithuania", Version(2, 0), "üá±üáπ"); // flag: Lithuania
		
		#[doc="flag: Luxembourg üá±üá∫"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_LUXEMBOURG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_LUXEMBOURG); // üá±üá∫ (`U+1F1F1 U+1F1FA`)"] #[doc="# assert_eq!(FLAG_LUXEMBOURG.to_string().as_str(), \"üá±üá∫\");"]
#[doc="```"]
pub static FLAG_LUXEMBOURG :  Emoji = Emoji::new("flag: Luxembourg", Version(2, 0), "üá±üá∫"); // flag: Luxembourg
		
		#[doc="flag: Macao SAR China üá≤üá¥"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MACAO_SAR_CHINA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MACAO_SAR_CHINA); // üá≤üá¥ (`U+1F1F2 U+1F1F4`)"] #[doc="# assert_eq!(FLAG_MACAO_SAR_CHINA.to_string().as_str(), \"üá≤üá¥\");"]
#[doc="```"]
pub static FLAG_MACAO_SAR_CHINA :  Emoji = Emoji::new("flag: Macao SAR China", Version(2, 0), "üá≤üá¥"); // flag: Macao SAR China
		
		#[doc="flag: Madagascar üá≤üá¨"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MADAGASCAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MADAGASCAR); // üá≤üá¨ (`U+1F1F2 U+1F1EC`)"] #[doc="# assert_eq!(FLAG_MADAGASCAR.to_string().as_str(), \"üá≤üá¨\");"]
#[doc="```"]
pub static FLAG_MADAGASCAR :  Emoji = Emoji::new("flag: Madagascar", Version(2, 0), "üá≤üá¨"); // flag: Madagascar
		
		#[doc="flag: Malawi üá≤üáº"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MALAWI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MALAWI); // üá≤üáº (`U+1F1F2 U+1F1FC`)"] #[doc="# assert_eq!(FLAG_MALAWI.to_string().as_str(), \"üá≤üáº\");"]
#[doc="```"]
pub static FLAG_MALAWI :  Emoji = Emoji::new("flag: Malawi", Version(2, 0), "üá≤üáº"); // flag: Malawi
		
		#[doc="flag: Malaysia üá≤üáæ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MALAYSIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MALAYSIA); // üá≤üáæ (`U+1F1F2 U+1F1FE`)"] #[doc="# assert_eq!(FLAG_MALAYSIA.to_string().as_str(), \"üá≤üáæ\");"]
#[doc="```"]
pub static FLAG_MALAYSIA :  Emoji = Emoji::new("flag: Malaysia", Version(2, 0), "üá≤üáæ"); // flag: Malaysia
		
		#[doc="flag: Maldives üá≤üáª"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MALDIVES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MALDIVES); // üá≤üáª (`U+1F1F2 U+1F1FB`)"] #[doc="# assert_eq!(FLAG_MALDIVES.to_string().as_str(), \"üá≤üáª\");"]
#[doc="```"]
pub static FLAG_MALDIVES :  Emoji = Emoji::new("flag: Maldives", Version(2, 0), "üá≤üáª"); // flag: Maldives
		
		#[doc="flag: Mali üá≤üá±"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MALI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MALI); // üá≤üá± (`U+1F1F2 U+1F1F1`)"] #[doc="# assert_eq!(FLAG_MALI.to_string().as_str(), \"üá≤üá±\");"]
#[doc="```"]
pub static FLAG_MALI :  Emoji = Emoji::new("flag: Mali", Version(2, 0), "üá≤üá±"); // flag: Mali
		
		#[doc="flag: Malta üá≤üáπ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MALTA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MALTA); // üá≤üáπ (`U+1F1F2 U+1F1F9`)"] #[doc="# assert_eq!(FLAG_MALTA.to_string().as_str(), \"üá≤üáπ\");"]
#[doc="```"]
pub static FLAG_MALTA :  Emoji = Emoji::new("flag: Malta", Version(2, 0), "üá≤üáπ"); // flag: Malta
		
		#[doc="flag: Marshall Islands üá≤üá≠"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MARSHALL_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MARSHALL_ISLANDS); // üá≤üá≠ (`U+1F1F2 U+1F1ED`)"] #[doc="# assert_eq!(FLAG_MARSHALL_ISLANDS.to_string().as_str(), \"üá≤üá≠\");"]
#[doc="```"]
pub static FLAG_MARSHALL_ISLANDS :  Emoji = Emoji::new("flag: Marshall Islands", Version(2, 0), "üá≤üá≠"); // flag: Marshall Islands
		
		#[doc="flag: Martinique üá≤üá∂"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MARTINIQUE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MARTINIQUE); // üá≤üá∂ (`U+1F1F2 U+1F1F6`)"] #[doc="# assert_eq!(FLAG_MARTINIQUE.to_string().as_str(), \"üá≤üá∂\");"]
#[doc="```"]
pub static FLAG_MARTINIQUE :  Emoji = Emoji::new("flag: Martinique", Version(2, 0), "üá≤üá∂"); // flag: Martinique
		
		#[doc="flag: Mauritania üá≤üá∑"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MAURITANIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MAURITANIA); // üá≤üá∑ (`U+1F1F2 U+1F1F7`)"] #[doc="# assert_eq!(FLAG_MAURITANIA.to_string().as_str(), \"üá≤üá∑\");"]
#[doc="```"]
pub static FLAG_MAURITANIA :  Emoji = Emoji::new("flag: Mauritania", Version(2, 0), "üá≤üá∑"); // flag: Mauritania
		
		#[doc="flag: Mauritius üá≤üá∫"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MAURITIUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MAURITIUS); // üá≤üá∫ (`U+1F1F2 U+1F1FA`)"] #[doc="# assert_eq!(FLAG_MAURITIUS.to_string().as_str(), \"üá≤üá∫\");"]
#[doc="```"]
pub static FLAG_MAURITIUS :  Emoji = Emoji::new("flag: Mauritius", Version(2, 0), "üá≤üá∫"); // flag: Mauritius
		
		#[doc="flag: Mayotte üáæüáπ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MAYOTTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MAYOTTE); // üáæüáπ (`U+1F1FE U+1F1F9`)"] #[doc="# assert_eq!(FLAG_MAYOTTE.to_string().as_str(), \"üáæüáπ\");"]
#[doc="```"]
pub static FLAG_MAYOTTE :  Emoji = Emoji::new("flag: Mayotte", Version(2, 0), "üáæüáπ"); // flag: Mayotte
		
		#[doc="flag: Mexico üá≤üáΩ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MEXICO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MEXICO); // üá≤üáΩ (`U+1F1F2 U+1F1FD`)"] #[doc="# assert_eq!(FLAG_MEXICO.to_string().as_str(), \"üá≤üáΩ\");"]
#[doc="```"]
pub static FLAG_MEXICO :  Emoji = Emoji::new("flag: Mexico", Version(2, 0), "üá≤üáΩ"); // flag: Mexico
		
		#[doc="flag: Micronesia üá´üá≤"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MICRONESIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MICRONESIA); // üá´üá≤ (`U+1F1EB U+1F1F2`)"] #[doc="# assert_eq!(FLAG_MICRONESIA.to_string().as_str(), \"üá´üá≤\");"]
#[doc="```"]
pub static FLAG_MICRONESIA :  Emoji = Emoji::new("flag: Micronesia", Version(2, 0), "üá´üá≤"); // flag: Micronesia
		
		#[doc="flag: Moldova üá≤üá©"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MOLDOVA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MOLDOVA); // üá≤üá© (`U+1F1F2 U+1F1E9`)"] #[doc="# assert_eq!(FLAG_MOLDOVA.to_string().as_str(), \"üá≤üá©\");"]
#[doc="```"]
pub static FLAG_MOLDOVA :  Emoji = Emoji::new("flag: Moldova", Version(2, 0), "üá≤üá©"); // flag: Moldova
		
		#[doc="flag: Monaco üá≤üá®"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MONACO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MONACO); // üá≤üá® (`U+1F1F2 U+1F1E8`)"] #[doc="# assert_eq!(FLAG_MONACO.to_string().as_str(), \"üá≤üá®\");"]
#[doc="```"]
pub static FLAG_MONACO :  Emoji = Emoji::new("flag: Monaco", Version(2, 0), "üá≤üá®"); // flag: Monaco
		
		#[doc="flag: Mongolia üá≤üá≥"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MONGOLIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MONGOLIA); // üá≤üá≥ (`U+1F1F2 U+1F1F3`)"] #[doc="# assert_eq!(FLAG_MONGOLIA.to_string().as_str(), \"üá≤üá≥\");"]
#[doc="```"]
pub static FLAG_MONGOLIA :  Emoji = Emoji::new("flag: Mongolia", Version(2, 0), "üá≤üá≥"); // flag: Mongolia
		
		#[doc="flag: Montenegro üá≤üá™"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MONTENEGRO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MONTENEGRO); // üá≤üá™ (`U+1F1F2 U+1F1EA`)"] #[doc="# assert_eq!(FLAG_MONTENEGRO.to_string().as_str(), \"üá≤üá™\");"]
#[doc="```"]
pub static FLAG_MONTENEGRO :  Emoji = Emoji::new("flag: Montenegro", Version(2, 0), "üá≤üá™"); // flag: Montenegro
		
		#[doc="flag: Montserrat üá≤üá∏"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MONTSERRAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MONTSERRAT); // üá≤üá∏ (`U+1F1F2 U+1F1F8`)"] #[doc="# assert_eq!(FLAG_MONTSERRAT.to_string().as_str(), \"üá≤üá∏\");"]
#[doc="```"]
pub static FLAG_MONTSERRAT :  Emoji = Emoji::new("flag: Montserrat", Version(2, 0), "üá≤üá∏"); // flag: Montserrat
		
		#[doc="flag: Morocco üá≤üá¶"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MOROCCO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MOROCCO); // üá≤üá¶ (`U+1F1F2 U+1F1E6`)"] #[doc="# assert_eq!(FLAG_MOROCCO.to_string().as_str(), \"üá≤üá¶\");"]
#[doc="```"]
pub static FLAG_MOROCCO :  Emoji = Emoji::new("flag: Morocco", Version(2, 0), "üá≤üá¶"); // flag: Morocco
		
		#[doc="flag: Mozambique üá≤üáø"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MOZAMBIQUE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MOZAMBIQUE); // üá≤üáø (`U+1F1F2 U+1F1FF`)"] #[doc="# assert_eq!(FLAG_MOZAMBIQUE.to_string().as_str(), \"üá≤üáø\");"]
#[doc="```"]
pub static FLAG_MOZAMBIQUE :  Emoji = Emoji::new("flag: Mozambique", Version(2, 0), "üá≤üáø"); // flag: Mozambique
		
		#[doc="flag: Myanmar (Burma) üá≤üá≤"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MYANMAR_BURMA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MYANMAR_BURMA); // üá≤üá≤ (`U+1F1F2 U+1F1F2`)"] #[doc="# assert_eq!(FLAG_MYANMAR_BURMA.to_string().as_str(), \"üá≤üá≤\");"]
#[doc="```"]
pub static FLAG_MYANMAR_BURMA :  Emoji = Emoji::new("flag: Myanmar (Burma)", Version(2, 0), "üá≤üá≤"); // flag: Myanmar (Burma)
		
		#[doc="flag: Namibia üá≥üá¶"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NAMIBIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NAMIBIA); // üá≥üá¶ (`U+1F1F3 U+1F1E6`)"] #[doc="# assert_eq!(FLAG_NAMIBIA.to_string().as_str(), \"üá≥üá¶\");"]
#[doc="```"]
pub static FLAG_NAMIBIA :  Emoji = Emoji::new("flag: Namibia", Version(2, 0), "üá≥üá¶"); // flag: Namibia
		
		#[doc="flag: Nauru üá≥üá∑"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NAURU;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NAURU); // üá≥üá∑ (`U+1F1F3 U+1F1F7`)"] #[doc="# assert_eq!(FLAG_NAURU.to_string().as_str(), \"üá≥üá∑\");"]
#[doc="```"]
pub static FLAG_NAURU :  Emoji = Emoji::new("flag: Nauru", Version(2, 0), "üá≥üá∑"); // flag: Nauru
		
		#[doc="flag: Nepal üá≥üáµ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NEPAL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NEPAL); // üá≥üáµ (`U+1F1F3 U+1F1F5`)"] #[doc="# assert_eq!(FLAG_NEPAL.to_string().as_str(), \"üá≥üáµ\");"]
#[doc="```"]
pub static FLAG_NEPAL :  Emoji = Emoji::new("flag: Nepal", Version(2, 0), "üá≥üáµ"); // flag: Nepal
		
		#[doc="flag: Netherlands üá≥üá±"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NETHERLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NETHERLANDS); // üá≥üá± (`U+1F1F3 U+1F1F1`)"] #[doc="# assert_eq!(FLAG_NETHERLANDS.to_string().as_str(), \"üá≥üá±\");"]
#[doc="```"]
pub static FLAG_NETHERLANDS :  Emoji = Emoji::new("flag: Netherlands", Version(2, 0), "üá≥üá±"); // flag: Netherlands
		
		#[doc="flag: New Caledonia üá≥üá®"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NEW_CALEDONIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NEW_CALEDONIA); // üá≥üá® (`U+1F1F3 U+1F1E8`)"] #[doc="# assert_eq!(FLAG_NEW_CALEDONIA.to_string().as_str(), \"üá≥üá®\");"]
#[doc="```"]
pub static FLAG_NEW_CALEDONIA :  Emoji = Emoji::new("flag: New Caledonia", Version(2, 0), "üá≥üá®"); // flag: New Caledonia
		
		#[doc="flag: New Zealand üá≥üáø"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NEW_ZEALAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NEW_ZEALAND); // üá≥üáø (`U+1F1F3 U+1F1FF`)"] #[doc="# assert_eq!(FLAG_NEW_ZEALAND.to_string().as_str(), \"üá≥üáø\");"]
#[doc="```"]
pub static FLAG_NEW_ZEALAND :  Emoji = Emoji::new("flag: New Zealand", Version(2, 0), "üá≥üáø"); // flag: New Zealand
		
		#[doc="flag: Nicaragua üá≥üáÆ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NICARAGUA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NICARAGUA); // üá≥üáÆ (`U+1F1F3 U+1F1EE`)"] #[doc="# assert_eq!(FLAG_NICARAGUA.to_string().as_str(), \"üá≥üáÆ\");"]
#[doc="```"]
pub static FLAG_NICARAGUA :  Emoji = Emoji::new("flag: Nicaragua", Version(2, 0), "üá≥üáÆ"); // flag: Nicaragua
		
		#[doc="flag: Niger üá≥üá™"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NIGER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NIGER); // üá≥üá™ (`U+1F1F3 U+1F1EA`)"] #[doc="# assert_eq!(FLAG_NIGER.to_string().as_str(), \"üá≥üá™\");"]
#[doc="```"]
pub static FLAG_NIGER :  Emoji = Emoji::new("flag: Niger", Version(2, 0), "üá≥üá™"); // flag: Niger
		
		#[doc="flag: Nigeria üá≥üá¨"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NIGERIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NIGERIA); // üá≥üá¨ (`U+1F1F3 U+1F1EC`)"] #[doc="# assert_eq!(FLAG_NIGERIA.to_string().as_str(), \"üá≥üá¨\");"]
#[doc="```"]
pub static FLAG_NIGERIA :  Emoji = Emoji::new("flag: Nigeria", Version(2, 0), "üá≥üá¨"); // flag: Nigeria
		
		#[doc="flag: Niue üá≥üá∫"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NIUE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NIUE); // üá≥üá∫ (`U+1F1F3 U+1F1FA`)"] #[doc="# assert_eq!(FLAG_NIUE.to_string().as_str(), \"üá≥üá∫\");"]
#[doc="```"]
pub static FLAG_NIUE :  Emoji = Emoji::new("flag: Niue", Version(2, 0), "üá≥üá∫"); // flag: Niue
		
		#[doc="flag: Norfolk Island üá≥üá´"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NORFOLK_ISLAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NORFOLK_ISLAND); // üá≥üá´ (`U+1F1F3 U+1F1EB`)"] #[doc="# assert_eq!(FLAG_NORFOLK_ISLAND.to_string().as_str(), \"üá≥üá´\");"]
#[doc="```"]
pub static FLAG_NORFOLK_ISLAND :  Emoji = Emoji::new("flag: Norfolk Island", Version(2, 0), "üá≥üá´"); // flag: Norfolk Island
		
		#[doc="flag: Northern Mariana Islands üá≤üáµ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NORTHERN_MARIANA_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NORTHERN_MARIANA_ISLANDS); // üá≤üáµ (`U+1F1F2 U+1F1F5`)"] #[doc="# assert_eq!(FLAG_NORTHERN_MARIANA_ISLANDS.to_string().as_str(), \"üá≤üáµ\");"]
#[doc="```"]
pub static FLAG_NORTHERN_MARIANA_ISLANDS :  Emoji = Emoji::new("flag: Northern Mariana Islands", Version(2, 0), "üá≤üáµ"); // flag: Northern Mariana Islands
		
		#[doc="flag: North Korea üá∞üáµ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NORTH_KOREA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NORTH_KOREA); // üá∞üáµ (`U+1F1F0 U+1F1F5`)"] #[doc="# assert_eq!(FLAG_NORTH_KOREA.to_string().as_str(), \"üá∞üáµ\");"]
#[doc="```"]
pub static FLAG_NORTH_KOREA :  Emoji = Emoji::new("flag: North Korea", Version(2, 0), "üá∞üáµ"); // flag: North Korea
		
		#[doc="flag: North Macedonia üá≤üá∞"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NORTH_MACEDONIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NORTH_MACEDONIA); // üá≤üá∞ (`U+1F1F2 U+1F1F0`)"] #[doc="# assert_eq!(FLAG_NORTH_MACEDONIA.to_string().as_str(), \"üá≤üá∞\");"]
#[doc="```"]
pub static FLAG_NORTH_MACEDONIA :  Emoji = Emoji::new("flag: North Macedonia", Version(2, 0), "üá≤üá∞"); // flag: North Macedonia
		
		#[doc="flag: Norway üá≥üá¥"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NORWAY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NORWAY); // üá≥üá¥ (`U+1F1F3 U+1F1F4`)"] #[doc="# assert_eq!(FLAG_NORWAY.to_string().as_str(), \"üá≥üá¥\");"]
#[doc="```"]
pub static FLAG_NORWAY :  Emoji = Emoji::new("flag: Norway", Version(2, 0), "üá≥üá¥"); // flag: Norway
		
		#[doc="flag: Oman üá¥üá≤"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_OMAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_OMAN); // üá¥üá≤ (`U+1F1F4 U+1F1F2`)"] #[doc="# assert_eq!(FLAG_OMAN.to_string().as_str(), \"üá¥üá≤\");"]
#[doc="```"]
pub static FLAG_OMAN :  Emoji = Emoji::new("flag: Oman", Version(2, 0), "üá¥üá≤"); // flag: Oman
		
		#[doc="flag: Pakistan üáµüá∞"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_PAKISTAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_PAKISTAN); // üáµüá∞ (`U+1F1F5 U+1F1F0`)"] #[doc="# assert_eq!(FLAG_PAKISTAN.to_string().as_str(), \"üáµüá∞\");"]
#[doc="```"]
pub static FLAG_PAKISTAN :  Emoji = Emoji::new("flag: Pakistan", Version(2, 0), "üáµüá∞"); // flag: Pakistan
		
		#[doc="flag: Palau üáµüáº"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_PALAU;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_PALAU); // üáµüáº (`U+1F1F5 U+1F1FC`)"] #[doc="# assert_eq!(FLAG_PALAU.to_string().as_str(), \"üáµüáº\");"]
#[doc="```"]
pub static FLAG_PALAU :  Emoji = Emoji::new("flag: Palau", Version(2, 0), "üáµüáº"); // flag: Palau
		
		#[doc="flag: Palestinian Territories üáµüá∏"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_PALESTINIAN_TERRITORIES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_PALESTINIAN_TERRITORIES); // üáµüá∏ (`U+1F1F5 U+1F1F8`)"] #[doc="# assert_eq!(FLAG_PALESTINIAN_TERRITORIES.to_string().as_str(), \"üáµüá∏\");"]
#[doc="```"]
pub static FLAG_PALESTINIAN_TERRITORIES :  Emoji = Emoji::new("flag: Palestinian Territories", Version(2, 0), "üáµüá∏"); // flag: Palestinian Territories
		
		#[doc="flag: Panama üáµüá¶"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_PANAMA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_PANAMA); // üáµüá¶ (`U+1F1F5 U+1F1E6`)"] #[doc="# assert_eq!(FLAG_PANAMA.to_string().as_str(), \"üáµüá¶\");"]
#[doc="```"]
pub static FLAG_PANAMA :  Emoji = Emoji::new("flag: Panama", Version(2, 0), "üáµüá¶"); // flag: Panama
		
		#[doc="flag: Papua New Guinea üáµüá¨"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_PAPUA_NEW_GUINEA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_PAPUA_NEW_GUINEA); // üáµüá¨ (`U+1F1F5 U+1F1EC`)"] #[doc="# assert_eq!(FLAG_PAPUA_NEW_GUINEA.to_string().as_str(), \"üáµüá¨\");"]
#[doc="```"]
pub static FLAG_PAPUA_NEW_GUINEA :  Emoji = Emoji::new("flag: Papua New Guinea", Version(2, 0), "üáµüá¨"); // flag: Papua New Guinea
		
		#[doc="flag: Paraguay üáµüáæ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_PARAGUAY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_PARAGUAY); // üáµüáæ (`U+1F1F5 U+1F1FE`)"] #[doc="# assert_eq!(FLAG_PARAGUAY.to_string().as_str(), \"üáµüáæ\");"]
#[doc="```"]
pub static FLAG_PARAGUAY :  Emoji = Emoji::new("flag: Paraguay", Version(2, 0), "üáµüáæ"); // flag: Paraguay
		
		#[doc="flag: Peru üáµüá™"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_PERU;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_PERU); // üáµüá™ (`U+1F1F5 U+1F1EA`)"] #[doc="# assert_eq!(FLAG_PERU.to_string().as_str(), \"üáµüá™\");"]
#[doc="```"]
pub static FLAG_PERU :  Emoji = Emoji::new("flag: Peru", Version(2, 0), "üáµüá™"); // flag: Peru
		
		#[doc="flag: Philippines üáµüá≠"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_PHILIPPINES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_PHILIPPINES); // üáµüá≠ (`U+1F1F5 U+1F1ED`)"] #[doc="# assert_eq!(FLAG_PHILIPPINES.to_string().as_str(), \"üáµüá≠\");"]
#[doc="```"]
pub static FLAG_PHILIPPINES :  Emoji = Emoji::new("flag: Philippines", Version(2, 0), "üáµüá≠"); // flag: Philippines
		
		#[doc="flag: Pitcairn Islands üáµüá≥"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_PITCAIRN_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_PITCAIRN_ISLANDS); // üáµüá≥ (`U+1F1F5 U+1F1F3`)"] #[doc="# assert_eq!(FLAG_PITCAIRN_ISLANDS.to_string().as_str(), \"üáµüá≥\");"]
#[doc="```"]
pub static FLAG_PITCAIRN_ISLANDS :  Emoji = Emoji::new("flag: Pitcairn Islands", Version(2, 0), "üáµüá≥"); // flag: Pitcairn Islands
		
		#[doc="flag: Poland üáµüá±"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_POLAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_POLAND); // üáµüá± (`U+1F1F5 U+1F1F1`)"] #[doc="# assert_eq!(FLAG_POLAND.to_string().as_str(), \"üáµüá±\");"]
#[doc="```"]
pub static FLAG_POLAND :  Emoji = Emoji::new("flag: Poland", Version(2, 0), "üáµüá±"); // flag: Poland
		
		#[doc="flag: Portugal üáµüáπ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_PORTUGAL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_PORTUGAL); // üáµüáπ (`U+1F1F5 U+1F1F9`)"] #[doc="# assert_eq!(FLAG_PORTUGAL.to_string().as_str(), \"üáµüáπ\");"]
#[doc="```"]
pub static FLAG_PORTUGAL :  Emoji = Emoji::new("flag: Portugal", Version(2, 0), "üáµüáπ"); // flag: Portugal
		
		#[doc="flag: Puerto Rico üáµüá∑"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_PUERTO_RICO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_PUERTO_RICO); // üáµüá∑ (`U+1F1F5 U+1F1F7`)"] #[doc="# assert_eq!(FLAG_PUERTO_RICO.to_string().as_str(), \"üáµüá∑\");"]
#[doc="```"]
pub static FLAG_PUERTO_RICO :  Emoji = Emoji::new("flag: Puerto Rico", Version(2, 0), "üáµüá∑"); // flag: Puerto Rico
		
		#[doc="flag: Qatar üá∂üá¶"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_QATAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_QATAR); // üá∂üá¶ (`U+1F1F6 U+1F1E6`)"] #[doc="# assert_eq!(FLAG_QATAR.to_string().as_str(), \"üá∂üá¶\");"]
#[doc="```"]
pub static FLAG_QATAR :  Emoji = Emoji::new("flag: Qatar", Version(2, 0), "üá∂üá¶"); // flag: Qatar
		
		#[doc="flag: R√©union üá∑üá™"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_REUNION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_REUNION); // üá∑üá™ (`U+1F1F7 U+1F1EA`)"] #[doc="# assert_eq!(FLAG_REUNION.to_string().as_str(), \"üá∑üá™\");"]
#[doc="```"]
pub static FLAG_REUNION :  Emoji = Emoji::new("flag: R√©union", Version(2, 0), "üá∑üá™"); // flag: R√©union
		
		#[doc="flag: Romania üá∑üá¥"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ROMANIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ROMANIA); // üá∑üá¥ (`U+1F1F7 U+1F1F4`)"] #[doc="# assert_eq!(FLAG_ROMANIA.to_string().as_str(), \"üá∑üá¥\");"]
#[doc="```"]
pub static FLAG_ROMANIA :  Emoji = Emoji::new("flag: Romania", Version(2, 0), "üá∑üá¥"); // flag: Romania
		
		#[doc="flag: Russia üá∑üá∫"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_RUSSIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_RUSSIA); // üá∑üá∫ (`U+1F1F7 U+1F1FA`)"] #[doc="# assert_eq!(FLAG_RUSSIA.to_string().as_str(), \"üá∑üá∫\");"]
#[doc="```"]
pub static FLAG_RUSSIA :  Emoji = Emoji::new("flag: Russia", Version(0, 6), "üá∑üá∫"); // flag: Russia
		
		#[doc="flag: Rwanda üá∑üáº"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_RWANDA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_RWANDA); // üá∑üáº (`U+1F1F7 U+1F1FC`)"] #[doc="# assert_eq!(FLAG_RWANDA.to_string().as_str(), \"üá∑üáº\");"]
#[doc="```"]
pub static FLAG_RWANDA :  Emoji = Emoji::new("flag: Rwanda", Version(2, 0), "üá∑üáº"); // flag: Rwanda
		
		#[doc="flag: Samoa üáºüá∏"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SAMOA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SAMOA); // üáºüá∏ (`U+1F1FC U+1F1F8`)"] #[doc="# assert_eq!(FLAG_SAMOA.to_string().as_str(), \"üáºüá∏\");"]
#[doc="```"]
pub static FLAG_SAMOA :  Emoji = Emoji::new("flag: Samoa", Version(2, 0), "üáºüá∏"); // flag: Samoa
		
		#[doc="flag: San Marino üá∏üá≤"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SAN_MARINO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SAN_MARINO); // üá∏üá≤ (`U+1F1F8 U+1F1F2`)"] #[doc="# assert_eq!(FLAG_SAN_MARINO.to_string().as_str(), \"üá∏üá≤\");"]
#[doc="```"]
pub static FLAG_SAN_MARINO :  Emoji = Emoji::new("flag: San Marino", Version(2, 0), "üá∏üá≤"); // flag: San Marino
		
		#[doc="flag: S√£o Tom√© & Pr√≠ncipe üá∏üáπ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SAO_TOME_AND_PRINCIPE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SAO_TOME_AND_PRINCIPE); // üá∏üáπ (`U+1F1F8 U+1F1F9`)"] #[doc="# assert_eq!(FLAG_SAO_TOME_AND_PRINCIPE.to_string().as_str(), \"üá∏üáπ\");"]
#[doc="```"]
pub static FLAG_SAO_TOME_AND_PRINCIPE :  Emoji = Emoji::new("flag: S√£o Tom√© & Pr√≠ncipe", Version(2, 0), "üá∏üáπ"); // flag: S√£o Tom√© & Pr√≠ncipe
		
		#[doc="flag: Saudi Arabia üá∏üá¶"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SAUDI_ARABIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SAUDI_ARABIA); // üá∏üá¶ (`U+1F1F8 U+1F1E6`)"] #[doc="# assert_eq!(FLAG_SAUDI_ARABIA.to_string().as_str(), \"üá∏üá¶\");"]
#[doc="```"]
pub static FLAG_SAUDI_ARABIA :  Emoji = Emoji::new("flag: Saudi Arabia", Version(2, 0), "üá∏üá¶"); // flag: Saudi Arabia
		
		#[doc="flag: Senegal üá∏üá≥"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SENEGAL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SENEGAL); // üá∏üá≥ (`U+1F1F8 U+1F1F3`)"] #[doc="# assert_eq!(FLAG_SENEGAL.to_string().as_str(), \"üá∏üá≥\");"]
#[doc="```"]
pub static FLAG_SENEGAL :  Emoji = Emoji::new("flag: Senegal", Version(2, 0), "üá∏üá≥"); // flag: Senegal
		
		#[doc="flag: Serbia üá∑üá∏"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SERBIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SERBIA); // üá∑üá∏ (`U+1F1F7 U+1F1F8`)"] #[doc="# assert_eq!(FLAG_SERBIA.to_string().as_str(), \"üá∑üá∏\");"]
#[doc="```"]
pub static FLAG_SERBIA :  Emoji = Emoji::new("flag: Serbia", Version(2, 0), "üá∑üá∏"); // flag: Serbia
		
		#[doc="flag: Seychelles üá∏üá®"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SEYCHELLES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SEYCHELLES); // üá∏üá® (`U+1F1F8 U+1F1E8`)"] #[doc="# assert_eq!(FLAG_SEYCHELLES.to_string().as_str(), \"üá∏üá®\");"]
#[doc="```"]
pub static FLAG_SEYCHELLES :  Emoji = Emoji::new("flag: Seychelles", Version(2, 0), "üá∏üá®"); // flag: Seychelles
		
		#[doc="flag: Sierra Leone üá∏üá±"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SIERRA_LEONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SIERRA_LEONE); // üá∏üá± (`U+1F1F8 U+1F1F1`)"] #[doc="# assert_eq!(FLAG_SIERRA_LEONE.to_string().as_str(), \"üá∏üá±\");"]
#[doc="```"]
pub static FLAG_SIERRA_LEONE :  Emoji = Emoji::new("flag: Sierra Leone", Version(2, 0), "üá∏üá±"); // flag: Sierra Leone
		
		#[doc="flag: Singapore üá∏üá¨"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SINGAPORE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SINGAPORE); // üá∏üá¨ (`U+1F1F8 U+1F1EC`)"] #[doc="# assert_eq!(FLAG_SINGAPORE.to_string().as_str(), \"üá∏üá¨\");"]
#[doc="```"]
pub static FLAG_SINGAPORE :  Emoji = Emoji::new("flag: Singapore", Version(2, 0), "üá∏üá¨"); // flag: Singapore
		
		#[doc="flag: Sint Maarten üá∏üáΩ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SINT_MAARTEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SINT_MAARTEN); // üá∏üáΩ (`U+1F1F8 U+1F1FD`)"] #[doc="# assert_eq!(FLAG_SINT_MAARTEN.to_string().as_str(), \"üá∏üáΩ\");"]
#[doc="```"]
pub static FLAG_SINT_MAARTEN :  Emoji = Emoji::new("flag: Sint Maarten", Version(2, 0), "üá∏üáΩ"); // flag: Sint Maarten
		
		#[doc="flag: Slovakia üá∏üá∞"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SLOVAKIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SLOVAKIA); // üá∏üá∞ (`U+1F1F8 U+1F1F0`)"] #[doc="# assert_eq!(FLAG_SLOVAKIA.to_string().as_str(), \"üá∏üá∞\");"]
#[doc="```"]
pub static FLAG_SLOVAKIA :  Emoji = Emoji::new("flag: Slovakia", Version(2, 0), "üá∏üá∞"); // flag: Slovakia
		
		#[doc="flag: Slovenia üá∏üáÆ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SLOVENIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SLOVENIA); // üá∏üáÆ (`U+1F1F8 U+1F1EE`)"] #[doc="# assert_eq!(FLAG_SLOVENIA.to_string().as_str(), \"üá∏üáÆ\");"]
#[doc="```"]
pub static FLAG_SLOVENIA :  Emoji = Emoji::new("flag: Slovenia", Version(2, 0), "üá∏üáÆ"); // flag: Slovenia
		
		#[doc="flag: Solomon Islands üá∏üáß"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SOLOMON_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SOLOMON_ISLANDS); // üá∏üáß (`U+1F1F8 U+1F1E7`)"] #[doc="# assert_eq!(FLAG_SOLOMON_ISLANDS.to_string().as_str(), \"üá∏üáß\");"]
#[doc="```"]
pub static FLAG_SOLOMON_ISLANDS :  Emoji = Emoji::new("flag: Solomon Islands", Version(2, 0), "üá∏üáß"); // flag: Solomon Islands
		
		#[doc="flag: Somalia üá∏üá¥"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SOMALIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SOMALIA); // üá∏üá¥ (`U+1F1F8 U+1F1F4`)"] #[doc="# assert_eq!(FLAG_SOMALIA.to_string().as_str(), \"üá∏üá¥\");"]
#[doc="```"]
pub static FLAG_SOMALIA :  Emoji = Emoji::new("flag: Somalia", Version(2, 0), "üá∏üá¥"); // flag: Somalia
		
		#[doc="flag: South Africa üáøüá¶"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SOUTH_AFRICA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SOUTH_AFRICA); // üáøüá¶ (`U+1F1FF U+1F1E6`)"] #[doc="# assert_eq!(FLAG_SOUTH_AFRICA.to_string().as_str(), \"üáøüá¶\");"]
#[doc="```"]
pub static FLAG_SOUTH_AFRICA :  Emoji = Emoji::new("flag: South Africa", Version(2, 0), "üáøüá¶"); // flag: South Africa
		
		#[doc="flag: South Georgia & South Sandwich Islands üá¨üá∏"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SOUTH_GEORGIA_AND_SOUTH_SANDWICH_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SOUTH_GEORGIA_AND_SOUTH_SANDWICH_ISLANDS); // üá¨üá∏ (`U+1F1EC U+1F1F8`)"] #[doc="# assert_eq!(FLAG_SOUTH_GEORGIA_AND_SOUTH_SANDWICH_ISLANDS.to_string().as_str(), \"üá¨üá∏\");"]
#[doc="```"]
pub static FLAG_SOUTH_GEORGIA_AND_SOUTH_SANDWICH_ISLANDS :  Emoji = Emoji::new("flag: South Georgia & South Sandwich Islands", Version(2, 0), "üá¨üá∏"); // flag: South Georgia & South Sandwich Islands
		
		#[doc="flag: South Korea üá∞üá∑"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SOUTH_KOREA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SOUTH_KOREA); // üá∞üá∑ (`U+1F1F0 U+1F1F7`)"] #[doc="# assert_eq!(FLAG_SOUTH_KOREA.to_string().as_str(), \"üá∞üá∑\");"]
#[doc="```"]
pub static FLAG_SOUTH_KOREA :  Emoji = Emoji::new("flag: South Korea", Version(0, 6), "üá∞üá∑"); // flag: South Korea
		
		#[doc="flag: South Sudan üá∏üá∏"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SOUTH_SUDAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SOUTH_SUDAN); // üá∏üá∏ (`U+1F1F8 U+1F1F8`)"] #[doc="# assert_eq!(FLAG_SOUTH_SUDAN.to_string().as_str(), \"üá∏üá∏\");"]
#[doc="```"]
pub static FLAG_SOUTH_SUDAN :  Emoji = Emoji::new("flag: South Sudan", Version(2, 0), "üá∏üá∏"); // flag: South Sudan
		
		#[doc="flag: Spain üá™üá∏"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SPAIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SPAIN); // üá™üá∏ (`U+1F1EA U+1F1F8`)"] #[doc="# assert_eq!(FLAG_SPAIN.to_string().as_str(), \"üá™üá∏\");"]
#[doc="```"]
pub static FLAG_SPAIN :  Emoji = Emoji::new("flag: Spain", Version(0, 6), "üá™üá∏"); // flag: Spain
		
		#[doc="flag: Sri Lanka üá±üá∞"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SRI_LANKA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SRI_LANKA); // üá±üá∞ (`U+1F1F1 U+1F1F0`)"] #[doc="# assert_eq!(FLAG_SRI_LANKA.to_string().as_str(), \"üá±üá∞\");"]
#[doc="```"]
pub static FLAG_SRI_LANKA :  Emoji = Emoji::new("flag: Sri Lanka", Version(2, 0), "üá±üá∞"); // flag: Sri Lanka
		
		#[doc="flag: St. Barth√©lemy üáßüá±"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ST_BARTHELEMY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ST_BARTHELEMY); // üáßüá± (`U+1F1E7 U+1F1F1`)"] #[doc="# assert_eq!(FLAG_ST_BARTHELEMY.to_string().as_str(), \"üáßüá±\");"]
#[doc="```"]
pub static FLAG_ST_BARTHELEMY :  Emoji = Emoji::new("flag: St. Barth√©lemy", Version(2, 0), "üáßüá±"); // flag: St. Barth√©lemy
		
		#[doc="flag: St. Helena üá∏üá≠"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ST_HELENA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ST_HELENA); // üá∏üá≠ (`U+1F1F8 U+1F1ED`)"] #[doc="# assert_eq!(FLAG_ST_HELENA.to_string().as_str(), \"üá∏üá≠\");"]
#[doc="```"]
pub static FLAG_ST_HELENA :  Emoji = Emoji::new("flag: St. Helena", Version(2, 0), "üá∏üá≠"); // flag: St. Helena
		
		#[doc="flag: St. Kitts & Nevis üá∞üá≥"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ST_KITTS_AND_NEVIS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ST_KITTS_AND_NEVIS); // üá∞üá≥ (`U+1F1F0 U+1F1F3`)"] #[doc="# assert_eq!(FLAG_ST_KITTS_AND_NEVIS.to_string().as_str(), \"üá∞üá≥\");"]
#[doc="```"]
pub static FLAG_ST_KITTS_AND_NEVIS :  Emoji = Emoji::new("flag: St. Kitts & Nevis", Version(2, 0), "üá∞üá≥"); // flag: St. Kitts & Nevis
		
		#[doc="flag: St. Lucia üá±üá®"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ST_LUCIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ST_LUCIA); // üá±üá® (`U+1F1F1 U+1F1E8`)"] #[doc="# assert_eq!(FLAG_ST_LUCIA.to_string().as_str(), \"üá±üá®\");"]
#[doc="```"]
pub static FLAG_ST_LUCIA :  Emoji = Emoji::new("flag: St. Lucia", Version(2, 0), "üá±üá®"); // flag: St. Lucia
		
		#[doc="flag: St. Martin üá≤üá´"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ST_MARTIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ST_MARTIN); // üá≤üá´ (`U+1F1F2 U+1F1EB`)"] #[doc="# assert_eq!(FLAG_ST_MARTIN.to_string().as_str(), \"üá≤üá´\");"]
#[doc="```"]
pub static FLAG_ST_MARTIN :  Emoji = Emoji::new("flag: St. Martin", Version(2, 0), "üá≤üá´"); // flag: St. Martin
		
		#[doc="flag: St. Pierre & Miquelon üáµüá≤"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ST_PIERRE_AND_MIQUELON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ST_PIERRE_AND_MIQUELON); // üáµüá≤ (`U+1F1F5 U+1F1F2`)"] #[doc="# assert_eq!(FLAG_ST_PIERRE_AND_MIQUELON.to_string().as_str(), \"üáµüá≤\");"]
#[doc="```"]
pub static FLAG_ST_PIERRE_AND_MIQUELON :  Emoji = Emoji::new("flag: St. Pierre & Miquelon", Version(2, 0), "üáµüá≤"); // flag: St. Pierre & Miquelon
		
		#[doc="flag: St. Vincent & Grenadines üáªüá®"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ST_VINCENT_AND_GRENADINES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ST_VINCENT_AND_GRENADINES); // üáªüá® (`U+1F1FB U+1F1E8`)"] #[doc="# assert_eq!(FLAG_ST_VINCENT_AND_GRENADINES.to_string().as_str(), \"üáªüá®\");"]
#[doc="```"]
pub static FLAG_ST_VINCENT_AND_GRENADINES :  Emoji = Emoji::new("flag: St. Vincent & Grenadines", Version(2, 0), "üáªüá®"); // flag: St. Vincent & Grenadines
		
		#[doc="flag: Sudan üá∏üá©"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SUDAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SUDAN); // üá∏üá© (`U+1F1F8 U+1F1E9`)"] #[doc="# assert_eq!(FLAG_SUDAN.to_string().as_str(), \"üá∏üá©\");"]
#[doc="```"]
pub static FLAG_SUDAN :  Emoji = Emoji::new("flag: Sudan", Version(2, 0), "üá∏üá©"); // flag: Sudan
		
		#[doc="flag: Suriname üá∏üá∑"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SURINAME;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SURINAME); // üá∏üá∑ (`U+1F1F8 U+1F1F7`)"] #[doc="# assert_eq!(FLAG_SURINAME.to_string().as_str(), \"üá∏üá∑\");"]
#[doc="```"]
pub static FLAG_SURINAME :  Emoji = Emoji::new("flag: Suriname", Version(2, 0), "üá∏üá∑"); // flag: Suriname
		
		#[doc="flag: Svalbard & Jan Mayen üá∏üáØ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SVALBARD_AND_JAN_MAYEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SVALBARD_AND_JAN_MAYEN); // üá∏üáØ (`U+1F1F8 U+1F1EF`)"] #[doc="# assert_eq!(FLAG_SVALBARD_AND_JAN_MAYEN.to_string().as_str(), \"üá∏üáØ\");"]
#[doc="```"]
pub static FLAG_SVALBARD_AND_JAN_MAYEN :  Emoji = Emoji::new("flag: Svalbard & Jan Mayen", Version(2, 0), "üá∏üáØ"); // flag: Svalbard & Jan Mayen
		
		#[doc="flag: Sweden üá∏üá™"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SWEDEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SWEDEN); // üá∏üá™ (`U+1F1F8 U+1F1EA`)"] #[doc="# assert_eq!(FLAG_SWEDEN.to_string().as_str(), \"üá∏üá™\");"]
#[doc="```"]
pub static FLAG_SWEDEN :  Emoji = Emoji::new("flag: Sweden", Version(2, 0), "üá∏üá™"); // flag: Sweden
		
		#[doc="flag: Switzerland üá®üá≠"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SWITZERLAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SWITZERLAND); // üá®üá≠ (`U+1F1E8 U+1F1ED`)"] #[doc="# assert_eq!(FLAG_SWITZERLAND.to_string().as_str(), \"üá®üá≠\");"]
#[doc="```"]
pub static FLAG_SWITZERLAND :  Emoji = Emoji::new("flag: Switzerland", Version(2, 0), "üá®üá≠"); // flag: Switzerland
		
		#[doc="flag: Syria üá∏üáæ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SYRIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SYRIA); // üá∏üáæ (`U+1F1F8 U+1F1FE`)"] #[doc="# assert_eq!(FLAG_SYRIA.to_string().as_str(), \"üá∏üáæ\");"]
#[doc="```"]
pub static FLAG_SYRIA :  Emoji = Emoji::new("flag: Syria", Version(2, 0), "üá∏üáæ"); // flag: Syria
		
		#[doc="flag: Taiwan üáπüáº"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TAIWAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TAIWAN); // üáπüáº (`U+1F1F9 U+1F1FC`)"] #[doc="# assert_eq!(FLAG_TAIWAN.to_string().as_str(), \"üáπüáº\");"]
#[doc="```"]
pub static FLAG_TAIWAN :  Emoji = Emoji::new("flag: Taiwan", Version(2, 0), "üáπüáº"); // flag: Taiwan
		
		#[doc="flag: Tajikistan üáπüáØ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TAJIKISTAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TAJIKISTAN); // üáπüáØ (`U+1F1F9 U+1F1EF`)"] #[doc="# assert_eq!(FLAG_TAJIKISTAN.to_string().as_str(), \"üáπüáØ\");"]
#[doc="```"]
pub static FLAG_TAJIKISTAN :  Emoji = Emoji::new("flag: Tajikistan", Version(2, 0), "üáπüáØ"); // flag: Tajikistan
		
		#[doc="flag: Tanzania üáπüáø"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TANZANIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TANZANIA); // üáπüáø (`U+1F1F9 U+1F1FF`)"] #[doc="# assert_eq!(FLAG_TANZANIA.to_string().as_str(), \"üáπüáø\");"]
#[doc="```"]
pub static FLAG_TANZANIA :  Emoji = Emoji::new("flag: Tanzania", Version(2, 0), "üáπüáø"); // flag: Tanzania
		
		#[doc="flag: Thailand üáπüá≠"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_THAILAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_THAILAND); // üáπüá≠ (`U+1F1F9 U+1F1ED`)"] #[doc="# assert_eq!(FLAG_THAILAND.to_string().as_str(), \"üáπüá≠\");"]
#[doc="```"]
pub static FLAG_THAILAND :  Emoji = Emoji::new("flag: Thailand", Version(2, 0), "üáπüá≠"); // flag: Thailand
		
		#[doc="flag: Timor-Leste üáπüá±"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TIMOR_LESTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TIMOR_LESTE); // üáπüá± (`U+1F1F9 U+1F1F1`)"] #[doc="# assert_eq!(FLAG_TIMOR_LESTE.to_string().as_str(), \"üáπüá±\");"]
#[doc="```"]
pub static FLAG_TIMOR_LESTE :  Emoji = Emoji::new("flag: Timor-Leste", Version(2, 0), "üáπüá±"); // flag: Timor-Leste
		
		#[doc="flag: Togo üáπüá¨"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TOGO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TOGO); // üáπüá¨ (`U+1F1F9 U+1F1EC`)"] #[doc="# assert_eq!(FLAG_TOGO.to_string().as_str(), \"üáπüá¨\");"]
#[doc="```"]
pub static FLAG_TOGO :  Emoji = Emoji::new("flag: Togo", Version(2, 0), "üáπüá¨"); // flag: Togo
		
		#[doc="flag: Tokelau üáπüá∞"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TOKELAU;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TOKELAU); // üáπüá∞ (`U+1F1F9 U+1F1F0`)"] #[doc="# assert_eq!(FLAG_TOKELAU.to_string().as_str(), \"üáπüá∞\");"]
#[doc="```"]
pub static FLAG_TOKELAU :  Emoji = Emoji::new("flag: Tokelau", Version(2, 0), "üáπüá∞"); // flag: Tokelau
		
		#[doc="flag: Tonga üáπüá¥"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TONGA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TONGA); // üáπüá¥ (`U+1F1F9 U+1F1F4`)"] #[doc="# assert_eq!(FLAG_TONGA.to_string().as_str(), \"üáπüá¥\");"]
#[doc="```"]
pub static FLAG_TONGA :  Emoji = Emoji::new("flag: Tonga", Version(2, 0), "üáπüá¥"); // flag: Tonga
		
		#[doc="flag: Trinidad & Tobago üáπüáπ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TRINIDAD_AND_TOBAGO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TRINIDAD_AND_TOBAGO); // üáπüáπ (`U+1F1F9 U+1F1F9`)"] #[doc="# assert_eq!(FLAG_TRINIDAD_AND_TOBAGO.to_string().as_str(), \"üáπüáπ\");"]
#[doc="```"]
pub static FLAG_TRINIDAD_AND_TOBAGO :  Emoji = Emoji::new("flag: Trinidad & Tobago", Version(2, 0), "üáπüáπ"); // flag: Trinidad & Tobago
		
		#[doc="flag: Tristan da Cunha üáπüá¶"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TRISTAN_DA_CUNHA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TRISTAN_DA_CUNHA); // üáπüá¶ (`U+1F1F9 U+1F1E6`)"] #[doc="# assert_eq!(FLAG_TRISTAN_DA_CUNHA.to_string().as_str(), \"üáπüá¶\");"]
#[doc="```"]
pub static FLAG_TRISTAN_DA_CUNHA :  Emoji = Emoji::new("flag: Tristan da Cunha", Version(2, 0), "üáπüá¶"); // flag: Tristan da Cunha
		
		#[doc="flag: Tunisia üáπüá≥"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TUNISIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TUNISIA); // üáπüá≥ (`U+1F1F9 U+1F1F3`)"] #[doc="# assert_eq!(FLAG_TUNISIA.to_string().as_str(), \"üáπüá≥\");"]
#[doc="```"]
pub static FLAG_TUNISIA :  Emoji = Emoji::new("flag: Tunisia", Version(2, 0), "üáπüá≥"); // flag: Tunisia
		
		#[doc="flag: Turkey üáπüá∑"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TURKEY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TURKEY); // üáπüá∑ (`U+1F1F9 U+1F1F7`)"] #[doc="# assert_eq!(FLAG_TURKEY.to_string().as_str(), \"üáπüá∑\");"]
#[doc="```"]
pub static FLAG_TURKEY :  Emoji = Emoji::new("flag: Turkey", Version(2, 0), "üáπüá∑"); // flag: Turkey
		
		#[doc="flag: Turkmenistan üáπüá≤"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TURKMENISTAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TURKMENISTAN); // üáπüá≤ (`U+1F1F9 U+1F1F2`)"] #[doc="# assert_eq!(FLAG_TURKMENISTAN.to_string().as_str(), \"üáπüá≤\");"]
#[doc="```"]
pub static FLAG_TURKMENISTAN :  Emoji = Emoji::new("flag: Turkmenistan", Version(2, 0), "üáπüá≤"); // flag: Turkmenistan
		
		#[doc="flag: Turks & Caicos Islands üáπüá®"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TURKS_AND_CAICOS_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TURKS_AND_CAICOS_ISLANDS); // üáπüá® (`U+1F1F9 U+1F1E8`)"] #[doc="# assert_eq!(FLAG_TURKS_AND_CAICOS_ISLANDS.to_string().as_str(), \"üáπüá®\");"]
#[doc="```"]
pub static FLAG_TURKS_AND_CAICOS_ISLANDS :  Emoji = Emoji::new("flag: Turks & Caicos Islands", Version(2, 0), "üáπüá®"); // flag: Turks & Caicos Islands
		
		#[doc="flag: Tuvalu üáπüáª"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TUVALU;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TUVALU); // üáπüáª (`U+1F1F9 U+1F1FB`)"] #[doc="# assert_eq!(FLAG_TUVALU.to_string().as_str(), \"üáπüáª\");"]
#[doc="```"]
pub static FLAG_TUVALU :  Emoji = Emoji::new("flag: Tuvalu", Version(2, 0), "üáπüáª"); // flag: Tuvalu
		
		#[doc="flag: Uganda üá∫üá¨"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_UGANDA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_UGANDA); // üá∫üá¨ (`U+1F1FA U+1F1EC`)"] #[doc="# assert_eq!(FLAG_UGANDA.to_string().as_str(), \"üá∫üá¨\");"]
#[doc="```"]
pub static FLAG_UGANDA :  Emoji = Emoji::new("flag: Uganda", Version(2, 0), "üá∫üá¨"); // flag: Uganda
		
		#[doc="flag: Ukraine üá∫üá¶"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_UKRAINE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_UKRAINE); // üá∫üá¶ (`U+1F1FA U+1F1E6`)"] #[doc="# assert_eq!(FLAG_UKRAINE.to_string().as_str(), \"üá∫üá¶\");"]
#[doc="```"]
pub static FLAG_UKRAINE :  Emoji = Emoji::new("flag: Ukraine", Version(2, 0), "üá∫üá¶"); // flag: Ukraine
		
		#[doc="flag: United Arab Emirates üá¶üá™"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_UNITED_ARAB_EMIRATES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_UNITED_ARAB_EMIRATES); // üá¶üá™ (`U+1F1E6 U+1F1EA`)"] #[doc="# assert_eq!(FLAG_UNITED_ARAB_EMIRATES.to_string().as_str(), \"üá¶üá™\");"]
#[doc="```"]
pub static FLAG_UNITED_ARAB_EMIRATES :  Emoji = Emoji::new("flag: United Arab Emirates", Version(2, 0), "üá¶üá™"); // flag: United Arab Emirates
		
		#[doc="flag: United Kingdom üá¨üáß"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_UNITED_KINGDOM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_UNITED_KINGDOM); // üá¨üáß (`U+1F1EC U+1F1E7`)"] #[doc="# assert_eq!(FLAG_UNITED_KINGDOM.to_string().as_str(), \"üá¨üáß\");"]
#[doc="```"]
pub static FLAG_UNITED_KINGDOM :  Emoji = Emoji::new("flag: United Kingdom", Version(0, 6), "üá¨üáß"); // flag: United Kingdom
		
		#[doc="flag: United Nations üá∫üá≥"]#[doc=""]#[doc="Since E4.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_UNITED_NATIONS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_UNITED_NATIONS); // üá∫üá≥ (`U+1F1FA U+1F1F3`)"] #[doc="# assert_eq!(FLAG_UNITED_NATIONS.to_string().as_str(), \"üá∫üá≥\");"]
#[doc="```"]
pub static FLAG_UNITED_NATIONS :  Emoji = Emoji::new("flag: United Nations", Version(4, 0), "üá∫üá≥"); // flag: United Nations
		
		#[doc="flag: United States üá∫üá∏"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_UNITED_STATES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_UNITED_STATES); // üá∫üá∏ (`U+1F1FA U+1F1F8`)"] #[doc="# assert_eq!(FLAG_UNITED_STATES.to_string().as_str(), \"üá∫üá∏\");"]
#[doc="```"]
pub static FLAG_UNITED_STATES :  Emoji = Emoji::new("flag: United States", Version(0, 6), "üá∫üá∏"); // flag: United States
		
		#[doc="flag: Uruguay üá∫üáæ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_URUGUAY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_URUGUAY); // üá∫üáæ (`U+1F1FA U+1F1FE`)"] #[doc="# assert_eq!(FLAG_URUGUAY.to_string().as_str(), \"üá∫üáæ\");"]
#[doc="```"]
pub static FLAG_URUGUAY :  Emoji = Emoji::new("flag: Uruguay", Version(2, 0), "üá∫üáæ"); // flag: Uruguay
		
		#[doc="flag: U.S. Outlying Islands üá∫üá≤"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_US_OUTLYING_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_US_OUTLYING_ISLANDS); // üá∫üá≤ (`U+1F1FA U+1F1F2`)"] #[doc="# assert_eq!(FLAG_US_OUTLYING_ISLANDS.to_string().as_str(), \"üá∫üá≤\");"]
#[doc="```"]
pub static FLAG_US_OUTLYING_ISLANDS :  Emoji = Emoji::new("flag: U.S. Outlying Islands", Version(2, 0), "üá∫üá≤"); // flag: U.S. Outlying Islands
		
		#[doc="flag: U.S. Virgin Islands üáªüáÆ"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_US_VIRGIN_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_US_VIRGIN_ISLANDS); // üáªüáÆ (`U+1F1FB U+1F1EE`)"] #[doc="# assert_eq!(FLAG_US_VIRGIN_ISLANDS.to_string().as_str(), \"üáªüáÆ\");"]
#[doc="```"]
pub static FLAG_US_VIRGIN_ISLANDS :  Emoji = Emoji::new("flag: U.S. Virgin Islands", Version(2, 0), "üáªüáÆ"); // flag: U.S. Virgin Islands
		
		#[doc="flag: Uzbekistan üá∫üáø"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_UZBEKISTAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_UZBEKISTAN); // üá∫üáø (`U+1F1FA U+1F1FF`)"] #[doc="# assert_eq!(FLAG_UZBEKISTAN.to_string().as_str(), \"üá∫üáø\");"]
#[doc="```"]
pub static FLAG_UZBEKISTAN :  Emoji = Emoji::new("flag: Uzbekistan", Version(2, 0), "üá∫üáø"); // flag: Uzbekistan
		
		#[doc="flag: Vanuatu üáªüá∫"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_VANUATU;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_VANUATU); // üáªüá∫ (`U+1F1FB U+1F1FA`)"] #[doc="# assert_eq!(FLAG_VANUATU.to_string().as_str(), \"üáªüá∫\");"]
#[doc="```"]
pub static FLAG_VANUATU :  Emoji = Emoji::new("flag: Vanuatu", Version(2, 0), "üáªüá∫"); // flag: Vanuatu
		
		#[doc="flag: Vatican City üáªüá¶"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_VATICAN_CITY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_VATICAN_CITY); // üáªüá¶ (`U+1F1FB U+1F1E6`)"] #[doc="# assert_eq!(FLAG_VATICAN_CITY.to_string().as_str(), \"üáªüá¶\");"]
#[doc="```"]
pub static FLAG_VATICAN_CITY :  Emoji = Emoji::new("flag: Vatican City", Version(2, 0), "üáªüá¶"); // flag: Vatican City
		
		#[doc="flag: Venezuela üáªüá™"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_VENEZUELA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_VENEZUELA); // üáªüá™ (`U+1F1FB U+1F1EA`)"] #[doc="# assert_eq!(FLAG_VENEZUELA.to_string().as_str(), \"üáªüá™\");"]
#[doc="```"]
pub static FLAG_VENEZUELA :  Emoji = Emoji::new("flag: Venezuela", Version(2, 0), "üáªüá™"); // flag: Venezuela
		
		#[doc="flag: Vietnam üáªüá≥"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_VIETNAM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_VIETNAM); // üáªüá≥ (`U+1F1FB U+1F1F3`)"] #[doc="# assert_eq!(FLAG_VIETNAM.to_string().as_str(), \"üáªüá≥\");"]
#[doc="```"]
pub static FLAG_VIETNAM :  Emoji = Emoji::new("flag: Vietnam", Version(2, 0), "üáªüá≥"); // flag: Vietnam
		
		#[doc="flag: Wallis & Futuna üáºüá´"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_WALLIS_AND_FUTUNA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_WALLIS_AND_FUTUNA); // üáºüá´ (`U+1F1FC U+1F1EB`)"] #[doc="# assert_eq!(FLAG_WALLIS_AND_FUTUNA.to_string().as_str(), \"üáºüá´\");"]
#[doc="```"]
pub static FLAG_WALLIS_AND_FUTUNA :  Emoji = Emoji::new("flag: Wallis & Futuna", Version(2, 0), "üáºüá´"); // flag: Wallis & Futuna
		
		#[doc="flag: Western Sahara üá™üá≠"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_WESTERN_SAHARA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_WESTERN_SAHARA); // üá™üá≠ (`U+1F1EA U+1F1ED`)"] #[doc="# assert_eq!(FLAG_WESTERN_SAHARA.to_string().as_str(), \"üá™üá≠\");"]
#[doc="```"]
pub static FLAG_WESTERN_SAHARA :  Emoji = Emoji::new("flag: Western Sahara", Version(2, 0), "üá™üá≠"); // flag: Western Sahara
		
		#[doc="flag: Yemen üáæüá™"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_YEMEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_YEMEN); // üáæüá™ (`U+1F1FE U+1F1EA`)"] #[doc="# assert_eq!(FLAG_YEMEN.to_string().as_str(), \"üáæüá™\");"]
#[doc="```"]
pub static FLAG_YEMEN :  Emoji = Emoji::new("flag: Yemen", Version(2, 0), "üáæüá™"); // flag: Yemen
		
		#[doc="flag: Zambia üáøüá≤"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ZAMBIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ZAMBIA); // üáøüá≤ (`U+1F1FF U+1F1F2`)"] #[doc="# assert_eq!(FLAG_ZAMBIA.to_string().as_str(), \"üáøüá≤\");"]
#[doc="```"]
pub static FLAG_ZAMBIA :  Emoji = Emoji::new("flag: Zambia", Version(2, 0), "üáøüá≤"); // flag: Zambia
		
		#[doc="flag: Zimbabwe üáøüáº"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ZIMBABWE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ZIMBABWE); // üáøüáº (`U+1F1FF U+1F1FC`)"] #[doc="# assert_eq!(FLAG_ZIMBABWE.to_string().as_str(), \"üáøüáº\");"]
#[doc="```"]
pub static FLAG_ZIMBABWE :  Emoji = Emoji::new("flag: Zimbabwe", Version(2, 0), "üáøüáº"); // flag: Zimbabwe
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // FLAG_AFGHANISTAN
				
				&FLAG_AFGHANISTAN,
				
			],
			
			&[ // FLAG_ALAND_ISLANDS
				
				&FLAG_ALAND_ISLANDS,
				
			],
			
			&[ // FLAG_ALBANIA
				
				&FLAG_ALBANIA,
				
			],
			
			&[ // FLAG_ALGERIA
				
				&FLAG_ALGERIA,
				
			],
			
			&[ // FLAG_AMERICAN_SAMOA
				
				&FLAG_AMERICAN_SAMOA,
				
			],
			
			&[ // FLAG_ANDORRA
				
				&FLAG_ANDORRA,
				
			],
			
			&[ // FLAG_ANGOLA
				
				&FLAG_ANGOLA,
				
			],
			
			&[ // FLAG_ANGUILLA
				
				&FLAG_ANGUILLA,
				
			],
			
			&[ // FLAG_ANTARCTICA
				
				&FLAG_ANTARCTICA,
				
			],
			
			&[ // FLAG_ANTIGUA_AND_BARBUDA
				
				&FLAG_ANTIGUA_AND_BARBUDA,
				
			],
			
			&[ // FLAG_ARGENTINA
				
				&FLAG_ARGENTINA,
				
			],
			
			&[ // FLAG_ARMENIA
				
				&FLAG_ARMENIA,
				
			],
			
			&[ // FLAG_ARUBA
				
				&FLAG_ARUBA,
				
			],
			
			&[ // FLAG_ASCENSION_ISLAND
				
				&FLAG_ASCENSION_ISLAND,
				
			],
			
			&[ // FLAG_AUSTRALIA
				
				&FLAG_AUSTRALIA,
				
			],
			
			&[ // FLAG_AUSTRIA
				
				&FLAG_AUSTRIA,
				
			],
			
			&[ // FLAG_AZERBAIJAN
				
				&FLAG_AZERBAIJAN,
				
			],
			
			&[ // FLAG_BAHAMAS
				
				&FLAG_BAHAMAS,
				
			],
			
			&[ // FLAG_BAHRAIN
				
				&FLAG_BAHRAIN,
				
			],
			
			&[ // FLAG_BANGLADESH
				
				&FLAG_BANGLADESH,
				
			],
			
			&[ // FLAG_BARBADOS
				
				&FLAG_BARBADOS,
				
			],
			
			&[ // FLAG_BELARUS
				
				&FLAG_BELARUS,
				
			],
			
			&[ // FLAG_BELGIUM
				
				&FLAG_BELGIUM,
				
			],
			
			&[ // FLAG_BELIZE
				
				&FLAG_BELIZE,
				
			],
			
			&[ // FLAG_BENIN
				
				&FLAG_BENIN,
				
			],
			
			&[ // FLAG_BERMUDA
				
				&FLAG_BERMUDA,
				
			],
			
			&[ // FLAG_BHUTAN
				
				&FLAG_BHUTAN,
				
			],
			
			&[ // FLAG_BOLIVIA
				
				&FLAG_BOLIVIA,
				
			],
			
			&[ // FLAG_BOSNIA_AND_HERZEGOVINA
				
				&FLAG_BOSNIA_AND_HERZEGOVINA,
				
			],
			
			&[ // FLAG_BOTSWANA
				
				&FLAG_BOTSWANA,
				
			],
			
			&[ // FLAG_BOUVET_ISLAND
				
				&FLAG_BOUVET_ISLAND,
				
			],
			
			&[ // FLAG_BRAZIL
				
				&FLAG_BRAZIL,
				
			],
			
			&[ // FLAG_BRITISH_INDIAN_OCEAN_TERRITORY
				
				&FLAG_BRITISH_INDIAN_OCEAN_TERRITORY,
				
			],
			
			&[ // FLAG_BRITISH_VIRGIN_ISLANDS
				
				&FLAG_BRITISH_VIRGIN_ISLANDS,
				
			],
			
			&[ // FLAG_BRUNEI
				
				&FLAG_BRUNEI,
				
			],
			
			&[ // FLAG_BULGARIA
				
				&FLAG_BULGARIA,
				
			],
			
			&[ // FLAG_BURKINA_FASO
				
				&FLAG_BURKINA_FASO,
				
			],
			
			&[ // FLAG_BURUNDI
				
				&FLAG_BURUNDI,
				
			],
			
			&[ // FLAG_CAMBODIA
				
				&FLAG_CAMBODIA,
				
			],
			
			&[ // FLAG_CAMEROON
				
				&FLAG_CAMEROON,
				
			],
			
			&[ // FLAG_CANADA
				
				&FLAG_CANADA,
				
			],
			
			&[ // FLAG_CANARY_ISLANDS
				
				&FLAG_CANARY_ISLANDS,
				
			],
			
			&[ // FLAG_CAPE_VERDE
				
				&FLAG_CAPE_VERDE,
				
			],
			
			&[ // FLAG_CARIBBEAN_NETHERLANDS
				
				&FLAG_CARIBBEAN_NETHERLANDS,
				
			],
			
			&[ // FLAG_CAYMAN_ISLANDS
				
				&FLAG_CAYMAN_ISLANDS,
				
			],
			
			&[ // FLAG_CENTRAL_AFRICAN_REPUBLIC
				
				&FLAG_CENTRAL_AFRICAN_REPUBLIC,
				
			],
			
			&[ // FLAG_CEUTA_AND_MELILLA
				
				&FLAG_CEUTA_AND_MELILLA,
				
			],
			
			&[ // FLAG_CHAD
				
				&FLAG_CHAD,
				
			],
			
			&[ // FLAG_CHILE
				
				&FLAG_CHILE,
				
			],
			
			&[ // FLAG_CHINA
				
				&FLAG_CHINA,
				
			],
			
			&[ // FLAG_CHRISTMAS_ISLAND
				
				&FLAG_CHRISTMAS_ISLAND,
				
			],
			
			&[ // FLAG_CLIPPERTON_ISLAND
				
				&FLAG_CLIPPERTON_ISLAND,
				
			],
			
			&[ // FLAG_COCOS_KEELING_ISLANDS
				
				&FLAG_COCOS_KEELING_ISLANDS,
				
			],
			
			&[ // FLAG_COLOMBIA
				
				&FLAG_COLOMBIA,
				
			],
			
			&[ // FLAG_COMOROS
				
				&FLAG_COMOROS,
				
			],
			
			&[ // FLAG_CONGO_BRAZZAVILLE
				
				&FLAG_CONGO_BRAZZAVILLE,
				
			],
			
			&[ // FLAG_CONGO_KINSHASA
				
				&FLAG_CONGO_KINSHASA,
				
			],
			
			&[ // FLAG_COOK_ISLANDS
				
				&FLAG_COOK_ISLANDS,
				
			],
			
			&[ // FLAG_COSTA_RICA
				
				&FLAG_COSTA_RICA,
				
			],
			
			&[ // FLAG_COTE_D_IVOIRE
				
				&FLAG_COTE_D_IVOIRE,
				
			],
			
			&[ // FLAG_CROATIA
				
				&FLAG_CROATIA,
				
			],
			
			&[ // FLAG_CUBA
				
				&FLAG_CUBA,
				
			],
			
			&[ // FLAG_CURACAO
				
				&FLAG_CURACAO,
				
			],
			
			&[ // FLAG_CYPRUS
				
				&FLAG_CYPRUS,
				
			],
			
			&[ // FLAG_CZECHIA
				
				&FLAG_CZECHIA,
				
			],
			
			&[ // FLAG_DENMARK
				
				&FLAG_DENMARK,
				
			],
			
			&[ // FLAG_DIEGO_GARCIA
				
				&FLAG_DIEGO_GARCIA,
				
			],
			
			&[ // FLAG_DJIBOUTI
				
				&FLAG_DJIBOUTI,
				
			],
			
			&[ // FLAG_DOMINICA
				
				&FLAG_DOMINICA,
				
			],
			
			&[ // FLAG_DOMINICAN_REPUBLIC
				
				&FLAG_DOMINICAN_REPUBLIC,
				
			],
			
			&[ // FLAG_ECUADOR
				
				&FLAG_ECUADOR,
				
			],
			
			&[ // FLAG_EGYPT
				
				&FLAG_EGYPT,
				
			],
			
			&[ // FLAG_EL_SALVADOR
				
				&FLAG_EL_SALVADOR,
				
			],
			
			&[ // FLAG_EQUATORIAL_GUINEA
				
				&FLAG_EQUATORIAL_GUINEA,
				
			],
			
			&[ // FLAG_ERITREA
				
				&FLAG_ERITREA,
				
			],
			
			&[ // FLAG_ESTONIA
				
				&FLAG_ESTONIA,
				
			],
			
			&[ // FLAG_ESWATINI
				
				&FLAG_ESWATINI,
				
			],
			
			&[ // FLAG_ETHIOPIA
				
				&FLAG_ETHIOPIA,
				
			],
			
			&[ // FLAG_EUROPEAN_UNION
				
				&FLAG_EUROPEAN_UNION,
				
			],
			
			&[ // FLAG_FALKLAND_ISLANDS
				
				&FLAG_FALKLAND_ISLANDS,
				
			],
			
			&[ // FLAG_FAROE_ISLANDS
				
				&FLAG_FAROE_ISLANDS,
				
			],
			
			&[ // FLAG_FIJI
				
				&FLAG_FIJI,
				
			],
			
			&[ // FLAG_FINLAND
				
				&FLAG_FINLAND,
				
			],
			
			&[ // FLAG_FRANCE
				
				&FLAG_FRANCE,
				
			],
			
			&[ // FLAG_FRENCH_GUIANA
				
				&FLAG_FRENCH_GUIANA,
				
			],
			
			&[ // FLAG_FRENCH_POLYNESIA
				
				&FLAG_FRENCH_POLYNESIA,
				
			],
			
			&[ // FLAG_FRENCH_SOUTHERN_TERRITORIES
				
				&FLAG_FRENCH_SOUTHERN_TERRITORIES,
				
			],
			
			&[ // FLAG_GABON
				
				&FLAG_GABON,
				
			],
			
			&[ // FLAG_GAMBIA
				
				&FLAG_GAMBIA,
				
			],
			
			&[ // FLAG_GEORGIA
				
				&FLAG_GEORGIA,
				
			],
			
			&[ // FLAG_GERMANY
				
				&FLAG_GERMANY,
				
			],
			
			&[ // FLAG_GHANA
				
				&FLAG_GHANA,
				
			],
			
			&[ // FLAG_GIBRALTAR
				
				&FLAG_GIBRALTAR,
				
			],
			
			&[ // FLAG_GREECE
				
				&FLAG_GREECE,
				
			],
			
			&[ // FLAG_GREENLAND
				
				&FLAG_GREENLAND,
				
			],
			
			&[ // FLAG_GRENADA
				
				&FLAG_GRENADA,
				
			],
			
			&[ // FLAG_GUADELOUPE
				
				&FLAG_GUADELOUPE,
				
			],
			
			&[ // FLAG_GUAM
				
				&FLAG_GUAM,
				
			],
			
			&[ // FLAG_GUATEMALA
				
				&FLAG_GUATEMALA,
				
			],
			
			&[ // FLAG_GUERNSEY
				
				&FLAG_GUERNSEY,
				
			],
			
			&[ // FLAG_GUINEA
				
				&FLAG_GUINEA,
				
			],
			
			&[ // FLAG_GUINEA_BISSAU
				
				&FLAG_GUINEA_BISSAU,
				
			],
			
			&[ // FLAG_GUYANA
				
				&FLAG_GUYANA,
				
			],
			
			&[ // FLAG_HAITI
				
				&FLAG_HAITI,
				
			],
			
			&[ // FLAG_HEARD_AND_MCDONALD_ISLANDS
				
				&FLAG_HEARD_AND_MCDONALD_ISLANDS,
				
			],
			
			&[ // FLAG_HONDURAS
				
				&FLAG_HONDURAS,
				
			],
			
			&[ // FLAG_HONG_KONG_SAR_CHINA
				
				&FLAG_HONG_KONG_SAR_CHINA,
				
			],
			
			&[ // FLAG_HUNGARY
				
				&FLAG_HUNGARY,
				
			],
			
			&[ // FLAG_ICELAND
				
				&FLAG_ICELAND,
				
			],
			
			&[ // FLAG_INDIA
				
				&FLAG_INDIA,
				
			],
			
			&[ // FLAG_INDONESIA
				
				&FLAG_INDONESIA,
				
			],
			
			&[ // FLAG_IRAN
				
				&FLAG_IRAN,
				
			],
			
			&[ // FLAG_IRAQ
				
				&FLAG_IRAQ,
				
			],
			
			&[ // FLAG_IRELAND
				
				&FLAG_IRELAND,
				
			],
			
			&[ // FLAG_ISLE_OF_MAN
				
				&FLAG_ISLE_OF_MAN,
				
			],
			
			&[ // FLAG_ISRAEL
				
				&FLAG_ISRAEL,
				
			],
			
			&[ // FLAG_ITALY
				
				&FLAG_ITALY,
				
			],
			
			&[ // FLAG_JAMAICA
				
				&FLAG_JAMAICA,
				
			],
			
			&[ // FLAG_JAPAN
				
				&FLAG_JAPAN,
				
			],
			
			&[ // FLAG_JERSEY
				
				&FLAG_JERSEY,
				
			],
			
			&[ // FLAG_JORDAN
				
				&FLAG_JORDAN,
				
			],
			
			&[ // FLAG_KAZAKHSTAN
				
				&FLAG_KAZAKHSTAN,
				
			],
			
			&[ // FLAG_KENYA
				
				&FLAG_KENYA,
				
			],
			
			&[ // FLAG_KIRIBATI
				
				&FLAG_KIRIBATI,
				
			],
			
			&[ // FLAG_KOSOVO
				
				&FLAG_KOSOVO,
				
			],
			
			&[ // FLAG_KUWAIT
				
				&FLAG_KUWAIT,
				
			],
			
			&[ // FLAG_KYRGYZSTAN
				
				&FLAG_KYRGYZSTAN,
				
			],
			
			&[ // FLAG_LAOS
				
				&FLAG_LAOS,
				
			],
			
			&[ // FLAG_LATVIA
				
				&FLAG_LATVIA,
				
			],
			
			&[ // FLAG_LEBANON
				
				&FLAG_LEBANON,
				
			],
			
			&[ // FLAG_LESOTHO
				
				&FLAG_LESOTHO,
				
			],
			
			&[ // FLAG_LIBERIA
				
				&FLAG_LIBERIA,
				
			],
			
			&[ // FLAG_LIBYA
				
				&FLAG_LIBYA,
				
			],
			
			&[ // FLAG_LIECHTENSTEIN
				
				&FLAG_LIECHTENSTEIN,
				
			],
			
			&[ // FLAG_LITHUANIA
				
				&FLAG_LITHUANIA,
				
			],
			
			&[ // FLAG_LUXEMBOURG
				
				&FLAG_LUXEMBOURG,
				
			],
			
			&[ // FLAG_MACAO_SAR_CHINA
				
				&FLAG_MACAO_SAR_CHINA,
				
			],
			
			&[ // FLAG_MADAGASCAR
				
				&FLAG_MADAGASCAR,
				
			],
			
			&[ // FLAG_MALAWI
				
				&FLAG_MALAWI,
				
			],
			
			&[ // FLAG_MALAYSIA
				
				&FLAG_MALAYSIA,
				
			],
			
			&[ // FLAG_MALDIVES
				
				&FLAG_MALDIVES,
				
			],
			
			&[ // FLAG_MALI
				
				&FLAG_MALI,
				
			],
			
			&[ // FLAG_MALTA
				
				&FLAG_MALTA,
				
			],
			
			&[ // FLAG_MARSHALL_ISLANDS
				
				&FLAG_MARSHALL_ISLANDS,
				
			],
			
			&[ // FLAG_MARTINIQUE
				
				&FLAG_MARTINIQUE,
				
			],
			
			&[ // FLAG_MAURITANIA
				
				&FLAG_MAURITANIA,
				
			],
			
			&[ // FLAG_MAURITIUS
				
				&FLAG_MAURITIUS,
				
			],
			
			&[ // FLAG_MAYOTTE
				
				&FLAG_MAYOTTE,
				
			],
			
			&[ // FLAG_MEXICO
				
				&FLAG_MEXICO,
				
			],
			
			&[ // FLAG_MICRONESIA
				
				&FLAG_MICRONESIA,
				
			],
			
			&[ // FLAG_MOLDOVA
				
				&FLAG_MOLDOVA,
				
			],
			
			&[ // FLAG_MONACO
				
				&FLAG_MONACO,
				
			],
			
			&[ // FLAG_MONGOLIA
				
				&FLAG_MONGOLIA,
				
			],
			
			&[ // FLAG_MONTENEGRO
				
				&FLAG_MONTENEGRO,
				
			],
			
			&[ // FLAG_MONTSERRAT
				
				&FLAG_MONTSERRAT,
				
			],
			
			&[ // FLAG_MOROCCO
				
				&FLAG_MOROCCO,
				
			],
			
			&[ // FLAG_MOZAMBIQUE
				
				&FLAG_MOZAMBIQUE,
				
			],
			
			&[ // FLAG_MYANMAR_BURMA
				
				&FLAG_MYANMAR_BURMA,
				
			],
			
			&[ // FLAG_NAMIBIA
				
				&FLAG_NAMIBIA,
				
			],
			
			&[ // FLAG_NAURU
				
				&FLAG_NAURU,
				
			],
			
			&[ // FLAG_NEPAL
				
				&FLAG_NEPAL,
				
			],
			
			&[ // FLAG_NETHERLANDS
				
				&FLAG_NETHERLANDS,
				
			],
			
			&[ // FLAG_NEW_CALEDONIA
				
				&FLAG_NEW_CALEDONIA,
				
			],
			
			&[ // FLAG_NEW_ZEALAND
				
				&FLAG_NEW_ZEALAND,
				
			],
			
			&[ // FLAG_NICARAGUA
				
				&FLAG_NICARAGUA,
				
			],
			
			&[ // FLAG_NIGER
				
				&FLAG_NIGER,
				
			],
			
			&[ // FLAG_NIGERIA
				
				&FLAG_NIGERIA,
				
			],
			
			&[ // FLAG_NIUE
				
				&FLAG_NIUE,
				
			],
			
			&[ // FLAG_NORFOLK_ISLAND
				
				&FLAG_NORFOLK_ISLAND,
				
			],
			
			&[ // FLAG_NORTHERN_MARIANA_ISLANDS
				
				&FLAG_NORTHERN_MARIANA_ISLANDS,
				
			],
			
			&[ // FLAG_NORTH_KOREA
				
				&FLAG_NORTH_KOREA,
				
			],
			
			&[ // FLAG_NORTH_MACEDONIA
				
				&FLAG_NORTH_MACEDONIA,
				
			],
			
			&[ // FLAG_NORWAY
				
				&FLAG_NORWAY,
				
			],
			
			&[ // FLAG_OMAN
				
				&FLAG_OMAN,
				
			],
			
			&[ // FLAG_PAKISTAN
				
				&FLAG_PAKISTAN,
				
			],
			
			&[ // FLAG_PALAU
				
				&FLAG_PALAU,
				
			],
			
			&[ // FLAG_PALESTINIAN_TERRITORIES
				
				&FLAG_PALESTINIAN_TERRITORIES,
				
			],
			
			&[ // FLAG_PANAMA
				
				&FLAG_PANAMA,
				
			],
			
			&[ // FLAG_PAPUA_NEW_GUINEA
				
				&FLAG_PAPUA_NEW_GUINEA,
				
			],
			
			&[ // FLAG_PARAGUAY
				
				&FLAG_PARAGUAY,
				
			],
			
			&[ // FLAG_PERU
				
				&FLAG_PERU,
				
			],
			
			&[ // FLAG_PHILIPPINES
				
				&FLAG_PHILIPPINES,
				
			],
			
			&[ // FLAG_PITCAIRN_ISLANDS
				
				&FLAG_PITCAIRN_ISLANDS,
				
			],
			
			&[ // FLAG_POLAND
				
				&FLAG_POLAND,
				
			],
			
			&[ // FLAG_PORTUGAL
				
				&FLAG_PORTUGAL,
				
			],
			
			&[ // FLAG_PUERTO_RICO
				
				&FLAG_PUERTO_RICO,
				
			],
			
			&[ // FLAG_QATAR
				
				&FLAG_QATAR,
				
			],
			
			&[ // FLAG_REUNION
				
				&FLAG_REUNION,
				
			],
			
			&[ // FLAG_ROMANIA
				
				&FLAG_ROMANIA,
				
			],
			
			&[ // FLAG_RUSSIA
				
				&FLAG_RUSSIA,
				
			],
			
			&[ // FLAG_RWANDA
				
				&FLAG_RWANDA,
				
			],
			
			&[ // FLAG_SAMOA
				
				&FLAG_SAMOA,
				
			],
			
			&[ // FLAG_SAN_MARINO
				
				&FLAG_SAN_MARINO,
				
			],
			
			&[ // FLAG_SAO_TOME_AND_PRINCIPE
				
				&FLAG_SAO_TOME_AND_PRINCIPE,
				
			],
			
			&[ // FLAG_SAUDI_ARABIA
				
				&FLAG_SAUDI_ARABIA,
				
			],
			
			&[ // FLAG_SENEGAL
				
				&FLAG_SENEGAL,
				
			],
			
			&[ // FLAG_SERBIA
				
				&FLAG_SERBIA,
				
			],
			
			&[ // FLAG_SEYCHELLES
				
				&FLAG_SEYCHELLES,
				
			],
			
			&[ // FLAG_SIERRA_LEONE
				
				&FLAG_SIERRA_LEONE,
				
			],
			
			&[ // FLAG_SINGAPORE
				
				&FLAG_SINGAPORE,
				
			],
			
			&[ // FLAG_SINT_MAARTEN
				
				&FLAG_SINT_MAARTEN,
				
			],
			
			&[ // FLAG_SLOVAKIA
				
				&FLAG_SLOVAKIA,
				
			],
			
			&[ // FLAG_SLOVENIA
				
				&FLAG_SLOVENIA,
				
			],
			
			&[ // FLAG_SOLOMON_ISLANDS
				
				&FLAG_SOLOMON_ISLANDS,
				
			],
			
			&[ // FLAG_SOMALIA
				
				&FLAG_SOMALIA,
				
			],
			
			&[ // FLAG_SOUTH_AFRICA
				
				&FLAG_SOUTH_AFRICA,
				
			],
			
			&[ // FLAG_SOUTH_GEORGIA_AND_SOUTH_SANDWICH_ISLANDS
				
				&FLAG_SOUTH_GEORGIA_AND_SOUTH_SANDWICH_ISLANDS,
				
			],
			
			&[ // FLAG_SOUTH_KOREA
				
				&FLAG_SOUTH_KOREA,
				
			],
			
			&[ // FLAG_SOUTH_SUDAN
				
				&FLAG_SOUTH_SUDAN,
				
			],
			
			&[ // FLAG_SPAIN
				
				&FLAG_SPAIN,
				
			],
			
			&[ // FLAG_SRI_LANKA
				
				&FLAG_SRI_LANKA,
				
			],
			
			&[ // FLAG_ST_BARTHELEMY
				
				&FLAG_ST_BARTHELEMY,
				
			],
			
			&[ // FLAG_ST_HELENA
				
				&FLAG_ST_HELENA,
				
			],
			
			&[ // FLAG_ST_KITTS_AND_NEVIS
				
				&FLAG_ST_KITTS_AND_NEVIS,
				
			],
			
			&[ // FLAG_ST_LUCIA
				
				&FLAG_ST_LUCIA,
				
			],
			
			&[ // FLAG_ST_MARTIN
				
				&FLAG_ST_MARTIN,
				
			],
			
			&[ // FLAG_ST_PIERRE_AND_MIQUELON
				
				&FLAG_ST_PIERRE_AND_MIQUELON,
				
			],
			
			&[ // FLAG_ST_VINCENT_AND_GRENADINES
				
				&FLAG_ST_VINCENT_AND_GRENADINES,
				
			],
			
			&[ // FLAG_SUDAN
				
				&FLAG_SUDAN,
				
			],
			
			&[ // FLAG_SURINAME
				
				&FLAG_SURINAME,
				
			],
			
			&[ // FLAG_SVALBARD_AND_JAN_MAYEN
				
				&FLAG_SVALBARD_AND_JAN_MAYEN,
				
			],
			
			&[ // FLAG_SWEDEN
				
				&FLAG_SWEDEN,
				
			],
			
			&[ // FLAG_SWITZERLAND
				
				&FLAG_SWITZERLAND,
				
			],
			
			&[ // FLAG_SYRIA
				
				&FLAG_SYRIA,
				
			],
			
			&[ // FLAG_TAIWAN
				
				&FLAG_TAIWAN,
				
			],
			
			&[ // FLAG_TAJIKISTAN
				
				&FLAG_TAJIKISTAN,
				
			],
			
			&[ // FLAG_TANZANIA
				
				&FLAG_TANZANIA,
				
			],
			
			&[ // FLAG_THAILAND
				
				&FLAG_THAILAND,
				
			],
			
			&[ // FLAG_TIMOR_LESTE
				
				&FLAG_TIMOR_LESTE,
				
			],
			
			&[ // FLAG_TOGO
				
				&FLAG_TOGO,
				
			],
			
			&[ // FLAG_TOKELAU
				
				&FLAG_TOKELAU,
				
			],
			
			&[ // FLAG_TONGA
				
				&FLAG_TONGA,
				
			],
			
			&[ // FLAG_TRINIDAD_AND_TOBAGO
				
				&FLAG_TRINIDAD_AND_TOBAGO,
				
			],
			
			&[ // FLAG_TRISTAN_DA_CUNHA
				
				&FLAG_TRISTAN_DA_CUNHA,
				
			],
			
			&[ // FLAG_TUNISIA
				
				&FLAG_TUNISIA,
				
			],
			
			&[ // FLAG_TURKEY
				
				&FLAG_TURKEY,
				
			],
			
			&[ // FLAG_TURKMENISTAN
				
				&FLAG_TURKMENISTAN,
				
			],
			
			&[ // FLAG_TURKS_AND_CAICOS_ISLANDS
				
				&FLAG_TURKS_AND_CAICOS_ISLANDS,
				
			],
			
			&[ // FLAG_TUVALU
				
				&FLAG_TUVALU,
				
			],
			
			&[ // FLAG_UGANDA
				
				&FLAG_UGANDA,
				
			],
			
			&[ // FLAG_UKRAINE
				
				&FLAG_UKRAINE,
				
			],
			
			&[ // FLAG_UNITED_ARAB_EMIRATES
				
				&FLAG_UNITED_ARAB_EMIRATES,
				
			],
			
			&[ // FLAG_UNITED_KINGDOM
				
				&FLAG_UNITED_KINGDOM,
				
			],
			
			&[ // FLAG_UNITED_NATIONS
				
				&FLAG_UNITED_NATIONS,
				
			],
			
			&[ // FLAG_UNITED_STATES
				
				&FLAG_UNITED_STATES,
				
			],
			
			&[ // FLAG_URUGUAY
				
				&FLAG_URUGUAY,
				
			],
			
			&[ // FLAG_US_OUTLYING_ISLANDS
				
				&FLAG_US_OUTLYING_ISLANDS,
				
			],
			
			&[ // FLAG_US_VIRGIN_ISLANDS
				
				&FLAG_US_VIRGIN_ISLANDS,
				
			],
			
			&[ // FLAG_UZBEKISTAN
				
				&FLAG_UZBEKISTAN,
				
			],
			
			&[ // FLAG_VANUATU
				
				&FLAG_VANUATU,
				
			],
			
			&[ // FLAG_VATICAN_CITY
				
				&FLAG_VATICAN_CITY,
				
			],
			
			&[ // FLAG_VENEZUELA
				
				&FLAG_VENEZUELA,
				
			],
			
			&[ // FLAG_VIETNAM
				
				&FLAG_VIETNAM,
				
			],
			
			&[ // FLAG_WALLIS_AND_FUTUNA
				
				&FLAG_WALLIS_AND_FUTUNA,
				
			],
			
			&[ // FLAG_WESTERN_SAHARA
				
				&FLAG_WESTERN_SAHARA,
				
			],
			
			&[ // FLAG_YEMEN
				
				&FLAG_YEMEN,
				
			],
			
			&[ // FLAG_ZAMBIA
				
				&FLAG_ZAMBIA,
				
			],
			
			&[ // FLAG_ZIMBABWE
				
				&FLAG_ZIMBABWE,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&FLAG_AFGHANISTAN, // FLAG_AFGHANISTAN
				
			
				
				&FLAG_ALAND_ISLANDS, // FLAG_ALAND_ISLANDS
				
			
				
				&FLAG_ALBANIA, // FLAG_ALBANIA
				
			
				
				&FLAG_ALGERIA, // FLAG_ALGERIA
				
			
				
				&FLAG_AMERICAN_SAMOA, // FLAG_AMERICAN_SAMOA
				
			
				
				&FLAG_ANDORRA, // FLAG_ANDORRA
				
			
				
				&FLAG_ANGOLA, // FLAG_ANGOLA
				
			
				
				&FLAG_ANGUILLA, // FLAG_ANGUILLA
				
			
				
				&FLAG_ANTARCTICA, // FLAG_ANTARCTICA
				
			
				
				&FLAG_ANTIGUA_AND_BARBUDA, // FLAG_ANTIGUA_AND_BARBUDA
				
			
				
				&FLAG_ARGENTINA, // FLAG_ARGENTINA
				
			
				
				&FLAG_ARMENIA, // FLAG_ARMENIA
				
			
				
				&FLAG_ARUBA, // FLAG_ARUBA
				
			
				
				&FLAG_ASCENSION_ISLAND, // FLAG_ASCENSION_ISLAND
				
			
				
				&FLAG_AUSTRALIA, // FLAG_AUSTRALIA
				
			
				
				&FLAG_AUSTRIA, // FLAG_AUSTRIA
				
			
				
				&FLAG_AZERBAIJAN, // FLAG_AZERBAIJAN
				
			
				
				&FLAG_BAHAMAS, // FLAG_BAHAMAS
				
			
				
				&FLAG_BAHRAIN, // FLAG_BAHRAIN
				
			
				
				&FLAG_BANGLADESH, // FLAG_BANGLADESH
				
			
				
				&FLAG_BARBADOS, // FLAG_BARBADOS
				
			
				
				&FLAG_BELARUS, // FLAG_BELARUS
				
			
				
				&FLAG_BELGIUM, // FLAG_BELGIUM
				
			
				
				&FLAG_BELIZE, // FLAG_BELIZE
				
			
				
				&FLAG_BENIN, // FLAG_BENIN
				
			
				
				&FLAG_BERMUDA, // FLAG_BERMUDA
				
			
				
				&FLAG_BHUTAN, // FLAG_BHUTAN
				
			
				
				&FLAG_BOLIVIA, // FLAG_BOLIVIA
				
			
				
				&FLAG_BOSNIA_AND_HERZEGOVINA, // FLAG_BOSNIA_AND_HERZEGOVINA
				
			
				
				&FLAG_BOTSWANA, // FLAG_BOTSWANA
				
			
				
				&FLAG_BOUVET_ISLAND, // FLAG_BOUVET_ISLAND
				
			
				
				&FLAG_BRAZIL, // FLAG_BRAZIL
				
			
				
				&FLAG_BRITISH_INDIAN_OCEAN_TERRITORY, // FLAG_BRITISH_INDIAN_OCEAN_TERRITORY
				
			
				
				&FLAG_BRITISH_VIRGIN_ISLANDS, // FLAG_BRITISH_VIRGIN_ISLANDS
				
			
				
				&FLAG_BRUNEI, // FLAG_BRUNEI
				
			
				
				&FLAG_BULGARIA, // FLAG_BULGARIA
				
			
				
				&FLAG_BURKINA_FASO, // FLAG_BURKINA_FASO
				
			
				
				&FLAG_BURUNDI, // FLAG_BURUNDI
				
			
				
				&FLAG_CAMBODIA, // FLAG_CAMBODIA
				
			
				
				&FLAG_CAMEROON, // FLAG_CAMEROON
				
			
				
				&FLAG_CANADA, // FLAG_CANADA
				
			
				
				&FLAG_CANARY_ISLANDS, // FLAG_CANARY_ISLANDS
				
			
				
				&FLAG_CAPE_VERDE, // FLAG_CAPE_VERDE
				
			
				
				&FLAG_CARIBBEAN_NETHERLANDS, // FLAG_CARIBBEAN_NETHERLANDS
				
			
				
				&FLAG_CAYMAN_ISLANDS, // FLAG_CAYMAN_ISLANDS
				
			
				
				&FLAG_CENTRAL_AFRICAN_REPUBLIC, // FLAG_CENTRAL_AFRICAN_REPUBLIC
				
			
				
				&FLAG_CEUTA_AND_MELILLA, // FLAG_CEUTA_AND_MELILLA
				
			
				
				&FLAG_CHAD, // FLAG_CHAD
				
			
				
				&FLAG_CHILE, // FLAG_CHILE
				
			
				
				&FLAG_CHINA, // FLAG_CHINA
				
			
				
				&FLAG_CHRISTMAS_ISLAND, // FLAG_CHRISTMAS_ISLAND
				
			
				
				&FLAG_CLIPPERTON_ISLAND, // FLAG_CLIPPERTON_ISLAND
				
			
				
				&FLAG_COCOS_KEELING_ISLANDS, // FLAG_COCOS_KEELING_ISLANDS
				
			
				
				&FLAG_COLOMBIA, // FLAG_COLOMBIA
				
			
				
				&FLAG_COMOROS, // FLAG_COMOROS
				
			
				
				&FLAG_CONGO_BRAZZAVILLE, // FLAG_CONGO_BRAZZAVILLE
				
			
				
				&FLAG_CONGO_KINSHASA, // FLAG_CONGO_KINSHASA
				
			
				
				&FLAG_COOK_ISLANDS, // FLAG_COOK_ISLANDS
				
			
				
				&FLAG_COSTA_RICA, // FLAG_COSTA_RICA
				
			
				
				&FLAG_COTE_D_IVOIRE, // FLAG_COTE_D_IVOIRE
				
			
				
				&FLAG_CROATIA, // FLAG_CROATIA
				
			
				
				&FLAG_CUBA, // FLAG_CUBA
				
			
				
				&FLAG_CURACAO, // FLAG_CURACAO
				
			
				
				&FLAG_CYPRUS, // FLAG_CYPRUS
				
			
				
				&FLAG_CZECHIA, // FLAG_CZECHIA
				
			
				
				&FLAG_DENMARK, // FLAG_DENMARK
				
			
				
				&FLAG_DIEGO_GARCIA, // FLAG_DIEGO_GARCIA
				
			
				
				&FLAG_DJIBOUTI, // FLAG_DJIBOUTI
				
			
				
				&FLAG_DOMINICA, // FLAG_DOMINICA
				
			
				
				&FLAG_DOMINICAN_REPUBLIC, // FLAG_DOMINICAN_REPUBLIC
				
			
				
				&FLAG_ECUADOR, // FLAG_ECUADOR
				
			
				
				&FLAG_EGYPT, // FLAG_EGYPT
				
			
				
				&FLAG_EL_SALVADOR, // FLAG_EL_SALVADOR
				
			
				
				&FLAG_EQUATORIAL_GUINEA, // FLAG_EQUATORIAL_GUINEA
				
			
				
				&FLAG_ERITREA, // FLAG_ERITREA
				
			
				
				&FLAG_ESTONIA, // FLAG_ESTONIA
				
			
				
				&FLAG_ESWATINI, // FLAG_ESWATINI
				
			
				
				&FLAG_ETHIOPIA, // FLAG_ETHIOPIA
				
			
				
				&FLAG_EUROPEAN_UNION, // FLAG_EUROPEAN_UNION
				
			
				
				&FLAG_FALKLAND_ISLANDS, // FLAG_FALKLAND_ISLANDS
				
			
				
				&FLAG_FAROE_ISLANDS, // FLAG_FAROE_ISLANDS
				
			
				
				&FLAG_FIJI, // FLAG_FIJI
				
			
				
				&FLAG_FINLAND, // FLAG_FINLAND
				
			
				
				&FLAG_FRANCE, // FLAG_FRANCE
				
			
				
				&FLAG_FRENCH_GUIANA, // FLAG_FRENCH_GUIANA
				
			
				
				&FLAG_FRENCH_POLYNESIA, // FLAG_FRENCH_POLYNESIA
				
			
				
				&FLAG_FRENCH_SOUTHERN_TERRITORIES, // FLAG_FRENCH_SOUTHERN_TERRITORIES
				
			
				
				&FLAG_GABON, // FLAG_GABON
				
			
				
				&FLAG_GAMBIA, // FLAG_GAMBIA
				
			
				
				&FLAG_GEORGIA, // FLAG_GEORGIA
				
			
				
				&FLAG_GERMANY, // FLAG_GERMANY
				
			
				
				&FLAG_GHANA, // FLAG_GHANA
				
			
				
				&FLAG_GIBRALTAR, // FLAG_GIBRALTAR
				
			
				
				&FLAG_GREECE, // FLAG_GREECE
				
			
				
				&FLAG_GREENLAND, // FLAG_GREENLAND
				
			
				
				&FLAG_GRENADA, // FLAG_GRENADA
				
			
				
				&FLAG_GUADELOUPE, // FLAG_GUADELOUPE
				
			
				
				&FLAG_GUAM, // FLAG_GUAM
				
			
				
				&FLAG_GUATEMALA, // FLAG_GUATEMALA
				
			
				
				&FLAG_GUERNSEY, // FLAG_GUERNSEY
				
			
				
				&FLAG_GUINEA, // FLAG_GUINEA
				
			
				
				&FLAG_GUINEA_BISSAU, // FLAG_GUINEA_BISSAU
				
			
				
				&FLAG_GUYANA, // FLAG_GUYANA
				
			
				
				&FLAG_HAITI, // FLAG_HAITI
				
			
				
				&FLAG_HEARD_AND_MCDONALD_ISLANDS, // FLAG_HEARD_AND_MCDONALD_ISLANDS
				
			
				
				&FLAG_HONDURAS, // FLAG_HONDURAS
				
			
				
				&FLAG_HONG_KONG_SAR_CHINA, // FLAG_HONG_KONG_SAR_CHINA
				
			
				
				&FLAG_HUNGARY, // FLAG_HUNGARY
				
			
				
				&FLAG_ICELAND, // FLAG_ICELAND
				
			
				
				&FLAG_INDIA, // FLAG_INDIA
				
			
				
				&FLAG_INDONESIA, // FLAG_INDONESIA
				
			
				
				&FLAG_IRAN, // FLAG_IRAN
				
			
				
				&FLAG_IRAQ, // FLAG_IRAQ
				
			
				
				&FLAG_IRELAND, // FLAG_IRELAND
				
			
				
				&FLAG_ISLE_OF_MAN, // FLAG_ISLE_OF_MAN
				
			
				
				&FLAG_ISRAEL, // FLAG_ISRAEL
				
			
				
				&FLAG_ITALY, // FLAG_ITALY
				
			
				
				&FLAG_JAMAICA, // FLAG_JAMAICA
				
			
				
				&FLAG_JAPAN, // FLAG_JAPAN
				
			
				
				&FLAG_JERSEY, // FLAG_JERSEY
				
			
				
				&FLAG_JORDAN, // FLAG_JORDAN
				
			
				
				&FLAG_KAZAKHSTAN, // FLAG_KAZAKHSTAN
				
			
				
				&FLAG_KENYA, // FLAG_KENYA
				
			
				
				&FLAG_KIRIBATI, // FLAG_KIRIBATI
				
			
				
				&FLAG_KOSOVO, // FLAG_KOSOVO
				
			
				
				&FLAG_KUWAIT, // FLAG_KUWAIT
				
			
				
				&FLAG_KYRGYZSTAN, // FLAG_KYRGYZSTAN
				
			
				
				&FLAG_LAOS, // FLAG_LAOS
				
			
				
				&FLAG_LATVIA, // FLAG_LATVIA
				
			
				
				&FLAG_LEBANON, // FLAG_LEBANON
				
			
				
				&FLAG_LESOTHO, // FLAG_LESOTHO
				
			
				
				&FLAG_LIBERIA, // FLAG_LIBERIA
				
			
				
				&FLAG_LIBYA, // FLAG_LIBYA
				
			
				
				&FLAG_LIECHTENSTEIN, // FLAG_LIECHTENSTEIN
				
			
				
				&FLAG_LITHUANIA, // FLAG_LITHUANIA
				
			
				
				&FLAG_LUXEMBOURG, // FLAG_LUXEMBOURG
				
			
				
				&FLAG_MACAO_SAR_CHINA, // FLAG_MACAO_SAR_CHINA
				
			
				
				&FLAG_MADAGASCAR, // FLAG_MADAGASCAR
				
			
				
				&FLAG_MALAWI, // FLAG_MALAWI
				
			
				
				&FLAG_MALAYSIA, // FLAG_MALAYSIA
				
			
				
				&FLAG_MALDIVES, // FLAG_MALDIVES
				
			
				
				&FLAG_MALI, // FLAG_MALI
				
			
				
				&FLAG_MALTA, // FLAG_MALTA
				
			
				
				&FLAG_MARSHALL_ISLANDS, // FLAG_MARSHALL_ISLANDS
				
			
				
				&FLAG_MARTINIQUE, // FLAG_MARTINIQUE
				
			
				
				&FLAG_MAURITANIA, // FLAG_MAURITANIA
				
			
				
				&FLAG_MAURITIUS, // FLAG_MAURITIUS
				
			
				
				&FLAG_MAYOTTE, // FLAG_MAYOTTE
				
			
				
				&FLAG_MEXICO, // FLAG_MEXICO
				
			
				
				&FLAG_MICRONESIA, // FLAG_MICRONESIA
				
			
				
				&FLAG_MOLDOVA, // FLAG_MOLDOVA
				
			
				
				&FLAG_MONACO, // FLAG_MONACO
				
			
				
				&FLAG_MONGOLIA, // FLAG_MONGOLIA
				
			
				
				&FLAG_MONTENEGRO, // FLAG_MONTENEGRO
				
			
				
				&FLAG_MONTSERRAT, // FLAG_MONTSERRAT
				
			
				
				&FLAG_MOROCCO, // FLAG_MOROCCO
				
			
				
				&FLAG_MOZAMBIQUE, // FLAG_MOZAMBIQUE
				
			
				
				&FLAG_MYANMAR_BURMA, // FLAG_MYANMAR_BURMA
				
			
				
				&FLAG_NAMIBIA, // FLAG_NAMIBIA
				
			
				
				&FLAG_NAURU, // FLAG_NAURU
				
			
				
				&FLAG_NEPAL, // FLAG_NEPAL
				
			
				
				&FLAG_NETHERLANDS, // FLAG_NETHERLANDS
				
			
				
				&FLAG_NEW_CALEDONIA, // FLAG_NEW_CALEDONIA
				
			
				
				&FLAG_NEW_ZEALAND, // FLAG_NEW_ZEALAND
				
			
				
				&FLAG_NICARAGUA, // FLAG_NICARAGUA
				
			
				
				&FLAG_NIGER, // FLAG_NIGER
				
			
				
				&FLAG_NIGERIA, // FLAG_NIGERIA
				
			
				
				&FLAG_NIUE, // FLAG_NIUE
				
			
				
				&FLAG_NORFOLK_ISLAND, // FLAG_NORFOLK_ISLAND
				
			
				
				&FLAG_NORTHERN_MARIANA_ISLANDS, // FLAG_NORTHERN_MARIANA_ISLANDS
				
			
				
				&FLAG_NORTH_KOREA, // FLAG_NORTH_KOREA
				
			
				
				&FLAG_NORTH_MACEDONIA, // FLAG_NORTH_MACEDONIA
				
			
				
				&FLAG_NORWAY, // FLAG_NORWAY
				
			
				
				&FLAG_OMAN, // FLAG_OMAN
				
			
				
				&FLAG_PAKISTAN, // FLAG_PAKISTAN
				
			
				
				&FLAG_PALAU, // FLAG_PALAU
				
			
				
				&FLAG_PALESTINIAN_TERRITORIES, // FLAG_PALESTINIAN_TERRITORIES
				
			
				
				&FLAG_PANAMA, // FLAG_PANAMA
				
			
				
				&FLAG_PAPUA_NEW_GUINEA, // FLAG_PAPUA_NEW_GUINEA
				
			
				
				&FLAG_PARAGUAY, // FLAG_PARAGUAY
				
			
				
				&FLAG_PERU, // FLAG_PERU
				
			
				
				&FLAG_PHILIPPINES, // FLAG_PHILIPPINES
				
			
				
				&FLAG_PITCAIRN_ISLANDS, // FLAG_PITCAIRN_ISLANDS
				
			
				
				&FLAG_POLAND, // FLAG_POLAND
				
			
				
				&FLAG_PORTUGAL, // FLAG_PORTUGAL
				
			
				
				&FLAG_PUERTO_RICO, // FLAG_PUERTO_RICO
				
			
				
				&FLAG_QATAR, // FLAG_QATAR
				
			
				
				&FLAG_REUNION, // FLAG_REUNION
				
			
				
				&FLAG_ROMANIA, // FLAG_ROMANIA
				
			
				
				&FLAG_RUSSIA, // FLAG_RUSSIA
				
			
				
				&FLAG_RWANDA, // FLAG_RWANDA
				
			
				
				&FLAG_SAMOA, // FLAG_SAMOA
				
			
				
				&FLAG_SAN_MARINO, // FLAG_SAN_MARINO
				
			
				
				&FLAG_SAO_TOME_AND_PRINCIPE, // FLAG_SAO_TOME_AND_PRINCIPE
				
			
				
				&FLAG_SAUDI_ARABIA, // FLAG_SAUDI_ARABIA
				
			
				
				&FLAG_SENEGAL, // FLAG_SENEGAL
				
			
				
				&FLAG_SERBIA, // FLAG_SERBIA
				
			
				
				&FLAG_SEYCHELLES, // FLAG_SEYCHELLES
				
			
				
				&FLAG_SIERRA_LEONE, // FLAG_SIERRA_LEONE
				
			
				
				&FLAG_SINGAPORE, // FLAG_SINGAPORE
				
			
				
				&FLAG_SINT_MAARTEN, // FLAG_SINT_MAARTEN
				
			
				
				&FLAG_SLOVAKIA, // FLAG_SLOVAKIA
				
			
				
				&FLAG_SLOVENIA, // FLAG_SLOVENIA
				
			
				
				&FLAG_SOLOMON_ISLANDS, // FLAG_SOLOMON_ISLANDS
				
			
				
				&FLAG_SOMALIA, // FLAG_SOMALIA
				
			
				
				&FLAG_SOUTH_AFRICA, // FLAG_SOUTH_AFRICA
				
			
				
				&FLAG_SOUTH_GEORGIA_AND_SOUTH_SANDWICH_ISLANDS, // FLAG_SOUTH_GEORGIA_AND_SOUTH_SANDWICH_ISLANDS
				
			
				
				&FLAG_SOUTH_KOREA, // FLAG_SOUTH_KOREA
				
			
				
				&FLAG_SOUTH_SUDAN, // FLAG_SOUTH_SUDAN
				
			
				
				&FLAG_SPAIN, // FLAG_SPAIN
				
			
				
				&FLAG_SRI_LANKA, // FLAG_SRI_LANKA
				
			
				
				&FLAG_ST_BARTHELEMY, // FLAG_ST_BARTHELEMY
				
			
				
				&FLAG_ST_HELENA, // FLAG_ST_HELENA
				
			
				
				&FLAG_ST_KITTS_AND_NEVIS, // FLAG_ST_KITTS_AND_NEVIS
				
			
				
				&FLAG_ST_LUCIA, // FLAG_ST_LUCIA
				
			
				
				&FLAG_ST_MARTIN, // FLAG_ST_MARTIN
				
			
				
				&FLAG_ST_PIERRE_AND_MIQUELON, // FLAG_ST_PIERRE_AND_MIQUELON
				
			
				
				&FLAG_ST_VINCENT_AND_GRENADINES, // FLAG_ST_VINCENT_AND_GRENADINES
				
			
				
				&FLAG_SUDAN, // FLAG_SUDAN
				
			
				
				&FLAG_SURINAME, // FLAG_SURINAME
				
			
				
				&FLAG_SVALBARD_AND_JAN_MAYEN, // FLAG_SVALBARD_AND_JAN_MAYEN
				
			
				
				&FLAG_SWEDEN, // FLAG_SWEDEN
				
			
				
				&FLAG_SWITZERLAND, // FLAG_SWITZERLAND
				
			
				
				&FLAG_SYRIA, // FLAG_SYRIA
				
			
				
				&FLAG_TAIWAN, // FLAG_TAIWAN
				
			
				
				&FLAG_TAJIKISTAN, // FLAG_TAJIKISTAN
				
			
				
				&FLAG_TANZANIA, // FLAG_TANZANIA
				
			
				
				&FLAG_THAILAND, // FLAG_THAILAND
				
			
				
				&FLAG_TIMOR_LESTE, // FLAG_TIMOR_LESTE
				
			
				
				&FLAG_TOGO, // FLAG_TOGO
				
			
				
				&FLAG_TOKELAU, // FLAG_TOKELAU
				
			
				
				&FLAG_TONGA, // FLAG_TONGA
				
			
				
				&FLAG_TRINIDAD_AND_TOBAGO, // FLAG_TRINIDAD_AND_TOBAGO
				
			
				
				&FLAG_TRISTAN_DA_CUNHA, // FLAG_TRISTAN_DA_CUNHA
				
			
				
				&FLAG_TUNISIA, // FLAG_TUNISIA
				
			
				
				&FLAG_TURKEY, // FLAG_TURKEY
				
			
				
				&FLAG_TURKMENISTAN, // FLAG_TURKMENISTAN
				
			
				
				&FLAG_TURKS_AND_CAICOS_ISLANDS, // FLAG_TURKS_AND_CAICOS_ISLANDS
				
			
				
				&FLAG_TUVALU, // FLAG_TUVALU
				
			
				
				&FLAG_UGANDA, // FLAG_UGANDA
				
			
				
				&FLAG_UKRAINE, // FLAG_UKRAINE
				
			
				
				&FLAG_UNITED_ARAB_EMIRATES, // FLAG_UNITED_ARAB_EMIRATES
				
			
				
				&FLAG_UNITED_KINGDOM, // FLAG_UNITED_KINGDOM
				
			
				
				&FLAG_UNITED_NATIONS, // FLAG_UNITED_NATIONS
				
			
				
				&FLAG_UNITED_STATES, // FLAG_UNITED_STATES
				
			
				
				&FLAG_URUGUAY, // FLAG_URUGUAY
				
			
				
				&FLAG_US_OUTLYING_ISLANDS, // FLAG_US_OUTLYING_ISLANDS
				
			
				
				&FLAG_US_VIRGIN_ISLANDS, // FLAG_US_VIRGIN_ISLANDS
				
			
				
				&FLAG_UZBEKISTAN, // FLAG_UZBEKISTAN
				
			
				
				&FLAG_VANUATU, // FLAG_VANUATU
				
			
				
				&FLAG_VATICAN_CITY, // FLAG_VATICAN_CITY
				
			
				
				&FLAG_VENEZUELA, // FLAG_VENEZUELA
				
			
				
				&FLAG_VIETNAM, // FLAG_VIETNAM
				
			
				
				&FLAG_WALLIS_AND_FUTUNA, // FLAG_WALLIS_AND_FUTUNA
				
			
				
				&FLAG_WESTERN_SAHARA, // FLAG_WESTERN_SAHARA
				
			
				
				&FLAG_YEMEN, // FLAG_YEMEN
				
			
				
				&FLAG_ZAMBIA, // FLAG_ZAMBIA
				
			
				
				&FLAG_ZIMBABWE, // FLAG_ZIMBABWE
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // country_flag
	
	/// flag üè¥üèÅüéå
	pub mod flag {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="black flag üè¥"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLACK_FLAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLACK_FLAG); // üè¥ (`U+1F3F4`)"] #[doc="# assert_eq!(BLACK_FLAG.to_string().as_str(), \"üè¥\");"]
#[doc="```"]
pub static BLACK_FLAG :  Emoji = Emoji::new("black flag", Version(1, 0), "üè¥"); // black flag
		
		#[doc="chequered flag üèÅ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHEQUERED_FLAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHEQUERED_FLAG); // üèÅ (`U+1F3C1`)"] #[doc="# assert_eq!(CHEQUERED_FLAG.to_string().as_str(), \"üèÅ\");"]
#[doc="```"]
pub static CHEQUERED_FLAG :  Emoji = Emoji::new("chequered flag", Version(0, 6), "üèÅ"); // chequered flag
		
		#[doc="crossed flags üéå"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CROSSED_FLAGS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CROSSED_FLAGS); // üéå (`U+1F38C`)"] #[doc="# assert_eq!(CROSSED_FLAGS.to_string().as_str(), \"üéå\");"]
#[doc="```"]
pub static CROSSED_FLAGS :  Emoji = Emoji::new("crossed flags", Version(0, 6), "üéå"); // crossed flags
		
		#[doc="pirate flag üè¥‚Äç‚ò†Ô∏è"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PIRATE_FLAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PIRATE_FLAG); // üè¥‚Äç‚ò†Ô∏è (`U+1F3F4 U+200D U+2620 U+FE0F`)"] #[doc="# assert_eq!(PIRATE_FLAG.to_string().as_str(), \"üè¥‚Äç‚ò†Ô∏è\");"]
#[doc="```"]
pub static PIRATE_FLAG :  Emoji = Emoji::new("pirate flag", Version(11, 0), "üè¥‚Äç‚ò†Ô∏è"); // pirate flag
		
		#[doc="rainbow flag üè≥Ô∏è‚Äçüåà"]#[doc=""]#[doc="Since E4.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RAINBOW_FLAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RAINBOW_FLAG); // üè≥Ô∏è‚Äçüåà (`U+1F3F3 U+FE0F U+200D U+1F308`)"] #[doc="# assert_eq!(RAINBOW_FLAG.to_string().as_str(), \"üè≥Ô∏è‚Äçüåà\");"]
#[doc="```"]
pub static RAINBOW_FLAG :  Emoji = Emoji::new("rainbow flag", Version(4, 0), "üè≥Ô∏è‚Äçüåà"); // rainbow flag
		
		#[doc="transgender flag üè≥Ô∏è‚Äç‚ößÔ∏è"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TRANSGENDER_FLAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TRANSGENDER_FLAG); // üè≥Ô∏è‚Äç‚ößÔ∏è (`U+1F3F3 U+FE0F U+200D U+26A7 U+FE0F`)"] #[doc="# assert_eq!(TRANSGENDER_FLAG.to_string().as_str(), \"üè≥Ô∏è‚Äç‚ößÔ∏è\");"]
#[doc="```"]
pub static TRANSGENDER_FLAG :  Emoji = Emoji::new("transgender flag", Version(13, 0), "üè≥Ô∏è‚Äç‚ößÔ∏è"); // transgender flag
		
		#[doc="triangular flag üö©"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TRIANGULAR_FLAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TRIANGULAR_FLAG); // üö© (`U+1F6A9`)"] #[doc="# assert_eq!(TRIANGULAR_FLAG.to_string().as_str(), \"üö©\");"]
#[doc="```"]
pub static TRIANGULAR_FLAG :  Emoji = Emoji::new("triangular flag", Version(0, 6), "üö©"); // triangular flag
		
		#[doc="white flag üè≥Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHITE_FLAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHITE_FLAG); // üè≥Ô∏è (`U+1F3F3 U+FE0F`)"] #[doc="# assert_eq!(WHITE_FLAG.to_string().as_str(), \"üè≥Ô∏è\");"]
#[doc="```"]
pub static WHITE_FLAG :  Emoji = Emoji::new("white flag", Version(0, 7), "üè≥Ô∏è"); // white flag
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BLACK_FLAG
				
				&BLACK_FLAG,
				
			],
			
			&[ // CHEQUERED_FLAG
				
				&CHEQUERED_FLAG,
				
			],
			
			&[ // CROSSED_FLAGS
				
				&CROSSED_FLAGS,
				
			],
			
			&[ // PIRATE_FLAG
				
				&PIRATE_FLAG,
				
			],
			
			&[ // RAINBOW_FLAG
				
				&RAINBOW_FLAG,
				
			],
			
			&[ // TRANSGENDER_FLAG
				
				&TRANSGENDER_FLAG,
				
			],
			
			&[ // TRIANGULAR_FLAG
				
				&TRIANGULAR_FLAG,
				
			],
			
			&[ // WHITE_FLAG
				
				&WHITE_FLAG,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BLACK_FLAG, // BLACK_FLAG
				
			
				
				&CHEQUERED_FLAG, // CHEQUERED_FLAG
				
			
				
				&CROSSED_FLAGS, // CROSSED_FLAGS
				
			
				
				&PIRATE_FLAG, // PIRATE_FLAG
				
			
				
				&RAINBOW_FLAG, // RAINBOW_FLAG
				
			
				
				&TRANSGENDER_FLAG, // TRANSGENDER_FLAG
				
			
				
				&TRIANGULAR_FLAG, // TRIANGULAR_FLAG
				
			
				
				&WHITE_FLAG, // WHITE_FLAG
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // flag
	
	/// subdivision_flag üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åøüè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åøüè¥Û†ÅßÛ†Å¢Û†Å∑Û†Å¨Û†Å≥Û†Åø
	pub mod subdivision_flag {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="flag: England üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ENGLAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ENGLAND); // üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø (`U+1F3F4 U+E0067 U+E0062 U+E0065 U+E006E U+E0067 U+E007F`)"] #[doc="# assert_eq!(FLAG_ENGLAND.to_string().as_str(), \"üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø\");"]
#[doc="```"]
pub static FLAG_ENGLAND :  Emoji = Emoji::new("flag: England", Version(5, 0), "üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø"); // flag: England
		
		#[doc="flag: Scotland üè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åø"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SCOTLAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SCOTLAND); // üè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åø (`U+1F3F4 U+E0067 U+E0062 U+E0073 U+E0063 U+E0074 U+E007F`)"] #[doc="# assert_eq!(FLAG_SCOTLAND.to_string().as_str(), \"üè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åø\");"]
#[doc="```"]
pub static FLAG_SCOTLAND :  Emoji = Emoji::new("flag: Scotland", Version(5, 0), "üè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åø"); // flag: Scotland
		
		#[doc="flag: Wales üè¥Û†ÅßÛ†Å¢Û†Å∑Û†Å¨Û†Å≥Û†Åø"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_WALES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_WALES); // üè¥Û†ÅßÛ†Å¢Û†Å∑Û†Å¨Û†Å≥Û†Åø (`U+1F3F4 U+E0067 U+E0062 U+E0077 U+E006C U+E0073 U+E007F`)"] #[doc="# assert_eq!(FLAG_WALES.to_string().as_str(), \"üè¥Û†ÅßÛ†Å¢Û†Å∑Û†Å¨Û†Å≥Û†Åø\");"]
#[doc="```"]
pub static FLAG_WALES :  Emoji = Emoji::new("flag: Wales", Version(5, 0), "üè¥Û†ÅßÛ†Å¢Û†Å∑Û†Å¨Û†Å≥Û†Åø"); // flag: Wales
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // FLAG_ENGLAND
				
				&FLAG_ENGLAND,
				
			],
			
			&[ // FLAG_SCOTLAND
				
				&FLAG_SCOTLAND,
				
			],
			
			&[ // FLAG_WALES
				
				&FLAG_WALES,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&FLAG_ENGLAND, // FLAG_ENGLAND
				
			
				
				&FLAG_SCOTLAND, // FLAG_SCOTLAND
				
			
				
				&FLAG_WALES, // FLAG_WALES
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // subdivision_flag
	


	// Emoji iterators

	/// Returns an iterator over all emoji variants of these subgroups grouped by base emojis
	pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
		core::iter::empty()
		
			.chain(country_flag::all_variants())
		
			.chain(flag::all_variants())
		
			.chain(subdivision_flag::all_variants())
		
	}

	/// Returns an iterator over all base emojis of these subgroups (i.e. one for each static)
	pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
		core::iter::empty()
		
			.chain(country_flag::base_emojis())
		
			.chain(flag::base_emojis())
		
			.chain(subdivision_flag::base_emojis())
		
	}

} // flags

/// food_and_drink üè∫üçºüç±
pub mod food_and_drink {
	use crate::emojis::Emoji;

	
	/// dishware üè∫ü•¢üç¥
	pub mod dishware {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="amphora üè∫"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::AMPHORA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", AMPHORA); // üè∫ (`U+1F3FA`)"] #[doc="# assert_eq!(AMPHORA.to_string().as_str(), \"üè∫\");"]
#[doc="```"]
pub static AMPHORA :  Emoji = Emoji::new("amphora", Version(1, 0), "üè∫"); // amphora
		
		#[doc="chopsticks ü•¢"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHOPSTICKS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHOPSTICKS); // ü•¢ (`U+1F962`)"] #[doc="# assert_eq!(CHOPSTICKS.to_string().as_str(), \"ü•¢\");"]
#[doc="```"]
pub static CHOPSTICKS :  Emoji = Emoji::new("chopsticks", Version(5, 0), "ü•¢"); // chopsticks
		
		#[doc="fork and knife üç¥"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FORK_AND_KNIFE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FORK_AND_KNIFE); // üç¥ (`U+1F374`)"] #[doc="# assert_eq!(FORK_AND_KNIFE.to_string().as_str(), \"üç¥\");"]
#[doc="```"]
pub static FORK_AND_KNIFE :  Emoji = Emoji::new("fork and knife", Version(0, 6), "üç¥"); // fork and knife
		
		#[doc="fork and knife with plate üçΩÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FORK_AND_KNIFE_WITH_PLATE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FORK_AND_KNIFE_WITH_PLATE); // üçΩÔ∏è (`U+1F37D U+FE0F`)"] #[doc="# assert_eq!(FORK_AND_KNIFE_WITH_PLATE.to_string().as_str(), \"üçΩÔ∏è\");"]
#[doc="```"]
pub static FORK_AND_KNIFE_WITH_PLATE :  Emoji = Emoji::new("fork and knife with plate", Version(0, 7), "üçΩÔ∏è"); // fork and knife with plate
		
		#[doc="kitchen knife üî™"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KITCHEN_KNIFE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KITCHEN_KNIFE); // üî™ (`U+1F52A`)"] #[doc="# assert_eq!(KITCHEN_KNIFE.to_string().as_str(), \"üî™\");"]
#[doc="```"]
pub static KITCHEN_KNIFE :  Emoji = Emoji::new("kitchen knife", Version(0, 6), "üî™"); // kitchen knife
		
		#[doc="spoon ü•Ñ"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPOON); // ü•Ñ (`U+1F944`)"] #[doc="# assert_eq!(SPOON.to_string().as_str(), \"ü•Ñ\");"]
#[doc="```"]
pub static SPOON :  Emoji = Emoji::new("spoon", Version(3, 0), "ü•Ñ"); // spoon
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // AMPHORA
				
				&AMPHORA,
				
			],
			
			&[ // CHOPSTICKS
				
				&CHOPSTICKS,
				
			],
			
			&[ // FORK_AND_KNIFE
				
				&FORK_AND_KNIFE,
				
			],
			
			&[ // FORK_AND_KNIFE_WITH_PLATE
				
				&FORK_AND_KNIFE_WITH_PLATE,
				
			],
			
			&[ // KITCHEN_KNIFE
				
				&KITCHEN_KNIFE,
				
			],
			
			&[ // SPOON
				
				&SPOON,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&AMPHORA, // AMPHORA
				
			
				
				&CHOPSTICKS, // CHOPSTICKS
				
			
				
				&FORK_AND_KNIFE, // FORK_AND_KNIFE
				
			
				
				&FORK_AND_KNIFE_WITH_PLATE, // FORK_AND_KNIFE_WITH_PLATE
				
			
				
				&KITCHEN_KNIFE, // KITCHEN_KNIFE
				
			
				
				&SPOON, // SPOON
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // dishware
	
	/// drink üçºüç∫üßÉ
	pub mod drink {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="baby bottle üçº"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BABY_BOTTLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BABY_BOTTLE); // üçº (`U+1F37C`)"] #[doc="# assert_eq!(BABY_BOTTLE.to_string().as_str(), \"üçº\");"]
#[doc="```"]
pub static BABY_BOTTLE :  Emoji = Emoji::new("baby bottle", Version(1, 0), "üçº"); // baby bottle
		
		#[doc="beer mug üç∫"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BEER_MUG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BEER_MUG); // üç∫ (`U+1F37A`)"] #[doc="# assert_eq!(BEER_MUG.to_string().as_str(), \"üç∫\");"]
#[doc="```"]
pub static BEER_MUG :  Emoji = Emoji::new("beer mug", Version(0, 6), "üç∫"); // beer mug
		
		#[doc="beverage box üßÉ"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BEVERAGE_BOX;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BEVERAGE_BOX); // üßÉ (`U+1F9C3`)"] #[doc="# assert_eq!(BEVERAGE_BOX.to_string().as_str(), \"üßÉ\");"]
#[doc="```"]
pub static BEVERAGE_BOX :  Emoji = Emoji::new("beverage box", Version(12, 0), "üßÉ"); // beverage box
		
		#[doc="bottle with popping cork üçæ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BOTTLE_WITH_POPPING_CORK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BOTTLE_WITH_POPPING_CORK); // üçæ (`U+1F37E`)"] #[doc="# assert_eq!(BOTTLE_WITH_POPPING_CORK.to_string().as_str(), \"üçæ\");"]
#[doc="```"]
pub static BOTTLE_WITH_POPPING_CORK :  Emoji = Emoji::new("bottle with popping cork", Version(1, 0), "üçæ"); // bottle with popping cork
		
		#[doc="bubble tea üßã"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BUBBLE_TEA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BUBBLE_TEA); // üßã (`U+1F9CB`)"] #[doc="# assert_eq!(BUBBLE_TEA.to_string().as_str(), \"üßã\");"]
#[doc="```"]
pub static BUBBLE_TEA :  Emoji = Emoji::new("bubble tea", Version(13, 0), "üßã"); // bubble tea
		
		#[doc="clinking beer mugs üçª"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLINKING_BEER_MUGS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLINKING_BEER_MUGS); // üçª (`U+1F37B`)"] #[doc="# assert_eq!(CLINKING_BEER_MUGS.to_string().as_str(), \"üçª\");"]
#[doc="```"]
pub static CLINKING_BEER_MUGS :  Emoji = Emoji::new("clinking beer mugs", Version(0, 6), "üçª"); // clinking beer mugs
		
		#[doc="clinking glasses ü•Ç"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLINKING_GLASSES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLINKING_GLASSES); // ü•Ç (`U+1F942`)"] #[doc="# assert_eq!(CLINKING_GLASSES.to_string().as_str(), \"ü•Ç\");"]
#[doc="```"]
pub static CLINKING_GLASSES :  Emoji = Emoji::new("clinking glasses", Version(3, 0), "ü•Ç"); // clinking glasses
		
		#[doc="cocktail glass üç∏"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COCKTAIL_GLASS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COCKTAIL_GLASS); // üç∏ (`U+1F378`)"] #[doc="# assert_eq!(COCKTAIL_GLASS.to_string().as_str(), \"üç∏\");"]
#[doc="```"]
pub static COCKTAIL_GLASS :  Emoji = Emoji::new("cocktail glass", Version(0, 6), "üç∏"); // cocktail glass
		
		#[doc="cup with straw ü•§"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CUP_WITH_STRAW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CUP_WITH_STRAW); // ü•§ (`U+1F964`)"] #[doc="# assert_eq!(CUP_WITH_STRAW.to_string().as_str(), \"ü•§\");"]
#[doc="```"]
pub static CUP_WITH_STRAW :  Emoji = Emoji::new("cup with straw", Version(5, 0), "ü•§"); // cup with straw
		
		#[doc="glass of milk ü•õ"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GLASS_OF_MILK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GLASS_OF_MILK); // ü•õ (`U+1F95B`)"] #[doc="# assert_eq!(GLASS_OF_MILK.to_string().as_str(), \"ü•õ\");"]
#[doc="```"]
pub static GLASS_OF_MILK :  Emoji = Emoji::new("glass of milk", Version(3, 0), "ü•õ"); // glass of milk
		
		#[doc="hot beverage ‚òï"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOT_BEVERAGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOT_BEVERAGE); // ‚òï (`U+2615`)"] #[doc="# assert_eq!(HOT_BEVERAGE.to_string().as_str(), \"‚òï\");"]
#[doc="```"]
pub static HOT_BEVERAGE :  Emoji = Emoji::new("hot beverage", Version(0, 6), "‚òï"); // hot beverage
		
		#[doc="ice üßä"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ICE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ICE); // üßä (`U+1F9CA`)"] #[doc="# assert_eq!(ICE.to_string().as_str(), \"üßä\");"]
#[doc="```"]
pub static ICE :  Emoji = Emoji::new("ice", Version(12, 0), "üßä"); // ice
		
		#[doc="mate üßâ"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MATE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MATE); // üßâ (`U+1F9C9`)"] #[doc="# assert_eq!(MATE.to_string().as_str(), \"üßâ\");"]
#[doc="```"]
pub static MATE :  Emoji = Emoji::new("mate", Version(12, 0), "üßâ"); // mate
		
		#[doc="sake üç∂"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SAKE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SAKE); // üç∂ (`U+1F376`)"] #[doc="# assert_eq!(SAKE.to_string().as_str(), \"üç∂\");"]
#[doc="```"]
pub static SAKE :  Emoji = Emoji::new("sake", Version(0, 6), "üç∂"); // sake
		
		#[doc="teacup without handle üçµ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TEACUP_WITHOUT_HANDLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TEACUP_WITHOUT_HANDLE); // üçµ (`U+1F375`)"] #[doc="# assert_eq!(TEACUP_WITHOUT_HANDLE.to_string().as_str(), \"üçµ\");"]
#[doc="```"]
pub static TEACUP_WITHOUT_HANDLE :  Emoji = Emoji::new("teacup without handle", Version(0, 6), "üçµ"); // teacup without handle
		
		#[doc="teapot ü´ñ"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TEAPOT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TEAPOT); // ü´ñ (`U+1FAD6`)"] #[doc="# assert_eq!(TEAPOT.to_string().as_str(), \"ü´ñ\");"]
#[doc="```"]
pub static TEAPOT :  Emoji = Emoji::new("teapot", Version(13, 0), "ü´ñ"); // teapot
		
		#[doc="tropical drink üçπ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TROPICAL_DRINK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TROPICAL_DRINK); // üçπ (`U+1F379`)"] #[doc="# assert_eq!(TROPICAL_DRINK.to_string().as_str(), \"üçπ\");"]
#[doc="```"]
pub static TROPICAL_DRINK :  Emoji = Emoji::new("tropical drink", Version(0, 6), "üçπ"); // tropical drink
		
		#[doc="tumbler glass ü•É"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TUMBLER_GLASS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TUMBLER_GLASS); // ü•É (`U+1F943`)"] #[doc="# assert_eq!(TUMBLER_GLASS.to_string().as_str(), \"ü•É\");"]
#[doc="```"]
pub static TUMBLER_GLASS :  Emoji = Emoji::new("tumbler glass", Version(3, 0), "ü•É"); // tumbler glass
		
		#[doc="wine glass üç∑"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WINE_GLASS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WINE_GLASS); // üç∑ (`U+1F377`)"] #[doc="# assert_eq!(WINE_GLASS.to_string().as_str(), \"üç∑\");"]
#[doc="```"]
pub static WINE_GLASS :  Emoji = Emoji::new("wine glass", Version(0, 6), "üç∑"); // wine glass
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BABY_BOTTLE
				
				&BABY_BOTTLE,
				
			],
			
			&[ // BEER_MUG
				
				&BEER_MUG,
				
			],
			
			&[ // BEVERAGE_BOX
				
				&BEVERAGE_BOX,
				
			],
			
			&[ // BOTTLE_WITH_POPPING_CORK
				
				&BOTTLE_WITH_POPPING_CORK,
				
			],
			
			&[ // BUBBLE_TEA
				
				&BUBBLE_TEA,
				
			],
			
			&[ // CLINKING_BEER_MUGS
				
				&CLINKING_BEER_MUGS,
				
			],
			
			&[ // CLINKING_GLASSES
				
				&CLINKING_GLASSES,
				
			],
			
			&[ // COCKTAIL_GLASS
				
				&COCKTAIL_GLASS,
				
			],
			
			&[ // CUP_WITH_STRAW
				
				&CUP_WITH_STRAW,
				
			],
			
			&[ // GLASS_OF_MILK
				
				&GLASS_OF_MILK,
				
			],
			
			&[ // HOT_BEVERAGE
				
				&HOT_BEVERAGE,
				
			],
			
			&[ // ICE
				
				&ICE,
				
			],
			
			&[ // MATE
				
				&MATE,
				
			],
			
			&[ // SAKE
				
				&SAKE,
				
			],
			
			&[ // TEACUP_WITHOUT_HANDLE
				
				&TEACUP_WITHOUT_HANDLE,
				
			],
			
			&[ // TEAPOT
				
				&TEAPOT,
				
			],
			
			&[ // TROPICAL_DRINK
				
				&TROPICAL_DRINK,
				
			],
			
			&[ // TUMBLER_GLASS
				
				&TUMBLER_GLASS,
				
			],
			
			&[ // WINE_GLASS
				
				&WINE_GLASS,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BABY_BOTTLE, // BABY_BOTTLE
				
			
				
				&BEER_MUG, // BEER_MUG
				
			
				
				&BEVERAGE_BOX, // BEVERAGE_BOX
				
			
				
				&BOTTLE_WITH_POPPING_CORK, // BOTTLE_WITH_POPPING_CORK
				
			
				
				&BUBBLE_TEA, // BUBBLE_TEA
				
			
				
				&CLINKING_BEER_MUGS, // CLINKING_BEER_MUGS
				
			
				
				&CLINKING_GLASSES, // CLINKING_GLASSES
				
			
				
				&COCKTAIL_GLASS, // COCKTAIL_GLASS
				
			
				
				&CUP_WITH_STRAW, // CUP_WITH_STRAW
				
			
				
				&GLASS_OF_MILK, // GLASS_OF_MILK
				
			
				
				&HOT_BEVERAGE, // HOT_BEVERAGE
				
			
				
				&ICE, // ICE
				
			
				
				&MATE, // MATE
				
			
				
				&SAKE, // SAKE
				
			
				
				&TEACUP_WITHOUT_HANDLE, // TEACUP_WITHOUT_HANDLE
				
			
				
				&TEAPOT, // TEAPOT
				
			
				
				&TROPICAL_DRINK, // TROPICAL_DRINK
				
			
				
				&TUMBLER_GLASS, // TUMBLER_GLASS
				
			
				
				&WINE_GLASS, // WINE_GLASS
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // drink
	
	/// food_asian üç±üçöüçõ
	pub mod food_asian {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="bento box üç±"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BENTO_BOX;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BENTO_BOX); // üç± (`U+1F371`)"] #[doc="# assert_eq!(BENTO_BOX.to_string().as_str(), \"üç±\");"]
#[doc="```"]
pub static BENTO_BOX :  Emoji = Emoji::new("bento box", Version(0, 6), "üç±"); // bento box
		
		#[doc="cooked rice üçö"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COOKED_RICE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COOKED_RICE); // üçö (`U+1F35A`)"] #[doc="# assert_eq!(COOKED_RICE.to_string().as_str(), \"üçö\");"]
#[doc="```"]
pub static COOKED_RICE :  Emoji = Emoji::new("cooked rice", Version(0, 6), "üçö"); // cooked rice
		
		#[doc="curry rice üçõ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CURRY_RICE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CURRY_RICE); // üçõ (`U+1F35B`)"] #[doc="# assert_eq!(CURRY_RICE.to_string().as_str(), \"üçõ\");"]
#[doc="```"]
pub static CURRY_RICE :  Emoji = Emoji::new("curry rice", Version(0, 6), "üçõ"); // curry rice
		
		#[doc="dango üç°"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DANGO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DANGO); // üç° (`U+1F361`)"] #[doc="# assert_eq!(DANGO.to_string().as_str(), \"üç°\");"]
#[doc="```"]
pub static DANGO :  Emoji = Emoji::new("dango", Version(0, 6), "üç°"); // dango
		
		#[doc="dumpling ü•ü"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DUMPLING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DUMPLING); // ü•ü (`U+1F95F`)"] #[doc="# assert_eq!(DUMPLING.to_string().as_str(), \"ü•ü\");"]
#[doc="```"]
pub static DUMPLING :  Emoji = Emoji::new("dumpling", Version(5, 0), "ü•ü"); // dumpling
		
		#[doc="fish cake with swirl üç•"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FISH_CAKE_WITH_SWIRL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FISH_CAKE_WITH_SWIRL); // üç• (`U+1F365`)"] #[doc="# assert_eq!(FISH_CAKE_WITH_SWIRL.to_string().as_str(), \"üç•\");"]
#[doc="```"]
pub static FISH_CAKE_WITH_SWIRL :  Emoji = Emoji::new("fish cake with swirl", Version(0, 6), "üç•"); // fish cake with swirl
		
		#[doc="fortune cookie ü•†"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FORTUNE_COOKIE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FORTUNE_COOKIE); // ü•† (`U+1F960`)"] #[doc="# assert_eq!(FORTUNE_COOKIE.to_string().as_str(), \"ü•†\");"]
#[doc="```"]
pub static FORTUNE_COOKIE :  Emoji = Emoji::new("fortune cookie", Version(5, 0), "ü•†"); // fortune cookie
		
		#[doc="fried shrimp üç§"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FRIED_SHRIMP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FRIED_SHRIMP); // üç§ (`U+1F364`)"] #[doc="# assert_eq!(FRIED_SHRIMP.to_string().as_str(), \"üç§\");"]
#[doc="```"]
pub static FRIED_SHRIMP :  Emoji = Emoji::new("fried shrimp", Version(0, 6), "üç§"); // fried shrimp
		
		#[doc="moon cake ü•Æ"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOON_CAKE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOON_CAKE); // ü•Æ (`U+1F96E`)"] #[doc="# assert_eq!(MOON_CAKE.to_string().as_str(), \"ü•Æ\");"]
#[doc="```"]
pub static MOON_CAKE :  Emoji = Emoji::new("moon cake", Version(11, 0), "ü•Æ"); // moon cake
		
		#[doc="oden üç¢"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ODEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ODEN); // üç¢ (`U+1F362`)"] #[doc="# assert_eq!(ODEN.to_string().as_str(), \"üç¢\");"]
#[doc="```"]
pub static ODEN :  Emoji = Emoji::new("oden", Version(0, 6), "üç¢"); // oden
		
		#[doc="rice ball üçô"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RICE_BALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RICE_BALL); // üçô (`U+1F359`)"] #[doc="# assert_eq!(RICE_BALL.to_string().as_str(), \"üçô\");"]
#[doc="```"]
pub static RICE_BALL :  Emoji = Emoji::new("rice ball", Version(0, 6), "üçô"); // rice ball
		
		#[doc="rice cracker üçò"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RICE_CRACKER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RICE_CRACKER); // üçò (`U+1F358`)"] #[doc="# assert_eq!(RICE_CRACKER.to_string().as_str(), \"üçò\");"]
#[doc="```"]
pub static RICE_CRACKER :  Emoji = Emoji::new("rice cracker", Version(0, 6), "üçò"); // rice cracker
		
		#[doc="roasted sweet potato üç†"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ROASTED_SWEET_POTATO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ROASTED_SWEET_POTATO); // üç† (`U+1F360`)"] #[doc="# assert_eq!(ROASTED_SWEET_POTATO.to_string().as_str(), \"üç†\");"]
#[doc="```"]
pub static ROASTED_SWEET_POTATO :  Emoji = Emoji::new("roasted sweet potato", Version(0, 6), "üç†"); // roasted sweet potato
		
		#[doc="spaghetti üçù"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPAGHETTI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPAGHETTI); // üçù (`U+1F35D`)"] #[doc="# assert_eq!(SPAGHETTI.to_string().as_str(), \"üçù\");"]
#[doc="```"]
pub static SPAGHETTI :  Emoji = Emoji::new("spaghetti", Version(0, 6), "üçù"); // spaghetti
		
		#[doc="steaming bowl üçú"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STEAMING_BOWL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STEAMING_BOWL); // üçú (`U+1F35C`)"] #[doc="# assert_eq!(STEAMING_BOWL.to_string().as_str(), \"üçú\");"]
#[doc="```"]
pub static STEAMING_BOWL :  Emoji = Emoji::new("steaming bowl", Version(0, 6), "üçú"); // steaming bowl
		
		#[doc="sushi üç£"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUSHI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUSHI); // üç£ (`U+1F363`)"] #[doc="# assert_eq!(SUSHI.to_string().as_str(), \"üç£\");"]
#[doc="```"]
pub static SUSHI :  Emoji = Emoji::new("sushi", Version(0, 6), "üç£"); // sushi
		
		#[doc="takeout box ü•°"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TAKEOUT_BOX;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TAKEOUT_BOX); // ü•° (`U+1F961`)"] #[doc="# assert_eq!(TAKEOUT_BOX.to_string().as_str(), \"ü•°\");"]
#[doc="```"]
pub static TAKEOUT_BOX :  Emoji = Emoji::new("takeout box", Version(5, 0), "ü•°"); // takeout box
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BENTO_BOX
				
				&BENTO_BOX,
				
			],
			
			&[ // COOKED_RICE
				
				&COOKED_RICE,
				
			],
			
			&[ // CURRY_RICE
				
				&CURRY_RICE,
				
			],
			
			&[ // DANGO
				
				&DANGO,
				
			],
			
			&[ // DUMPLING
				
				&DUMPLING,
				
			],
			
			&[ // FISH_CAKE_WITH_SWIRL
				
				&FISH_CAKE_WITH_SWIRL,
				
			],
			
			&[ // FORTUNE_COOKIE
				
				&FORTUNE_COOKIE,
				
			],
			
			&[ // FRIED_SHRIMP
				
				&FRIED_SHRIMP,
				
			],
			
			&[ // MOON_CAKE
				
				&MOON_CAKE,
				
			],
			
			&[ // ODEN
				
				&ODEN,
				
			],
			
			&[ // RICE_BALL
				
				&RICE_BALL,
				
			],
			
			&[ // RICE_CRACKER
				
				&RICE_CRACKER,
				
			],
			
			&[ // ROASTED_SWEET_POTATO
				
				&ROASTED_SWEET_POTATO,
				
			],
			
			&[ // SPAGHETTI
				
				&SPAGHETTI,
				
			],
			
			&[ // STEAMING_BOWL
				
				&STEAMING_BOWL,
				
			],
			
			&[ // SUSHI
				
				&SUSHI,
				
			],
			
			&[ // TAKEOUT_BOX
				
				&TAKEOUT_BOX,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BENTO_BOX, // BENTO_BOX
				
			
				
				&COOKED_RICE, // COOKED_RICE
				
			
				
				&CURRY_RICE, // CURRY_RICE
				
			
				
				&DANGO, // DANGO
				
			
				
				&DUMPLING, // DUMPLING
				
			
				
				&FISH_CAKE_WITH_SWIRL, // FISH_CAKE_WITH_SWIRL
				
			
				
				&FORTUNE_COOKIE, // FORTUNE_COOKIE
				
			
				
				&FRIED_SHRIMP, // FRIED_SHRIMP
				
			
				
				&MOON_CAKE, // MOON_CAKE
				
			
				
				&ODEN, // ODEN
				
			
				
				&RICE_BALL, // RICE_BALL
				
			
				
				&RICE_CRACKER, // RICE_CRACKER
				
			
				
				&ROASTED_SWEET_POTATO, // ROASTED_SWEET_POTATO
				
			
				
				&SPAGHETTI, // SPAGHETTI
				
			
				
				&STEAMING_BOWL, // STEAMING_BOWL
				
			
				
				&SUSHI, // SUSHI
				
			
				
				&TAKEOUT_BOX, // TAKEOUT_BOX
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // food_asian
	
	/// food_fruit üçåü´êüçí
	pub mod food_fruit {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="banana üçå"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BANANA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BANANA); // üçå (`U+1F34C`)"] #[doc="# assert_eq!(BANANA.to_string().as_str(), \"üçå\");"]
#[doc="```"]
pub static BANANA :  Emoji = Emoji::new("banana", Version(0, 6), "üçå"); // banana
		
		#[doc="blueberries ü´ê"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLUEBERRIES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLUEBERRIES); // ü´ê (`U+1FAD0`)"] #[doc="# assert_eq!(BLUEBERRIES.to_string().as_str(), \"ü´ê\");"]
#[doc="```"]
pub static BLUEBERRIES :  Emoji = Emoji::new("blueberries", Version(13, 0), "ü´ê"); // blueberries
		
		#[doc="cherries üçí"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHERRIES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHERRIES); // üçí (`U+1F352`)"] #[doc="# assert_eq!(CHERRIES.to_string().as_str(), \"üçí\");"]
#[doc="```"]
pub static CHERRIES :  Emoji = Emoji::new("cherries", Version(0, 6), "üçí"); // cherries
		
		#[doc="coconut ü••"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COCONUT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COCONUT); // ü•• (`U+1F965`)"] #[doc="# assert_eq!(COCONUT.to_string().as_str(), \"ü••\");"]
#[doc="```"]
pub static COCONUT :  Emoji = Emoji::new("coconut", Version(5, 0), "ü••"); // coconut
		
		#[doc="grapes üçá"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GRAPES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GRAPES); // üçá (`U+1F347`)"] #[doc="# assert_eq!(GRAPES.to_string().as_str(), \"üçá\");"]
#[doc="```"]
pub static GRAPES :  Emoji = Emoji::new("grapes", Version(0, 6), "üçá"); // grapes
		
		#[doc="green apple üçè"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GREEN_APPLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GREEN_APPLE); // üçè (`U+1F34F`)"] #[doc="# assert_eq!(GREEN_APPLE.to_string().as_str(), \"üçè\");"]
#[doc="```"]
pub static GREEN_APPLE :  Emoji = Emoji::new("green apple", Version(0, 6), "üçè"); // green apple
		
		#[doc="kiwi fruit ü•ù"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KIWI_FRUIT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KIWI_FRUIT); // ü•ù (`U+1F95D`)"] #[doc="# assert_eq!(KIWI_FRUIT.to_string().as_str(), \"ü•ù\");"]
#[doc="```"]
pub static KIWI_FRUIT :  Emoji = Emoji::new("kiwi fruit", Version(3, 0), "ü•ù"); // kiwi fruit
		
		#[doc="lemon üçã"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEMON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEMON); // üçã (`U+1F34B`)"] #[doc="# assert_eq!(LEMON.to_string().as_str(), \"üçã\");"]
#[doc="```"]
pub static LEMON :  Emoji = Emoji::new("lemon", Version(1, 0), "üçã"); // lemon
		
		#[doc="mango ü•≠"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MANGO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MANGO); // ü•≠ (`U+1F96D`)"] #[doc="# assert_eq!(MANGO.to_string().as_str(), \"ü•≠\");"]
#[doc="```"]
pub static MANGO :  Emoji = Emoji::new("mango", Version(11, 0), "ü•≠"); // mango
		
		#[doc="melon üçà"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MELON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MELON); // üçà (`U+1F348`)"] #[doc="# assert_eq!(MELON.to_string().as_str(), \"üçà\");"]
#[doc="```"]
pub static MELON :  Emoji = Emoji::new("melon", Version(0, 6), "üçà"); // melon
		
		#[doc="olive ü´í"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OLIVE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OLIVE); // ü´í (`U+1FAD2`)"] #[doc="# assert_eq!(OLIVE.to_string().as_str(), \"ü´í\");"]
#[doc="```"]
pub static OLIVE :  Emoji = Emoji::new("olive", Version(13, 0), "ü´í"); // olive
		
		#[doc="peach üçë"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PEACH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PEACH); // üçë (`U+1F351`)"] #[doc="# assert_eq!(PEACH.to_string().as_str(), \"üçë\");"]
#[doc="```"]
pub static PEACH :  Emoji = Emoji::new("peach", Version(0, 6), "üçë"); // peach
		
		#[doc="pear üçê"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PEAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PEAR); // üçê (`U+1F350`)"] #[doc="# assert_eq!(PEAR.to_string().as_str(), \"üçê\");"]
#[doc="```"]
pub static PEAR :  Emoji = Emoji::new("pear", Version(1, 0), "üçê"); // pear
		
		#[doc="pineapple üçç"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PINEAPPLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PINEAPPLE); // üçç (`U+1F34D`)"] #[doc="# assert_eq!(PINEAPPLE.to_string().as_str(), \"üçç\");"]
#[doc="```"]
pub static PINEAPPLE :  Emoji = Emoji::new("pineapple", Version(0, 6), "üçç"); // pineapple
		
		#[doc="red apple üçé"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RED_APPLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RED_APPLE); // üçé (`U+1F34E`)"] #[doc="# assert_eq!(RED_APPLE.to_string().as_str(), \"üçé\");"]
#[doc="```"]
pub static RED_APPLE :  Emoji = Emoji::new("red apple", Version(0, 6), "üçé"); // red apple
		
		#[doc="strawberry üçì"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STRAWBERRY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STRAWBERRY); // üçì (`U+1F353`)"] #[doc="# assert_eq!(STRAWBERRY.to_string().as_str(), \"üçì\");"]
#[doc="```"]
pub static STRAWBERRY :  Emoji = Emoji::new("strawberry", Version(0, 6), "üçì"); // strawberry
		
		#[doc="tangerine üçä"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TANGERINE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TANGERINE); // üçä (`U+1F34A`)"] #[doc="# assert_eq!(TANGERINE.to_string().as_str(), \"üçä\");"]
#[doc="```"]
pub static TANGERINE :  Emoji = Emoji::new("tangerine", Version(0, 6), "üçä"); // tangerine
		
		#[doc="tomato üçÖ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TOMATO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TOMATO); // üçÖ (`U+1F345`)"] #[doc="# assert_eq!(TOMATO.to_string().as_str(), \"üçÖ\");"]
#[doc="```"]
pub static TOMATO :  Emoji = Emoji::new("tomato", Version(0, 6), "üçÖ"); // tomato
		
		#[doc="watermelon üçâ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WATERMELON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WATERMELON); // üçâ (`U+1F349`)"] #[doc="# assert_eq!(WATERMELON.to_string().as_str(), \"üçâ\");"]
#[doc="```"]
pub static WATERMELON :  Emoji = Emoji::new("watermelon", Version(0, 6), "üçâ"); // watermelon
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BANANA
				
				&BANANA,
				
			],
			
			&[ // BLUEBERRIES
				
				&BLUEBERRIES,
				
			],
			
			&[ // CHERRIES
				
				&CHERRIES,
				
			],
			
			&[ // COCONUT
				
				&COCONUT,
				
			],
			
			&[ // GRAPES
				
				&GRAPES,
				
			],
			
			&[ // GREEN_APPLE
				
				&GREEN_APPLE,
				
			],
			
			&[ // KIWI_FRUIT
				
				&KIWI_FRUIT,
				
			],
			
			&[ // LEMON
				
				&LEMON,
				
			],
			
			&[ // MANGO
				
				&MANGO,
				
			],
			
			&[ // MELON
				
				&MELON,
				
			],
			
			&[ // OLIVE
				
				&OLIVE,
				
			],
			
			&[ // PEACH
				
				&PEACH,
				
			],
			
			&[ // PEAR
				
				&PEAR,
				
			],
			
			&[ // PINEAPPLE
				
				&PINEAPPLE,
				
			],
			
			&[ // RED_APPLE
				
				&RED_APPLE,
				
			],
			
			&[ // STRAWBERRY
				
				&STRAWBERRY,
				
			],
			
			&[ // TANGERINE
				
				&TANGERINE,
				
			],
			
			&[ // TOMATO
				
				&TOMATO,
				
			],
			
			&[ // WATERMELON
				
				&WATERMELON,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BANANA, // BANANA
				
			
				
				&BLUEBERRIES, // BLUEBERRIES
				
			
				
				&CHERRIES, // CHERRIES
				
			
				
				&COCONUT, // COCONUT
				
			
				
				&GRAPES, // GRAPES
				
			
				
				&GREEN_APPLE, // GREEN_APPLE
				
			
				
				&KIWI_FRUIT, // KIWI_FRUIT
				
			
				
				&LEMON, // LEMON
				
			
				
				&MANGO, // MANGO
				
			
				
				&MELON, // MELON
				
			
				
				&OLIVE, // OLIVE
				
			
				
				&PEACH, // PEACH
				
			
				
				&PEAR, // PEAR
				
			
				
				&PINEAPPLE, // PINEAPPLE
				
			
				
				&RED_APPLE, // RED_APPLE
				
			
				
				&STRAWBERRY, // STRAWBERRY
				
			
				
				&TANGERINE, // TANGERINE
				
			
				
				&TOMATO, // TOMATO
				
			
				
				&WATERMELON, // WATERMELON
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // food_fruit
	
	/// food_marine ü¶Äü¶ûü¶™
	pub mod food_marine {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="crab ü¶Ä"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CRAB;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CRAB); // ü¶Ä (`U+1F980`)"] #[doc="# assert_eq!(CRAB.to_string().as_str(), \"ü¶Ä\");"]
#[doc="```"]
pub static CRAB :  Emoji = Emoji::new("crab", Version(1, 0), "ü¶Ä"); // crab
		
		#[doc="lobster ü¶û"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LOBSTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LOBSTER); // ü¶û (`U+1F99E`)"] #[doc="# assert_eq!(LOBSTER.to_string().as_str(), \"ü¶û\");"]
#[doc="```"]
pub static LOBSTER :  Emoji = Emoji::new("lobster", Version(11, 0), "ü¶û"); // lobster
		
		#[doc="oyster ü¶™"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OYSTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OYSTER); // ü¶™ (`U+1F9AA`)"] #[doc="# assert_eq!(OYSTER.to_string().as_str(), \"ü¶™\");"]
#[doc="```"]
pub static OYSTER :  Emoji = Emoji::new("oyster", Version(12, 0), "ü¶™"); // oyster
		
		#[doc="shrimp ü¶ê"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHRIMP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHRIMP); // ü¶ê (`U+1F990`)"] #[doc="# assert_eq!(SHRIMP.to_string().as_str(), \"ü¶ê\");"]
#[doc="```"]
pub static SHRIMP :  Emoji = Emoji::new("shrimp", Version(3, 0), "ü¶ê"); // shrimp
		
		#[doc="squid ü¶ë"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SQUID;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SQUID); // ü¶ë (`U+1F991`)"] #[doc="# assert_eq!(SQUID.to_string().as_str(), \"ü¶ë\");"]
#[doc="```"]
pub static SQUID :  Emoji = Emoji::new("squid", Version(3, 0), "ü¶ë"); // squid
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // CRAB
				
				&CRAB,
				
			],
			
			&[ // LOBSTER
				
				&LOBSTER,
				
			],
			
			&[ // OYSTER
				
				&OYSTER,
				
			],
			
			&[ // SHRIMP
				
				&SHRIMP,
				
			],
			
			&[ // SQUID
				
				&SQUID,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&CRAB, // CRAB
				
			
				
				&LOBSTER, // LOBSTER
				
			
				
				&OYSTER, // OYSTER
				
			
				
				&SHRIMP, // SHRIMP
				
			
				
				&SQUID, // SQUID
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // food_marine
	
	/// food_prepared ü•ìü•Øü•ñ
	pub mod food_prepared {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="bacon ü•ì"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BACON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BACON); // ü•ì (`U+1F953`)"] #[doc="# assert_eq!(BACON.to_string().as_str(), \"ü•ì\");"]
#[doc="```"]
pub static BACON :  Emoji = Emoji::new("bacon", Version(3, 0), "ü•ì"); // bacon
		
		#[doc="bagel ü•Ø"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BAGEL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BAGEL); // ü•Ø (`U+1F96F`)"] #[doc="# assert_eq!(BAGEL.to_string().as_str(), \"ü•Ø\");"]
#[doc="```"]
pub static BAGEL :  Emoji = Emoji::new("bagel", Version(11, 0), "ü•Ø"); // bagel
		
		#[doc="baguette bread ü•ñ"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BAGUETTE_BREAD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BAGUETTE_BREAD); // ü•ñ (`U+1F956`)"] #[doc="# assert_eq!(BAGUETTE_BREAD.to_string().as_str(), \"ü•ñ\");"]
#[doc="```"]
pub static BAGUETTE_BREAD :  Emoji = Emoji::new("baguette bread", Version(3, 0), "ü•ñ"); // baguette bread
		
		#[doc="bowl with spoon ü•£"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BOWL_WITH_SPOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BOWL_WITH_SPOON); // ü•£ (`U+1F963`)"] #[doc="# assert_eq!(BOWL_WITH_SPOON.to_string().as_str(), \"ü•£\");"]
#[doc="```"]
pub static BOWL_WITH_SPOON :  Emoji = Emoji::new("bowl with spoon", Version(5, 0), "ü•£"); // bowl with spoon
		
		#[doc="bread üçû"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BREAD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BREAD); // üçû (`U+1F35E`)"] #[doc="# assert_eq!(BREAD.to_string().as_str(), \"üçû\");"]
#[doc="```"]
pub static BREAD :  Emoji = Emoji::new("bread", Version(0, 6), "üçû"); // bread
		
		#[doc="burrito üåØ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BURRITO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BURRITO); // üåØ (`U+1F32F`)"] #[doc="# assert_eq!(BURRITO.to_string().as_str(), \"üåØ\");"]
#[doc="```"]
pub static BURRITO :  Emoji = Emoji::new("burrito", Version(1, 0), "üåØ"); // burrito
		
		#[doc="butter üßà"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BUTTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BUTTER); // üßà (`U+1F9C8`)"] #[doc="# assert_eq!(BUTTER.to_string().as_str(), \"üßà\");"]
#[doc="```"]
pub static BUTTER :  Emoji = Emoji::new("butter", Version(12, 0), "üßà"); // butter
		
		#[doc="canned food ü•´"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CANNED_FOOD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CANNED_FOOD); // ü•´ (`U+1F96B`)"] #[doc="# assert_eq!(CANNED_FOOD.to_string().as_str(), \"ü•´\");"]
#[doc="```"]
pub static CANNED_FOOD :  Emoji = Emoji::new("canned food", Version(5, 0), "ü•´"); // canned food
		
		#[doc="cheese wedge üßÄ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHEESE_WEDGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHEESE_WEDGE); // üßÄ (`U+1F9C0`)"] #[doc="# assert_eq!(CHEESE_WEDGE.to_string().as_str(), \"üßÄ\");"]
#[doc="```"]
pub static CHEESE_WEDGE :  Emoji = Emoji::new("cheese wedge", Version(1, 0), "üßÄ"); // cheese wedge
		
		#[doc="cooking üç≥"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COOKING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COOKING); // üç≥ (`U+1F373`)"] #[doc="# assert_eq!(COOKING.to_string().as_str(), \"üç≥\");"]
#[doc="```"]
pub static COOKING :  Emoji = Emoji::new("cooking", Version(0, 6), "üç≥"); // cooking
		
		#[doc="croissant ü•ê"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CROISSANT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CROISSANT); // ü•ê (`U+1F950`)"] #[doc="# assert_eq!(CROISSANT.to_string().as_str(), \"ü•ê\");"]
#[doc="```"]
pub static CROISSANT :  Emoji = Emoji::new("croissant", Version(3, 0), "ü•ê"); // croissant
		
		#[doc="cut of meat ü•©"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CUT_OF_MEAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CUT_OF_MEAT); // ü•© (`U+1F969`)"] #[doc="# assert_eq!(CUT_OF_MEAT.to_string().as_str(), \"ü•©\");"]
#[doc="```"]
pub static CUT_OF_MEAT :  Emoji = Emoji::new("cut of meat", Version(5, 0), "ü•©"); // cut of meat
		
		#[doc="egg ü•ö"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EGG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EGG); // ü•ö (`U+1F95A`)"] #[doc="# assert_eq!(EGG.to_string().as_str(), \"ü•ö\");"]
#[doc="```"]
pub static EGG :  Emoji = Emoji::new("egg", Version(3, 0), "ü•ö"); // egg
		
		#[doc="falafel üßÜ"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FALAFEL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FALAFEL); // üßÜ (`U+1F9C6`)"] #[doc="# assert_eq!(FALAFEL.to_string().as_str(), \"üßÜ\");"]
#[doc="```"]
pub static FALAFEL :  Emoji = Emoji::new("falafel", Version(12, 0), "üßÜ"); // falafel
		
		#[doc="flatbread ü´ì"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLATBREAD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLATBREAD); // ü´ì (`U+1FAD3`)"] #[doc="# assert_eq!(FLATBREAD.to_string().as_str(), \"ü´ì\");"]
#[doc="```"]
pub static FLATBREAD :  Emoji = Emoji::new("flatbread", Version(13, 0), "ü´ì"); // flatbread
		
		#[doc="fondue ü´ï"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FONDUE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FONDUE); // ü´ï (`U+1FAD5`)"] #[doc="# assert_eq!(FONDUE.to_string().as_str(), \"ü´ï\");"]
#[doc="```"]
pub static FONDUE :  Emoji = Emoji::new("fondue", Version(13, 0), "ü´ï"); // fondue
		
		#[doc="french fries üçü"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FRENCH_FRIES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FRENCH_FRIES); // üçü (`U+1F35F`)"] #[doc="# assert_eq!(FRENCH_FRIES.to_string().as_str(), \"üçü\");"]
#[doc="```"]
pub static FRENCH_FRIES :  Emoji = Emoji::new("french fries", Version(0, 6), "üçü"); // french fries
		
		#[doc="green salad ü•ó"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GREEN_SALAD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GREEN_SALAD); // ü•ó (`U+1F957`)"] #[doc="# assert_eq!(GREEN_SALAD.to_string().as_str(), \"ü•ó\");"]
#[doc="```"]
pub static GREEN_SALAD :  Emoji = Emoji::new("green salad", Version(3, 0), "ü•ó"); // green salad
		
		#[doc="hamburger üçî"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HAMBURGER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HAMBURGER); // üçî (`U+1F354`)"] #[doc="# assert_eq!(HAMBURGER.to_string().as_str(), \"üçî\");"]
#[doc="```"]
pub static HAMBURGER :  Emoji = Emoji::new("hamburger", Version(0, 6), "üçî"); // hamburger
		
		#[doc="hot dog üå≠"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOT_DOG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOT_DOG); // üå≠ (`U+1F32D`)"] #[doc="# assert_eq!(HOT_DOG.to_string().as_str(), \"üå≠\");"]
#[doc="```"]
pub static HOT_DOG :  Emoji = Emoji::new("hot dog", Version(1, 0), "üå≠"); // hot dog
		
		#[doc="meat on bone üçñ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MEAT_ON_BONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MEAT_ON_BONE); // üçñ (`U+1F356`)"] #[doc="# assert_eq!(MEAT_ON_BONE.to_string().as_str(), \"üçñ\");"]
#[doc="```"]
pub static MEAT_ON_BONE :  Emoji = Emoji::new("meat on bone", Version(0, 6), "üçñ"); // meat on bone
		
		#[doc="pancakes ü•û"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PANCAKES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PANCAKES); // ü•û (`U+1F95E`)"] #[doc="# assert_eq!(PANCAKES.to_string().as_str(), \"ü•û\");"]
#[doc="```"]
pub static PANCAKES :  Emoji = Emoji::new("pancakes", Version(3, 0), "ü•û"); // pancakes
		
		#[doc="pizza üçï"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PIZZA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PIZZA); // üçï (`U+1F355`)"] #[doc="# assert_eq!(PIZZA.to_string().as_str(), \"üçï\");"]
#[doc="```"]
pub static PIZZA :  Emoji = Emoji::new("pizza", Version(0, 6), "üçï"); // pizza
		
		#[doc="popcorn üçø"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POPCORN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POPCORN); // üçø (`U+1F37F`)"] #[doc="# assert_eq!(POPCORN.to_string().as_str(), \"üçø\");"]
#[doc="```"]
pub static POPCORN :  Emoji = Emoji::new("popcorn", Version(1, 0), "üçø"); // popcorn
		
		#[doc="pot of food üç≤"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POT_OF_FOOD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POT_OF_FOOD); // üç≤ (`U+1F372`)"] #[doc="# assert_eq!(POT_OF_FOOD.to_string().as_str(), \"üç≤\");"]
#[doc="```"]
pub static POT_OF_FOOD :  Emoji = Emoji::new("pot of food", Version(0, 6), "üç≤"); // pot of food
		
		#[doc="poultry leg üçó"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POULTRY_LEG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POULTRY_LEG); // üçó (`U+1F357`)"] #[doc="# assert_eq!(POULTRY_LEG.to_string().as_str(), \"üçó\");"]
#[doc="```"]
pub static POULTRY_LEG :  Emoji = Emoji::new("poultry leg", Version(0, 6), "üçó"); // poultry leg
		
		#[doc="pretzel ü•®"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PRETZEL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PRETZEL); // ü•® (`U+1F968`)"] #[doc="# assert_eq!(PRETZEL.to_string().as_str(), \"ü•®\");"]
#[doc="```"]
pub static PRETZEL :  Emoji = Emoji::new("pretzel", Version(5, 0), "ü•®"); // pretzel
		
		#[doc="salt üßÇ"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SALT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SALT); // üßÇ (`U+1F9C2`)"] #[doc="# assert_eq!(SALT.to_string().as_str(), \"üßÇ\");"]
#[doc="```"]
pub static SALT :  Emoji = Emoji::new("salt", Version(11, 0), "üßÇ"); // salt
		
		#[doc="sandwich ü•™"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SANDWICH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SANDWICH); // ü•™ (`U+1F96A`)"] #[doc="# assert_eq!(SANDWICH.to_string().as_str(), \"ü•™\");"]
#[doc="```"]
pub static SANDWICH :  Emoji = Emoji::new("sandwich", Version(5, 0), "ü•™"); // sandwich
		
		#[doc="shallow pan of food ü•ò"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHALLOW_PAN_OF_FOOD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHALLOW_PAN_OF_FOOD); // ü•ò (`U+1F958`)"] #[doc="# assert_eq!(SHALLOW_PAN_OF_FOOD.to_string().as_str(), \"ü•ò\");"]
#[doc="```"]
pub static SHALLOW_PAN_OF_FOOD :  Emoji = Emoji::new("shallow pan of food", Version(3, 0), "ü•ò"); // shallow pan of food
		
		#[doc="stuffed flatbread ü•ô"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STUFFED_FLATBREAD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STUFFED_FLATBREAD); // ü•ô (`U+1F959`)"] #[doc="# assert_eq!(STUFFED_FLATBREAD.to_string().as_str(), \"ü•ô\");"]
#[doc="```"]
pub static STUFFED_FLATBREAD :  Emoji = Emoji::new("stuffed flatbread", Version(3, 0), "ü•ô"); // stuffed flatbread
		
		#[doc="taco üåÆ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TACO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TACO); // üåÆ (`U+1F32E`)"] #[doc="# assert_eq!(TACO.to_string().as_str(), \"üåÆ\");"]
#[doc="```"]
pub static TACO :  Emoji = Emoji::new("taco", Version(1, 0), "üåÆ"); // taco
		
		#[doc="tamale ü´î"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TAMALE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TAMALE); // ü´î (`U+1FAD4`)"] #[doc="# assert_eq!(TAMALE.to_string().as_str(), \"ü´î\");"]
#[doc="```"]
pub static TAMALE :  Emoji = Emoji::new("tamale", Version(13, 0), "ü´î"); // tamale
		
		#[doc="waffle üßá"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WAFFLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WAFFLE); // üßá (`U+1F9C7`)"] #[doc="# assert_eq!(WAFFLE.to_string().as_str(), \"üßá\");"]
#[doc="```"]
pub static WAFFLE :  Emoji = Emoji::new("waffle", Version(12, 0), "üßá"); // waffle
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BACON
				
				&BACON,
				
			],
			
			&[ // BAGEL
				
				&BAGEL,
				
			],
			
			&[ // BAGUETTE_BREAD
				
				&BAGUETTE_BREAD,
				
			],
			
			&[ // BOWL_WITH_SPOON
				
				&BOWL_WITH_SPOON,
				
			],
			
			&[ // BREAD
				
				&BREAD,
				
			],
			
			&[ // BURRITO
				
				&BURRITO,
				
			],
			
			&[ // BUTTER
				
				&BUTTER,
				
			],
			
			&[ // CANNED_FOOD
				
				&CANNED_FOOD,
				
			],
			
			&[ // CHEESE_WEDGE
				
				&CHEESE_WEDGE,
				
			],
			
			&[ // COOKING
				
				&COOKING,
				
			],
			
			&[ // CROISSANT
				
				&CROISSANT,
				
			],
			
			&[ // CUT_OF_MEAT
				
				&CUT_OF_MEAT,
				
			],
			
			&[ // EGG
				
				&EGG,
				
			],
			
			&[ // FALAFEL
				
				&FALAFEL,
				
			],
			
			&[ // FLATBREAD
				
				&FLATBREAD,
				
			],
			
			&[ // FONDUE
				
				&FONDUE,
				
			],
			
			&[ // FRENCH_FRIES
				
				&FRENCH_FRIES,
				
			],
			
			&[ // GREEN_SALAD
				
				&GREEN_SALAD,
				
			],
			
			&[ // HAMBURGER
				
				&HAMBURGER,
				
			],
			
			&[ // HOT_DOG
				
				&HOT_DOG,
				
			],
			
			&[ // MEAT_ON_BONE
				
				&MEAT_ON_BONE,
				
			],
			
			&[ // PANCAKES
				
				&PANCAKES,
				
			],
			
			&[ // PIZZA
				
				&PIZZA,
				
			],
			
			&[ // POPCORN
				
				&POPCORN,
				
			],
			
			&[ // POT_OF_FOOD
				
				&POT_OF_FOOD,
				
			],
			
			&[ // POULTRY_LEG
				
				&POULTRY_LEG,
				
			],
			
			&[ // PRETZEL
				
				&PRETZEL,
				
			],
			
			&[ // SALT
				
				&SALT,
				
			],
			
			&[ // SANDWICH
				
				&SANDWICH,
				
			],
			
			&[ // SHALLOW_PAN_OF_FOOD
				
				&SHALLOW_PAN_OF_FOOD,
				
			],
			
			&[ // STUFFED_FLATBREAD
				
				&STUFFED_FLATBREAD,
				
			],
			
			&[ // TACO
				
				&TACO,
				
			],
			
			&[ // TAMALE
				
				&TAMALE,
				
			],
			
			&[ // WAFFLE
				
				&WAFFLE,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BACON, // BACON
				
			
				
				&BAGEL, // BAGEL
				
			
				
				&BAGUETTE_BREAD, // BAGUETTE_BREAD
				
			
				
				&BOWL_WITH_SPOON, // BOWL_WITH_SPOON
				
			
				
				&BREAD, // BREAD
				
			
				
				&BURRITO, // BURRITO
				
			
				
				&BUTTER, // BUTTER
				
			
				
				&CANNED_FOOD, // CANNED_FOOD
				
			
				
				&CHEESE_WEDGE, // CHEESE_WEDGE
				
			
				
				&COOKING, // COOKING
				
			
				
				&CROISSANT, // CROISSANT
				
			
				
				&CUT_OF_MEAT, // CUT_OF_MEAT
				
			
				
				&EGG, // EGG
				
			
				
				&FALAFEL, // FALAFEL
				
			
				
				&FLATBREAD, // FLATBREAD
				
			
				
				&FONDUE, // FONDUE
				
			
				
				&FRENCH_FRIES, // FRENCH_FRIES
				
			
				
				&GREEN_SALAD, // GREEN_SALAD
				
			
				
				&HAMBURGER, // HAMBURGER
				
			
				
				&HOT_DOG, // HOT_DOG
				
			
				
				&MEAT_ON_BONE, // MEAT_ON_BONE
				
			
				
				&PANCAKES, // PANCAKES
				
			
				
				&PIZZA, // PIZZA
				
			
				
				&POPCORN, // POPCORN
				
			
				
				&POT_OF_FOOD, // POT_OF_FOOD
				
			
				
				&POULTRY_LEG, // POULTRY_LEG
				
			
				
				&PRETZEL, // PRETZEL
				
			
				
				&SALT, // SALT
				
			
				
				&SANDWICH, // SANDWICH
				
			
				
				&SHALLOW_PAN_OF_FOOD, // SHALLOW_PAN_OF_FOOD
				
			
				
				&STUFFED_FLATBREAD, // STUFFED_FLATBREAD
				
			
				
				&TACO, // TACO
				
			
				
				&TAMALE, // TAMALE
				
			
				
				&WAFFLE, // WAFFLE
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // food_prepared
	
	/// food_sweet üéÇüç¨üç´
	pub mod food_sweet {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="birthday cake üéÇ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BIRTHDAY_CAKE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BIRTHDAY_CAKE); // üéÇ (`U+1F382`)"] #[doc="# assert_eq!(BIRTHDAY_CAKE.to_string().as_str(), \"üéÇ\");"]
#[doc="```"]
pub static BIRTHDAY_CAKE :  Emoji = Emoji::new("birthday cake", Version(0, 6), "üéÇ"); // birthday cake
		
		#[doc="candy üç¨"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CANDY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CANDY); // üç¨ (`U+1F36C`)"] #[doc="# assert_eq!(CANDY.to_string().as_str(), \"üç¨\");"]
#[doc="```"]
pub static CANDY :  Emoji = Emoji::new("candy", Version(0, 6), "üç¨"); // candy
		
		#[doc="chocolate bar üç´"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHOCOLATE_BAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHOCOLATE_BAR); // üç´ (`U+1F36B`)"] #[doc="# assert_eq!(CHOCOLATE_BAR.to_string().as_str(), \"üç´\");"]
#[doc="```"]
pub static CHOCOLATE_BAR :  Emoji = Emoji::new("chocolate bar", Version(0, 6), "üç´"); // chocolate bar
		
		#[doc="cookie üç™"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COOKIE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COOKIE); // üç™ (`U+1F36A`)"] #[doc="# assert_eq!(COOKIE.to_string().as_str(), \"üç™\");"]
#[doc="```"]
pub static COOKIE :  Emoji = Emoji::new("cookie", Version(0, 6), "üç™"); // cookie
		
		#[doc="cupcake üßÅ"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CUPCAKE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CUPCAKE); // üßÅ (`U+1F9C1`)"] #[doc="# assert_eq!(CUPCAKE.to_string().as_str(), \"üßÅ\");"]
#[doc="```"]
pub static CUPCAKE :  Emoji = Emoji::new("cupcake", Version(11, 0), "üßÅ"); // cupcake
		
		#[doc="custard üçÆ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CUSTARD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CUSTARD); // üçÆ (`U+1F36E`)"] #[doc="# assert_eq!(CUSTARD.to_string().as_str(), \"üçÆ\");"]
#[doc="```"]
pub static CUSTARD :  Emoji = Emoji::new("custard", Version(0, 6), "üçÆ"); // custard
		
		#[doc="doughnut üç©"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOUGHNUT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOUGHNUT); // üç© (`U+1F369`)"] #[doc="# assert_eq!(DOUGHNUT.to_string().as_str(), \"üç©\");"]
#[doc="```"]
pub static DOUGHNUT :  Emoji = Emoji::new("doughnut", Version(0, 6), "üç©"); // doughnut
		
		#[doc="honey pot üçØ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HONEY_POT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HONEY_POT); // üçØ (`U+1F36F`)"] #[doc="# assert_eq!(HONEY_POT.to_string().as_str(), \"üçØ\");"]
#[doc="```"]
pub static HONEY_POT :  Emoji = Emoji::new("honey pot", Version(0, 6), "üçØ"); // honey pot
		
		#[doc="ice cream üç®"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ICE_CREAM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ICE_CREAM); // üç® (`U+1F368`)"] #[doc="# assert_eq!(ICE_CREAM.to_string().as_str(), \"üç®\");"]
#[doc="```"]
pub static ICE_CREAM :  Emoji = Emoji::new("ice cream", Version(0, 6), "üç®"); // ice cream
		
		#[doc="lollipop üç≠"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LOLLIPOP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LOLLIPOP); // üç≠ (`U+1F36D`)"] #[doc="# assert_eq!(LOLLIPOP.to_string().as_str(), \"üç≠\");"]
#[doc="```"]
pub static LOLLIPOP :  Emoji = Emoji::new("lollipop", Version(0, 6), "üç≠"); // lollipop
		
		#[doc="pie ü•ß"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PIE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PIE); // ü•ß (`U+1F967`)"] #[doc="# assert_eq!(PIE.to_string().as_str(), \"ü•ß\");"]
#[doc="```"]
pub static PIE :  Emoji = Emoji::new("pie", Version(5, 0), "ü•ß"); // pie
		
		#[doc="shaved ice üçß"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHAVED_ICE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHAVED_ICE); // üçß (`U+1F367`)"] #[doc="# assert_eq!(SHAVED_ICE.to_string().as_str(), \"üçß\");"]
#[doc="```"]
pub static SHAVED_ICE :  Emoji = Emoji::new("shaved ice", Version(0, 6), "üçß"); // shaved ice
		
		#[doc="shortcake üç∞"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHORTCAKE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHORTCAKE); // üç∞ (`U+1F370`)"] #[doc="# assert_eq!(SHORTCAKE.to_string().as_str(), \"üç∞\");"]
#[doc="```"]
pub static SHORTCAKE :  Emoji = Emoji::new("shortcake", Version(0, 6), "üç∞"); // shortcake
		
		#[doc="soft ice cream üç¶"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SOFT_ICE_CREAM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SOFT_ICE_CREAM); // üç¶ (`U+1F366`)"] #[doc="# assert_eq!(SOFT_ICE_CREAM.to_string().as_str(), \"üç¶\");"]
#[doc="```"]
pub static SOFT_ICE_CREAM :  Emoji = Emoji::new("soft ice cream", Version(0, 6), "üç¶"); // soft ice cream
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BIRTHDAY_CAKE
				
				&BIRTHDAY_CAKE,
				
			],
			
			&[ // CANDY
				
				&CANDY,
				
			],
			
			&[ // CHOCOLATE_BAR
				
				&CHOCOLATE_BAR,
				
			],
			
			&[ // COOKIE
				
				&COOKIE,
				
			],
			
			&[ // CUPCAKE
				
				&CUPCAKE,
				
			],
			
			&[ // CUSTARD
				
				&CUSTARD,
				
			],
			
			&[ // DOUGHNUT
				
				&DOUGHNUT,
				
			],
			
			&[ // HONEY_POT
				
				&HONEY_POT,
				
			],
			
			&[ // ICE_CREAM
				
				&ICE_CREAM,
				
			],
			
			&[ // LOLLIPOP
				
				&LOLLIPOP,
				
			],
			
			&[ // PIE
				
				&PIE,
				
			],
			
			&[ // SHAVED_ICE
				
				&SHAVED_ICE,
				
			],
			
			&[ // SHORTCAKE
				
				&SHORTCAKE,
				
			],
			
			&[ // SOFT_ICE_CREAM
				
				&SOFT_ICE_CREAM,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BIRTHDAY_CAKE, // BIRTHDAY_CAKE
				
			
				
				&CANDY, // CANDY
				
			
				
				&CHOCOLATE_BAR, // CHOCOLATE_BAR
				
			
				
				&COOKIE, // COOKIE
				
			
				
				&CUPCAKE, // CUPCAKE
				
			
				
				&CUSTARD, // CUSTARD
				
			
				
				&DOUGHNUT, // DOUGHNUT
				
			
				
				&HONEY_POT, // HONEY_POT
				
			
				
				&ICE_CREAM, // ICE_CREAM
				
			
				
				&LOLLIPOP, // LOLLIPOP
				
			
				
				&PIE, // PIE
				
			
				
				&SHAVED_ICE, // SHAVED_ICE
				
			
				
				&SHORTCAKE, // SHORTCAKE
				
			
				
				&SOFT_ICE_CREAM, // SOFT_ICE_CREAM
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // food_sweet
	
	/// food_vegetable ü•ëü´ëü•¶
	pub mod food_vegetable {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="avocado ü•ë"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::AVOCADO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", AVOCADO); // ü•ë (`U+1F951`)"] #[doc="# assert_eq!(AVOCADO.to_string().as_str(), \"ü•ë\");"]
#[doc="```"]
pub static AVOCADO :  Emoji = Emoji::new("avocado", Version(3, 0), "ü•ë"); // avocado
		
		#[doc="bell pepper ü´ë"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BELL_PEPPER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BELL_PEPPER); // ü´ë (`U+1FAD1`)"] #[doc="# assert_eq!(BELL_PEPPER.to_string().as_str(), \"ü´ë\");"]
#[doc="```"]
pub static BELL_PEPPER :  Emoji = Emoji::new("bell pepper", Version(13, 0), "ü´ë"); // bell pepper
		
		#[doc="broccoli ü•¶"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BROCCOLI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BROCCOLI); // ü•¶ (`U+1F966`)"] #[doc="# assert_eq!(BROCCOLI.to_string().as_str(), \"ü•¶\");"]
#[doc="```"]
pub static BROCCOLI :  Emoji = Emoji::new("broccoli", Version(5, 0), "ü•¶"); // broccoli
		
		#[doc="carrot ü•ï"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CARROT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CARROT); // ü•ï (`U+1F955`)"] #[doc="# assert_eq!(CARROT.to_string().as_str(), \"ü•ï\");"]
#[doc="```"]
pub static CARROT :  Emoji = Emoji::new("carrot", Version(3, 0), "ü•ï"); // carrot
		
		#[doc="chestnut üå∞"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHESTNUT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHESTNUT); // üå∞ (`U+1F330`)"] #[doc="# assert_eq!(CHESTNUT.to_string().as_str(), \"üå∞\");"]
#[doc="```"]
pub static CHESTNUT :  Emoji = Emoji::new("chestnut", Version(0, 6), "üå∞"); // chestnut
		
		#[doc="cucumber ü•í"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CUCUMBER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CUCUMBER); // ü•í (`U+1F952`)"] #[doc="# assert_eq!(CUCUMBER.to_string().as_str(), \"ü•í\");"]
#[doc="```"]
pub static CUCUMBER :  Emoji = Emoji::new("cucumber", Version(3, 0), "ü•í"); // cucumber
		
		#[doc="ear of corn üåΩ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EAR_OF_CORN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EAR_OF_CORN); // üåΩ (`U+1F33D`)"] #[doc="# assert_eq!(EAR_OF_CORN.to_string().as_str(), \"üåΩ\");"]
#[doc="```"]
pub static EAR_OF_CORN :  Emoji = Emoji::new("ear of corn", Version(0, 6), "üåΩ"); // ear of corn
		
		#[doc="eggplant üçÜ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EGGPLANT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EGGPLANT); // üçÜ (`U+1F346`)"] #[doc="# assert_eq!(EGGPLANT.to_string().as_str(), \"üçÜ\");"]
#[doc="```"]
pub static EGGPLANT :  Emoji = Emoji::new("eggplant", Version(0, 6), "üçÜ"); // eggplant
		
		#[doc="garlic üßÑ"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GARLIC;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GARLIC); // üßÑ (`U+1F9C4`)"] #[doc="# assert_eq!(GARLIC.to_string().as_str(), \"üßÑ\");"]
#[doc="```"]
pub static GARLIC :  Emoji = Emoji::new("garlic", Version(12, 0), "üßÑ"); // garlic
		
		#[doc="hot pepper üå∂Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOT_PEPPER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOT_PEPPER); // üå∂Ô∏è (`U+1F336 U+FE0F`)"] #[doc="# assert_eq!(HOT_PEPPER.to_string().as_str(), \"üå∂Ô∏è\");"]
#[doc="```"]
pub static HOT_PEPPER :  Emoji = Emoji::new("hot pepper", Version(0, 7), "üå∂Ô∏è"); // hot pepper
		
		#[doc="leafy green ü•¨"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEAFY_GREEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEAFY_GREEN); // ü•¨ (`U+1F96C`)"] #[doc="# assert_eq!(LEAFY_GREEN.to_string().as_str(), \"ü•¨\");"]
#[doc="```"]
pub static LEAFY_GREEN :  Emoji = Emoji::new("leafy green", Version(11, 0), "ü•¨"); // leafy green
		
		#[doc="mushroom üçÑ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MUSHROOM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MUSHROOM); // üçÑ (`U+1F344`)"] #[doc="# assert_eq!(MUSHROOM.to_string().as_str(), \"üçÑ\");"]
#[doc="```"]
pub static MUSHROOM :  Emoji = Emoji::new("mushroom", Version(0, 6), "üçÑ"); // mushroom
		
		#[doc="onion üßÖ"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ONION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ONION); // üßÖ (`U+1F9C5`)"] #[doc="# assert_eq!(ONION.to_string().as_str(), \"üßÖ\");"]
#[doc="```"]
pub static ONION :  Emoji = Emoji::new("onion", Version(12, 0), "üßÖ"); // onion
		
		#[doc="peanuts ü•ú"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PEANUTS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PEANUTS); // ü•ú (`U+1F95C`)"] #[doc="# assert_eq!(PEANUTS.to_string().as_str(), \"ü•ú\");"]
#[doc="```"]
pub static PEANUTS :  Emoji = Emoji::new("peanuts", Version(3, 0), "ü•ú"); // peanuts
		
		#[doc="potato ü•î"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POTATO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POTATO); // ü•î (`U+1F954`)"] #[doc="# assert_eq!(POTATO.to_string().as_str(), \"ü•î\");"]
#[doc="```"]
pub static POTATO :  Emoji = Emoji::new("potato", Version(3, 0), "ü•î"); // potato
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // AVOCADO
				
				&AVOCADO,
				
			],
			
			&[ // BELL_PEPPER
				
				&BELL_PEPPER,
				
			],
			
			&[ // BROCCOLI
				
				&BROCCOLI,
				
			],
			
			&[ // CARROT
				
				&CARROT,
				
			],
			
			&[ // CHESTNUT
				
				&CHESTNUT,
				
			],
			
			&[ // CUCUMBER
				
				&CUCUMBER,
				
			],
			
			&[ // EAR_OF_CORN
				
				&EAR_OF_CORN,
				
			],
			
			&[ // EGGPLANT
				
				&EGGPLANT,
				
			],
			
			&[ // GARLIC
				
				&GARLIC,
				
			],
			
			&[ // HOT_PEPPER
				
				&HOT_PEPPER,
				
			],
			
			&[ // LEAFY_GREEN
				
				&LEAFY_GREEN,
				
			],
			
			&[ // MUSHROOM
				
				&MUSHROOM,
				
			],
			
			&[ // ONION
				
				&ONION,
				
			],
			
			&[ // PEANUTS
				
				&PEANUTS,
				
			],
			
			&[ // POTATO
				
				&POTATO,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&AVOCADO, // AVOCADO
				
			
				
				&BELL_PEPPER, // BELL_PEPPER
				
			
				
				&BROCCOLI, // BROCCOLI
				
			
				
				&CARROT, // CARROT
				
			
				
				&CHESTNUT, // CHESTNUT
				
			
				
				&CUCUMBER, // CUCUMBER
				
			
				
				&EAR_OF_CORN, // EAR_OF_CORN
				
			
				
				&EGGPLANT, // EGGPLANT
				
			
				
				&GARLIC, // GARLIC
				
			
				
				&HOT_PEPPER, // HOT_PEPPER
				
			
				
				&LEAFY_GREEN, // LEAFY_GREEN
				
			
				
				&MUSHROOM, // MUSHROOM
				
			
				
				&ONION, // ONION
				
			
				
				&PEANUTS, // PEANUTS
				
			
				
				&POTATO, // POTATO
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // food_vegetable
	


	// Emoji iterators

	/// Returns an iterator over all emoji variants of these subgroups grouped by base emojis
	pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
		core::iter::empty()
		
			.chain(dishware::all_variants())
		
			.chain(drink::all_variants())
		
			.chain(food_asian::all_variants())
		
			.chain(food_fruit::all_variants())
		
			.chain(food_marine::all_variants())
		
			.chain(food_prepared::all_variants())
		
			.chain(food_sweet::all_variants())
		
			.chain(food_vegetable::all_variants())
		
	}

	/// Returns an iterator over all base emojis of these subgroups (i.e. one for each static)
	pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
		core::iter::empty()
		
			.chain(dishware::base_emojis())
		
			.chain(drink::base_emojis())
		
			.chain(food_asian::base_emojis())
		
			.chain(food_fruit::base_emojis())
		
			.chain(food_marine::base_emojis())
		
			.chain(food_prepared::base_emojis())
		
			.chain(food_sweet::base_emojis())
		
			.chain(food_vegetable::base_emojis())
		
	}

} // food_and_drink

/// objects üìòüéíüßÆ
pub mod objects {
	use crate::emojis::Emoji;

	
	/// book_paper üìòüîñüìë
	pub mod book_paper {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="blue book üìò"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLUE_BOOK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLUE_BOOK); // üìò (`U+1F4D8`)"] #[doc="# assert_eq!(BLUE_BOOK.to_string().as_str(), \"üìò\");"]
#[doc="```"]
pub static BLUE_BOOK :  Emoji = Emoji::new("blue book", Version(0, 6), "üìò"); // blue book
		
		#[doc="bookmark üîñ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BOOKMARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BOOKMARK); // üîñ (`U+1F516`)"] #[doc="# assert_eq!(BOOKMARK.to_string().as_str(), \"üîñ\");"]
#[doc="```"]
pub static BOOKMARK :  Emoji = Emoji::new("bookmark", Version(0, 6), "üîñ"); // bookmark
		
		#[doc="bookmark tabs üìë"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BOOKMARK_TABS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BOOKMARK_TABS); // üìë (`U+1F4D1`)"] #[doc="# assert_eq!(BOOKMARK_TABS.to_string().as_str(), \"üìë\");"]
#[doc="```"]
pub static BOOKMARK_TABS :  Emoji = Emoji::new("bookmark tabs", Version(0, 6), "üìë"); // bookmark tabs
		
		#[doc="books üìö"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BOOKS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BOOKS); // üìö (`U+1F4DA`)"] #[doc="# assert_eq!(BOOKS.to_string().as_str(), \"üìö\");"]
#[doc="```"]
pub static BOOKS :  Emoji = Emoji::new("books", Version(0, 6), "üìö"); // books
		
		#[doc="closed book üìï"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLOSED_BOOK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLOSED_BOOK); // üìï (`U+1F4D5`)"] #[doc="# assert_eq!(CLOSED_BOOK.to_string().as_str(), \"üìï\");"]
#[doc="```"]
pub static CLOSED_BOOK :  Emoji = Emoji::new("closed book", Version(0, 6), "üìï"); // closed book
		
		#[doc="green book üìó"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GREEN_BOOK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GREEN_BOOK); // üìó (`U+1F4D7`)"] #[doc="# assert_eq!(GREEN_BOOK.to_string().as_str(), \"üìó\");"]
#[doc="```"]
pub static GREEN_BOOK :  Emoji = Emoji::new("green book", Version(0, 6), "üìó"); // green book
		
		#[doc="label üè∑Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LABEL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LABEL); // üè∑Ô∏è (`U+1F3F7 U+FE0F`)"] #[doc="# assert_eq!(LABEL.to_string().as_str(), \"üè∑Ô∏è\");"]
#[doc="```"]
pub static LABEL :  Emoji = Emoji::new("label", Version(0, 7), "üè∑Ô∏è"); // label
		
		#[doc="ledger üìí"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEDGER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEDGER); // üìí (`U+1F4D2`)"] #[doc="# assert_eq!(LEDGER.to_string().as_str(), \"üìí\");"]
#[doc="```"]
pub static LEDGER :  Emoji = Emoji::new("ledger", Version(0, 6), "üìí"); // ledger
		
		#[doc="newspaper üì∞"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NEWSPAPER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NEWSPAPER); // üì∞ (`U+1F4F0`)"] #[doc="# assert_eq!(NEWSPAPER.to_string().as_str(), \"üì∞\");"]
#[doc="```"]
pub static NEWSPAPER :  Emoji = Emoji::new("newspaper", Version(0, 6), "üì∞"); // newspaper
		
		#[doc="notebook üìì"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NOTEBOOK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NOTEBOOK); // üìì (`U+1F4D3`)"] #[doc="# assert_eq!(NOTEBOOK.to_string().as_str(), \"üìì\");"]
#[doc="```"]
pub static NOTEBOOK :  Emoji = Emoji::new("notebook", Version(0, 6), "üìì"); // notebook
		
		#[doc="notebook with decorative cover üìî"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NOTEBOOK_WITH_DECORATIVE_COVER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NOTEBOOK_WITH_DECORATIVE_COVER); // üìî (`U+1F4D4`)"] #[doc="# assert_eq!(NOTEBOOK_WITH_DECORATIVE_COVER.to_string().as_str(), \"üìî\");"]
#[doc="```"]
pub static NOTEBOOK_WITH_DECORATIVE_COVER :  Emoji = Emoji::new("notebook with decorative cover", Version(0, 6), "üìî"); // notebook with decorative cover
		
		#[doc="open book üìñ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OPEN_BOOK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OPEN_BOOK); // üìñ (`U+1F4D6`)"] #[doc="# assert_eq!(OPEN_BOOK.to_string().as_str(), \"üìñ\");"]
#[doc="```"]
pub static OPEN_BOOK :  Emoji = Emoji::new("open book", Version(0, 6), "üìñ"); // open book
		
		#[doc="orange book üìô"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ORANGE_BOOK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ORANGE_BOOK); // üìô (`U+1F4D9`)"] #[doc="# assert_eq!(ORANGE_BOOK.to_string().as_str(), \"üìô\");"]
#[doc="```"]
pub static ORANGE_BOOK :  Emoji = Emoji::new("orange book", Version(0, 6), "üìô"); // orange book
		
		#[doc="page facing up üìÑ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PAGE_FACING_UP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PAGE_FACING_UP); // üìÑ (`U+1F4C4`)"] #[doc="# assert_eq!(PAGE_FACING_UP.to_string().as_str(), \"üìÑ\");"]
#[doc="```"]
pub static PAGE_FACING_UP :  Emoji = Emoji::new("page facing up", Version(0, 6), "üìÑ"); // page facing up
		
		#[doc="page with curl üìÉ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PAGE_WITH_CURL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PAGE_WITH_CURL); // üìÉ (`U+1F4C3`)"] #[doc="# assert_eq!(PAGE_WITH_CURL.to_string().as_str(), \"üìÉ\");"]
#[doc="```"]
pub static PAGE_WITH_CURL :  Emoji = Emoji::new("page with curl", Version(0, 6), "üìÉ"); // page with curl
		
		#[doc="rolled-up newspaper üóûÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ROLLED_UP_NEWSPAPER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ROLLED_UP_NEWSPAPER); // üóûÔ∏è (`U+1F5DE U+FE0F`)"] #[doc="# assert_eq!(ROLLED_UP_NEWSPAPER.to_string().as_str(), \"üóûÔ∏è\");"]
#[doc="```"]
pub static ROLLED_UP_NEWSPAPER :  Emoji = Emoji::new("rolled-up newspaper", Version(0, 7), "üóûÔ∏è"); // rolled-up newspaper
		
		#[doc="scroll üìú"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SCROLL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SCROLL); // üìú (`U+1F4DC`)"] #[doc="# assert_eq!(SCROLL.to_string().as_str(), \"üìú\");"]
#[doc="```"]
pub static SCROLL :  Emoji = Emoji::new("scroll", Version(0, 6), "üìú"); // scroll
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BLUE_BOOK
				
				&BLUE_BOOK,
				
			],
			
			&[ // BOOKMARK
				
				&BOOKMARK,
				
			],
			
			&[ // BOOKMARK_TABS
				
				&BOOKMARK_TABS,
				
			],
			
			&[ // BOOKS
				
				&BOOKS,
				
			],
			
			&[ // CLOSED_BOOK
				
				&CLOSED_BOOK,
				
			],
			
			&[ // GREEN_BOOK
				
				&GREEN_BOOK,
				
			],
			
			&[ // LABEL
				
				&LABEL,
				
			],
			
			&[ // LEDGER
				
				&LEDGER,
				
			],
			
			&[ // NEWSPAPER
				
				&NEWSPAPER,
				
			],
			
			&[ // NOTEBOOK
				
				&NOTEBOOK,
				
			],
			
			&[ // NOTEBOOK_WITH_DECORATIVE_COVER
				
				&NOTEBOOK_WITH_DECORATIVE_COVER,
				
			],
			
			&[ // OPEN_BOOK
				
				&OPEN_BOOK,
				
			],
			
			&[ // ORANGE_BOOK
				
				&ORANGE_BOOK,
				
			],
			
			&[ // PAGE_FACING_UP
				
				&PAGE_FACING_UP,
				
			],
			
			&[ // PAGE_WITH_CURL
				
				&PAGE_WITH_CURL,
				
			],
			
			&[ // ROLLED_UP_NEWSPAPER
				
				&ROLLED_UP_NEWSPAPER,
				
			],
			
			&[ // SCROLL
				
				&SCROLL,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BLUE_BOOK, // BLUE_BOOK
				
			
				
				&BOOKMARK, // BOOKMARK
				
			
				
				&BOOKMARK_TABS, // BOOKMARK_TABS
				
			
				
				&BOOKS, // BOOKS
				
			
				
				&CLOSED_BOOK, // CLOSED_BOOK
				
			
				
				&GREEN_BOOK, // GREEN_BOOK
				
			
				
				&LABEL, // LABEL
				
			
				
				&LEDGER, // LEDGER
				
			
				
				&NEWSPAPER, // NEWSPAPER
				
			
				
				&NOTEBOOK, // NOTEBOOK
				
			
				
				&NOTEBOOK_WITH_DECORATIVE_COVER, // NOTEBOOK_WITH_DECORATIVE_COVER
				
			
				
				&OPEN_BOOK, // OPEN_BOOK
				
			
				
				&ORANGE_BOOK, // ORANGE_BOOK
				
			
				
				&PAGE_FACING_UP, // PAGE_FACING_UP
				
			
				
				&PAGE_WITH_CURL, // PAGE_WITH_CURL
				
			
				
				&ROLLED_UP_NEWSPAPER, // ROLLED_UP_NEWSPAPER
				
			
				
				&SCROLL, // SCROLL
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // book_paper
	
	/// clothing üéíü©∞üëô
	pub mod clothing {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="backpack üéí"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BACKPACK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BACKPACK); // üéí (`U+1F392`)"] #[doc="# assert_eq!(BACKPACK.to_string().as_str(), \"üéí\");"]
#[doc="```"]
pub static BACKPACK :  Emoji = Emoji::new("backpack", Version(0, 6), "üéí"); // backpack
		
		#[doc="ballet shoes ü©∞"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BALLET_SHOES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BALLET_SHOES); // ü©∞ (`U+1FA70`)"] #[doc="# assert_eq!(BALLET_SHOES.to_string().as_str(), \"ü©∞\");"]
#[doc="```"]
pub static BALLET_SHOES :  Emoji = Emoji::new("ballet shoes", Version(12, 0), "ü©∞"); // ballet shoes
		
		#[doc="bikini üëô"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BIKINI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BIKINI); // üëô (`U+1F459`)"] #[doc="# assert_eq!(BIKINI.to_string().as_str(), \"üëô\");"]
#[doc="```"]
pub static BIKINI :  Emoji = Emoji::new("bikini", Version(0, 6), "üëô"); // bikini
		
		#[doc="billed cap üß¢"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BILLED_CAP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BILLED_CAP); // üß¢ (`U+1F9E2`)"] #[doc="# assert_eq!(BILLED_CAP.to_string().as_str(), \"üß¢\");"]
#[doc="```"]
pub static BILLED_CAP :  Emoji = Emoji::new("billed cap", Version(5, 0), "üß¢"); // billed cap
		
		#[doc="briefs ü©≤"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BRIEFS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BRIEFS); // ü©≤ (`U+1FA72`)"] #[doc="# assert_eq!(BRIEFS.to_string().as_str(), \"ü©≤\");"]
#[doc="```"]
pub static BRIEFS :  Emoji = Emoji::new("briefs", Version(12, 0), "ü©≤"); // briefs
		
		#[doc="clutch bag üëù"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLUTCH_BAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLUTCH_BAG); // üëù (`U+1F45D`)"] #[doc="# assert_eq!(CLUTCH_BAG.to_string().as_str(), \"üëù\");"]
#[doc="```"]
pub static CLUTCH_BAG :  Emoji = Emoji::new("clutch bag", Version(0, 6), "üëù"); // clutch bag
		
		#[doc="coat üß•"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COAT); // üß• (`U+1F9E5`)"] #[doc="# assert_eq!(COAT.to_string().as_str(), \"üß•\");"]
#[doc="```"]
pub static COAT :  Emoji = Emoji::new("coat", Version(5, 0), "üß•"); // coat
		
		#[doc="crown üëë"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CROWN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CROWN); // üëë (`U+1F451`)"] #[doc="# assert_eq!(CROWN.to_string().as_str(), \"üëë\");"]
#[doc="```"]
pub static CROWN :  Emoji = Emoji::new("crown", Version(0, 6), "üëë"); // crown
		
		#[doc="dress üëó"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DRESS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DRESS); // üëó (`U+1F457`)"] #[doc="# assert_eq!(DRESS.to_string().as_str(), \"üëó\");"]
#[doc="```"]
pub static DRESS :  Emoji = Emoji::new("dress", Version(0, 6), "üëó"); // dress
		
		#[doc="flat shoe ü•ø"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAT_SHOE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAT_SHOE); // ü•ø (`U+1F97F`)"] #[doc="# assert_eq!(FLAT_SHOE.to_string().as_str(), \"ü•ø\");"]
#[doc="```"]
pub static FLAT_SHOE :  Emoji = Emoji::new("flat shoe", Version(11, 0), "ü•ø"); // flat shoe
		
		#[doc="gem stone üíé"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GEM_STONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GEM_STONE); // üíé (`U+1F48E`)"] #[doc="# assert_eq!(GEM_STONE.to_string().as_str(), \"üíé\");"]
#[doc="```"]
pub static GEM_STONE :  Emoji = Emoji::new("gem stone", Version(0, 6), "üíé"); // gem stone
		
		#[doc="glasses üëì"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GLASSES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GLASSES); // üëì (`U+1F453`)"] #[doc="# assert_eq!(GLASSES.to_string().as_str(), \"üëì\");"]
#[doc="```"]
pub static GLASSES :  Emoji = Emoji::new("glasses", Version(0, 6), "üëì"); // glasses
		
		#[doc="gloves üß§"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GLOVES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GLOVES); // üß§ (`U+1F9E4`)"] #[doc="# assert_eq!(GLOVES.to_string().as_str(), \"üß§\");"]
#[doc="```"]
pub static GLOVES :  Emoji = Emoji::new("gloves", Version(5, 0), "üß§"); // gloves
		
		#[doc="goggles ü•Ω"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GOGGLES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GOGGLES); // ü•Ω (`U+1F97D`)"] #[doc="# assert_eq!(GOGGLES.to_string().as_str(), \"ü•Ω\");"]
#[doc="```"]
pub static GOGGLES :  Emoji = Emoji::new("goggles", Version(11, 0), "ü•Ω"); // goggles
		
		#[doc="graduation cap üéì"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GRADUATION_CAP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GRADUATION_CAP); // üéì (`U+1F393`)"] #[doc="# assert_eq!(GRADUATION_CAP.to_string().as_str(), \"üéì\");"]
#[doc="```"]
pub static GRADUATION_CAP :  Emoji = Emoji::new("graduation cap", Version(0, 6), "üéì"); // graduation cap
		
		#[doc="handbag üëú"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HANDBAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HANDBAG); // üëú (`U+1F45C`)"] #[doc="# assert_eq!(HANDBAG.to_string().as_str(), \"üëú\");"]
#[doc="```"]
pub static HANDBAG :  Emoji = Emoji::new("handbag", Version(0, 6), "üëú"); // handbag
		
		#[doc="high-heeled shoe üë†"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HIGH_HEELED_SHOE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HIGH_HEELED_SHOE); // üë† (`U+1F460`)"] #[doc="# assert_eq!(HIGH_HEELED_SHOE.to_string().as_str(), \"üë†\");"]
#[doc="```"]
pub static HIGH_HEELED_SHOE :  Emoji = Emoji::new("high-heeled shoe", Version(0, 6), "üë†"); // high-heeled shoe
		
		#[doc="hiking boot ü•æ"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HIKING_BOOT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HIKING_BOOT); // ü•æ (`U+1F97E`)"] #[doc="# assert_eq!(HIKING_BOOT.to_string().as_str(), \"ü•æ\");"]
#[doc="```"]
pub static HIKING_BOOT :  Emoji = Emoji::new("hiking boot", Version(11, 0), "ü•æ"); // hiking boot
		
		#[doc="jeans üëñ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JEANS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JEANS); // üëñ (`U+1F456`)"] #[doc="# assert_eq!(JEANS.to_string().as_str(), \"üëñ\");"]
#[doc="```"]
pub static JEANS :  Emoji = Emoji::new("jeans", Version(0, 6), "üëñ"); // jeans
		
		#[doc="kimono üëò"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KIMONO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KIMONO); // üëò (`U+1F458`)"] #[doc="# assert_eq!(KIMONO.to_string().as_str(), \"üëò\");"]
#[doc="```"]
pub static KIMONO :  Emoji = Emoji::new("kimono", Version(0, 6), "üëò"); // kimono
		
		#[doc="lab coat ü•º"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LAB_COAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LAB_COAT); // ü•º (`U+1F97C`)"] #[doc="# assert_eq!(LAB_COAT.to_string().as_str(), \"ü•º\");"]
#[doc="```"]
pub static LAB_COAT :  Emoji = Emoji::new("lab coat", Version(11, 0), "ü•º"); // lab coat
		
		#[doc="lipstick üíÑ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LIPSTICK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LIPSTICK); // üíÑ (`U+1F484`)"] #[doc="# assert_eq!(LIPSTICK.to_string().as_str(), \"üíÑ\");"]
#[doc="```"]
pub static LIPSTICK :  Emoji = Emoji::new("lipstick", Version(0, 6), "üíÑ"); // lipstick
		
		#[doc="man‚Äôs shoe üëû"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MAN_S_SHOE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MAN_S_SHOE); // üëû (`U+1F45E`)"] #[doc="# assert_eq!(MAN_S_SHOE.to_string().as_str(), \"üëû\");"]
#[doc="```"]
pub static MAN_S_SHOE :  Emoji = Emoji::new("man‚Äôs shoe", Version(0, 6), "üëû"); // man‚Äôs shoe
		
		#[doc="military helmet ü™ñ"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MILITARY_HELMET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MILITARY_HELMET); // ü™ñ (`U+1FA96`)"] #[doc="# assert_eq!(MILITARY_HELMET.to_string().as_str(), \"ü™ñ\");"]
#[doc="```"]
pub static MILITARY_HELMET :  Emoji = Emoji::new("military helmet", Version(13, 0), "ü™ñ"); // military helmet
		
		#[doc="necktie üëî"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NECKTIE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NECKTIE); // üëî (`U+1F454`)"] #[doc="# assert_eq!(NECKTIE.to_string().as_str(), \"üëî\");"]
#[doc="```"]
pub static NECKTIE :  Emoji = Emoji::new("necktie", Version(0, 6), "üëî"); // necktie
		
		#[doc="one-piece swimsuit ü©±"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ONE_PIECE_SWIMSUIT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ONE_PIECE_SWIMSUIT); // ü©± (`U+1FA71`)"] #[doc="# assert_eq!(ONE_PIECE_SWIMSUIT.to_string().as_str(), \"ü©±\");"]
#[doc="```"]
pub static ONE_PIECE_SWIMSUIT :  Emoji = Emoji::new("one-piece swimsuit", Version(12, 0), "ü©±"); // one-piece swimsuit
		
		#[doc="prayer beads üìø"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PRAYER_BEADS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PRAYER_BEADS); // üìø (`U+1F4FF`)"] #[doc="# assert_eq!(PRAYER_BEADS.to_string().as_str(), \"üìø\");"]
#[doc="```"]
pub static PRAYER_BEADS :  Emoji = Emoji::new("prayer beads", Version(1, 0), "üìø"); // prayer beads
		
		#[doc="purse üëõ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PURSE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PURSE); // üëõ (`U+1F45B`)"] #[doc="# assert_eq!(PURSE.to_string().as_str(), \"üëõ\");"]
#[doc="```"]
pub static PURSE :  Emoji = Emoji::new("purse", Version(0, 6), "üëõ"); // purse
		
		#[doc="rescue worker‚Äôs helmet ‚õëÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RESCUE_WORKER_S_HELMET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RESCUE_WORKER_S_HELMET); // ‚õëÔ∏è (`U+26D1 U+FE0F`)"] #[doc="# assert_eq!(RESCUE_WORKER_S_HELMET.to_string().as_str(), \"‚õëÔ∏è\");"]
#[doc="```"]
pub static RESCUE_WORKER_S_HELMET :  Emoji = Emoji::new("rescue worker‚Äôs helmet", Version(0, 7), "‚õëÔ∏è"); // rescue worker‚Äôs helmet
		
		#[doc="ring üíç"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RING); // üíç (`U+1F48D`)"] #[doc="# assert_eq!(RING.to_string().as_str(), \"üíç\");"]
#[doc="```"]
pub static RING :  Emoji = Emoji::new("ring", Version(0, 6), "üíç"); // ring
		
		#[doc="running shoe üëü"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RUNNING_SHOE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RUNNING_SHOE); // üëü (`U+1F45F`)"] #[doc="# assert_eq!(RUNNING_SHOE.to_string().as_str(), \"üëü\");"]
#[doc="```"]
pub static RUNNING_SHOE :  Emoji = Emoji::new("running shoe", Version(0, 6), "üëü"); // running shoe
		
		#[doc="safety vest ü¶∫"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SAFETY_VEST;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SAFETY_VEST); // ü¶∫ (`U+1F9BA`)"] #[doc="# assert_eq!(SAFETY_VEST.to_string().as_str(), \"ü¶∫\");"]
#[doc="```"]
pub static SAFETY_VEST :  Emoji = Emoji::new("safety vest", Version(12, 0), "ü¶∫"); // safety vest
		
		#[doc="sari ü•ª"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SARI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SARI); // ü•ª (`U+1F97B`)"] #[doc="# assert_eq!(SARI.to_string().as_str(), \"ü•ª\");"]
#[doc="```"]
pub static SARI :  Emoji = Emoji::new("sari", Version(12, 0), "ü•ª"); // sari
		
		#[doc="scarf üß£"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SCARF;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SCARF); // üß£ (`U+1F9E3`)"] #[doc="# assert_eq!(SCARF.to_string().as_str(), \"üß£\");"]
#[doc="```"]
pub static SCARF :  Emoji = Emoji::new("scarf", Version(5, 0), "üß£"); // scarf
		
		#[doc="shopping bags üõçÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHOPPING_BAGS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHOPPING_BAGS); // üõçÔ∏è (`U+1F6CD U+FE0F`)"] #[doc="# assert_eq!(SHOPPING_BAGS.to_string().as_str(), \"üõçÔ∏è\");"]
#[doc="```"]
pub static SHOPPING_BAGS :  Emoji = Emoji::new("shopping bags", Version(0, 7), "üõçÔ∏è"); // shopping bags
		
		#[doc="shorts ü©≥"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHORTS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHORTS); // ü©≥ (`U+1FA73`)"] #[doc="# assert_eq!(SHORTS.to_string().as_str(), \"ü©≥\");"]
#[doc="```"]
pub static SHORTS :  Emoji = Emoji::new("shorts", Version(12, 0), "ü©≥"); // shorts
		
		#[doc="socks üß¶"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SOCKS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SOCKS); // üß¶ (`U+1F9E6`)"] #[doc="# assert_eq!(SOCKS.to_string().as_str(), \"üß¶\");"]
#[doc="```"]
pub static SOCKS :  Emoji = Emoji::new("socks", Version(5, 0), "üß¶"); // socks
		
		#[doc="sunglasses üï∂Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUNGLASSES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUNGLASSES); // üï∂Ô∏è (`U+1F576 U+FE0F`)"] #[doc="# assert_eq!(SUNGLASSES.to_string().as_str(), \"üï∂Ô∏è\");"]
#[doc="```"]
pub static SUNGLASSES :  Emoji = Emoji::new("sunglasses", Version(0, 7), "üï∂Ô∏è"); // sunglasses
		
		#[doc="thong sandal ü©¥"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::THONG_SANDAL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", THONG_SANDAL); // ü©¥ (`U+1FA74`)"] #[doc="# assert_eq!(THONG_SANDAL.to_string().as_str(), \"ü©¥\");"]
#[doc="```"]
pub static THONG_SANDAL :  Emoji = Emoji::new("thong sandal", Version(13, 0), "ü©¥"); // thong sandal
		
		#[doc="top hat üé©"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TOP_HAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TOP_HAT); // üé© (`U+1F3A9`)"] #[doc="# assert_eq!(TOP_HAT.to_string().as_str(), \"üé©\");"]
#[doc="```"]
pub static TOP_HAT :  Emoji = Emoji::new("top hat", Version(0, 6), "üé©"); // top hat
		
		#[doc="t-shirt üëï"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::T_SHIRT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", T_SHIRT); // üëï (`U+1F455`)"] #[doc="# assert_eq!(T_SHIRT.to_string().as_str(), \"üëï\");"]
#[doc="```"]
pub static T_SHIRT :  Emoji = Emoji::new("t-shirt", Version(0, 6), "üëï"); // t-shirt
		
		#[doc="woman‚Äôs boot üë¢"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WOMAN_S_BOOT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WOMAN_S_BOOT); // üë¢ (`U+1F462`)"] #[doc="# assert_eq!(WOMAN_S_BOOT.to_string().as_str(), \"üë¢\");"]
#[doc="```"]
pub static WOMAN_S_BOOT :  Emoji = Emoji::new("woman‚Äôs boot", Version(0, 6), "üë¢"); // woman‚Äôs boot
		
		#[doc="woman‚Äôs clothes üëö"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WOMAN_S_CLOTHES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WOMAN_S_CLOTHES); // üëö (`U+1F45A`)"] #[doc="# assert_eq!(WOMAN_S_CLOTHES.to_string().as_str(), \"üëö\");"]
#[doc="```"]
pub static WOMAN_S_CLOTHES :  Emoji = Emoji::new("woman‚Äôs clothes", Version(0, 6), "üëö"); // woman‚Äôs clothes
		
		#[doc="woman‚Äôs hat üëí"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WOMAN_S_HAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WOMAN_S_HAT); // üëí (`U+1F452`)"] #[doc="# assert_eq!(WOMAN_S_HAT.to_string().as_str(), \"üëí\");"]
#[doc="```"]
pub static WOMAN_S_HAT :  Emoji = Emoji::new("woman‚Äôs hat", Version(0, 6), "üëí"); // woman‚Äôs hat
		
		#[doc="woman‚Äôs sandal üë°"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WOMAN_S_SANDAL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WOMAN_S_SANDAL); // üë° (`U+1F461`)"] #[doc="# assert_eq!(WOMAN_S_SANDAL.to_string().as_str(), \"üë°\");"]
#[doc="```"]
pub static WOMAN_S_SANDAL :  Emoji = Emoji::new("woman‚Äôs sandal", Version(0, 6), "üë°"); // woman‚Äôs sandal
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BACKPACK
				
				&BACKPACK,
				
			],
			
			&[ // BALLET_SHOES
				
				&BALLET_SHOES,
				
			],
			
			&[ // BIKINI
				
				&BIKINI,
				
			],
			
			&[ // BILLED_CAP
				
				&BILLED_CAP,
				
			],
			
			&[ // BRIEFS
				
				&BRIEFS,
				
			],
			
			&[ // CLUTCH_BAG
				
				&CLUTCH_BAG,
				
			],
			
			&[ // COAT
				
				&COAT,
				
			],
			
			&[ // CROWN
				
				&CROWN,
				
			],
			
			&[ // DRESS
				
				&DRESS,
				
			],
			
			&[ // FLAT_SHOE
				
				&FLAT_SHOE,
				
			],
			
			&[ // GEM_STONE
				
				&GEM_STONE,
				
			],
			
			&[ // GLASSES
				
				&GLASSES,
				
			],
			
			&[ // GLOVES
				
				&GLOVES,
				
			],
			
			&[ // GOGGLES
				
				&GOGGLES,
				
			],
			
			&[ // GRADUATION_CAP
				
				&GRADUATION_CAP,
				
			],
			
			&[ // HANDBAG
				
				&HANDBAG,
				
			],
			
			&[ // HIGH_HEELED_SHOE
				
				&HIGH_HEELED_SHOE,
				
			],
			
			&[ // HIKING_BOOT
				
				&HIKING_BOOT,
				
			],
			
			&[ // JEANS
				
				&JEANS,
				
			],
			
			&[ // KIMONO
				
				&KIMONO,
				
			],
			
			&[ // LAB_COAT
				
				&LAB_COAT,
				
			],
			
			&[ // LIPSTICK
				
				&LIPSTICK,
				
			],
			
			&[ // MAN_S_SHOE
				
				&MAN_S_SHOE,
				
			],
			
			&[ // MILITARY_HELMET
				
				&MILITARY_HELMET,
				
			],
			
			&[ // NECKTIE
				
				&NECKTIE,
				
			],
			
			&[ // ONE_PIECE_SWIMSUIT
				
				&ONE_PIECE_SWIMSUIT,
				
			],
			
			&[ // PRAYER_BEADS
				
				&PRAYER_BEADS,
				
			],
			
			&[ // PURSE
				
				&PURSE,
				
			],
			
			&[ // RESCUE_WORKER_S_HELMET
				
				&RESCUE_WORKER_S_HELMET,
				
			],
			
			&[ // RING
				
				&RING,
				
			],
			
			&[ // RUNNING_SHOE
				
				&RUNNING_SHOE,
				
			],
			
			&[ // SAFETY_VEST
				
				&SAFETY_VEST,
				
			],
			
			&[ // SARI
				
				&SARI,
				
			],
			
			&[ // SCARF
				
				&SCARF,
				
			],
			
			&[ // SHOPPING_BAGS
				
				&SHOPPING_BAGS,
				
			],
			
			&[ // SHORTS
				
				&SHORTS,
				
			],
			
			&[ // SOCKS
				
				&SOCKS,
				
			],
			
			&[ // SUNGLASSES
				
				&SUNGLASSES,
				
			],
			
			&[ // THONG_SANDAL
				
				&THONG_SANDAL,
				
			],
			
			&[ // TOP_HAT
				
				&TOP_HAT,
				
			],
			
			&[ // T_SHIRT
				
				&T_SHIRT,
				
			],
			
			&[ // WOMAN_S_BOOT
				
				&WOMAN_S_BOOT,
				
			],
			
			&[ // WOMAN_S_CLOTHES
				
				&WOMAN_S_CLOTHES,
				
			],
			
			&[ // WOMAN_S_HAT
				
				&WOMAN_S_HAT,
				
			],
			
			&[ // WOMAN_S_SANDAL
				
				&WOMAN_S_SANDAL,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BACKPACK, // BACKPACK
				
			
				
				&BALLET_SHOES, // BALLET_SHOES
				
			
				
				&BIKINI, // BIKINI
				
			
				
				&BILLED_CAP, // BILLED_CAP
				
			
				
				&BRIEFS, // BRIEFS
				
			
				
				&CLUTCH_BAG, // CLUTCH_BAG
				
			
				
				&COAT, // COAT
				
			
				
				&CROWN, // CROWN
				
			
				
				&DRESS, // DRESS
				
			
				
				&FLAT_SHOE, // FLAT_SHOE
				
			
				
				&GEM_STONE, // GEM_STONE
				
			
				
				&GLASSES, // GLASSES
				
			
				
				&GLOVES, // GLOVES
				
			
				
				&GOGGLES, // GOGGLES
				
			
				
				&GRADUATION_CAP, // GRADUATION_CAP
				
			
				
				&HANDBAG, // HANDBAG
				
			
				
				&HIGH_HEELED_SHOE, // HIGH_HEELED_SHOE
				
			
				
				&HIKING_BOOT, // HIKING_BOOT
				
			
				
				&JEANS, // JEANS
				
			
				
				&KIMONO, // KIMONO
				
			
				
				&LAB_COAT, // LAB_COAT
				
			
				
				&LIPSTICK, // LIPSTICK
				
			
				
				&MAN_S_SHOE, // MAN_S_SHOE
				
			
				
				&MILITARY_HELMET, // MILITARY_HELMET
				
			
				
				&NECKTIE, // NECKTIE
				
			
				
				&ONE_PIECE_SWIMSUIT, // ONE_PIECE_SWIMSUIT
				
			
				
				&PRAYER_BEADS, // PRAYER_BEADS
				
			
				
				&PURSE, // PURSE
				
			
				
				&RESCUE_WORKER_S_HELMET, // RESCUE_WORKER_S_HELMET
				
			
				
				&RING, // RING
				
			
				
				&RUNNING_SHOE, // RUNNING_SHOE
				
			
				
				&SAFETY_VEST, // SAFETY_VEST
				
			
				
				&SARI, // SARI
				
			
				
				&SCARF, // SCARF
				
			
				
				&SHOPPING_BAGS, // SHOPPING_BAGS
				
			
				
				&SHORTS, // SHORTS
				
			
				
				&SOCKS, // SOCKS
				
			
				
				&SUNGLASSES, // SUNGLASSES
				
			
				
				&THONG_SANDAL, // THONG_SANDAL
				
			
				
				&TOP_HAT, // TOP_HAT
				
			
				
				&T_SHIRT, // T_SHIRT
				
			
				
				&WOMAN_S_BOOT, // WOMAN_S_BOOT
				
			
				
				&WOMAN_S_CLOTHES, // WOMAN_S_CLOTHES
				
			
				
				&WOMAN_S_HAT, // WOMAN_S_HAT
				
			
				
				&WOMAN_S_SANDAL, // WOMAN_S_SANDAL
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // clothing
	
	/// computer üßÆüîãüíΩ
	pub mod computer {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="abacus üßÆ"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ABACUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ABACUS); // üßÆ (`U+1F9EE`)"] #[doc="# assert_eq!(ABACUS.to_string().as_str(), \"üßÆ\");"]
#[doc="```"]
pub static ABACUS :  Emoji = Emoji::new("abacus", Version(11, 0), "üßÆ"); // abacus
		
		#[doc="battery üîã"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BATTERY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BATTERY); // üîã (`U+1F50B`)"] #[doc="# assert_eq!(BATTERY.to_string().as_str(), \"üîã\");"]
#[doc="```"]
pub static BATTERY :  Emoji = Emoji::new("battery", Version(0, 6), "üîã"); // battery
		
		#[doc="computer disk üíΩ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COMPUTER_DISK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COMPUTER_DISK); // üíΩ (`U+1F4BD`)"] #[doc="# assert_eq!(COMPUTER_DISK.to_string().as_str(), \"üíΩ\");"]
#[doc="```"]
pub static COMPUTER_DISK :  Emoji = Emoji::new("computer disk", Version(0, 6), "üíΩ"); // computer disk
		
		#[doc="computer mouse üñ±Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COMPUTER_MOUSE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COMPUTER_MOUSE); // üñ±Ô∏è (`U+1F5B1 U+FE0F`)"] #[doc="# assert_eq!(COMPUTER_MOUSE.to_string().as_str(), \"üñ±Ô∏è\");"]
#[doc="```"]
pub static COMPUTER_MOUSE :  Emoji = Emoji::new("computer mouse", Version(0, 7), "üñ±Ô∏è"); // computer mouse
		
		#[doc="desktop computer üñ•Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DESKTOP_COMPUTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DESKTOP_COMPUTER); // üñ•Ô∏è (`U+1F5A5 U+FE0F`)"] #[doc="# assert_eq!(DESKTOP_COMPUTER.to_string().as_str(), \"üñ•Ô∏è\");"]
#[doc="```"]
pub static DESKTOP_COMPUTER :  Emoji = Emoji::new("desktop computer", Version(0, 7), "üñ•Ô∏è"); // desktop computer
		
		#[doc="dvd üìÄ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DVD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DVD); // üìÄ (`U+1F4C0`)"] #[doc="# assert_eq!(DVD.to_string().as_str(), \"üìÄ\");"]
#[doc="```"]
pub static DVD :  Emoji = Emoji::new("dvd", Version(0, 6), "üìÄ"); // dvd
		
		#[doc="electric plug üîå"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ELECTRIC_PLUG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ELECTRIC_PLUG); // üîå (`U+1F50C`)"] #[doc="# assert_eq!(ELECTRIC_PLUG.to_string().as_str(), \"üîå\");"]
#[doc="```"]
pub static ELECTRIC_PLUG :  Emoji = Emoji::new("electric plug", Version(0, 6), "üîå"); // electric plug
		
		#[doc="floppy disk üíæ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLOPPY_DISK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLOPPY_DISK); // üíæ (`U+1F4BE`)"] #[doc="# assert_eq!(FLOPPY_DISK.to_string().as_str(), \"üíæ\");"]
#[doc="```"]
pub static FLOPPY_DISK :  Emoji = Emoji::new("floppy disk", Version(0, 6), "üíæ"); // floppy disk
		
		#[doc="keyboard ‚å®Ô∏è"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYBOARD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYBOARD); // ‚å®Ô∏è (`U+2328 U+FE0F`)"] #[doc="# assert_eq!(KEYBOARD.to_string().as_str(), \"‚å®Ô∏è\");"]
#[doc="```"]
pub static KEYBOARD :  Emoji = Emoji::new("keyboard", Version(1, 0), "‚å®Ô∏è"); // keyboard
		
		#[doc="laptop üíª"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LAPTOP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LAPTOP); // üíª (`U+1F4BB`)"] #[doc="# assert_eq!(LAPTOP.to_string().as_str(), \"üíª\");"]
#[doc="```"]
pub static LAPTOP :  Emoji = Emoji::new("laptop", Version(0, 6), "üíª"); // laptop
		
		#[doc="optical disk üíø"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OPTICAL_DISK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OPTICAL_DISK); // üíø (`U+1F4BF`)"] #[doc="# assert_eq!(OPTICAL_DISK.to_string().as_str(), \"üíø\");"]
#[doc="```"]
pub static OPTICAL_DISK :  Emoji = Emoji::new("optical disk", Version(0, 6), "üíø"); // optical disk
		
		#[doc="printer üñ®Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PRINTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PRINTER); // üñ®Ô∏è (`U+1F5A8 U+FE0F`)"] #[doc="# assert_eq!(PRINTER.to_string().as_str(), \"üñ®Ô∏è\");"]
#[doc="```"]
pub static PRINTER :  Emoji = Emoji::new("printer", Version(0, 7), "üñ®Ô∏è"); // printer
		
		#[doc="trackball üñ≤Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TRACKBALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TRACKBALL); // üñ≤Ô∏è (`U+1F5B2 U+FE0F`)"] #[doc="# assert_eq!(TRACKBALL.to_string().as_str(), \"üñ≤Ô∏è\");"]
#[doc="```"]
pub static TRACKBALL :  Emoji = Emoji::new("trackball", Version(0, 7), "üñ≤Ô∏è"); // trackball
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // ABACUS
				
				&ABACUS,
				
			],
			
			&[ // BATTERY
				
				&BATTERY,
				
			],
			
			&[ // COMPUTER_DISK
				
				&COMPUTER_DISK,
				
			],
			
			&[ // COMPUTER_MOUSE
				
				&COMPUTER_MOUSE,
				
			],
			
			&[ // DESKTOP_COMPUTER
				
				&DESKTOP_COMPUTER,
				
			],
			
			&[ // DVD
				
				&DVD,
				
			],
			
			&[ // ELECTRIC_PLUG
				
				&ELECTRIC_PLUG,
				
			],
			
			&[ // FLOPPY_DISK
				
				&FLOPPY_DISK,
				
			],
			
			&[ // KEYBOARD
				
				&KEYBOARD,
				
			],
			
			&[ // LAPTOP
				
				&LAPTOP,
				
			],
			
			&[ // OPTICAL_DISK
				
				&OPTICAL_DISK,
				
			],
			
			&[ // PRINTER
				
				&PRINTER,
				
			],
			
			&[ // TRACKBALL
				
				&TRACKBALL,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&ABACUS, // ABACUS
				
			
				
				&BATTERY, // BATTERY
				
			
				
				&COMPUTER_DISK, // COMPUTER_DISK
				
			
				
				&COMPUTER_MOUSE, // COMPUTER_MOUSE
				
			
				
				&DESKTOP_COMPUTER, // DESKTOP_COMPUTER
				
			
				
				&DVD, // DVD
				
			
				
				&ELECTRIC_PLUG, // ELECTRIC_PLUG
				
			
				
				&FLOPPY_DISK, // FLOPPY_DISK
				
			
				
				&KEYBOARD, // KEYBOARD
				
			
				
				&LAPTOP, // LAPTOP
				
			
				
				&OPTICAL_DISK, // OPTICAL_DISK
				
			
				
				&PRINTER, // PRINTER
				
			
				
				&TRACKBALL, // TRACKBALL
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // computer
	
	/// household üß∫üõÅüõèÔ∏è
	pub mod household {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="basket üß∫"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BASKET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BASKET); // üß∫ (`U+1F9FA`)"] #[doc="# assert_eq!(BASKET.to_string().as_str(), \"üß∫\");"]
#[doc="```"]
pub static BASKET :  Emoji = Emoji::new("basket", Version(11, 0), "üß∫"); // basket
		
		#[doc="bathtub üõÅ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BATHTUB;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BATHTUB); // üõÅ (`U+1F6C1`)"] #[doc="# assert_eq!(BATHTUB.to_string().as_str(), \"üõÅ\");"]
#[doc="```"]
pub static BATHTUB :  Emoji = Emoji::new("bathtub", Version(1, 0), "üõÅ"); // bathtub
		
		#[doc="bed üõèÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BED;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BED); // üõèÔ∏è (`U+1F6CF U+FE0F`)"] #[doc="# assert_eq!(BED.to_string().as_str(), \"üõèÔ∏è\");"]
#[doc="```"]
pub static BED :  Emoji = Emoji::new("bed", Version(0, 7), "üõèÔ∏è"); // bed
		
		#[doc="broom üßπ"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BROOM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BROOM); // üßπ (`U+1F9F9`)"] #[doc="# assert_eq!(BROOM.to_string().as_str(), \"üßπ\");"]
#[doc="```"]
pub static BROOM :  Emoji = Emoji::new("broom", Version(11, 0), "üßπ"); // broom
		
		#[doc="bucket ü™£"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BUCKET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BUCKET); // ü™£ (`U+1FAA3`)"] #[doc="# assert_eq!(BUCKET.to_string().as_str(), \"ü™£\");"]
#[doc="```"]
pub static BUCKET :  Emoji = Emoji::new("bucket", Version(13, 0), "ü™£"); // bucket
		
		#[doc="chair ü™ë"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHAIR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHAIR); // ü™ë (`U+1FA91`)"] #[doc="# assert_eq!(CHAIR.to_string().as_str(), \"ü™ë\");"]
#[doc="```"]
pub static CHAIR :  Emoji = Emoji::new("chair", Version(12, 0), "ü™ë"); // chair
		
		#[doc="couch and lamp üõãÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COUCH_AND_LAMP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COUCH_AND_LAMP); // üõãÔ∏è (`U+1F6CB U+FE0F`)"] #[doc="# assert_eq!(COUCH_AND_LAMP.to_string().as_str(), \"üõãÔ∏è\");"]
#[doc="```"]
pub static COUCH_AND_LAMP :  Emoji = Emoji::new("couch and lamp", Version(0, 7), "üõãÔ∏è"); // couch and lamp
		
		#[doc="door üö™"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOOR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOOR); // üö™ (`U+1F6AA`)"] #[doc="# assert_eq!(DOOR.to_string().as_str(), \"üö™\");"]
#[doc="```"]
pub static DOOR :  Emoji = Emoji::new("door", Version(0, 6), "üö™"); // door
		
		#[doc="elevator üõó"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ELEVATOR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ELEVATOR); // üõó (`U+1F6D7`)"] #[doc="# assert_eq!(ELEVATOR.to_string().as_str(), \"üõó\");"]
#[doc="```"]
pub static ELEVATOR :  Emoji = Emoji::new("elevator", Version(13, 0), "üõó"); // elevator
		
		#[doc="fire extinguisher üßØ"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FIRE_EXTINGUISHER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FIRE_EXTINGUISHER); // üßØ (`U+1F9EF`)"] #[doc="# assert_eq!(FIRE_EXTINGUISHER.to_string().as_str(), \"üßØ\");"]
#[doc="```"]
pub static FIRE_EXTINGUISHER :  Emoji = Emoji::new("fire extinguisher", Version(11, 0), "üßØ"); // fire extinguisher
		
		#[doc="lotion bottle üß¥"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LOTION_BOTTLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LOTION_BOTTLE); // üß¥ (`U+1F9F4`)"] #[doc="# assert_eq!(LOTION_BOTTLE.to_string().as_str(), \"üß¥\");"]
#[doc="```"]
pub static LOTION_BOTTLE :  Emoji = Emoji::new("lotion bottle", Version(11, 0), "üß¥"); // lotion bottle
		
		#[doc="mirror ü™û"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MIRROR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MIRROR); // ü™û (`U+1FA9E`)"] #[doc="# assert_eq!(MIRROR.to_string().as_str(), \"ü™û\");"]
#[doc="```"]
pub static MIRROR :  Emoji = Emoji::new("mirror", Version(13, 0), "ü™û"); // mirror
		
		#[doc="mouse trap ü™§"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOUSE_TRAP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOUSE_TRAP); // ü™§ (`U+1FAA4`)"] #[doc="# assert_eq!(MOUSE_TRAP.to_string().as_str(), \"ü™§\");"]
#[doc="```"]
pub static MOUSE_TRAP :  Emoji = Emoji::new("mouse trap", Version(13, 0), "ü™§"); // mouse trap
		
		#[doc="plunger ü™†"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PLUNGER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PLUNGER); // ü™† (`U+1FAA0`)"] #[doc="# assert_eq!(PLUNGER.to_string().as_str(), \"ü™†\");"]
#[doc="```"]
pub static PLUNGER :  Emoji = Emoji::new("plunger", Version(13, 0), "ü™†"); // plunger
		
		#[doc="razor ü™í"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RAZOR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RAZOR); // ü™í (`U+1FA92`)"] #[doc="# assert_eq!(RAZOR.to_string().as_str(), \"ü™í\");"]
#[doc="```"]
pub static RAZOR :  Emoji = Emoji::new("razor", Version(12, 0), "ü™í"); // razor
		
		#[doc="roll of paper üßª"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ROLL_OF_PAPER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ROLL_OF_PAPER); // üßª (`U+1F9FB`)"] #[doc="# assert_eq!(ROLL_OF_PAPER.to_string().as_str(), \"üßª\");"]
#[doc="```"]
pub static ROLL_OF_PAPER :  Emoji = Emoji::new("roll of paper", Version(11, 0), "üßª"); // roll of paper
		
		#[doc="safety pin üß∑"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SAFETY_PIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SAFETY_PIN); // üß∑ (`U+1F9F7`)"] #[doc="# assert_eq!(SAFETY_PIN.to_string().as_str(), \"üß∑\");"]
#[doc="```"]
pub static SAFETY_PIN :  Emoji = Emoji::new("safety pin", Version(11, 0), "üß∑"); // safety pin
		
		#[doc="shopping cart üõí"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHOPPING_CART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHOPPING_CART); // üõí (`U+1F6D2`)"] #[doc="# assert_eq!(SHOPPING_CART.to_string().as_str(), \"üõí\");"]
#[doc="```"]
pub static SHOPPING_CART :  Emoji = Emoji::new("shopping cart", Version(3, 0), "üõí"); // shopping cart
		
		#[doc="shower üöø"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHOWER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHOWER); // üöø (`U+1F6BF`)"] #[doc="# assert_eq!(SHOWER.to_string().as_str(), \"üöø\");"]
#[doc="```"]
pub static SHOWER :  Emoji = Emoji::new("shower", Version(1, 0), "üöø"); // shower
		
		#[doc="soap üßº"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SOAP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SOAP); // üßº (`U+1F9FC`)"] #[doc="# assert_eq!(SOAP.to_string().as_str(), \"üßº\");"]
#[doc="```"]
pub static SOAP :  Emoji = Emoji::new("soap", Version(11, 0), "üßº"); // soap
		
		#[doc="sponge üßΩ"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPONGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPONGE); // üßΩ (`U+1F9FD`)"] #[doc="# assert_eq!(SPONGE.to_string().as_str(), \"üßΩ\");"]
#[doc="```"]
pub static SPONGE :  Emoji = Emoji::new("sponge", Version(11, 0), "üßΩ"); // sponge
		
		#[doc="toilet üöΩ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TOILET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TOILET); // üöΩ (`U+1F6BD`)"] #[doc="# assert_eq!(TOILET.to_string().as_str(), \"üöΩ\");"]
#[doc="```"]
pub static TOILET :  Emoji = Emoji::new("toilet", Version(0, 6), "üöΩ"); // toilet
		
		#[doc="toothbrush ü™•"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TOOTHBRUSH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TOOTHBRUSH); // ü™• (`U+1FAA5`)"] #[doc="# assert_eq!(TOOTHBRUSH.to_string().as_str(), \"ü™•\");"]
#[doc="```"]
pub static TOOTHBRUSH :  Emoji = Emoji::new("toothbrush", Version(13, 0), "ü™•"); // toothbrush
		
		#[doc="window ü™ü"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WINDOW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WINDOW); // ü™ü (`U+1FA9F`)"] #[doc="# assert_eq!(WINDOW.to_string().as_str(), \"ü™ü\");"]
#[doc="```"]
pub static WINDOW :  Emoji = Emoji::new("window", Version(13, 0), "ü™ü"); // window
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BASKET
				
				&BASKET,
				
			],
			
			&[ // BATHTUB
				
				&BATHTUB,
				
			],
			
			&[ // BED
				
				&BED,
				
			],
			
			&[ // BROOM
				
				&BROOM,
				
			],
			
			&[ // BUCKET
				
				&BUCKET,
				
			],
			
			&[ // CHAIR
				
				&CHAIR,
				
			],
			
			&[ // COUCH_AND_LAMP
				
				&COUCH_AND_LAMP,
				
			],
			
			&[ // DOOR
				
				&DOOR,
				
			],
			
			&[ // ELEVATOR
				
				&ELEVATOR,
				
			],
			
			&[ // FIRE_EXTINGUISHER
				
				&FIRE_EXTINGUISHER,
				
			],
			
			&[ // LOTION_BOTTLE
				
				&LOTION_BOTTLE,
				
			],
			
			&[ // MIRROR
				
				&MIRROR,
				
			],
			
			&[ // MOUSE_TRAP
				
				&MOUSE_TRAP,
				
			],
			
			&[ // PLUNGER
				
				&PLUNGER,
				
			],
			
			&[ // RAZOR
				
				&RAZOR,
				
			],
			
			&[ // ROLL_OF_PAPER
				
				&ROLL_OF_PAPER,
				
			],
			
			&[ // SAFETY_PIN
				
				&SAFETY_PIN,
				
			],
			
			&[ // SHOPPING_CART
				
				&SHOPPING_CART,
				
			],
			
			&[ // SHOWER
				
				&SHOWER,
				
			],
			
			&[ // SOAP
				
				&SOAP,
				
			],
			
			&[ // SPONGE
				
				&SPONGE,
				
			],
			
			&[ // TOILET
				
				&TOILET,
				
			],
			
			&[ // TOOTHBRUSH
				
				&TOOTHBRUSH,
				
			],
			
			&[ // WINDOW
				
				&WINDOW,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BASKET, // BASKET
				
			
				
				&BATHTUB, // BATHTUB
				
			
				
				&BED, // BED
				
			
				
				&BROOM, // BROOM
				
			
				
				&BUCKET, // BUCKET
				
			
				
				&CHAIR, // CHAIR
				
			
				
				&COUCH_AND_LAMP, // COUCH_AND_LAMP
				
			
				
				&DOOR, // DOOR
				
			
				
				&ELEVATOR, // ELEVATOR
				
			
				
				&FIRE_EXTINGUISHER, // FIRE_EXTINGUISHER
				
			
				
				&LOTION_BOTTLE, // LOTION_BOTTLE
				
			
				
				&MIRROR, // MIRROR
				
			
				
				&MOUSE_TRAP, // MOUSE_TRAP
				
			
				
				&PLUNGER, // PLUNGER
				
			
				
				&RAZOR, // RAZOR
				
			
				
				&ROLL_OF_PAPER, // ROLL_OF_PAPER
				
			
				
				&SAFETY_PIN, // SAFETY_PIN
				
			
				
				&SHOPPING_CART, // SHOPPING_CART
				
			
				
				&SHOWER, // SHOWER
				
			
				
				&SOAP, // SOAP
				
			
				
				&SPONGE, // SPONGE
				
			
				
				&TOILET, // TOILET
				
			
				
				&TOOTHBRUSH, // TOOTHBRUSH
				
			
				
				&WINDOW, // WINDOW
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // household
	
	/// light_and_video üì∑üì∏üïØÔ∏è
	pub mod light_and_video {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="camera üì∑"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CAMERA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CAMERA); // üì∑ (`U+1F4F7`)"] #[doc="# assert_eq!(CAMERA.to_string().as_str(), \"üì∑\");"]
#[doc="```"]
pub static CAMERA :  Emoji = Emoji::new("camera", Version(0, 6), "üì∑"); // camera
		
		#[doc="camera with flash üì∏"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CAMERA_WITH_FLASH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CAMERA_WITH_FLASH); // üì∏ (`U+1F4F8`)"] #[doc="# assert_eq!(CAMERA_WITH_FLASH.to_string().as_str(), \"üì∏\");"]
#[doc="```"]
pub static CAMERA_WITH_FLASH :  Emoji = Emoji::new("camera with flash", Version(1, 0), "üì∏"); // camera with flash
		
		#[doc="candle üïØÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CANDLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CANDLE); // üïØÔ∏è (`U+1F56F U+FE0F`)"] #[doc="# assert_eq!(CANDLE.to_string().as_str(), \"üïØÔ∏è\");"]
#[doc="```"]
pub static CANDLE :  Emoji = Emoji::new("candle", Version(0, 7), "üïØÔ∏è"); // candle
		
		#[doc="clapper board üé¨"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLAPPER_BOARD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLAPPER_BOARD); // üé¨ (`U+1F3AC`)"] #[doc="# assert_eq!(CLAPPER_BOARD.to_string().as_str(), \"üé¨\");"]
#[doc="```"]
pub static CLAPPER_BOARD :  Emoji = Emoji::new("clapper board", Version(0, 6), "üé¨"); // clapper board
		
		#[doc="diya lamp ü™î"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DIYA_LAMP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DIYA_LAMP); // ü™î (`U+1FA94`)"] #[doc="# assert_eq!(DIYA_LAMP.to_string().as_str(), \"ü™î\");"]
#[doc="```"]
pub static DIYA_LAMP :  Emoji = Emoji::new("diya lamp", Version(12, 0), "ü™î"); // diya lamp
		
		#[doc="film frames üéûÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FILM_FRAMES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FILM_FRAMES); // üéûÔ∏è (`U+1F39E U+FE0F`)"] #[doc="# assert_eq!(FILM_FRAMES.to_string().as_str(), \"üéûÔ∏è\");"]
#[doc="```"]
pub static FILM_FRAMES :  Emoji = Emoji::new("film frames", Version(0, 7), "üéûÔ∏è"); // film frames
		
		#[doc="film projector üìΩÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FILM_PROJECTOR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FILM_PROJECTOR); // üìΩÔ∏è (`U+1F4FD U+FE0F`)"] #[doc="# assert_eq!(FILM_PROJECTOR.to_string().as_str(), \"üìΩÔ∏è\");"]
#[doc="```"]
pub static FILM_PROJECTOR :  Emoji = Emoji::new("film projector", Version(0, 7), "üìΩÔ∏è"); // film projector
		
		#[doc="flashlight üî¶"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLASHLIGHT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLASHLIGHT); // üî¶ (`U+1F526`)"] #[doc="# assert_eq!(FLASHLIGHT.to_string().as_str(), \"üî¶\");"]
#[doc="```"]
pub static FLASHLIGHT :  Emoji = Emoji::new("flashlight", Version(0, 6), "üî¶"); // flashlight
		
		#[doc="light bulb üí°"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LIGHT_BULB;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LIGHT_BULB); // üí° (`U+1F4A1`)"] #[doc="# assert_eq!(LIGHT_BULB.to_string().as_str(), \"üí°\");"]
#[doc="```"]
pub static LIGHT_BULB :  Emoji = Emoji::new("light bulb", Version(0, 6), "üí°"); // light bulb
		
		#[doc="magnifying glass tilted left üîç"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MAGNIFYING_GLASS_TILTED_LEFT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MAGNIFYING_GLASS_TILTED_LEFT); // üîç (`U+1F50D`)"] #[doc="# assert_eq!(MAGNIFYING_GLASS_TILTED_LEFT.to_string().as_str(), \"üîç\");"]
#[doc="```"]
pub static MAGNIFYING_GLASS_TILTED_LEFT :  Emoji = Emoji::new("magnifying glass tilted left", Version(0, 6), "üîç"); // magnifying glass tilted left
		
		#[doc="magnifying glass tilted right üîé"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MAGNIFYING_GLASS_TILTED_RIGHT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MAGNIFYING_GLASS_TILTED_RIGHT); // üîé (`U+1F50E`)"] #[doc="# assert_eq!(MAGNIFYING_GLASS_TILTED_RIGHT.to_string().as_str(), \"üîé\");"]
#[doc="```"]
pub static MAGNIFYING_GLASS_TILTED_RIGHT :  Emoji = Emoji::new("magnifying glass tilted right", Version(0, 6), "üîé"); // magnifying glass tilted right
		
		#[doc="movie camera üé•"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOVIE_CAMERA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOVIE_CAMERA); // üé• (`U+1F3A5`)"] #[doc="# assert_eq!(MOVIE_CAMERA.to_string().as_str(), \"üé•\");"]
#[doc="```"]
pub static MOVIE_CAMERA :  Emoji = Emoji::new("movie camera", Version(0, 6), "üé•"); // movie camera
		
		#[doc="red paper lantern üèÆ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RED_PAPER_LANTERN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RED_PAPER_LANTERN); // üèÆ (`U+1F3EE`)"] #[doc="# assert_eq!(RED_PAPER_LANTERN.to_string().as_str(), \"üèÆ\");"]
#[doc="```"]
pub static RED_PAPER_LANTERN :  Emoji = Emoji::new("red paper lantern", Version(0, 6), "üèÆ"); // red paper lantern
		
		#[doc="television üì∫"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TELEVISION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TELEVISION); // üì∫ (`U+1F4FA`)"] #[doc="# assert_eq!(TELEVISION.to_string().as_str(), \"üì∫\");"]
#[doc="```"]
pub static TELEVISION :  Emoji = Emoji::new("television", Version(0, 6), "üì∫"); // television
		
		#[doc="videocassette üìº"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::VIDEOCASSETTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", VIDEOCASSETTE); // üìº (`U+1F4FC`)"] #[doc="# assert_eq!(VIDEOCASSETTE.to_string().as_str(), \"üìº\");"]
#[doc="```"]
pub static VIDEOCASSETTE :  Emoji = Emoji::new("videocassette", Version(0, 6), "üìº"); // videocassette
		
		#[doc="video camera üìπ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::VIDEO_CAMERA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", VIDEO_CAMERA); // üìπ (`U+1F4F9`)"] #[doc="# assert_eq!(VIDEO_CAMERA.to_string().as_str(), \"üìπ\");"]
#[doc="```"]
pub static VIDEO_CAMERA :  Emoji = Emoji::new("video camera", Version(0, 6), "üìπ"); // video camera
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // CAMERA
				
				&CAMERA,
				
			],
			
			&[ // CAMERA_WITH_FLASH
				
				&CAMERA_WITH_FLASH,
				
			],
			
			&[ // CANDLE
				
				&CANDLE,
				
			],
			
			&[ // CLAPPER_BOARD
				
				&CLAPPER_BOARD,
				
			],
			
			&[ // DIYA_LAMP
				
				&DIYA_LAMP,
				
			],
			
			&[ // FILM_FRAMES
				
				&FILM_FRAMES,
				
			],
			
			&[ // FILM_PROJECTOR
				
				&FILM_PROJECTOR,
				
			],
			
			&[ // FLASHLIGHT
				
				&FLASHLIGHT,
				
			],
			
			&[ // LIGHT_BULB
				
				&LIGHT_BULB,
				
			],
			
			&[ // MAGNIFYING_GLASS_TILTED_LEFT
				
				&MAGNIFYING_GLASS_TILTED_LEFT,
				
			],
			
			&[ // MAGNIFYING_GLASS_TILTED_RIGHT
				
				&MAGNIFYING_GLASS_TILTED_RIGHT,
				
			],
			
			&[ // MOVIE_CAMERA
				
				&MOVIE_CAMERA,
				
			],
			
			&[ // RED_PAPER_LANTERN
				
				&RED_PAPER_LANTERN,
				
			],
			
			&[ // TELEVISION
				
				&TELEVISION,
				
			],
			
			&[ // VIDEOCASSETTE
				
				&VIDEOCASSETTE,
				
			],
			
			&[ // VIDEO_CAMERA
				
				&VIDEO_CAMERA,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&CAMERA, // CAMERA
				
			
				
				&CAMERA_WITH_FLASH, // CAMERA_WITH_FLASH
				
			
				
				&CANDLE, // CANDLE
				
			
				
				&CLAPPER_BOARD, // CLAPPER_BOARD
				
			
				
				&DIYA_LAMP, // DIYA_LAMP
				
			
				
				&FILM_FRAMES, // FILM_FRAMES
				
			
				
				&FILM_PROJECTOR, // FILM_PROJECTOR
				
			
				
				&FLASHLIGHT, // FLASHLIGHT
				
			
				
				&LIGHT_BULB, // LIGHT_BULB
				
			
				
				&MAGNIFYING_GLASS_TILTED_LEFT, // MAGNIFYING_GLASS_TILTED_LEFT
				
			
				
				&MAGNIFYING_GLASS_TILTED_RIGHT, // MAGNIFYING_GLASS_TILTED_RIGHT
				
			
				
				&MOVIE_CAMERA, // MOVIE_CAMERA
				
			
				
				&RED_PAPER_LANTERN, // RED_PAPER_LANTERN
				
			
				
				&TELEVISION, // TELEVISION
				
			
				
				&VIDEOCASSETTE, // VIDEOCASSETTE
				
			
				
				&VIDEO_CAMERA, // VIDEO_CAMERA
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // light_and_video
	
	/// lock üîëüîíüîê
	pub mod lock {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="key üîë"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEY); // üîë (`U+1F511`)"] #[doc="# assert_eq!(KEY.to_string().as_str(), \"üîë\");"]
#[doc="```"]
pub static KEY :  Emoji = Emoji::new("key", Version(0, 6), "üîë"); // key
		
		#[doc="locked üîí"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LOCKED;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LOCKED); // üîí (`U+1F512`)"] #[doc="# assert_eq!(LOCKED.to_string().as_str(), \"üîí\");"]
#[doc="```"]
pub static LOCKED :  Emoji = Emoji::new("locked", Version(0, 6), "üîí"); // locked
		
		#[doc="locked with key üîê"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LOCKED_WITH_KEY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LOCKED_WITH_KEY); // üîê (`U+1F510`)"] #[doc="# assert_eq!(LOCKED_WITH_KEY.to_string().as_str(), \"üîê\");"]
#[doc="```"]
pub static LOCKED_WITH_KEY :  Emoji = Emoji::new("locked with key", Version(0, 6), "üîê"); // locked with key
		
		#[doc="locked with pen üîè"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LOCKED_WITH_PEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LOCKED_WITH_PEN); // üîè (`U+1F50F`)"] #[doc="# assert_eq!(LOCKED_WITH_PEN.to_string().as_str(), \"üîè\");"]
#[doc="```"]
pub static LOCKED_WITH_PEN :  Emoji = Emoji::new("locked with pen", Version(0, 6), "üîè"); // locked with pen
		
		#[doc="old key üóùÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OLD_KEY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OLD_KEY); // üóùÔ∏è (`U+1F5DD U+FE0F`)"] #[doc="# assert_eq!(OLD_KEY.to_string().as_str(), \"üóùÔ∏è\");"]
#[doc="```"]
pub static OLD_KEY :  Emoji = Emoji::new("old key", Version(0, 7), "üóùÔ∏è"); // old key
		
		#[doc="unlocked üîì"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::UNLOCKED;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", UNLOCKED); // üîì (`U+1F513`)"] #[doc="# assert_eq!(UNLOCKED.to_string().as_str(), \"üîì\");"]
#[doc="```"]
pub static UNLOCKED :  Emoji = Emoji::new("unlocked", Version(0, 6), "üîì"); // unlocked
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // KEY
				
				&KEY,
				
			],
			
			&[ // LOCKED
				
				&LOCKED,
				
			],
			
			&[ // LOCKED_WITH_KEY
				
				&LOCKED_WITH_KEY,
				
			],
			
			&[ // LOCKED_WITH_PEN
				
				&LOCKED_WITH_PEN,
				
			],
			
			&[ // OLD_KEY
				
				&OLD_KEY,
				
			],
			
			&[ // UNLOCKED
				
				&UNLOCKED,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&KEY, // KEY
				
			
				
				&LOCKED, // LOCKED
				
			
				
				&LOCKED_WITH_KEY, // LOCKED_WITH_KEY
				
			
				
				&LOCKED_WITH_PEN, // LOCKED_WITH_PEN
				
			
				
				&OLD_KEY, // OLD_KEY
				
			
				
				&UNLOCKED, // UNLOCKED
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // lock
	
	/// mail üó≥Ô∏èüì™üì´
	pub mod mail {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="ballot box with ballot üó≥Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BALLOT_BOX_WITH_BALLOT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BALLOT_BOX_WITH_BALLOT); // üó≥Ô∏è (`U+1F5F3 U+FE0F`)"] #[doc="# assert_eq!(BALLOT_BOX_WITH_BALLOT.to_string().as_str(), \"üó≥Ô∏è\");"]
#[doc="```"]
pub static BALLOT_BOX_WITH_BALLOT :  Emoji = Emoji::new("ballot box with ballot", Version(0, 7), "üó≥Ô∏è"); // ballot box with ballot
		
		#[doc="closed mailbox with lowered flag üì™"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLOSED_MAILBOX_WITH_LOWERED_FLAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLOSED_MAILBOX_WITH_LOWERED_FLAG); // üì™ (`U+1F4EA`)"] #[doc="# assert_eq!(CLOSED_MAILBOX_WITH_LOWERED_FLAG.to_string().as_str(), \"üì™\");"]
#[doc="```"]
pub static CLOSED_MAILBOX_WITH_LOWERED_FLAG :  Emoji = Emoji::new("closed mailbox with lowered flag", Version(0, 6), "üì™"); // closed mailbox with lowered flag
		
		#[doc="closed mailbox with raised flag üì´"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLOSED_MAILBOX_WITH_RAISED_FLAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLOSED_MAILBOX_WITH_RAISED_FLAG); // üì´ (`U+1F4EB`)"] #[doc="# assert_eq!(CLOSED_MAILBOX_WITH_RAISED_FLAG.to_string().as_str(), \"üì´\");"]
#[doc="```"]
pub static CLOSED_MAILBOX_WITH_RAISED_FLAG :  Emoji = Emoji::new("closed mailbox with raised flag", Version(0, 6), "üì´"); // closed mailbox with raised flag
		
		#[doc="envelope ‚úâÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ENVELOPE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ENVELOPE); // ‚úâÔ∏è (`U+2709 U+FE0F`)"] #[doc="# assert_eq!(ENVELOPE.to_string().as_str(), \"‚úâÔ∏è\");"]
#[doc="```"]
pub static ENVELOPE :  Emoji = Emoji::new("envelope", Version(0, 6), "‚úâÔ∏è"); // envelope
		
		#[doc="envelope with arrow üì©"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ENVELOPE_WITH_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ENVELOPE_WITH_ARROW); // üì© (`U+1F4E9`)"] #[doc="# assert_eq!(ENVELOPE_WITH_ARROW.to_string().as_str(), \"üì©\");"]
#[doc="```"]
pub static ENVELOPE_WITH_ARROW :  Emoji = Emoji::new("envelope with arrow", Version(0, 6), "üì©"); // envelope with arrow
		
		#[doc="e-mail üìß"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::E_MAIL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", E_MAIL); // üìß (`U+1F4E7`)"] #[doc="# assert_eq!(E_MAIL.to_string().as_str(), \"üìß\");"]
#[doc="```"]
pub static E_MAIL :  Emoji = Emoji::new("e-mail", Version(0, 6), "üìß"); // e-mail
		
		#[doc="inbox tray üì•"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::INBOX_TRAY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", INBOX_TRAY); // üì• (`U+1F4E5`)"] #[doc="# assert_eq!(INBOX_TRAY.to_string().as_str(), \"üì•\");"]
#[doc="```"]
pub static INBOX_TRAY :  Emoji = Emoji::new("inbox tray", Version(0, 6), "üì•"); // inbox tray
		
		#[doc="incoming envelope üì®"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::INCOMING_ENVELOPE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", INCOMING_ENVELOPE); // üì® (`U+1F4E8`)"] #[doc="# assert_eq!(INCOMING_ENVELOPE.to_string().as_str(), \"üì®\");"]
#[doc="```"]
pub static INCOMING_ENVELOPE :  Emoji = Emoji::new("incoming envelope", Version(0, 6), "üì®"); // incoming envelope
		
		#[doc="open mailbox with lowered flag üì≠"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OPEN_MAILBOX_WITH_LOWERED_FLAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OPEN_MAILBOX_WITH_LOWERED_FLAG); // üì≠ (`U+1F4ED`)"] #[doc="# assert_eq!(OPEN_MAILBOX_WITH_LOWERED_FLAG.to_string().as_str(), \"üì≠\");"]
#[doc="```"]
pub static OPEN_MAILBOX_WITH_LOWERED_FLAG :  Emoji = Emoji::new("open mailbox with lowered flag", Version(0, 7), "üì≠"); // open mailbox with lowered flag
		
		#[doc="open mailbox with raised flag üì¨"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OPEN_MAILBOX_WITH_RAISED_FLAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OPEN_MAILBOX_WITH_RAISED_FLAG); // üì¨ (`U+1F4EC`)"] #[doc="# assert_eq!(OPEN_MAILBOX_WITH_RAISED_FLAG.to_string().as_str(), \"üì¨\");"]
#[doc="```"]
pub static OPEN_MAILBOX_WITH_RAISED_FLAG :  Emoji = Emoji::new("open mailbox with raised flag", Version(0, 7), "üì¨"); // open mailbox with raised flag
		
		#[doc="outbox tray üì§"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OUTBOX_TRAY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OUTBOX_TRAY); // üì§ (`U+1F4E4`)"] #[doc="# assert_eq!(OUTBOX_TRAY.to_string().as_str(), \"üì§\");"]
#[doc="```"]
pub static OUTBOX_TRAY :  Emoji = Emoji::new("outbox tray", Version(0, 6), "üì§"); // outbox tray
		
		#[doc="package üì¶"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PACKAGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PACKAGE); // üì¶ (`U+1F4E6`)"] #[doc="# assert_eq!(PACKAGE.to_string().as_str(), \"üì¶\");"]
#[doc="```"]
pub static PACKAGE :  Emoji = Emoji::new("package", Version(0, 6), "üì¶"); // package
		
		#[doc="postbox üìÆ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POSTBOX;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POSTBOX); // üìÆ (`U+1F4EE`)"] #[doc="# assert_eq!(POSTBOX.to_string().as_str(), \"üìÆ\");"]
#[doc="```"]
pub static POSTBOX :  Emoji = Emoji::new("postbox", Version(0, 6), "üìÆ"); // postbox
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BALLOT_BOX_WITH_BALLOT
				
				&BALLOT_BOX_WITH_BALLOT,
				
			],
			
			&[ // CLOSED_MAILBOX_WITH_LOWERED_FLAG
				
				&CLOSED_MAILBOX_WITH_LOWERED_FLAG,
				
			],
			
			&[ // CLOSED_MAILBOX_WITH_RAISED_FLAG
				
				&CLOSED_MAILBOX_WITH_RAISED_FLAG,
				
			],
			
			&[ // ENVELOPE
				
				&ENVELOPE,
				
			],
			
			&[ // ENVELOPE_WITH_ARROW
				
				&ENVELOPE_WITH_ARROW,
				
			],
			
			&[ // E_MAIL
				
				&E_MAIL,
				
			],
			
			&[ // INBOX_TRAY
				
				&INBOX_TRAY,
				
			],
			
			&[ // INCOMING_ENVELOPE
				
				&INCOMING_ENVELOPE,
				
			],
			
			&[ // OPEN_MAILBOX_WITH_LOWERED_FLAG
				
				&OPEN_MAILBOX_WITH_LOWERED_FLAG,
				
			],
			
			&[ // OPEN_MAILBOX_WITH_RAISED_FLAG
				
				&OPEN_MAILBOX_WITH_RAISED_FLAG,
				
			],
			
			&[ // OUTBOX_TRAY
				
				&OUTBOX_TRAY,
				
			],
			
			&[ // PACKAGE
				
				&PACKAGE,
				
			],
			
			&[ // POSTBOX
				
				&POSTBOX,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BALLOT_BOX_WITH_BALLOT, // BALLOT_BOX_WITH_BALLOT
				
			
				
				&CLOSED_MAILBOX_WITH_LOWERED_FLAG, // CLOSED_MAILBOX_WITH_LOWERED_FLAG
				
			
				
				&CLOSED_MAILBOX_WITH_RAISED_FLAG, // CLOSED_MAILBOX_WITH_RAISED_FLAG
				
			
				
				&ENVELOPE, // ENVELOPE
				
			
				
				&ENVELOPE_WITH_ARROW, // ENVELOPE_WITH_ARROW
				
			
				
				&E_MAIL, // E_MAIL
				
			
				
				&INBOX_TRAY, // INBOX_TRAY
				
			
				
				&INCOMING_ENVELOPE, // INCOMING_ENVELOPE
				
			
				
				&OPEN_MAILBOX_WITH_LOWERED_FLAG, // OPEN_MAILBOX_WITH_LOWERED_FLAG
				
			
				
				&OPEN_MAILBOX_WITH_RAISED_FLAG, // OPEN_MAILBOX_WITH_RAISED_FLAG
				
			
				
				&OUTBOX_TRAY, // OUTBOX_TRAY
				
			
				
				&PACKAGE, // PACKAGE
				
			
				
				&POSTBOX, // POSTBOX
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // mail
	
	/// medical ü©πü©∏üíä
	pub mod medical {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="adhesive bandage ü©π"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ADHESIVE_BANDAGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ADHESIVE_BANDAGE); // ü©π (`U+1FA79`)"] #[doc="# assert_eq!(ADHESIVE_BANDAGE.to_string().as_str(), \"ü©π\");"]
#[doc="```"]
pub static ADHESIVE_BANDAGE :  Emoji = Emoji::new("adhesive bandage", Version(12, 0), "ü©π"); // adhesive bandage
		
		#[doc="drop of blood ü©∏"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DROP_OF_BLOOD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DROP_OF_BLOOD); // ü©∏ (`U+1FA78`)"] #[doc="# assert_eq!(DROP_OF_BLOOD.to_string().as_str(), \"ü©∏\");"]
#[doc="```"]
pub static DROP_OF_BLOOD :  Emoji = Emoji::new("drop of blood", Version(12, 0), "ü©∏"); // drop of blood
		
		#[doc="pill üíä"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PILL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PILL); // üíä (`U+1F48A`)"] #[doc="# assert_eq!(PILL.to_string().as_str(), \"üíä\");"]
#[doc="```"]
pub static PILL :  Emoji = Emoji::new("pill", Version(0, 6), "üíä"); // pill
		
		#[doc="stethoscope ü©∫"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STETHOSCOPE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STETHOSCOPE); // ü©∫ (`U+1FA7A`)"] #[doc="# assert_eq!(STETHOSCOPE.to_string().as_str(), \"ü©∫\");"]
#[doc="```"]
pub static STETHOSCOPE :  Emoji = Emoji::new("stethoscope", Version(12, 0), "ü©∫"); // stethoscope
		
		#[doc="syringe üíâ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SYRINGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SYRINGE); // üíâ (`U+1F489`)"] #[doc="# assert_eq!(SYRINGE.to_string().as_str(), \"üíâ\");"]
#[doc="```"]
pub static SYRINGE :  Emoji = Emoji::new("syringe", Version(0, 6), "üíâ"); // syringe
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // ADHESIVE_BANDAGE
				
				&ADHESIVE_BANDAGE,
				
			],
			
			&[ // DROP_OF_BLOOD
				
				&DROP_OF_BLOOD,
				
			],
			
			&[ // PILL
				
				&PILL,
				
			],
			
			&[ // STETHOSCOPE
				
				&STETHOSCOPE,
				
			],
			
			&[ // SYRINGE
				
				&SYRINGE,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&ADHESIVE_BANDAGE, // ADHESIVE_BANDAGE
				
			
				
				&DROP_OF_BLOOD, // DROP_OF_BLOOD
				
			
				
				&PILL, // PILL
				
			
				
				&STETHOSCOPE, // STETHOSCOPE
				
			
				
				&SYRINGE, // SYRINGE
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // medical
	
	/// money üíπü™ôüí≥
	pub mod money {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="chart increasing with yen üíπ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHART_INCREASING_WITH_YEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHART_INCREASING_WITH_YEN); // üíπ (`U+1F4B9`)"] #[doc="# assert_eq!(CHART_INCREASING_WITH_YEN.to_string().as_str(), \"üíπ\");"]
#[doc="```"]
pub static CHART_INCREASING_WITH_YEN :  Emoji = Emoji::new("chart increasing with yen", Version(0, 6), "üíπ"); // chart increasing with yen
		
		#[doc="coin ü™ô"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COIN); // ü™ô (`U+1FA99`)"] #[doc="# assert_eq!(COIN.to_string().as_str(), \"ü™ô\");"]
#[doc="```"]
pub static COIN :  Emoji = Emoji::new("coin", Version(13, 0), "ü™ô"); // coin
		
		#[doc="credit card üí≥"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CREDIT_CARD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CREDIT_CARD); // üí≥ (`U+1F4B3`)"] #[doc="# assert_eq!(CREDIT_CARD.to_string().as_str(), \"üí≥\");"]
#[doc="```"]
pub static CREDIT_CARD :  Emoji = Emoji::new("credit card", Version(0, 6), "üí≥"); // credit card
		
		#[doc="dollar banknote üíµ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOLLAR_BANKNOTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOLLAR_BANKNOTE); // üíµ (`U+1F4B5`)"] #[doc="# assert_eq!(DOLLAR_BANKNOTE.to_string().as_str(), \"üíµ\");"]
#[doc="```"]
pub static DOLLAR_BANKNOTE :  Emoji = Emoji::new("dollar banknote", Version(0, 6), "üíµ"); // dollar banknote
		
		#[doc="euro banknote üí∂"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EURO_BANKNOTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EURO_BANKNOTE); // üí∂ (`U+1F4B6`)"] #[doc="# assert_eq!(EURO_BANKNOTE.to_string().as_str(), \"üí∂\");"]
#[doc="```"]
pub static EURO_BANKNOTE :  Emoji = Emoji::new("euro banknote", Version(1, 0), "üí∂"); // euro banknote
		
		#[doc="money bag üí∞"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MONEY_BAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MONEY_BAG); // üí∞ (`U+1F4B0`)"] #[doc="# assert_eq!(MONEY_BAG.to_string().as_str(), \"üí∞\");"]
#[doc="```"]
pub static MONEY_BAG :  Emoji = Emoji::new("money bag", Version(0, 6), "üí∞"); // money bag
		
		#[doc="money with wings üí∏"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MONEY_WITH_WINGS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MONEY_WITH_WINGS); // üí∏ (`U+1F4B8`)"] #[doc="# assert_eq!(MONEY_WITH_WINGS.to_string().as_str(), \"üí∏\");"]
#[doc="```"]
pub static MONEY_WITH_WINGS :  Emoji = Emoji::new("money with wings", Version(0, 6), "üí∏"); // money with wings
		
		#[doc="pound banknote üí∑"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POUND_BANKNOTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POUND_BANKNOTE); // üí∑ (`U+1F4B7`)"] #[doc="# assert_eq!(POUND_BANKNOTE.to_string().as_str(), \"üí∑\");"]
#[doc="```"]
pub static POUND_BANKNOTE :  Emoji = Emoji::new("pound banknote", Version(1, 0), "üí∑"); // pound banknote
		
		#[doc="receipt üßæ"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RECEIPT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RECEIPT); // üßæ (`U+1F9FE`)"] #[doc="# assert_eq!(RECEIPT.to_string().as_str(), \"üßæ\");"]
#[doc="```"]
pub static RECEIPT :  Emoji = Emoji::new("receipt", Version(11, 0), "üßæ"); // receipt
		
		#[doc="yen banknote üí¥"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::YEN_BANKNOTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", YEN_BANKNOTE); // üí¥ (`U+1F4B4`)"] #[doc="# assert_eq!(YEN_BANKNOTE.to_string().as_str(), \"üí¥\");"]
#[doc="```"]
pub static YEN_BANKNOTE :  Emoji = Emoji::new("yen banknote", Version(0, 6), "üí¥"); // yen banknote
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // CHART_INCREASING_WITH_YEN
				
				&CHART_INCREASING_WITH_YEN,
				
			],
			
			&[ // COIN
				
				&COIN,
				
			],
			
			&[ // CREDIT_CARD
				
				&CREDIT_CARD,
				
			],
			
			&[ // DOLLAR_BANKNOTE
				
				&DOLLAR_BANKNOTE,
				
			],
			
			&[ // EURO_BANKNOTE
				
				&EURO_BANKNOTE,
				
			],
			
			&[ // MONEY_BAG
				
				&MONEY_BAG,
				
			],
			
			&[ // MONEY_WITH_WINGS
				
				&MONEY_WITH_WINGS,
				
			],
			
			&[ // POUND_BANKNOTE
				
				&POUND_BANKNOTE,
				
			],
			
			&[ // RECEIPT
				
				&RECEIPT,
				
			],
			
			&[ // YEN_BANKNOTE
				
				&YEN_BANKNOTE,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&CHART_INCREASING_WITH_YEN, // CHART_INCREASING_WITH_YEN
				
			
				
				&COIN, // COIN
				
			
				
				&CREDIT_CARD, // CREDIT_CARD
				
			
				
				&DOLLAR_BANKNOTE, // DOLLAR_BANKNOTE
				
			
				
				&EURO_BANKNOTE, // EURO_BANKNOTE
				
			
				
				&MONEY_BAG, // MONEY_BAG
				
			
				
				&MONEY_WITH_WINGS, // MONEY_WITH_WINGS
				
			
				
				&POUND_BANKNOTE, // POUND_BANKNOTE
				
			
				
				&RECEIPT, // RECEIPT
				
			
				
				&YEN_BANKNOTE, // YEN_BANKNOTE
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // money
	
	/// music üéõÔ∏èüéßüéöÔ∏è
	pub mod music {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="control knobs üéõÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CONTROL_KNOBS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CONTROL_KNOBS); // üéõÔ∏è (`U+1F39B U+FE0F`)"] #[doc="# assert_eq!(CONTROL_KNOBS.to_string().as_str(), \"üéõÔ∏è\");"]
#[doc="```"]
pub static CONTROL_KNOBS :  Emoji = Emoji::new("control knobs", Version(0, 7), "üéõÔ∏è"); // control knobs
		
		#[doc="headphone üéß"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HEADPHONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HEADPHONE); // üéß (`U+1F3A7`)"] #[doc="# assert_eq!(HEADPHONE.to_string().as_str(), \"üéß\");"]
#[doc="```"]
pub static HEADPHONE :  Emoji = Emoji::new("headphone", Version(0, 6), "üéß"); // headphone
		
		#[doc="level slider üéöÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEVEL_SLIDER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEVEL_SLIDER); // üéöÔ∏è (`U+1F39A U+FE0F`)"] #[doc="# assert_eq!(LEVEL_SLIDER.to_string().as_str(), \"üéöÔ∏è\");"]
#[doc="```"]
pub static LEVEL_SLIDER :  Emoji = Emoji::new("level slider", Version(0, 7), "üéöÔ∏è"); // level slider
		
		#[doc="microphone üé§"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MICROPHONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MICROPHONE); // üé§ (`U+1F3A4`)"] #[doc="# assert_eq!(MICROPHONE.to_string().as_str(), \"üé§\");"]
#[doc="```"]
pub static MICROPHONE :  Emoji = Emoji::new("microphone", Version(0, 6), "üé§"); // microphone
		
		#[doc="musical note üéµ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MUSICAL_NOTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MUSICAL_NOTE); // üéµ (`U+1F3B5`)"] #[doc="# assert_eq!(MUSICAL_NOTE.to_string().as_str(), \"üéµ\");"]
#[doc="```"]
pub static MUSICAL_NOTE :  Emoji = Emoji::new("musical note", Version(0, 6), "üéµ"); // musical note
		
		#[doc="musical notes üé∂"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MUSICAL_NOTES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MUSICAL_NOTES); // üé∂ (`U+1F3B6`)"] #[doc="# assert_eq!(MUSICAL_NOTES.to_string().as_str(), \"üé∂\");"]
#[doc="```"]
pub static MUSICAL_NOTES :  Emoji = Emoji::new("musical notes", Version(0, 6), "üé∂"); // musical notes
		
		#[doc="musical score üéº"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MUSICAL_SCORE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MUSICAL_SCORE); // üéº (`U+1F3BC`)"] #[doc="# assert_eq!(MUSICAL_SCORE.to_string().as_str(), \"üéº\");"]
#[doc="```"]
pub static MUSICAL_SCORE :  Emoji = Emoji::new("musical score", Version(0, 6), "üéº"); // musical score
		
		#[doc="radio üìª"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RADIO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RADIO); // üìª (`U+1F4FB`)"] #[doc="# assert_eq!(RADIO.to_string().as_str(), \"üìª\");"]
#[doc="```"]
pub static RADIO :  Emoji = Emoji::new("radio", Version(0, 6), "üìª"); // radio
		
		#[doc="studio microphone üéôÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STUDIO_MICROPHONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STUDIO_MICROPHONE); // üéôÔ∏è (`U+1F399 U+FE0F`)"] #[doc="# assert_eq!(STUDIO_MICROPHONE.to_string().as_str(), \"üéôÔ∏è\");"]
#[doc="```"]
pub static STUDIO_MICROPHONE :  Emoji = Emoji::new("studio microphone", Version(0, 7), "üéôÔ∏è"); // studio microphone
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // CONTROL_KNOBS
				
				&CONTROL_KNOBS,
				
			],
			
			&[ // HEADPHONE
				
				&HEADPHONE,
				
			],
			
			&[ // LEVEL_SLIDER
				
				&LEVEL_SLIDER,
				
			],
			
			&[ // MICROPHONE
				
				&MICROPHONE,
				
			],
			
			&[ // MUSICAL_NOTE
				
				&MUSICAL_NOTE,
				
			],
			
			&[ // MUSICAL_NOTES
				
				&MUSICAL_NOTES,
				
			],
			
			&[ // MUSICAL_SCORE
				
				&MUSICAL_SCORE,
				
			],
			
			&[ // RADIO
				
				&RADIO,
				
			],
			
			&[ // STUDIO_MICROPHONE
				
				&STUDIO_MICROPHONE,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&CONTROL_KNOBS, // CONTROL_KNOBS
				
			
				
				&HEADPHONE, // HEADPHONE
				
			
				
				&LEVEL_SLIDER, // LEVEL_SLIDER
				
			
				
				&MICROPHONE, // MICROPHONE
				
			
				
				&MUSICAL_NOTE, // MUSICAL_NOTE
				
			
				
				&MUSICAL_NOTES, // MUSICAL_NOTES
				
			
				
				&MUSICAL_SCORE, // MUSICAL_SCORE
				
			
				
				&RADIO, // RADIO
				
			
				
				&STUDIO_MICROPHONE, // STUDIO_MICROPHONE
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // music
	
	/// musical_instrument ü™óü™ïü•Å
	pub mod musical_instrument {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="accordion ü™ó"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ACCORDION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ACCORDION); // ü™ó (`U+1FA97`)"] #[doc="# assert_eq!(ACCORDION.to_string().as_str(), \"ü™ó\");"]
#[doc="```"]
pub static ACCORDION :  Emoji = Emoji::new("accordion", Version(13, 0), "ü™ó"); // accordion
		
		#[doc="banjo ü™ï"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BANJO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BANJO); // ü™ï (`U+1FA95`)"] #[doc="# assert_eq!(BANJO.to_string().as_str(), \"ü™ï\");"]
#[doc="```"]
pub static BANJO :  Emoji = Emoji::new("banjo", Version(12, 0), "ü™ï"); // banjo
		
		#[doc="drum ü•Å"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DRUM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DRUM); // ü•Å (`U+1F941`)"] #[doc="# assert_eq!(DRUM.to_string().as_str(), \"ü•Å\");"]
#[doc="```"]
pub static DRUM :  Emoji = Emoji::new("drum", Version(3, 0), "ü•Å"); // drum
		
		#[doc="guitar üé∏"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GUITAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GUITAR); // üé∏ (`U+1F3B8`)"] #[doc="# assert_eq!(GUITAR.to_string().as_str(), \"üé∏\");"]
#[doc="```"]
pub static GUITAR :  Emoji = Emoji::new("guitar", Version(0, 6), "üé∏"); // guitar
		
		#[doc="long drum ü™ò"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LONG_DRUM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LONG_DRUM); // ü™ò (`U+1FA98`)"] #[doc="# assert_eq!(LONG_DRUM.to_string().as_str(), \"ü™ò\");"]
#[doc="```"]
pub static LONG_DRUM :  Emoji = Emoji::new("long drum", Version(13, 0), "ü™ò"); // long drum
		
		#[doc="musical keyboard üéπ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MUSICAL_KEYBOARD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MUSICAL_KEYBOARD); // üéπ (`U+1F3B9`)"] #[doc="# assert_eq!(MUSICAL_KEYBOARD.to_string().as_str(), \"üéπ\");"]
#[doc="```"]
pub static MUSICAL_KEYBOARD :  Emoji = Emoji::new("musical keyboard", Version(0, 6), "üéπ"); // musical keyboard
		
		#[doc="saxophone üé∑"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SAXOPHONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SAXOPHONE); // üé∑ (`U+1F3B7`)"] #[doc="# assert_eq!(SAXOPHONE.to_string().as_str(), \"üé∑\");"]
#[doc="```"]
pub static SAXOPHONE :  Emoji = Emoji::new("saxophone", Version(0, 6), "üé∑"); // saxophone
		
		#[doc="trumpet üé∫"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TRUMPET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TRUMPET); // üé∫ (`U+1F3BA`)"] #[doc="# assert_eq!(TRUMPET.to_string().as_str(), \"üé∫\");"]
#[doc="```"]
pub static TRUMPET :  Emoji = Emoji::new("trumpet", Version(0, 6), "üé∫"); // trumpet
		
		#[doc="violin üéª"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::VIOLIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", VIOLIN); // üéª (`U+1F3BB`)"] #[doc="# assert_eq!(VIOLIN.to_string().as_str(), \"üéª\");"]
#[doc="```"]
pub static VIOLIN :  Emoji = Emoji::new("violin", Version(0, 6), "üéª"); // violin
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // ACCORDION
				
				&ACCORDION,
				
			],
			
			&[ // BANJO
				
				&BANJO,
				
			],
			
			&[ // DRUM
				
				&DRUM,
				
			],
			
			&[ // GUITAR
				
				&GUITAR,
				
			],
			
			&[ // LONG_DRUM
				
				&LONG_DRUM,
				
			],
			
			&[ // MUSICAL_KEYBOARD
				
				&MUSICAL_KEYBOARD,
				
			],
			
			&[ // SAXOPHONE
				
				&SAXOPHONE,
				
			],
			
			&[ // TRUMPET
				
				&TRUMPET,
				
			],
			
			&[ // VIOLIN
				
				&VIOLIN,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&ACCORDION, // ACCORDION
				
			
				
				&BANJO, // BANJO
				
			
				
				&DRUM, // DRUM
				
			
				
				&GUITAR, // GUITAR
				
			
				
				&LONG_DRUM, // LONG_DRUM
				
			
				
				&MUSICAL_KEYBOARD, // MUSICAL_KEYBOARD
				
			
				
				&SAXOPHONE, // SAXOPHONE
				
			
				
				&TRUMPET, // TRUMPET
				
			
				
				&VIOLIN, // VIOLIN
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // musical_instrument
	
	/// office üìäüíºüìÖ
	pub mod office {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="bar chart üìä"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BAR_CHART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BAR_CHART); // üìä (`U+1F4CA`)"] #[doc="# assert_eq!(BAR_CHART.to_string().as_str(), \"üìä\");"]
#[doc="```"]
pub static BAR_CHART :  Emoji = Emoji::new("bar chart", Version(0, 6), "üìä"); // bar chart
		
		#[doc="briefcase üíº"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BRIEFCASE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BRIEFCASE); // üíº (`U+1F4BC`)"] #[doc="# assert_eq!(BRIEFCASE.to_string().as_str(), \"üíº\");"]
#[doc="```"]
pub static BRIEFCASE :  Emoji = Emoji::new("briefcase", Version(0, 6), "üíº"); // briefcase
		
		#[doc="calendar üìÖ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CALENDAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CALENDAR); // üìÖ (`U+1F4C5`)"] #[doc="# assert_eq!(CALENDAR.to_string().as_str(), \"üìÖ\");"]
#[doc="```"]
pub static CALENDAR :  Emoji = Emoji::new("calendar", Version(0, 6), "üìÖ"); // calendar
		
		#[doc="card file box üóÉÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CARD_FILE_BOX;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CARD_FILE_BOX); // üóÉÔ∏è (`U+1F5C3 U+FE0F`)"] #[doc="# assert_eq!(CARD_FILE_BOX.to_string().as_str(), \"üóÉÔ∏è\");"]
#[doc="```"]
pub static CARD_FILE_BOX :  Emoji = Emoji::new("card file box", Version(0, 7), "üóÉÔ∏è"); // card file box
		
		#[doc="card index üìá"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CARD_INDEX;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CARD_INDEX); // üìá (`U+1F4C7`)"] #[doc="# assert_eq!(CARD_INDEX.to_string().as_str(), \"üìá\");"]
#[doc="```"]
pub static CARD_INDEX :  Emoji = Emoji::new("card index", Version(0, 6), "üìá"); // card index
		
		#[doc="card index dividers üóÇÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CARD_INDEX_DIVIDERS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CARD_INDEX_DIVIDERS); // üóÇÔ∏è (`U+1F5C2 U+FE0F`)"] #[doc="# assert_eq!(CARD_INDEX_DIVIDERS.to_string().as_str(), \"üóÇÔ∏è\");"]
#[doc="```"]
pub static CARD_INDEX_DIVIDERS :  Emoji = Emoji::new("card index dividers", Version(0, 7), "üóÇÔ∏è"); // card index dividers
		
		#[doc="chart decreasing üìâ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHART_DECREASING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHART_DECREASING); // üìâ (`U+1F4C9`)"] #[doc="# assert_eq!(CHART_DECREASING.to_string().as_str(), \"üìâ\");"]
#[doc="```"]
pub static CHART_DECREASING :  Emoji = Emoji::new("chart decreasing", Version(0, 6), "üìâ"); // chart decreasing
		
		#[doc="chart increasing üìà"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHART_INCREASING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHART_INCREASING); // üìà (`U+1F4C8`)"] #[doc="# assert_eq!(CHART_INCREASING.to_string().as_str(), \"üìà\");"]
#[doc="```"]
pub static CHART_INCREASING :  Emoji = Emoji::new("chart increasing", Version(0, 6), "üìà"); // chart increasing
		
		#[doc="clipboard üìã"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLIPBOARD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLIPBOARD); // üìã (`U+1F4CB`)"] #[doc="# assert_eq!(CLIPBOARD.to_string().as_str(), \"üìã\");"]
#[doc="```"]
pub static CLIPBOARD :  Emoji = Emoji::new("clipboard", Version(0, 6), "üìã"); // clipboard
		
		#[doc="file cabinet üóÑÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FILE_CABINET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FILE_CABINET); // üóÑÔ∏è (`U+1F5C4 U+FE0F`)"] #[doc="# assert_eq!(FILE_CABINET.to_string().as_str(), \"üóÑÔ∏è\");"]
#[doc="```"]
pub static FILE_CABINET :  Emoji = Emoji::new("file cabinet", Version(0, 7), "üóÑÔ∏è"); // file cabinet
		
		#[doc="file folder üìÅ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FILE_FOLDER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FILE_FOLDER); // üìÅ (`U+1F4C1`)"] #[doc="# assert_eq!(FILE_FOLDER.to_string().as_str(), \"üìÅ\");"]
#[doc="```"]
pub static FILE_FOLDER :  Emoji = Emoji::new("file folder", Version(0, 6), "üìÅ"); // file folder
		
		#[doc="linked paperclips üñáÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LINKED_PAPERCLIPS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LINKED_PAPERCLIPS); // üñáÔ∏è (`U+1F587 U+FE0F`)"] #[doc="# assert_eq!(LINKED_PAPERCLIPS.to_string().as_str(), \"üñáÔ∏è\");"]
#[doc="```"]
pub static LINKED_PAPERCLIPS :  Emoji = Emoji::new("linked paperclips", Version(0, 7), "üñáÔ∏è"); // linked paperclips
		
		#[doc="open file folder üìÇ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OPEN_FILE_FOLDER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OPEN_FILE_FOLDER); // üìÇ (`U+1F4C2`)"] #[doc="# assert_eq!(OPEN_FILE_FOLDER.to_string().as_str(), \"üìÇ\");"]
#[doc="```"]
pub static OPEN_FILE_FOLDER :  Emoji = Emoji::new("open file folder", Version(0, 6), "üìÇ"); // open file folder
		
		#[doc="paperclip üìé"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PAPERCLIP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PAPERCLIP); // üìé (`U+1F4CE`)"] #[doc="# assert_eq!(PAPERCLIP.to_string().as_str(), \"üìé\");"]
#[doc="```"]
pub static PAPERCLIP :  Emoji = Emoji::new("paperclip", Version(0, 6), "üìé"); // paperclip
		
		#[doc="pushpin üìå"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PUSHPIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PUSHPIN); // üìå (`U+1F4CC`)"] #[doc="# assert_eq!(PUSHPIN.to_string().as_str(), \"üìå\");"]
#[doc="```"]
pub static PUSHPIN :  Emoji = Emoji::new("pushpin", Version(0, 6), "üìå"); // pushpin
		
		#[doc="round pushpin üìç"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ROUND_PUSHPIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ROUND_PUSHPIN); // üìç (`U+1F4CD`)"] #[doc="# assert_eq!(ROUND_PUSHPIN.to_string().as_str(), \"üìç\");"]
#[doc="```"]
pub static ROUND_PUSHPIN :  Emoji = Emoji::new("round pushpin", Version(0, 6), "üìç"); // round pushpin
		
		#[doc="scissors ‚úÇÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SCISSORS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SCISSORS); // ‚úÇÔ∏è (`U+2702 U+FE0F`)"] #[doc="# assert_eq!(SCISSORS.to_string().as_str(), \"‚úÇÔ∏è\");"]
#[doc="```"]
pub static SCISSORS :  Emoji = Emoji::new("scissors", Version(0, 6), "‚úÇÔ∏è"); // scissors
		
		#[doc="spiral calendar üóìÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPIRAL_CALENDAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPIRAL_CALENDAR); // üóìÔ∏è (`U+1F5D3 U+FE0F`)"] #[doc="# assert_eq!(SPIRAL_CALENDAR.to_string().as_str(), \"üóìÔ∏è\");"]
#[doc="```"]
pub static SPIRAL_CALENDAR :  Emoji = Emoji::new("spiral calendar", Version(0, 7), "üóìÔ∏è"); // spiral calendar
		
		#[doc="spiral notepad üóíÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPIRAL_NOTEPAD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPIRAL_NOTEPAD); // üóíÔ∏è (`U+1F5D2 U+FE0F`)"] #[doc="# assert_eq!(SPIRAL_NOTEPAD.to_string().as_str(), \"üóíÔ∏è\");"]
#[doc="```"]
pub static SPIRAL_NOTEPAD :  Emoji = Emoji::new("spiral notepad", Version(0, 7), "üóíÔ∏è"); // spiral notepad
		
		#[doc="straight ruler üìè"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STRAIGHT_RULER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STRAIGHT_RULER); // üìè (`U+1F4CF`)"] #[doc="# assert_eq!(STRAIGHT_RULER.to_string().as_str(), \"üìè\");"]
#[doc="```"]
pub static STRAIGHT_RULER :  Emoji = Emoji::new("straight ruler", Version(0, 6), "üìè"); // straight ruler
		
		#[doc="tear-off calendar üìÜ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TEAR_OFF_CALENDAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TEAR_OFF_CALENDAR); // üìÜ (`U+1F4C6`)"] #[doc="# assert_eq!(TEAR_OFF_CALENDAR.to_string().as_str(), \"üìÜ\");"]
#[doc="```"]
pub static TEAR_OFF_CALENDAR :  Emoji = Emoji::new("tear-off calendar", Version(0, 6), "üìÜ"); // tear-off calendar
		
		#[doc="triangular ruler üìê"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TRIANGULAR_RULER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TRIANGULAR_RULER); // üìê (`U+1F4D0`)"] #[doc="# assert_eq!(TRIANGULAR_RULER.to_string().as_str(), \"üìê\");"]
#[doc="```"]
pub static TRIANGULAR_RULER :  Emoji = Emoji::new("triangular ruler", Version(0, 6), "üìê"); // triangular ruler
		
		#[doc="wastebasket üóëÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WASTEBASKET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WASTEBASKET); // üóëÔ∏è (`U+1F5D1 U+FE0F`)"] #[doc="# assert_eq!(WASTEBASKET.to_string().as_str(), \"üóëÔ∏è\");"]
#[doc="```"]
pub static WASTEBASKET :  Emoji = Emoji::new("wastebasket", Version(0, 7), "üóëÔ∏è"); // wastebasket
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BAR_CHART
				
				&BAR_CHART,
				
			],
			
			&[ // BRIEFCASE
				
				&BRIEFCASE,
				
			],
			
			&[ // CALENDAR
				
				&CALENDAR,
				
			],
			
			&[ // CARD_FILE_BOX
				
				&CARD_FILE_BOX,
				
			],
			
			&[ // CARD_INDEX
				
				&CARD_INDEX,
				
			],
			
			&[ // CARD_INDEX_DIVIDERS
				
				&CARD_INDEX_DIVIDERS,
				
			],
			
			&[ // CHART_DECREASING
				
				&CHART_DECREASING,
				
			],
			
			&[ // CHART_INCREASING
				
				&CHART_INCREASING,
				
			],
			
			&[ // CLIPBOARD
				
				&CLIPBOARD,
				
			],
			
			&[ // FILE_CABINET
				
				&FILE_CABINET,
				
			],
			
			&[ // FILE_FOLDER
				
				&FILE_FOLDER,
				
			],
			
			&[ // LINKED_PAPERCLIPS
				
				&LINKED_PAPERCLIPS,
				
			],
			
			&[ // OPEN_FILE_FOLDER
				
				&OPEN_FILE_FOLDER,
				
			],
			
			&[ // PAPERCLIP
				
				&PAPERCLIP,
				
			],
			
			&[ // PUSHPIN
				
				&PUSHPIN,
				
			],
			
			&[ // ROUND_PUSHPIN
				
				&ROUND_PUSHPIN,
				
			],
			
			&[ // SCISSORS
				
				&SCISSORS,
				
			],
			
			&[ // SPIRAL_CALENDAR
				
				&SPIRAL_CALENDAR,
				
			],
			
			&[ // SPIRAL_NOTEPAD
				
				&SPIRAL_NOTEPAD,
				
			],
			
			&[ // STRAIGHT_RULER
				
				&STRAIGHT_RULER,
				
			],
			
			&[ // TEAR_OFF_CALENDAR
				
				&TEAR_OFF_CALENDAR,
				
			],
			
			&[ // TRIANGULAR_RULER
				
				&TRIANGULAR_RULER,
				
			],
			
			&[ // WASTEBASKET
				
				&WASTEBASKET,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BAR_CHART, // BAR_CHART
				
			
				
				&BRIEFCASE, // BRIEFCASE
				
			
				
				&CALENDAR, // CALENDAR
				
			
				
				&CARD_FILE_BOX, // CARD_FILE_BOX
				
			
				
				&CARD_INDEX, // CARD_INDEX
				
			
				
				&CARD_INDEX_DIVIDERS, // CARD_INDEX_DIVIDERS
				
			
				
				&CHART_DECREASING, // CHART_DECREASING
				
			
				
				&CHART_INCREASING, // CHART_INCREASING
				
			
				
				&CLIPBOARD, // CLIPBOARD
				
			
				
				&FILE_CABINET, // FILE_CABINET
				
			
				
				&FILE_FOLDER, // FILE_FOLDER
				
			
				
				&LINKED_PAPERCLIPS, // LINKED_PAPERCLIPS
				
			
				
				&OPEN_FILE_FOLDER, // OPEN_FILE_FOLDER
				
			
				
				&PAPERCLIP, // PAPERCLIP
				
			
				
				&PUSHPIN, // PUSHPIN
				
			
				
				&ROUND_PUSHPIN, // ROUND_PUSHPIN
				
			
				
				&SCISSORS, // SCISSORS
				
			
				
				&SPIRAL_CALENDAR, // SPIRAL_CALENDAR
				
			
				
				&SPIRAL_NOTEPAD, // SPIRAL_NOTEPAD
				
			
				
				&STRAIGHT_RULER, // STRAIGHT_RULER
				
			
				
				&TEAR_OFF_CALENDAR, // TEAR_OFF_CALENDAR
				
			
				
				&TRIANGULAR_RULER, // TRIANGULAR_RULER
				
			
				
				&WASTEBASKET, // WASTEBASKET
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // office
	
	/// other_object üö¨‚ö∞Ô∏è‚ö±Ô∏è
	pub mod other_object {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="cigarette üö¨"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CIGARETTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CIGARETTE); // üö¨ (`U+1F6AC`)"] #[doc="# assert_eq!(CIGARETTE.to_string().as_str(), \"üö¨\");"]
#[doc="```"]
pub static CIGARETTE :  Emoji = Emoji::new("cigarette", Version(0, 6), "üö¨"); // cigarette
		
		#[doc="coffin ‚ö∞Ô∏è"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COFFIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COFFIN); // ‚ö∞Ô∏è (`U+26B0 U+FE0F`)"] #[doc="# assert_eq!(COFFIN.to_string().as_str(), \"‚ö∞Ô∏è\");"]
#[doc="```"]
pub static COFFIN :  Emoji = Emoji::new("coffin", Version(1, 0), "‚ö∞Ô∏è"); // coffin
		
		#[doc="funeral urn ‚ö±Ô∏è"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FUNERAL_URN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FUNERAL_URN); // ‚ö±Ô∏è (`U+26B1 U+FE0F`)"] #[doc="# assert_eq!(FUNERAL_URN.to_string().as_str(), \"‚ö±Ô∏è\");"]
#[doc="```"]
pub static FUNERAL_URN :  Emoji = Emoji::new("funeral urn", Version(1, 0), "‚ö±Ô∏è"); // funeral urn
		
		#[doc="headstone ü™¶"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HEADSTONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HEADSTONE); // ü™¶ (`U+1FAA6`)"] #[doc="# assert_eq!(HEADSTONE.to_string().as_str(), \"ü™¶\");"]
#[doc="```"]
pub static HEADSTONE :  Emoji = Emoji::new("headstone", Version(13, 0), "ü™¶"); // headstone
		
		#[doc="moai üóø"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOAI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOAI); // üóø (`U+1F5FF`)"] #[doc="# assert_eq!(MOAI.to_string().as_str(), \"üóø\");"]
#[doc="```"]
pub static MOAI :  Emoji = Emoji::new("moai", Version(0, 6), "üóø"); // moai
		
		#[doc="placard ü™ß"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PLACARD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PLACARD); // ü™ß (`U+1FAA7`)"] #[doc="# assert_eq!(PLACARD.to_string().as_str(), \"ü™ß\");"]
#[doc="```"]
pub static PLACARD :  Emoji = Emoji::new("placard", Version(13, 0), "ü™ß"); // placard
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // CIGARETTE
				
				&CIGARETTE,
				
			],
			
			&[ // COFFIN
				
				&COFFIN,
				
			],
			
			&[ // FUNERAL_URN
				
				&FUNERAL_URN,
				
			],
			
			&[ // HEADSTONE
				
				&HEADSTONE,
				
			],
			
			&[ // MOAI
				
				&MOAI,
				
			],
			
			&[ // PLACARD
				
				&PLACARD,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&CIGARETTE, // CIGARETTE
				
			
				
				&COFFIN, // COFFIN
				
			
				
				&FUNERAL_URN, // FUNERAL_URN
				
			
				
				&HEADSTONE, // HEADSTONE
				
			
				
				&MOAI, // MOAI
				
			
				
				&PLACARD, // PLACARD
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // other_object
	
	/// phone üì†üì±üì≤
	pub mod phone {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="fax machine üì†"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FAX_MACHINE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FAX_MACHINE); // üì† (`U+1F4E0`)"] #[doc="# assert_eq!(FAX_MACHINE.to_string().as_str(), \"üì†\");"]
#[doc="```"]
pub static FAX_MACHINE :  Emoji = Emoji::new("fax machine", Version(0, 6), "üì†"); // fax machine
		
		#[doc="mobile phone üì±"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOBILE_PHONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOBILE_PHONE); // üì± (`U+1F4F1`)"] #[doc="# assert_eq!(MOBILE_PHONE.to_string().as_str(), \"üì±\");"]
#[doc="```"]
pub static MOBILE_PHONE :  Emoji = Emoji::new("mobile phone", Version(0, 6), "üì±"); // mobile phone
		
		#[doc="mobile phone with arrow üì≤"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOBILE_PHONE_WITH_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOBILE_PHONE_WITH_ARROW); // üì≤ (`U+1F4F2`)"] #[doc="# assert_eq!(MOBILE_PHONE_WITH_ARROW.to_string().as_str(), \"üì≤\");"]
#[doc="```"]
pub static MOBILE_PHONE_WITH_ARROW :  Emoji = Emoji::new("mobile phone with arrow", Version(0, 6), "üì≤"); // mobile phone with arrow
		
		#[doc="pager üìü"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PAGER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PAGER); // üìü (`U+1F4DF`)"] #[doc="# assert_eq!(PAGER.to_string().as_str(), \"üìü\");"]
#[doc="```"]
pub static PAGER :  Emoji = Emoji::new("pager", Version(0, 6), "üìü"); // pager
		
		#[doc="telephone ‚òéÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TELEPHONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TELEPHONE); // ‚òéÔ∏è (`U+260E U+FE0F`)"] #[doc="# assert_eq!(TELEPHONE.to_string().as_str(), \"‚òéÔ∏è\");"]
#[doc="```"]
pub static TELEPHONE :  Emoji = Emoji::new("telephone", Version(0, 6), "‚òéÔ∏è"); // telephone
		
		#[doc="telephone receiver üìû"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TELEPHONE_RECEIVER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TELEPHONE_RECEIVER); // üìû (`U+1F4DE`)"] #[doc="# assert_eq!(TELEPHONE_RECEIVER.to_string().as_str(), \"üìû\");"]
#[doc="```"]
pub static TELEPHONE_RECEIVER :  Emoji = Emoji::new("telephone receiver", Version(0, 6), "üìû"); // telephone receiver
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // FAX_MACHINE
				
				&FAX_MACHINE,
				
			],
			
			&[ // MOBILE_PHONE
				
				&MOBILE_PHONE,
				
			],
			
			&[ // MOBILE_PHONE_WITH_ARROW
				
				&MOBILE_PHONE_WITH_ARROW,
				
			],
			
			&[ // PAGER
				
				&PAGER,
				
			],
			
			&[ // TELEPHONE
				
				&TELEPHONE,
				
			],
			
			&[ // TELEPHONE_RECEIVER
				
				&TELEPHONE_RECEIVER,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&FAX_MACHINE, // FAX_MACHINE
				
			
				
				&MOBILE_PHONE, // MOBILE_PHONE
				
			
				
				&MOBILE_PHONE_WITH_ARROW, // MOBILE_PHONE_WITH_ARROW
				
			
				
				&PAGER, // PAGER
				
			
				
				&TELEPHONE, // TELEPHONE
				
			
				
				&TELEPHONE_RECEIVER, // TELEPHONE_RECEIVER
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // phone
	
	/// science ‚öóÔ∏èüß¨üî¨
	pub mod science {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="alembic ‚öóÔ∏è"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ALEMBIC;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ALEMBIC); // ‚öóÔ∏è (`U+2697 U+FE0F`)"] #[doc="# assert_eq!(ALEMBIC.to_string().as_str(), \"‚öóÔ∏è\");"]
#[doc="```"]
pub static ALEMBIC :  Emoji = Emoji::new("alembic", Version(1, 0), "‚öóÔ∏è"); // alembic
		
		#[doc="dna üß¨"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DNA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DNA); // üß¨ (`U+1F9EC`)"] #[doc="# assert_eq!(DNA.to_string().as_str(), \"üß¨\");"]
#[doc="```"]
pub static DNA :  Emoji = Emoji::new("dna", Version(11, 0), "üß¨"); // dna
		
		#[doc="microscope üî¨"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MICROSCOPE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MICROSCOPE); // üî¨ (`U+1F52C`)"] #[doc="# assert_eq!(MICROSCOPE.to_string().as_str(), \"üî¨\");"]
#[doc="```"]
pub static MICROSCOPE :  Emoji = Emoji::new("microscope", Version(1, 0), "üî¨"); // microscope
		
		#[doc="petri dish üß´"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PETRI_DISH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PETRI_DISH); // üß´ (`U+1F9EB`)"] #[doc="# assert_eq!(PETRI_DISH.to_string().as_str(), \"üß´\");"]
#[doc="```"]
pub static PETRI_DISH :  Emoji = Emoji::new("petri dish", Version(11, 0), "üß´"); // petri dish
		
		#[doc="satellite antenna üì°"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SATELLITE_ANTENNA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SATELLITE_ANTENNA); // üì° (`U+1F4E1`)"] #[doc="# assert_eq!(SATELLITE_ANTENNA.to_string().as_str(), \"üì°\");"]
#[doc="```"]
pub static SATELLITE_ANTENNA :  Emoji = Emoji::new("satellite antenna", Version(0, 6), "üì°"); // satellite antenna
		
		#[doc="telescope üî≠"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TELESCOPE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TELESCOPE); // üî≠ (`U+1F52D`)"] #[doc="# assert_eq!(TELESCOPE.to_string().as_str(), \"üî≠\");"]
#[doc="```"]
pub static TELESCOPE :  Emoji = Emoji::new("telescope", Version(1, 0), "üî≠"); // telescope
		
		#[doc="test tube üß™"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TEST_TUBE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TEST_TUBE); // üß™ (`U+1F9EA`)"] #[doc="# assert_eq!(TEST_TUBE.to_string().as_str(), \"üß™\");"]
#[doc="```"]
pub static TEST_TUBE :  Emoji = Emoji::new("test tube", Version(11, 0), "üß™"); // test tube
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // ALEMBIC
				
				&ALEMBIC,
				
			],
			
			&[ // DNA
				
				&DNA,
				
			],
			
			&[ // MICROSCOPE
				
				&MICROSCOPE,
				
			],
			
			&[ // PETRI_DISH
				
				&PETRI_DISH,
				
			],
			
			&[ // SATELLITE_ANTENNA
				
				&SATELLITE_ANTENNA,
				
			],
			
			&[ // TELESCOPE
				
				&TELESCOPE,
				
			],
			
			&[ // TEST_TUBE
				
				&TEST_TUBE,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&ALEMBIC, // ALEMBIC
				
			
				
				&DNA, // DNA
				
			
				
				&MICROSCOPE, // MICROSCOPE
				
			
				
				&PETRI_DISH, // PETRI_DISH
				
			
				
				&SATELLITE_ANTENNA, // SATELLITE_ANTENNA
				
			
				
				&TELESCOPE, // TELESCOPE
				
			
				
				&TEST_TUBE, // TEST_TUBE
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // science
	
	/// sound üîîüîïüì¢
	pub mod sound {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="bell üîî"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BELL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BELL); // üîî (`U+1F514`)"] #[doc="# assert_eq!(BELL.to_string().as_str(), \"üîî\");"]
#[doc="```"]
pub static BELL :  Emoji = Emoji::new("bell", Version(0, 6), "üîî"); // bell
		
		#[doc="bell with slash üîï"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BELL_WITH_SLASH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BELL_WITH_SLASH); // üîï (`U+1F515`)"] #[doc="# assert_eq!(BELL_WITH_SLASH.to_string().as_str(), \"üîï\");"]
#[doc="```"]
pub static BELL_WITH_SLASH :  Emoji = Emoji::new("bell with slash", Version(1, 0), "üîï"); // bell with slash
		
		#[doc="loudspeaker üì¢"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LOUDSPEAKER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LOUDSPEAKER); // üì¢ (`U+1F4E2`)"] #[doc="# assert_eq!(LOUDSPEAKER.to_string().as_str(), \"üì¢\");"]
#[doc="```"]
pub static LOUDSPEAKER :  Emoji = Emoji::new("loudspeaker", Version(0, 6), "üì¢"); // loudspeaker
		
		#[doc="megaphone üì£"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MEGAPHONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MEGAPHONE); // üì£ (`U+1F4E3`)"] #[doc="# assert_eq!(MEGAPHONE.to_string().as_str(), \"üì£\");"]
#[doc="```"]
pub static MEGAPHONE :  Emoji = Emoji::new("megaphone", Version(0, 6), "üì£"); // megaphone
		
		#[doc="muted speaker üîá"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MUTED_SPEAKER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MUTED_SPEAKER); // üîá (`U+1F507`)"] #[doc="# assert_eq!(MUTED_SPEAKER.to_string().as_str(), \"üîá\");"]
#[doc="```"]
pub static MUTED_SPEAKER :  Emoji = Emoji::new("muted speaker", Version(1, 0), "üîá"); // muted speaker
		
		#[doc="postal horn üìØ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POSTAL_HORN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POSTAL_HORN); // üìØ (`U+1F4EF`)"] #[doc="# assert_eq!(POSTAL_HORN.to_string().as_str(), \"üìØ\");"]
#[doc="```"]
pub static POSTAL_HORN :  Emoji = Emoji::new("postal horn", Version(1, 0), "üìØ"); // postal horn
		
		#[doc="speaker high volume üîä"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPEAKER_HIGH_VOLUME;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPEAKER_HIGH_VOLUME); // üîä (`U+1F50A`)"] #[doc="# assert_eq!(SPEAKER_HIGH_VOLUME.to_string().as_str(), \"üîä\");"]
#[doc="```"]
pub static SPEAKER_HIGH_VOLUME :  Emoji = Emoji::new("speaker high volume", Version(0, 6), "üîä"); // speaker high volume
		
		#[doc="speaker low volume üîà"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPEAKER_LOW_VOLUME;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPEAKER_LOW_VOLUME); // üîà (`U+1F508`)"] #[doc="# assert_eq!(SPEAKER_LOW_VOLUME.to_string().as_str(), \"üîà\");"]
#[doc="```"]
pub static SPEAKER_LOW_VOLUME :  Emoji = Emoji::new("speaker low volume", Version(0, 7), "üîà"); // speaker low volume
		
		#[doc="speaker medium volume üîâ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPEAKER_MEDIUM_VOLUME;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPEAKER_MEDIUM_VOLUME); // üîâ (`U+1F509`)"] #[doc="# assert_eq!(SPEAKER_MEDIUM_VOLUME.to_string().as_str(), \"üîâ\");"]
#[doc="```"]
pub static SPEAKER_MEDIUM_VOLUME :  Emoji = Emoji::new("speaker medium volume", Version(1, 0), "üîâ"); // speaker medium volume
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BELL
				
				&BELL,
				
			],
			
			&[ // BELL_WITH_SLASH
				
				&BELL_WITH_SLASH,
				
			],
			
			&[ // LOUDSPEAKER
				
				&LOUDSPEAKER,
				
			],
			
			&[ // MEGAPHONE
				
				&MEGAPHONE,
				
			],
			
			&[ // MUTED_SPEAKER
				
				&MUTED_SPEAKER,
				
			],
			
			&[ // POSTAL_HORN
				
				&POSTAL_HORN,
				
			],
			
			&[ // SPEAKER_HIGH_VOLUME
				
				&SPEAKER_HIGH_VOLUME,
				
			],
			
			&[ // SPEAKER_LOW_VOLUME
				
				&SPEAKER_LOW_VOLUME,
				
			],
			
			&[ // SPEAKER_MEDIUM_VOLUME
				
				&SPEAKER_MEDIUM_VOLUME,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BELL, // BELL
				
			
				
				&BELL_WITH_SLASH, // BELL_WITH_SLASH
				
			
				
				&LOUDSPEAKER, // LOUDSPEAKER
				
			
				
				&MEGAPHONE, // MEGAPHONE
				
			
				
				&MUTED_SPEAKER, // MUTED_SPEAKER
				
			
				
				&POSTAL_HORN, // POSTAL_HORN
				
			
				
				&SPEAKER_HIGH_VOLUME, // SPEAKER_HIGH_VOLUME
				
			
				
				&SPEAKER_LOW_VOLUME, // SPEAKER_LOW_VOLUME
				
			
				
				&SPEAKER_MEDIUM_VOLUME, // SPEAKER_MEDIUM_VOLUME
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // sound
	
	/// tool ü™ì‚öñÔ∏èü™É
	pub mod tool {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="axe ü™ì"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::AXE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", AXE); // ü™ì (`U+1FA93`)"] #[doc="# assert_eq!(AXE.to_string().as_str(), \"ü™ì\");"]
#[doc="```"]
pub static AXE :  Emoji = Emoji::new("axe", Version(12, 0), "ü™ì"); // axe
		
		#[doc="balance scale ‚öñÔ∏è"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BALANCE_SCALE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BALANCE_SCALE); // ‚öñÔ∏è (`U+2696 U+FE0F`)"] #[doc="# assert_eq!(BALANCE_SCALE.to_string().as_str(), \"‚öñÔ∏è\");"]
#[doc="```"]
pub static BALANCE_SCALE :  Emoji = Emoji::new("balance scale", Version(1, 0), "‚öñÔ∏è"); // balance scale
		
		#[doc="boomerang ü™É"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BOOMERANG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BOOMERANG); // ü™É (`U+1FA83`)"] #[doc="# assert_eq!(BOOMERANG.to_string().as_str(), \"ü™É\");"]
#[doc="```"]
pub static BOOMERANG :  Emoji = Emoji::new("boomerang", Version(13, 0), "ü™É"); // boomerang
		
		#[doc="bow and arrow üèπ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BOW_AND_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BOW_AND_ARROW); // üèπ (`U+1F3F9`)"] #[doc="# assert_eq!(BOW_AND_ARROW.to_string().as_str(), \"üèπ\");"]
#[doc="```"]
pub static BOW_AND_ARROW :  Emoji = Emoji::new("bow and arrow", Version(1, 0), "üèπ"); // bow and arrow
		
		#[doc="carpentry saw ü™ö"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CARPENTRY_SAW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CARPENTRY_SAW); // ü™ö (`U+1FA9A`)"] #[doc="# assert_eq!(CARPENTRY_SAW.to_string().as_str(), \"ü™ö\");"]
#[doc="```"]
pub static CARPENTRY_SAW :  Emoji = Emoji::new("carpentry saw", Version(13, 0), "ü™ö"); // carpentry saw
		
		#[doc="chains ‚õìÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHAINS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHAINS); // ‚õìÔ∏è (`U+26D3 U+FE0F`)"] #[doc="# assert_eq!(CHAINS.to_string().as_str(), \"‚õìÔ∏è\");"]
#[doc="```"]
pub static CHAINS :  Emoji = Emoji::new("chains", Version(0, 7), "‚õìÔ∏è"); // chains
		
		#[doc="clamp üóúÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLAMP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLAMP); // üóúÔ∏è (`U+1F5DC U+FE0F`)"] #[doc="# assert_eq!(CLAMP.to_string().as_str(), \"üóúÔ∏è\");"]
#[doc="```"]
pub static CLAMP :  Emoji = Emoji::new("clamp", Version(0, 7), "üóúÔ∏è"); // clamp
		
		#[doc="crossed swords ‚öîÔ∏è"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CROSSED_SWORDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CROSSED_SWORDS); // ‚öîÔ∏è (`U+2694 U+FE0F`)"] #[doc="# assert_eq!(CROSSED_SWORDS.to_string().as_str(), \"‚öîÔ∏è\");"]
#[doc="```"]
pub static CROSSED_SWORDS :  Emoji = Emoji::new("crossed swords", Version(1, 0), "‚öîÔ∏è"); // crossed swords
		
		#[doc="dagger üó°Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DAGGER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DAGGER); // üó°Ô∏è (`U+1F5E1 U+FE0F`)"] #[doc="# assert_eq!(DAGGER.to_string().as_str(), \"üó°Ô∏è\");"]
#[doc="```"]
pub static DAGGER :  Emoji = Emoji::new("dagger", Version(0, 7), "üó°Ô∏è"); // dagger
		
		#[doc="gear ‚öôÔ∏è"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GEAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GEAR); // ‚öôÔ∏è (`U+2699 U+FE0F`)"] #[doc="# assert_eq!(GEAR.to_string().as_str(), \"‚öôÔ∏è\");"]
#[doc="```"]
pub static GEAR :  Emoji = Emoji::new("gear", Version(1, 0), "‚öôÔ∏è"); // gear
		
		#[doc="hammer üî®"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HAMMER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HAMMER); // üî® (`U+1F528`)"] #[doc="# assert_eq!(HAMMER.to_string().as_str(), \"üî®\");"]
#[doc="```"]
pub static HAMMER :  Emoji = Emoji::new("hammer", Version(0, 6), "üî®"); // hammer
		
		#[doc="hammer and pick ‚öíÔ∏è"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HAMMER_AND_PICK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HAMMER_AND_PICK); // ‚öíÔ∏è (`U+2692 U+FE0F`)"] #[doc="# assert_eq!(HAMMER_AND_PICK.to_string().as_str(), \"‚öíÔ∏è\");"]
#[doc="```"]
pub static HAMMER_AND_PICK :  Emoji = Emoji::new("hammer and pick", Version(1, 0), "‚öíÔ∏è"); // hammer and pick
		
		#[doc="hammer and wrench üõ†Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HAMMER_AND_WRENCH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HAMMER_AND_WRENCH); // üõ†Ô∏è (`U+1F6E0 U+FE0F`)"] #[doc="# assert_eq!(HAMMER_AND_WRENCH.to_string().as_str(), \"üõ†Ô∏è\");"]
#[doc="```"]
pub static HAMMER_AND_WRENCH :  Emoji = Emoji::new("hammer and wrench", Version(0, 7), "üõ†Ô∏è"); // hammer and wrench
		
		#[doc="hook ü™ù"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOOK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOOK); // ü™ù (`U+1FA9D`)"] #[doc="# assert_eq!(HOOK.to_string().as_str(), \"ü™ù\");"]
#[doc="```"]
pub static HOOK :  Emoji = Emoji::new("hook", Version(13, 0), "ü™ù"); // hook
		
		#[doc="ladder ü™ú"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LADDER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LADDER); // ü™ú (`U+1FA9C`)"] #[doc="# assert_eq!(LADDER.to_string().as_str(), \"ü™ú\");"]
#[doc="```"]
pub static LADDER :  Emoji = Emoji::new("ladder", Version(13, 0), "ü™ú"); // ladder
		
		#[doc="link üîó"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LINK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LINK); // üîó (`U+1F517`)"] #[doc="# assert_eq!(LINK.to_string().as_str(), \"üîó\");"]
#[doc="```"]
pub static LINK :  Emoji = Emoji::new("link", Version(0, 6), "üîó"); // link
		
		#[doc="magnet üß≤"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MAGNET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MAGNET); // üß≤ (`U+1F9F2`)"] #[doc="# assert_eq!(MAGNET.to_string().as_str(), \"üß≤\");"]
#[doc="```"]
pub static MAGNET :  Emoji = Emoji::new("magnet", Version(11, 0), "üß≤"); // magnet
		
		#[doc="nut and bolt üî©"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NUT_AND_BOLT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NUT_AND_BOLT); // üî© (`U+1F529`)"] #[doc="# assert_eq!(NUT_AND_BOLT.to_string().as_str(), \"üî©\");"]
#[doc="```"]
pub static NUT_AND_BOLT :  Emoji = Emoji::new("nut and bolt", Version(0, 6), "üî©"); // nut and bolt
		
		#[doc="pick ‚õèÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PICK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PICK); // ‚õèÔ∏è (`U+26CF U+FE0F`)"] #[doc="# assert_eq!(PICK.to_string().as_str(), \"‚õèÔ∏è\");"]
#[doc="```"]
pub static PICK :  Emoji = Emoji::new("pick", Version(0, 7), "‚õèÔ∏è"); // pick
		
		#[doc="screwdriver ü™õ"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SCREWDRIVER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SCREWDRIVER); // ü™õ (`U+1FA9B`)"] #[doc="# assert_eq!(SCREWDRIVER.to_string().as_str(), \"ü™õ\");"]
#[doc="```"]
pub static SCREWDRIVER :  Emoji = Emoji::new("screwdriver", Version(13, 0), "ü™õ"); // screwdriver
		
		#[doc="shield üõ°Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHIELD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHIELD); // üõ°Ô∏è (`U+1F6E1 U+FE0F`)"] #[doc="# assert_eq!(SHIELD.to_string().as_str(), \"üõ°Ô∏è\");"]
#[doc="```"]
pub static SHIELD :  Emoji = Emoji::new("shield", Version(0, 7), "üõ°Ô∏è"); // shield
		
		#[doc="toolbox üß∞"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TOOLBOX;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TOOLBOX); // üß∞ (`U+1F9F0`)"] #[doc="# assert_eq!(TOOLBOX.to_string().as_str(), \"üß∞\");"]
#[doc="```"]
pub static TOOLBOX :  Emoji = Emoji::new("toolbox", Version(11, 0), "üß∞"); // toolbox
		
		#[doc="water pistol üî´"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WATER_PISTOL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WATER_PISTOL); // üî´ (`U+1F52B`)"] #[doc="# assert_eq!(WATER_PISTOL.to_string().as_str(), \"üî´\");"]
#[doc="```"]
pub static WATER_PISTOL :  Emoji = Emoji::new("water pistol", Version(0, 6), "üî´"); // water pistol
		
		#[doc="white cane ü¶Ø"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHITE_CANE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHITE_CANE); // ü¶Ø (`U+1F9AF`)"] #[doc="# assert_eq!(WHITE_CANE.to_string().as_str(), \"ü¶Ø\");"]
#[doc="```"]
pub static WHITE_CANE :  Emoji = Emoji::new("white cane", Version(12, 0), "ü¶Ø"); // white cane
		
		#[doc="wrench üîß"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WRENCH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WRENCH); // üîß (`U+1F527`)"] #[doc="# assert_eq!(WRENCH.to_string().as_str(), \"üîß\");"]
#[doc="```"]
pub static WRENCH :  Emoji = Emoji::new("wrench", Version(0, 6), "üîß"); // wrench
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // AXE
				
				&AXE,
				
			],
			
			&[ // BALANCE_SCALE
				
				&BALANCE_SCALE,
				
			],
			
			&[ // BOOMERANG
				
				&BOOMERANG,
				
			],
			
			&[ // BOW_AND_ARROW
				
				&BOW_AND_ARROW,
				
			],
			
			&[ // CARPENTRY_SAW
				
				&CARPENTRY_SAW,
				
			],
			
			&[ // CHAINS
				
				&CHAINS,
				
			],
			
			&[ // CLAMP
				
				&CLAMP,
				
			],
			
			&[ // CROSSED_SWORDS
				
				&CROSSED_SWORDS,
				
			],
			
			&[ // DAGGER
				
				&DAGGER,
				
			],
			
			&[ // GEAR
				
				&GEAR,
				
			],
			
			&[ // HAMMER
				
				&HAMMER,
				
			],
			
			&[ // HAMMER_AND_PICK
				
				&HAMMER_AND_PICK,
				
			],
			
			&[ // HAMMER_AND_WRENCH
				
				&HAMMER_AND_WRENCH,
				
			],
			
			&[ // HOOK
				
				&HOOK,
				
			],
			
			&[ // LADDER
				
				&LADDER,
				
			],
			
			&[ // LINK
				
				&LINK,
				
			],
			
			&[ // MAGNET
				
				&MAGNET,
				
			],
			
			&[ // NUT_AND_BOLT
				
				&NUT_AND_BOLT,
				
			],
			
			&[ // PICK
				
				&PICK,
				
			],
			
			&[ // SCREWDRIVER
				
				&SCREWDRIVER,
				
			],
			
			&[ // SHIELD
				
				&SHIELD,
				
			],
			
			&[ // TOOLBOX
				
				&TOOLBOX,
				
			],
			
			&[ // WATER_PISTOL
				
				&WATER_PISTOL,
				
			],
			
			&[ // WHITE_CANE
				
				&WHITE_CANE,
				
			],
			
			&[ // WRENCH
				
				&WRENCH,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&AXE, // AXE
				
			
				
				&BALANCE_SCALE, // BALANCE_SCALE
				
			
				
				&BOOMERANG, // BOOMERANG
				
			
				
				&BOW_AND_ARROW, // BOW_AND_ARROW
				
			
				
				&CARPENTRY_SAW, // CARPENTRY_SAW
				
			
				
				&CHAINS, // CHAINS
				
			
				
				&CLAMP, // CLAMP
				
			
				
				&CROSSED_SWORDS, // CROSSED_SWORDS
				
			
				
				&DAGGER, // DAGGER
				
			
				
				&GEAR, // GEAR
				
			
				
				&HAMMER, // HAMMER
				
			
				
				&HAMMER_AND_PICK, // HAMMER_AND_PICK
				
			
				
				&HAMMER_AND_WRENCH, // HAMMER_AND_WRENCH
				
			
				
				&HOOK, // HOOK
				
			
				
				&LADDER, // LADDER
				
			
				
				&LINK, // LINK
				
			
				
				&MAGNET, // MAGNET
				
			
				
				&NUT_AND_BOLT, // NUT_AND_BOLT
				
			
				
				&PICK, // PICK
				
			
				
				&SCREWDRIVER, // SCREWDRIVER
				
			
				
				&SHIELD, // SHIELD
				
			
				
				&TOOLBOX, // TOOLBOX
				
			
				
				&WATER_PISTOL, // WATER_PISTOL
				
			
				
				&WHITE_CANE, // WHITE_CANE
				
			
				
				&WRENCH, // WRENCH
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // tool
	
	/// writing ‚úíÔ∏èüñçÔ∏èüñãÔ∏è
	pub mod writing {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="black nib ‚úíÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLACK_NIB;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLACK_NIB); // ‚úíÔ∏è (`U+2712 U+FE0F`)"] #[doc="# assert_eq!(BLACK_NIB.to_string().as_str(), \"‚úíÔ∏è\");"]
#[doc="```"]
pub static BLACK_NIB :  Emoji = Emoji::new("black nib", Version(0, 6), "‚úíÔ∏è"); // black nib
		
		#[doc="crayon üñçÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CRAYON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CRAYON); // üñçÔ∏è (`U+1F58D U+FE0F`)"] #[doc="# assert_eq!(CRAYON.to_string().as_str(), \"üñçÔ∏è\");"]
#[doc="```"]
pub static CRAYON :  Emoji = Emoji::new("crayon", Version(0, 7), "üñçÔ∏è"); // crayon
		
		#[doc="fountain pen üñãÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FOUNTAIN_PEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FOUNTAIN_PEN); // üñãÔ∏è (`U+1F58B U+FE0F`)"] #[doc="# assert_eq!(FOUNTAIN_PEN.to_string().as_str(), \"üñãÔ∏è\");"]
#[doc="```"]
pub static FOUNTAIN_PEN :  Emoji = Emoji::new("fountain pen", Version(0, 7), "üñãÔ∏è"); // fountain pen
		
		#[doc="memo üìù"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MEMO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MEMO); // üìù (`U+1F4DD`)"] #[doc="# assert_eq!(MEMO.to_string().as_str(), \"üìù\");"]
#[doc="```"]
pub static MEMO :  Emoji = Emoji::new("memo", Version(0, 6), "üìù"); // memo
		
		#[doc="paintbrush üñåÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PAINTBRUSH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PAINTBRUSH); // üñåÔ∏è (`U+1F58C U+FE0F`)"] #[doc="# assert_eq!(PAINTBRUSH.to_string().as_str(), \"üñåÔ∏è\");"]
#[doc="```"]
pub static PAINTBRUSH :  Emoji = Emoji::new("paintbrush", Version(0, 7), "üñåÔ∏è"); // paintbrush
		
		#[doc="pen üñäÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PEN); // üñäÔ∏è (`U+1F58A U+FE0F`)"] #[doc="# assert_eq!(PEN.to_string().as_str(), \"üñäÔ∏è\");"]
#[doc="```"]
pub static PEN :  Emoji = Emoji::new("pen", Version(0, 7), "üñäÔ∏è"); // pen
		
		#[doc="pencil ‚úèÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PENCIL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PENCIL); // ‚úèÔ∏è (`U+270F U+FE0F`)"] #[doc="# assert_eq!(PENCIL.to_string().as_str(), \"‚úèÔ∏è\");"]
#[doc="```"]
pub static PENCIL :  Emoji = Emoji::new("pencil", Version(0, 6), "‚úèÔ∏è"); // pencil
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BLACK_NIB
				
				&BLACK_NIB,
				
			],
			
			&[ // CRAYON
				
				&CRAYON,
				
			],
			
			&[ // FOUNTAIN_PEN
				
				&FOUNTAIN_PEN,
				
			],
			
			&[ // MEMO
				
				&MEMO,
				
			],
			
			&[ // PAINTBRUSH
				
				&PAINTBRUSH,
				
			],
			
			&[ // PEN
				
				&PEN,
				
			],
			
			&[ // PENCIL
				
				&PENCIL,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BLACK_NIB, // BLACK_NIB
				
			
				
				&CRAYON, // CRAYON
				
			
				
				&FOUNTAIN_PEN, // FOUNTAIN_PEN
				
			
				
				&MEMO, // MEMO
				
			
				
				&PAINTBRUSH, // PAINTBRUSH
				
			
				
				&PEN, // PEN
				
			
				
				&PENCIL, // PENCIL
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // writing
	


	// Emoji iterators

	/// Returns an iterator over all emoji variants of these subgroups grouped by base emojis
	pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
		core::iter::empty()
		
			.chain(book_paper::all_variants())
		
			.chain(clothing::all_variants())
		
			.chain(computer::all_variants())
		
			.chain(household::all_variants())
		
			.chain(light_and_video::all_variants())
		
			.chain(lock::all_variants())
		
			.chain(mail::all_variants())
		
			.chain(medical::all_variants())
		
			.chain(money::all_variants())
		
			.chain(music::all_variants())
		
			.chain(musical_instrument::all_variants())
		
			.chain(office::all_variants())
		
			.chain(other_object::all_variants())
		
			.chain(phone::all_variants())
		
			.chain(science::all_variants())
		
			.chain(sound::all_variants())
		
			.chain(tool::all_variants())
		
			.chain(writing::all_variants())
		
	}

	/// Returns an iterator over all base emojis of these subgroups (i.e. one for each static)
	pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
		core::iter::empty()
		
			.chain(book_paper::base_emojis())
		
			.chain(clothing::base_emojis())
		
			.chain(computer::base_emojis())
		
			.chain(household::base_emojis())
		
			.chain(light_and_video::base_emojis())
		
			.chain(lock::base_emojis())
		
			.chain(mail::base_emojis())
		
			.chain(medical::base_emojis())
		
			.chain(money::base_emojis())
		
			.chain(music::base_emojis())
		
			.chain(musical_instrument::base_emojis())
		
			.chain(office::base_emojis())
		
			.chain(other_object::base_emojis())
		
			.chain(phone::base_emojis())
		
			.chain(science::base_emojis())
		
			.chain(sound::base_emojis())
		
			.chain(tool::base_emojis())
		
			.chain(writing::base_emojis())
		
	}

} // objects

/// people_and_body ü´Äüíëü§õ
pub mod people_and_body {
	use crate::emojis::Emoji;

	
	/// body_parts ü´Äü¶¥üß†
	pub mod body_parts {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="anatomical heart ü´Ä"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ANATOMICAL_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ANATOMICAL_HEART); // ü´Ä (`U+1FAC0`)"] #[doc="# assert_eq!(ANATOMICAL_HEART.to_string().as_str(), \"ü´Ä\");"]
#[doc="```"]
pub static ANATOMICAL_HEART :  Emoji = Emoji::new("anatomical heart", Version(13, 0), "ü´Ä"); // anatomical heart
		
		#[doc="bone ü¶¥"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BONE); // ü¶¥ (`U+1F9B4`)"] #[doc="# assert_eq!(BONE.to_string().as_str(), \"ü¶¥\");"]
#[doc="```"]
pub static BONE :  Emoji = Emoji::new("bone", Version(11, 0), "ü¶¥"); // bone
		
		#[doc="brain üß†"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BRAIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BRAIN); // üß† (`U+1F9E0`)"] #[doc="# assert_eq!(BRAIN.to_string().as_str(), \"üß†\");"]
#[doc="```"]
pub static BRAIN :  Emoji = Emoji::new("brain", Version(5, 0), "üß†"); // brain
		
		#[doc="ear üëÇ"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EAR); // üëÇ (`U+1F442`)"] #[doc="# assert_eq!(EAR.to_string().as_str(), \"üëÇ\");"]#[doc="println!(\"{}\", EAR.tone(Tone::Light)); // üëÇüèª (`U+1F442 U+1F3FB`)"] #[doc="# assert_eq!(EAR.tone(Tone::Light).to_string().as_str(), \"üëÇüèª\");"]#[doc="println!(\"{}\", EAR.tone(Tone::MediumLight)); // üëÇüèº (`U+1F442 U+1F3FC`)"] #[doc="# assert_eq!(EAR.tone(Tone::MediumLight).to_string().as_str(), \"üëÇüèº\");"]#[doc="println!(\"{}\", EAR.tone(Tone::Medium)); // üëÇüèΩ (`U+1F442 U+1F3FD`)"] #[doc="# assert_eq!(EAR.tone(Tone::Medium).to_string().as_str(), \"üëÇüèΩ\");"]#[doc="println!(\"{}\", EAR.tone(Tone::MediumDark)); // üëÇüèæ (`U+1F442 U+1F3FE`)"] #[doc="# assert_eq!(EAR.tone(Tone::MediumDark).to_string().as_str(), \"üëÇüèæ\");"]#[doc="println!(\"{}\", EAR.tone(Tone::Dark)); // üëÇüèø (`U+1F442 U+1F3FF`)"] #[doc="# assert_eq!(EAR.tone(Tone::Dark).to_string().as_str(), \"üëÇüèø\");"]
#[doc="```"]
pub static EAR: With<Tone,Emoji> = With::new(Emoji::new("ear", Version(0, 6),"üëÇ"), 
	&[
		Emoji::new("ear: light skin tone", Version(1, 0),"üëÇüèª"),
	Emoji::new("ear: medium-light skin tone", Version(1, 0),"üëÇüèº"),
	Emoji::new("ear: medium skin tone", Version(1, 0),"üëÇüèΩ"),
	Emoji::new("ear: medium-dark skin tone", Version(1, 0),"üëÇüèæ"),
	Emoji::new("ear: dark skin tone", Version(1, 0),"üëÇüèø"),
	]);

		
		#[doc="ear with hearing aid ü¶ª"]#[doc=""]#[doc="Since E12.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EAR_WITH_HEARING_AID;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EAR_WITH_HEARING_AID); // ü¶ª (`U+1F9BB`)"] #[doc="# assert_eq!(EAR_WITH_HEARING_AID.to_string().as_str(), \"ü¶ª\");"]#[doc="println!(\"{}\", EAR_WITH_HEARING_AID.tone(Tone::Light)); // ü¶ªüèª (`U+1F9BB U+1F3FB`)"] #[doc="# assert_eq!(EAR_WITH_HEARING_AID.tone(Tone::Light).to_string().as_str(), \"ü¶ªüèª\");"]#[doc="println!(\"{}\", EAR_WITH_HEARING_AID.tone(Tone::MediumLight)); // ü¶ªüèº (`U+1F9BB U+1F3FC`)"] #[doc="# assert_eq!(EAR_WITH_HEARING_AID.tone(Tone::MediumLight).to_string().as_str(), \"ü¶ªüèº\");"]#[doc="println!(\"{}\", EAR_WITH_HEARING_AID.tone(Tone::Medium)); // ü¶ªüèΩ (`U+1F9BB U+1F3FD`)"] #[doc="# assert_eq!(EAR_WITH_HEARING_AID.tone(Tone::Medium).to_string().as_str(), \"ü¶ªüèΩ\");"]#[doc="println!(\"{}\", EAR_WITH_HEARING_AID.tone(Tone::MediumDark)); // ü¶ªüèæ (`U+1F9BB U+1F3FE`)"] #[doc="# assert_eq!(EAR_WITH_HEARING_AID.tone(Tone::MediumDark).to_string().as_str(), \"ü¶ªüèæ\");"]#[doc="println!(\"{}\", EAR_WITH_HEARING_AID.tone(Tone::Dark)); // ü¶ªüèø (`U+1F9BB U+1F3FF`)"] #[doc="# assert_eq!(EAR_WITH_HEARING_AID.tone(Tone::Dark).to_string().as_str(), \"ü¶ªüèø\");"]
#[doc="```"]
pub static EAR_WITH_HEARING_AID: With<Tone,Emoji> = With::new(Emoji::new("ear with hearing aid", Version(12, 0),"ü¶ª"), 
	&[
		Emoji::new("ear with hearing aid: light skin tone", Version(12, 0),"ü¶ªüèª"),
	Emoji::new("ear with hearing aid: medium-light skin tone", Version(12, 0),"ü¶ªüèº"),
	Emoji::new("ear with hearing aid: medium skin tone", Version(12, 0),"ü¶ªüèΩ"),
	Emoji::new("ear with hearing aid: medium-dark skin tone", Version(12, 0),"ü¶ªüèæ"),
	Emoji::new("ear with hearing aid: dark skin tone", Version(12, 0),"ü¶ªüèø"),
	]);

		
		#[doc="eye üëÅÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EYE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EYE); // üëÅÔ∏è (`U+1F441 U+FE0F`)"] #[doc="# assert_eq!(EYE.to_string().as_str(), \"üëÅÔ∏è\");"]
#[doc="```"]
pub static EYE :  Emoji = Emoji::new("eye", Version(0, 7), "üëÅÔ∏è"); // eye
		
		#[doc="eyes üëÄ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EYES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EYES); // üëÄ (`U+1F440`)"] #[doc="# assert_eq!(EYES.to_string().as_str(), \"üëÄ\");"]
#[doc="```"]
pub static EYES :  Emoji = Emoji::new("eyes", Version(0, 6), "üëÄ"); // eyes
		
		#[doc="flexed biceps üí™"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLEXED_BICEPS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLEXED_BICEPS); // üí™ (`U+1F4AA`)"] #[doc="# assert_eq!(FLEXED_BICEPS.to_string().as_str(), \"üí™\");"]#[doc="println!(\"{}\", FLEXED_BICEPS.tone(Tone::Light)); // üí™üèª (`U+1F4AA U+1F3FB`)"] #[doc="# assert_eq!(FLEXED_BICEPS.tone(Tone::Light).to_string().as_str(), \"üí™üèª\");"]#[doc="println!(\"{}\", FLEXED_BICEPS.tone(Tone::MediumLight)); // üí™üèº (`U+1F4AA U+1F3FC`)"] #[doc="# assert_eq!(FLEXED_BICEPS.tone(Tone::MediumLight).to_string().as_str(), \"üí™üèº\");"]#[doc="println!(\"{}\", FLEXED_BICEPS.tone(Tone::Medium)); // üí™üèΩ (`U+1F4AA U+1F3FD`)"] #[doc="# assert_eq!(FLEXED_BICEPS.tone(Tone::Medium).to_string().as_str(), \"üí™üèΩ\");"]#[doc="println!(\"{}\", FLEXED_BICEPS.tone(Tone::MediumDark)); // üí™üèæ (`U+1F4AA U+1F3FE`)"] #[doc="# assert_eq!(FLEXED_BICEPS.tone(Tone::MediumDark).to_string().as_str(), \"üí™üèæ\");"]#[doc="println!(\"{}\", FLEXED_BICEPS.tone(Tone::Dark)); // üí™üèø (`U+1F4AA U+1F3FF`)"] #[doc="# assert_eq!(FLEXED_BICEPS.tone(Tone::Dark).to_string().as_str(), \"üí™üèø\");"]
#[doc="```"]
pub static FLEXED_BICEPS: With<Tone,Emoji> = With::new(Emoji::new("flexed biceps", Version(0, 6),"üí™"), 
	&[
		Emoji::new("flexed biceps: light skin tone", Version(1, 0),"üí™üèª"),
	Emoji::new("flexed biceps: medium-light skin tone", Version(1, 0),"üí™üèº"),
	Emoji::new("flexed biceps: medium skin tone", Version(1, 0),"üí™üèΩ"),
	Emoji::new("flexed biceps: medium-dark skin tone", Version(1, 0),"üí™üèæ"),
	Emoji::new("flexed biceps: dark skin tone", Version(1, 0),"üí™üèø"),
	]);

		
		#[doc="foot ü¶∂"]#[doc=""]#[doc="Since E11.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FOOT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FOOT); // ü¶∂ (`U+1F9B6`)"] #[doc="# assert_eq!(FOOT.to_string().as_str(), \"ü¶∂\");"]#[doc="println!(\"{}\", FOOT.tone(Tone::Light)); // ü¶∂üèª (`U+1F9B6 U+1F3FB`)"] #[doc="# assert_eq!(FOOT.tone(Tone::Light).to_string().as_str(), \"ü¶∂üèª\");"]#[doc="println!(\"{}\", FOOT.tone(Tone::MediumLight)); // ü¶∂üèº (`U+1F9B6 U+1F3FC`)"] #[doc="# assert_eq!(FOOT.tone(Tone::MediumLight).to_string().as_str(), \"ü¶∂üèº\");"]#[doc="println!(\"{}\", FOOT.tone(Tone::Medium)); // ü¶∂üèΩ (`U+1F9B6 U+1F3FD`)"] #[doc="# assert_eq!(FOOT.tone(Tone::Medium).to_string().as_str(), \"ü¶∂üèΩ\");"]#[doc="println!(\"{}\", FOOT.tone(Tone::MediumDark)); // ü¶∂üèæ (`U+1F9B6 U+1F3FE`)"] #[doc="# assert_eq!(FOOT.tone(Tone::MediumDark).to_string().as_str(), \"ü¶∂üèæ\");"]#[doc="println!(\"{}\", FOOT.tone(Tone::Dark)); // ü¶∂üèø (`U+1F9B6 U+1F3FF`)"] #[doc="# assert_eq!(FOOT.tone(Tone::Dark).to_string().as_str(), \"ü¶∂üèø\");"]
#[doc="```"]
pub static FOOT: With<Tone,Emoji> = With::new(Emoji::new("foot", Version(11, 0),"ü¶∂"), 
	&[
		Emoji::new("foot: light skin tone", Version(11, 0),"ü¶∂üèª"),
	Emoji::new("foot: medium-light skin tone", Version(11, 0),"ü¶∂üèº"),
	Emoji::new("foot: medium skin tone", Version(11, 0),"ü¶∂üèΩ"),
	Emoji::new("foot: medium-dark skin tone", Version(11, 0),"ü¶∂üèæ"),
	Emoji::new("foot: dark skin tone", Version(11, 0),"ü¶∂üèø"),
	]);

		
		#[doc="leg ü¶µ"]#[doc=""]#[doc="Since E11.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEG); // ü¶µ (`U+1F9B5`)"] #[doc="# assert_eq!(LEG.to_string().as_str(), \"ü¶µ\");"]#[doc="println!(\"{}\", LEG.tone(Tone::Light)); // ü¶µüèª (`U+1F9B5 U+1F3FB`)"] #[doc="# assert_eq!(LEG.tone(Tone::Light).to_string().as_str(), \"ü¶µüèª\");"]#[doc="println!(\"{}\", LEG.tone(Tone::MediumLight)); // ü¶µüèº (`U+1F9B5 U+1F3FC`)"] #[doc="# assert_eq!(LEG.tone(Tone::MediumLight).to_string().as_str(), \"ü¶µüèº\");"]#[doc="println!(\"{}\", LEG.tone(Tone::Medium)); // ü¶µüèΩ (`U+1F9B5 U+1F3FD`)"] #[doc="# assert_eq!(LEG.tone(Tone::Medium).to_string().as_str(), \"ü¶µüèΩ\");"]#[doc="println!(\"{}\", LEG.tone(Tone::MediumDark)); // ü¶µüèæ (`U+1F9B5 U+1F3FE`)"] #[doc="# assert_eq!(LEG.tone(Tone::MediumDark).to_string().as_str(), \"ü¶µüèæ\");"]#[doc="println!(\"{}\", LEG.tone(Tone::Dark)); // ü¶µüèø (`U+1F9B5 U+1F3FF`)"] #[doc="# assert_eq!(LEG.tone(Tone::Dark).to_string().as_str(), \"ü¶µüèø\");"]
#[doc="```"]
pub static LEG: With<Tone,Emoji> = With::new(Emoji::new("leg", Version(11, 0),"ü¶µ"), 
	&[
		Emoji::new("leg: light skin tone", Version(11, 0),"ü¶µüèª"),
	Emoji::new("leg: medium-light skin tone", Version(11, 0),"ü¶µüèº"),
	Emoji::new("leg: medium skin tone", Version(11, 0),"ü¶µüèΩ"),
	Emoji::new("leg: medium-dark skin tone", Version(11, 0),"ü¶µüèæ"),
	Emoji::new("leg: dark skin tone", Version(11, 0),"ü¶µüèø"),
	]);

		
		#[doc="lungs ü´Å"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LUNGS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LUNGS); // ü´Å (`U+1FAC1`)"] #[doc="# assert_eq!(LUNGS.to_string().as_str(), \"ü´Å\");"]
#[doc="```"]
pub static LUNGS :  Emoji = Emoji::new("lungs", Version(13, 0), "ü´Å"); // lungs
		
		#[doc="mechanical arm ü¶æ"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MECHANICAL_ARM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MECHANICAL_ARM); // ü¶æ (`U+1F9BE`)"] #[doc="# assert_eq!(MECHANICAL_ARM.to_string().as_str(), \"ü¶æ\");"]
#[doc="```"]
pub static MECHANICAL_ARM :  Emoji = Emoji::new("mechanical arm", Version(12, 0), "ü¶æ"); // mechanical arm
		
		#[doc="mechanical leg ü¶ø"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MECHANICAL_LEG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MECHANICAL_LEG); // ü¶ø (`U+1F9BF`)"] #[doc="# assert_eq!(MECHANICAL_LEG.to_string().as_str(), \"ü¶ø\");"]
#[doc="```"]
pub static MECHANICAL_LEG :  Emoji = Emoji::new("mechanical leg", Version(12, 0), "ü¶ø"); // mechanical leg
		
		#[doc="mouth üëÑ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOUTH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOUTH); // üëÑ (`U+1F444`)"] #[doc="# assert_eq!(MOUTH.to_string().as_str(), \"üëÑ\");"]
#[doc="```"]
pub static MOUTH :  Emoji = Emoji::new("mouth", Version(0, 6), "üëÑ"); // mouth
		
		#[doc="nose üëÉ"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NOSE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NOSE); // üëÉ (`U+1F443`)"] #[doc="# assert_eq!(NOSE.to_string().as_str(), \"üëÉ\");"]#[doc="println!(\"{}\", NOSE.tone(Tone::Light)); // üëÉüèª (`U+1F443 U+1F3FB`)"] #[doc="# assert_eq!(NOSE.tone(Tone::Light).to_string().as_str(), \"üëÉüèª\");"]#[doc="println!(\"{}\", NOSE.tone(Tone::MediumLight)); // üëÉüèº (`U+1F443 U+1F3FC`)"] #[doc="# assert_eq!(NOSE.tone(Tone::MediumLight).to_string().as_str(), \"üëÉüèº\");"]#[doc="println!(\"{}\", NOSE.tone(Tone::Medium)); // üëÉüèΩ (`U+1F443 U+1F3FD`)"] #[doc="# assert_eq!(NOSE.tone(Tone::Medium).to_string().as_str(), \"üëÉüèΩ\");"]#[doc="println!(\"{}\", NOSE.tone(Tone::MediumDark)); // üëÉüèæ (`U+1F443 U+1F3FE`)"] #[doc="# assert_eq!(NOSE.tone(Tone::MediumDark).to_string().as_str(), \"üëÉüèæ\");"]#[doc="println!(\"{}\", NOSE.tone(Tone::Dark)); // üëÉüèø (`U+1F443 U+1F3FF`)"] #[doc="# assert_eq!(NOSE.tone(Tone::Dark).to_string().as_str(), \"üëÉüèø\");"]
#[doc="```"]
pub static NOSE: With<Tone,Emoji> = With::new(Emoji::new("nose", Version(0, 6),"üëÉ"), 
	&[
		Emoji::new("nose: light skin tone", Version(1, 0),"üëÉüèª"),
	Emoji::new("nose: medium-light skin tone", Version(1, 0),"üëÉüèº"),
	Emoji::new("nose: medium skin tone", Version(1, 0),"üëÉüèΩ"),
	Emoji::new("nose: medium-dark skin tone", Version(1, 0),"üëÉüèæ"),
	Emoji::new("nose: dark skin tone", Version(1, 0),"üëÉüèø"),
	]);

		
		#[doc="tongue üëÖ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TONGUE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TONGUE); // üëÖ (`U+1F445`)"] #[doc="# assert_eq!(TONGUE.to_string().as_str(), \"üëÖ\");"]
#[doc="```"]
pub static TONGUE :  Emoji = Emoji::new("tongue", Version(0, 6), "üëÖ"); // tongue
		
		#[doc="tooth ü¶∑"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TOOTH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TOOTH); // ü¶∑ (`U+1F9B7`)"] #[doc="# assert_eq!(TOOTH.to_string().as_str(), \"ü¶∑\");"]
#[doc="```"]
pub static TOOTH :  Emoji = Emoji::new("tooth", Version(11, 0), "ü¶∑"); // tooth
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // ANATOMICAL_HEART
				
				&ANATOMICAL_HEART,
				
			],
			
			&[ // BONE
				
				&BONE,
				
			],
			
			&[ // BRAIN
				
				&BRAIN,
				
			],
			
			&[ // EAR
				
				&EAR.default,
				
				&EAR.tone(Tone::Light),
				
				&EAR.tone(Tone::MediumLight),
				
				&EAR.tone(Tone::Medium),
				
				&EAR.tone(Tone::MediumDark),
				
				&EAR.tone(Tone::Dark),
				
			],
			
			&[ // EAR_WITH_HEARING_AID
				
				&EAR_WITH_HEARING_AID.default,
				
				&EAR_WITH_HEARING_AID.tone(Tone::Light),
				
				&EAR_WITH_HEARING_AID.tone(Tone::MediumLight),
				
				&EAR_WITH_HEARING_AID.tone(Tone::Medium),
				
				&EAR_WITH_HEARING_AID.tone(Tone::MediumDark),
				
				&EAR_WITH_HEARING_AID.tone(Tone::Dark),
				
			],
			
			&[ // EYE
				
				&EYE,
				
			],
			
			&[ // EYES
				
				&EYES,
				
			],
			
			&[ // FLEXED_BICEPS
				
				&FLEXED_BICEPS.default,
				
				&FLEXED_BICEPS.tone(Tone::Light),
				
				&FLEXED_BICEPS.tone(Tone::MediumLight),
				
				&FLEXED_BICEPS.tone(Tone::Medium),
				
				&FLEXED_BICEPS.tone(Tone::MediumDark),
				
				&FLEXED_BICEPS.tone(Tone::Dark),
				
			],
			
			&[ // FOOT
				
				&FOOT.default,
				
				&FOOT.tone(Tone::Light),
				
				&FOOT.tone(Tone::MediumLight),
				
				&FOOT.tone(Tone::Medium),
				
				&FOOT.tone(Tone::MediumDark),
				
				&FOOT.tone(Tone::Dark),
				
			],
			
			&[ // LEG
				
				&LEG.default,
				
				&LEG.tone(Tone::Light),
				
				&LEG.tone(Tone::MediumLight),
				
				&LEG.tone(Tone::Medium),
				
				&LEG.tone(Tone::MediumDark),
				
				&LEG.tone(Tone::Dark),
				
			],
			
			&[ // LUNGS
				
				&LUNGS,
				
			],
			
			&[ // MECHANICAL_ARM
				
				&MECHANICAL_ARM,
				
			],
			
			&[ // MECHANICAL_LEG
				
				&MECHANICAL_LEG,
				
			],
			
			&[ // MOUTH
				
				&MOUTH,
				
			],
			
			&[ // NOSE
				
				&NOSE.default,
				
				&NOSE.tone(Tone::Light),
				
				&NOSE.tone(Tone::MediumLight),
				
				&NOSE.tone(Tone::Medium),
				
				&NOSE.tone(Tone::MediumDark),
				
				&NOSE.tone(Tone::Dark),
				
			],
			
			&[ // TONGUE
				
				&TONGUE,
				
			],
			
			&[ // TOOTH
				
				&TOOTH,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&ANATOMICAL_HEART, // ANATOMICAL_HEART
				
			
				
				&BONE, // BONE
				
			
				
				&BRAIN, // BRAIN
				
			
				
				&EAR.default, // EAR
				
			
				
				&EAR_WITH_HEARING_AID.default, // EAR_WITH_HEARING_AID
				
			
				
				&EYE, // EYE
				
			
				
				&EYES, // EYES
				
			
				
				&FLEXED_BICEPS.default, // FLEXED_BICEPS
				
			
				
				&FOOT.default, // FOOT
				
			
				
				&LEG.default, // LEG
				
			
				
				&LUNGS, // LUNGS
				
			
				
				&MECHANICAL_ARM, // MECHANICAL_ARM
				
			
				
				&MECHANICAL_LEG, // MECHANICAL_LEG
				
			
				
				&MOUTH, // MOUTH
				
			
				
				&NOSE.default, // NOSE
				
			
				
				&TONGUE, // TONGUE
				
			
				
				&TOOTH, // TOOTH
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // body_parts
	
	/// family üíëüë™üíè
	pub mod family {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="couple with heart üíë"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COUPLE_WITH_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COUPLE_WITH_HEART); // üíë (`U+1F491`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.to_string().as_str(), \"üíë\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone(Tone::Light)); // üíëüèª (`U+1F491 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone(Tone::Light).to_string().as_str(), \"üíëüèª\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::Light, Tone::MediumLight))); // üßëüèª‚Äç‚ù§Ô∏è‚Äçüßëüèº (`U+1F9D1 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::Light, Tone::MediumLight)).to_string().as_str(), \"üßëüèª‚Äç‚ù§Ô∏è‚Äçüßëüèº\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::Light, Tone::Medium))); // üßëüèª‚Äç‚ù§Ô∏è‚ÄçüßëüèΩ (`U+1F9D1 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::Light, Tone::Medium)).to_string().as_str(), \"üßëüèª‚Äç‚ù§Ô∏è‚ÄçüßëüèΩ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::Light, Tone::MediumDark))); // üßëüèª‚Äç‚ù§Ô∏è‚Äçüßëüèæ (`U+1F9D1 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::Light, Tone::MediumDark)).to_string().as_str(), \"üßëüèª‚Äç‚ù§Ô∏è‚Äçüßëüèæ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::Light, Tone::Dark))); // üßëüèª‚Äç‚ù§Ô∏è‚Äçüßëüèø (`U+1F9D1 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::Light, Tone::Dark)).to_string().as_str(), \"üßëüèª‚Äç‚ù§Ô∏è‚Äçüßëüèø\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::MediumLight, Tone::Light))); // üßëüèº‚Äç‚ù§Ô∏è‚Äçüßëüèª (`U+1F9D1 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::MediumLight, Tone::Light)).to_string().as_str(), \"üßëüèº‚Äç‚ù§Ô∏è‚Äçüßëüèª\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone(Tone::MediumLight)); // üíëüèº (`U+1F491 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone(Tone::MediumLight).to_string().as_str(), \"üíëüèº\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::MediumLight, Tone::Medium))); // üßëüèº‚Äç‚ù§Ô∏è‚ÄçüßëüèΩ (`U+1F9D1 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::MediumLight, Tone::Medium)).to_string().as_str(), \"üßëüèº‚Äç‚ù§Ô∏è‚ÄçüßëüèΩ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::MediumLight, Tone::MediumDark))); // üßëüèº‚Äç‚ù§Ô∏è‚Äçüßëüèæ (`U+1F9D1 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::MediumLight, Tone::MediumDark)).to_string().as_str(), \"üßëüèº‚Äç‚ù§Ô∏è‚Äçüßëüèæ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::MediumLight, Tone::Dark))); // üßëüèº‚Äç‚ù§Ô∏è‚Äçüßëüèø (`U+1F9D1 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::MediumLight, Tone::Dark)).to_string().as_str(), \"üßëüèº‚Äç‚ù§Ô∏è‚Äçüßëüèø\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::Medium, Tone::Light))); // üßëüèΩ‚Äç‚ù§Ô∏è‚Äçüßëüèª (`U+1F9D1 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::Medium, Tone::Light)).to_string().as_str(), \"üßëüèΩ‚Äç‚ù§Ô∏è‚Äçüßëüèª\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::Medium, Tone::MediumLight))); // üßëüèΩ‚Äç‚ù§Ô∏è‚Äçüßëüèº (`U+1F9D1 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::Medium, Tone::MediumLight)).to_string().as_str(), \"üßëüèΩ‚Äç‚ù§Ô∏è‚Äçüßëüèº\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone(Tone::Medium)); // üíëüèΩ (`U+1F491 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone(Tone::Medium).to_string().as_str(), \"üíëüèΩ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::Medium, Tone::MediumDark))); // üßëüèΩ‚Äç‚ù§Ô∏è‚Äçüßëüèæ (`U+1F9D1 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::Medium, Tone::MediumDark)).to_string().as_str(), \"üßëüèΩ‚Äç‚ù§Ô∏è‚Äçüßëüèæ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::Medium, Tone::Dark))); // üßëüèΩ‚Äç‚ù§Ô∏è‚Äçüßëüèø (`U+1F9D1 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::Medium, Tone::Dark)).to_string().as_str(), \"üßëüèΩ‚Äç‚ù§Ô∏è‚Äçüßëüèø\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::MediumDark, Tone::Light))); // üßëüèæ‚Äç‚ù§Ô∏è‚Äçüßëüèª (`U+1F9D1 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::MediumDark, Tone::Light)).to_string().as_str(), \"üßëüèæ‚Äç‚ù§Ô∏è‚Äçüßëüèª\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::MediumDark, Tone::MediumLight))); // üßëüèæ‚Äç‚ù§Ô∏è‚Äçüßëüèº (`U+1F9D1 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::MediumDark, Tone::MediumLight)).to_string().as_str(), \"üßëüèæ‚Äç‚ù§Ô∏è‚Äçüßëüèº\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::MediumDark, Tone::Medium))); // üßëüèæ‚Äç‚ù§Ô∏è‚ÄçüßëüèΩ (`U+1F9D1 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::MediumDark, Tone::Medium)).to_string().as_str(), \"üßëüèæ‚Äç‚ù§Ô∏è‚ÄçüßëüèΩ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone(Tone::MediumDark)); // üíëüèæ (`U+1F491 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone(Tone::MediumDark).to_string().as_str(), \"üíëüèæ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::MediumDark, Tone::Dark))); // üßëüèæ‚Äç‚ù§Ô∏è‚Äçüßëüèø (`U+1F9D1 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::MediumDark, Tone::Dark)).to_string().as_str(), \"üßëüèæ‚Äç‚ù§Ô∏è‚Äçüßëüèø\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::Dark, Tone::Light))); // üßëüèø‚Äç‚ù§Ô∏è‚Äçüßëüèª (`U+1F9D1 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::Dark, Tone::Light)).to_string().as_str(), \"üßëüèø‚Äç‚ù§Ô∏è‚Äçüßëüèª\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::Dark, Tone::MediumLight))); // üßëüèø‚Äç‚ù§Ô∏è‚Äçüßëüèº (`U+1F9D1 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::Dark, Tone::MediumLight)).to_string().as_str(), \"üßëüèø‚Äç‚ù§Ô∏è‚Äçüßëüèº\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::Dark, Tone::Medium))); // üßëüèø‚Äç‚ù§Ô∏è‚ÄçüßëüèΩ (`U+1F9D1 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::Dark, Tone::Medium)).to_string().as_str(), \"üßëüèø‚Äç‚ù§Ô∏è‚ÄçüßëüèΩ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::Dark, Tone::MediumDark))); // üßëüèø‚Äç‚ù§Ô∏è‚Äçüßëüèæ (`U+1F9D1 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::Dark, Tone::MediumDark)).to_string().as_str(), \"üßëüèø‚Äç‚ù§Ô∏è‚Äçüßëüèæ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone(Tone::Dark)); // üíëüèø (`U+1F491 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone(Tone::Dark).to_string().as_str(), \"üíëüèø\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males)); // üë®‚Äç‚ù§Ô∏è‚Äçüë® (`U+1F468 U+200D U+2764 U+FE0F U+200D U+1F468`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).to_string().as_str(), \"üë®‚Äç‚ù§Ô∏è‚Äçüë®\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone(Tone::Light)); // üë®üèª‚Äç‚ù§Ô∏è‚Äçüë®üèª (`U+1F468 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone(Tone::Light).to_string().as_str(), \"üë®üèª‚Äç‚ù§Ô∏è‚Äçüë®üèª\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Light, Tone::MediumLight))); // üë®üèª‚Äç‚ù§Ô∏è‚Äçüë®üèº (`U+1F468 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Light, Tone::MediumLight)).to_string().as_str(), \"üë®üèª‚Äç‚ù§Ô∏è‚Äçüë®üèº\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Light, Tone::Medium))); // üë®üèª‚Äç‚ù§Ô∏è‚Äçüë®üèΩ (`U+1F468 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Light, Tone::Medium)).to_string().as_str(), \"üë®üèª‚Äç‚ù§Ô∏è‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Light, Tone::MediumDark))); // üë®üèª‚Äç‚ù§Ô∏è‚Äçüë®üèæ (`U+1F468 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Light, Tone::MediumDark)).to_string().as_str(), \"üë®üèª‚Äç‚ù§Ô∏è‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Light, Tone::Dark))); // üë®üèª‚Äç‚ù§Ô∏è‚Äçüë®üèø (`U+1F468 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Light, Tone::Dark)).to_string().as_str(), \"üë®üèª‚Äç‚ù§Ô∏è‚Äçüë®üèø\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumLight, Tone::Light))); // üë®üèº‚Äç‚ù§Ô∏è‚Äçüë®üèª (`U+1F468 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumLight, Tone::Light)).to_string().as_str(), \"üë®üèº‚Äç‚ù§Ô∏è‚Äçüë®üèª\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone(Tone::MediumLight)); // üë®üèº‚Äç‚ù§Ô∏è‚Äçüë®üèº (`U+1F468 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº‚Äç‚ù§Ô∏è‚Äçüë®üèº\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumLight, Tone::Medium))); // üë®üèº‚Äç‚ù§Ô∏è‚Äçüë®üèΩ (`U+1F468 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumLight, Tone::Medium)).to_string().as_str(), \"üë®üèº‚Äç‚ù§Ô∏è‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumLight, Tone::MediumDark))); // üë®üèº‚Äç‚ù§Ô∏è‚Äçüë®üèæ (`U+1F468 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumLight, Tone::MediumDark)).to_string().as_str(), \"üë®üèº‚Äç‚ù§Ô∏è‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumLight, Tone::Dark))); // üë®üèº‚Äç‚ù§Ô∏è‚Äçüë®üèø (`U+1F468 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumLight, Tone::Dark)).to_string().as_str(), \"üë®üèº‚Äç‚ù§Ô∏è‚Äçüë®üèø\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Medium, Tone::Light))); // üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèª (`U+1F468 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Medium, Tone::Light)).to_string().as_str(), \"üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèª\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Medium, Tone::MediumLight))); // üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèº (`U+1F468 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Medium, Tone::MediumLight)).to_string().as_str(), \"üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèº\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone(Tone::Medium)); // üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèΩ (`U+1F468 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Medium, Tone::MediumDark))); // üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèæ (`U+1F468 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Medium, Tone::MediumDark)).to_string().as_str(), \"üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Medium, Tone::Dark))); // üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèø (`U+1F468 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Medium, Tone::Dark)).to_string().as_str(), \"üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèø\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumDark, Tone::Light))); // üë®üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèª (`U+1F468 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumDark, Tone::Light)).to_string().as_str(), \"üë®üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèª\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumDark, Tone::MediumLight))); // üë®üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèº (`U+1F468 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumDark, Tone::MediumLight)).to_string().as_str(), \"üë®üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèº\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumDark, Tone::Medium))); // üë®üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèΩ (`U+1F468 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumDark, Tone::Medium)).to_string().as_str(), \"üë®üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone(Tone::MediumDark)); // üë®üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèæ (`U+1F468 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumDark, Tone::Dark))); // üë®üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèø (`U+1F468 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumDark, Tone::Dark)).to_string().as_str(), \"üë®üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèø\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Dark, Tone::Light))); // üë®üèø‚Äç‚ù§Ô∏è‚Äçüë®üèª (`U+1F468 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Dark, Tone::Light)).to_string().as_str(), \"üë®üèø‚Äç‚ù§Ô∏è‚Äçüë®üèª\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Dark, Tone::MediumLight))); // üë®üèø‚Äç‚ù§Ô∏è‚Äçüë®üèº (`U+1F468 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Dark, Tone::MediumLight)).to_string().as_str(), \"üë®üèø‚Äç‚ù§Ô∏è‚Äçüë®üèº\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Dark, Tone::Medium))); // üë®üèø‚Äç‚ù§Ô∏è‚Äçüë®üèΩ (`U+1F468 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Dark, Tone::Medium)).to_string().as_str(), \"üë®üèø‚Äç‚ù§Ô∏è‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Dark, Tone::MediumDark))); // üë®üèø‚Äç‚ù§Ô∏è‚Äçüë®üèæ (`U+1F468 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Dark, Tone::MediumDark)).to_string().as_str(), \"üë®üèø‚Äç‚ù§Ô∏è‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone(Tone::Dark)); // üë®üèø‚Äç‚ù§Ô∏è‚Äçüë®üèø (`U+1F468 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone(Tone::Dark).to_string().as_str(), \"üë®üèø‚Äç‚ù§Ô∏è‚Äçüë®üèø\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed)); // üë©‚Äç‚ù§Ô∏è‚Äçüë® (`U+1F469 U+200D U+2764 U+FE0F U+200D U+1F468`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).to_string().as_str(), \"üë©‚Äç‚ù§Ô∏è‚Äçüë®\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone(Tone::Light)); // üë©üèª‚Äç‚ù§Ô∏è‚Äçüë®üèª (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äç‚ù§Ô∏è‚Äçüë®üèª\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Light, Tone::MediumLight))); // üë©üèª‚Äç‚ù§Ô∏è‚Äçüë®üèº (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Light, Tone::MediumLight)).to_string().as_str(), \"üë©üèª‚Äç‚ù§Ô∏è‚Äçüë®üèº\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Light, Tone::Medium))); // üë©üèª‚Äç‚ù§Ô∏è‚Äçüë®üèΩ (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Light, Tone::Medium)).to_string().as_str(), \"üë©üèª‚Äç‚ù§Ô∏è‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Light, Tone::MediumDark))); // üë©üèª‚Äç‚ù§Ô∏è‚Äçüë®üèæ (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Light, Tone::MediumDark)).to_string().as_str(), \"üë©üèª‚Äç‚ù§Ô∏è‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Light, Tone::Dark))); // üë©üèª‚Äç‚ù§Ô∏è‚Äçüë®üèø (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Light, Tone::Dark)).to_string().as_str(), \"üë©üèª‚Äç‚ù§Ô∏è‚Äçüë®üèø\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Light))); // üë©üèº‚Äç‚ù§Ô∏è‚Äçüë®üèª (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Light)).to_string().as_str(), \"üë©üèº‚Äç‚ù§Ô∏è‚Äçüë®üèª\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone(Tone::MediumLight)); // üë©üèº‚Äç‚ù§Ô∏è‚Äçüë®üèº (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äç‚ù§Ô∏è‚Äçüë®üèº\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Medium))); // üë©üèº‚Äç‚ù§Ô∏è‚Äçüë®üèΩ (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Medium)).to_string().as_str(), \"üë©üèº‚Äç‚ù§Ô∏è‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::MediumDark))); // üë©üèº‚Äç‚ù§Ô∏è‚Äçüë®üèæ (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::MediumDark)).to_string().as_str(), \"üë©üèº‚Äç‚ù§Ô∏è‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Dark))); // üë©üèº‚Äç‚ù§Ô∏è‚Äçüë®üèø (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Dark)).to_string().as_str(), \"üë©üèº‚Äç‚ù§Ô∏è‚Äçüë®üèø\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Medium, Tone::Light))); // üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèª (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Medium, Tone::Light)).to_string().as_str(), \"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèª\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Medium, Tone::MediumLight))); // üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèº (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Medium, Tone::MediumLight)).to_string().as_str(), \"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèº\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone(Tone::Medium)); // üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèΩ (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Medium, Tone::MediumDark))); // üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèæ (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Medium, Tone::MediumDark)).to_string().as_str(), \"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Medium, Tone::Dark))); // üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèø (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Medium, Tone::Dark)).to_string().as_str(), \"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèø\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Light))); // üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèª (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Light)).to_string().as_str(), \"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèª\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::MediumLight))); // üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèº (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::MediumLight)).to_string().as_str(), \"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèº\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Medium))); // üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèΩ (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Medium)).to_string().as_str(), \"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone(Tone::MediumDark)); // üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèæ (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Dark))); // üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèø (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Dark)).to_string().as_str(), \"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèø\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Dark, Tone::Light))); // üë©üèø‚Äç‚ù§Ô∏è‚Äçüë®üèª (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Dark, Tone::Light)).to_string().as_str(), \"üë©üèø‚Äç‚ù§Ô∏è‚Äçüë®üèª\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Dark, Tone::MediumLight))); // üë©üèø‚Äç‚ù§Ô∏è‚Äçüë®üèº (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Dark, Tone::MediumLight)).to_string().as_str(), \"üë©üèø‚Äç‚ù§Ô∏è‚Äçüë®üèº\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Dark, Tone::Medium))); // üë©üèø‚Äç‚ù§Ô∏è‚Äçüë®üèΩ (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Dark, Tone::Medium)).to_string().as_str(), \"üë©üèø‚Äç‚ù§Ô∏è‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Dark, Tone::MediumDark))); // üë©üèø‚Äç‚ù§Ô∏è‚Äçüë®üèæ (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Dark, Tone::MediumDark)).to_string().as_str(), \"üë©üèø‚Äç‚ù§Ô∏è‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone(Tone::Dark)); // üë©üèø‚Äç‚ù§Ô∏è‚Äçüë®üèø (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äç‚ù§Ô∏è‚Äçüë®üèø\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females)); // üë©‚Äç‚ù§Ô∏è‚Äçüë© (`U+1F469 U+200D U+2764 U+FE0F U+200D U+1F469`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).to_string().as_str(), \"üë©‚Äç‚ù§Ô∏è‚Äçüë©\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone(Tone::Light)); // üë©üèª‚Äç‚ù§Ô∏è‚Äçüë©üèª (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äç‚ù§Ô∏è‚Äçüë©üèª\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Light, Tone::MediumLight))); // üë©üèª‚Äç‚ù§Ô∏è‚Äçüë©üèº (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Light, Tone::MediumLight)).to_string().as_str(), \"üë©üèª‚Äç‚ù§Ô∏è‚Äçüë©üèº\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Light, Tone::Medium))); // üë©üèª‚Äç‚ù§Ô∏è‚Äçüë©üèΩ (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Light, Tone::Medium)).to_string().as_str(), \"üë©üèª‚Äç‚ù§Ô∏è‚Äçüë©üèΩ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Light, Tone::MediumDark))); // üë©üèª‚Äç‚ù§Ô∏è‚Äçüë©üèæ (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Light, Tone::MediumDark)).to_string().as_str(), \"üë©üèª‚Äç‚ù§Ô∏è‚Äçüë©üèæ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Light, Tone::Dark))); // üë©üèª‚Äç‚ù§Ô∏è‚Äçüë©üèø (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Light, Tone::Dark)).to_string().as_str(), \"üë©üèª‚Äç‚ù§Ô∏è‚Äçüë©üèø\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumLight, Tone::Light))); // üë©üèº‚Äç‚ù§Ô∏è‚Äçüë©üèª (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumLight, Tone::Light)).to_string().as_str(), \"üë©üèº‚Äç‚ù§Ô∏è‚Äçüë©üèª\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone(Tone::MediumLight)); // üë©üèº‚Äç‚ù§Ô∏è‚Äçüë©üèº (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äç‚ù§Ô∏è‚Äçüë©üèº\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumLight, Tone::Medium))); // üë©üèº‚Äç‚ù§Ô∏è‚Äçüë©üèΩ (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumLight, Tone::Medium)).to_string().as_str(), \"üë©üèº‚Äç‚ù§Ô∏è‚Äçüë©üèΩ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumLight, Tone::MediumDark))); // üë©üèº‚Äç‚ù§Ô∏è‚Äçüë©üèæ (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumLight, Tone::MediumDark)).to_string().as_str(), \"üë©üèº‚Äç‚ù§Ô∏è‚Äçüë©üèæ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumLight, Tone::Dark))); // üë©üèº‚Äç‚ù§Ô∏è‚Äçüë©üèø (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumLight, Tone::Dark)).to_string().as_str(), \"üë©üèº‚Äç‚ù§Ô∏è‚Äçüë©üèø\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Medium, Tone::Light))); // üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë©üèª (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Medium, Tone::Light)).to_string().as_str(), \"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë©üèª\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Medium, Tone::MediumLight))); // üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë©üèº (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Medium, Tone::MediumLight)).to_string().as_str(), \"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë©üèº\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone(Tone::Medium)); // üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë©üèΩ (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë©üèΩ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Medium, Tone::MediumDark))); // üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë©üèæ (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Medium, Tone::MediumDark)).to_string().as_str(), \"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë©üèæ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Medium, Tone::Dark))); // üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë©üèø (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Medium, Tone::Dark)).to_string().as_str(), \"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë©üèø\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumDark, Tone::Light))); // üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë©üèª (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumDark, Tone::Light)).to_string().as_str(), \"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë©üèª\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumDark, Tone::MediumLight))); // üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë©üèº (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumDark, Tone::MediumLight)).to_string().as_str(), \"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë©üèº\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumDark, Tone::Medium))); // üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë©üèΩ (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumDark, Tone::Medium)).to_string().as_str(), \"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë©üèΩ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone(Tone::MediumDark)); // üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë©üèæ (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë©üèæ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumDark, Tone::Dark))); // üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë©üèø (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumDark, Tone::Dark)).to_string().as_str(), \"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë©üèø\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Dark, Tone::Light))); // üë©üèø‚Äç‚ù§Ô∏è‚Äçüë©üèª (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Dark, Tone::Light)).to_string().as_str(), \"üë©üèø‚Äç‚ù§Ô∏è‚Äçüë©üèª\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Dark, Tone::MediumLight))); // üë©üèø‚Äç‚ù§Ô∏è‚Äçüë©üèº (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Dark, Tone::MediumLight)).to_string().as_str(), \"üë©üèø‚Äç‚ù§Ô∏è‚Äçüë©üèº\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Dark, Tone::Medium))); // üë©üèø‚Äç‚ù§Ô∏è‚Äçüë©üèΩ (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Dark, Tone::Medium)).to_string().as_str(), \"üë©üèø‚Äç‚ù§Ô∏è‚Äçüë©üèΩ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Dark, Tone::MediumDark))); // üë©üèø‚Äç‚ù§Ô∏è‚Äçüë©üèæ (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Dark, Tone::MediumDark)).to_string().as_str(), \"üë©üèø‚Äç‚ù§Ô∏è‚Äçüë©üèæ\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone(Tone::Dark)); // üë©üèø‚Äç‚ù§Ô∏è‚Äçüë©üèø (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äç‚ù§Ô∏è‚Äçüë©üèø\");"]
#[doc="```"]
pub static COUPLE_WITH_HEART: With<Pair,With<TonePair,Emoji>> = With::new(With::new(Emoji::new("couple with heart", Version(0, 6),"üíë"), 
	&[
		Emoji::new("couple with heart: light skin tone", Version(13, 1),"üíëüèª"),
	Emoji::new("couple with heart: person, person, light skin tone, medium-light skin tone", Version(13, 1),"üßëüèª‚Äç‚ù§Ô∏è‚Äçüßëüèº"),
	Emoji::new("couple with heart: person, person, light skin tone, medium skin tone", Version(13, 1),"üßëüèª‚Äç‚ù§Ô∏è‚ÄçüßëüèΩ"),
	Emoji::new("couple with heart: person, person, light skin tone, medium-dark skin tone", Version(13, 1),"üßëüèª‚Äç‚ù§Ô∏è‚Äçüßëüèæ"),
	Emoji::new("couple with heart: person, person, light skin tone, dark skin tone", Version(13, 1),"üßëüèª‚Äç‚ù§Ô∏è‚Äçüßëüèø"),
	Emoji::new("couple with heart: person, person, medium-light skin tone, light skin tone", Version(13, 1),"üßëüèº‚Äç‚ù§Ô∏è‚Äçüßëüèª"),
	Emoji::new("couple with heart: medium-light skin tone", Version(13, 1),"üíëüèº"),
	Emoji::new("couple with heart: person, person, medium-light skin tone, medium skin tone", Version(13, 1),"üßëüèº‚Äç‚ù§Ô∏è‚ÄçüßëüèΩ"),
	Emoji::new("couple with heart: person, person, medium-light skin tone, medium-dark skin tone", Version(13, 1),"üßëüèº‚Äç‚ù§Ô∏è‚Äçüßëüèæ"),
	Emoji::new("couple with heart: person, person, medium-light skin tone, dark skin tone", Version(13, 1),"üßëüèº‚Äç‚ù§Ô∏è‚Äçüßëüèø"),
	Emoji::new("couple with heart: person, person, medium skin tone, light skin tone", Version(13, 1),"üßëüèΩ‚Äç‚ù§Ô∏è‚Äçüßëüèª"),
	Emoji::new("couple with heart: person, person, medium skin tone, medium-light skin tone", Version(13, 1),"üßëüèΩ‚Äç‚ù§Ô∏è‚Äçüßëüèº"),
	Emoji::new("couple with heart: medium skin tone", Version(13, 1),"üíëüèΩ"),
	Emoji::new("couple with heart: person, person, medium skin tone, medium-dark skin tone", Version(13, 1),"üßëüèΩ‚Äç‚ù§Ô∏è‚Äçüßëüèæ"),
	Emoji::new("couple with heart: person, person, medium skin tone, dark skin tone", Version(13, 1),"üßëüèΩ‚Äç‚ù§Ô∏è‚Äçüßëüèø"),
	Emoji::new("couple with heart: person, person, medium-dark skin tone, light skin tone", Version(13, 1),"üßëüèæ‚Äç‚ù§Ô∏è‚Äçüßëüèª"),
	Emoji::new("couple with heart: person, person, medium-dark skin tone, medium-light skin tone", Version(13, 1),"üßëüèæ‚Äç‚ù§Ô∏è‚Äçüßëüèº"),
	Emoji::new("couple with heart: person, person, medium-dark skin tone, medium skin tone", Version(13, 1),"üßëüèæ‚Äç‚ù§Ô∏è‚ÄçüßëüèΩ"),
	Emoji::new("couple with heart: medium-dark skin tone", Version(13, 1),"üíëüèæ"),
	Emoji::new("couple with heart: person, person, medium-dark skin tone, dark skin tone", Version(13, 1),"üßëüèæ‚Äç‚ù§Ô∏è‚Äçüßëüèø"),
	Emoji::new("couple with heart: person, person, dark skin tone, light skin tone", Version(13, 1),"üßëüèø‚Äç‚ù§Ô∏è‚Äçüßëüèª"),
	Emoji::new("couple with heart: person, person, dark skin tone, medium-light skin tone", Version(13, 1),"üßëüèø‚Äç‚ù§Ô∏è‚Äçüßëüèº"),
	Emoji::new("couple with heart: person, person, dark skin tone, medium skin tone", Version(13, 1),"üßëüèø‚Äç‚ù§Ô∏è‚ÄçüßëüèΩ"),
	Emoji::new("couple with heart: person, person, dark skin tone, medium-dark skin tone", Version(13, 1),"üßëüèø‚Äç‚ù§Ô∏è‚Äçüßëüèæ"),
	Emoji::new("couple with heart: dark skin tone", Version(13, 1),"üíëüèø"),
	]), 
	&[
		With::new(Emoji::new("couple with heart: man, man", Version(2, 0),"üë®‚Äç‚ù§Ô∏è‚Äçüë®"), 
	&[
		Emoji::new("couple with heart: man, man, light skin tone", Version(13, 1),"üë®üèª‚Äç‚ù§Ô∏è‚Äçüë®üèª"),
	Emoji::new("couple with heart: man, man, light skin tone, medium-light skin tone", Version(13, 1),"üë®üèª‚Äç‚ù§Ô∏è‚Äçüë®üèº"),
	Emoji::new("couple with heart: man, man, light skin tone, medium skin tone", Version(13, 1),"üë®üèª‚Äç‚ù§Ô∏è‚Äçüë®üèΩ"),
	Emoji::new("couple with heart: man, man, light skin tone, medium-dark skin tone", Version(13, 1),"üë®üèª‚Äç‚ù§Ô∏è‚Äçüë®üèæ"),
	Emoji::new("couple with heart: man, man, light skin tone, dark skin tone", Version(13, 1),"üë®üèª‚Äç‚ù§Ô∏è‚Äçüë®üèø"),
	Emoji::new("couple with heart: man, man, medium-light skin tone, light skin tone", Version(13, 1),"üë®üèº‚Äç‚ù§Ô∏è‚Äçüë®üèª"),
	Emoji::new("couple with heart: man, man, medium-light skin tone", Version(13, 1),"üë®üèº‚Äç‚ù§Ô∏è‚Äçüë®üèº"),
	Emoji::new("couple with heart: man, man, medium-light skin tone, medium skin tone", Version(13, 1),"üë®üèº‚Äç‚ù§Ô∏è‚Äçüë®üèΩ"),
	Emoji::new("couple with heart: man, man, medium-light skin tone, medium-dark skin tone", Version(13, 1),"üë®üèº‚Äç‚ù§Ô∏è‚Äçüë®üèæ"),
	Emoji::new("couple with heart: man, man, medium-light skin tone, dark skin tone", Version(13, 1),"üë®üèº‚Äç‚ù§Ô∏è‚Äçüë®üèø"),
	Emoji::new("couple with heart: man, man, medium skin tone, light skin tone", Version(13, 1),"üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèª"),
	Emoji::new("couple with heart: man, man, medium skin tone, medium-light skin tone", Version(13, 1),"üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèº"),
	Emoji::new("couple with heart: man, man, medium skin tone", Version(13, 1),"üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèΩ"),
	Emoji::new("couple with heart: man, man, medium skin tone, medium-dark skin tone", Version(13, 1),"üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèæ"),
	Emoji::new("couple with heart: man, man, medium skin tone, dark skin tone", Version(13, 1),"üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèø"),
	Emoji::new("couple with heart: man, man, medium-dark skin tone, light skin tone", Version(13, 1),"üë®üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèª"),
	Emoji::new("couple with heart: man, man, medium-dark skin tone, medium-light skin tone", Version(13, 1),"üë®üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèº"),
	Emoji::new("couple with heart: man, man, medium-dark skin tone, medium skin tone", Version(13, 1),"üë®üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèΩ"),
	Emoji::new("couple with heart: man, man, medium-dark skin tone", Version(13, 1),"üë®üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèæ"),
	Emoji::new("couple with heart: man, man, medium-dark skin tone, dark skin tone", Version(13, 1),"üë®üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèø"),
	Emoji::new("couple with heart: man, man, dark skin tone, light skin tone", Version(13, 1),"üë®üèø‚Äç‚ù§Ô∏è‚Äçüë®üèª"),
	Emoji::new("couple with heart: man, man, dark skin tone, medium-light skin tone", Version(13, 1),"üë®üèø‚Äç‚ù§Ô∏è‚Äçüë®üèº"),
	Emoji::new("couple with heart: man, man, dark skin tone, medium skin tone", Version(13, 1),"üë®üèø‚Äç‚ù§Ô∏è‚Äçüë®üèΩ"),
	Emoji::new("couple with heart: man, man, dark skin tone, medium-dark skin tone", Version(13, 1),"üë®üèø‚Äç‚ù§Ô∏è‚Äçüë®üèæ"),
	Emoji::new("couple with heart: man, man, dark skin tone", Version(13, 1),"üë®üèø‚Äç‚ù§Ô∏è‚Äçüë®üèø"),
	]),
	With::new(Emoji::new("couple with heart: woman, man", Version(2, 0),"üë©‚Äç‚ù§Ô∏è‚Äçüë®"), 
	&[
		Emoji::new("couple with heart: woman, man, light skin tone", Version(13, 1),"üë©üèª‚Äç‚ù§Ô∏è‚Äçüë®üèª"),
	Emoji::new("couple with heart: woman, man, light skin tone, medium-light skin tone", Version(13, 1),"üë©üèª‚Äç‚ù§Ô∏è‚Äçüë®üèº"),
	Emoji::new("couple with heart: woman, man, light skin tone, medium skin tone", Version(13, 1),"üë©üèª‚Äç‚ù§Ô∏è‚Äçüë®üèΩ"),
	Emoji::new("couple with heart: woman, man, light skin tone, medium-dark skin tone", Version(13, 1),"üë©üèª‚Äç‚ù§Ô∏è‚Äçüë®üèæ"),
	Emoji::new("couple with heart: woman, man, light skin tone, dark skin tone", Version(13, 1),"üë©üèª‚Äç‚ù§Ô∏è‚Äçüë®üèø"),
	Emoji::new("couple with heart: woman, man, medium-light skin tone, light skin tone", Version(13, 1),"üë©üèº‚Äç‚ù§Ô∏è‚Äçüë®üèª"),
	Emoji::new("couple with heart: woman, man, medium-light skin tone", Version(13, 1),"üë©üèº‚Äç‚ù§Ô∏è‚Äçüë®üèº"),
	Emoji::new("couple with heart: woman, man, medium-light skin tone, medium skin tone", Version(13, 1),"üë©üèº‚Äç‚ù§Ô∏è‚Äçüë®üèΩ"),
	Emoji::new("couple with heart: woman, man, medium-light skin tone, medium-dark skin tone", Version(13, 1),"üë©üèº‚Äç‚ù§Ô∏è‚Äçüë®üèæ"),
	Emoji::new("couple with heart: woman, man, medium-light skin tone, dark skin tone", Version(13, 1),"üë©üèº‚Äç‚ù§Ô∏è‚Äçüë®üèø"),
	Emoji::new("couple with heart: woman, man, medium skin tone, light skin tone", Version(13, 1),"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèª"),
	Emoji::new("couple with heart: woman, man, medium skin tone, medium-light skin tone", Version(13, 1),"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèº"),
	Emoji::new("couple with heart: woman, man, medium skin tone", Version(13, 1),"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèΩ"),
	Emoji::new("couple with heart: woman, man, medium skin tone, medium-dark skin tone", Version(13, 1),"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèæ"),
	Emoji::new("couple with heart: woman, man, medium skin tone, dark skin tone", Version(13, 1),"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë®üèø"),
	Emoji::new("couple with heart: woman, man, medium-dark skin tone, light skin tone", Version(13, 1),"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèª"),
	Emoji::new("couple with heart: woman, man, medium-dark skin tone, medium-light skin tone", Version(13, 1),"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèº"),
	Emoji::new("couple with heart: woman, man, medium-dark skin tone, medium skin tone", Version(13, 1),"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèΩ"),
	Emoji::new("couple with heart: woman, man, medium-dark skin tone", Version(13, 1),"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèæ"),
	Emoji::new("couple with heart: woman, man, medium-dark skin tone, dark skin tone", Version(13, 1),"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë®üèø"),
	Emoji::new("couple with heart: woman, man, dark skin tone, light skin tone", Version(13, 1),"üë©üèø‚Äç‚ù§Ô∏è‚Äçüë®üèª"),
	Emoji::new("couple with heart: woman, man, dark skin tone, medium-light skin tone", Version(13, 1),"üë©üèø‚Äç‚ù§Ô∏è‚Äçüë®üèº"),
	Emoji::new("couple with heart: woman, man, dark skin tone, medium skin tone", Version(13, 1),"üë©üèø‚Äç‚ù§Ô∏è‚Äçüë®üèΩ"),
	Emoji::new("couple with heart: woman, man, dark skin tone, medium-dark skin tone", Version(13, 1),"üë©üèø‚Äç‚ù§Ô∏è‚Äçüë®üèæ"),
	Emoji::new("couple with heart: woman, man, dark skin tone", Version(13, 1),"üë©üèø‚Äç‚ù§Ô∏è‚Äçüë®üèø"),
	]),
	With::new(Emoji::new("couple with heart: woman, woman", Version(2, 0),"üë©‚Äç‚ù§Ô∏è‚Äçüë©"), 
	&[
		Emoji::new("couple with heart: woman, woman, light skin tone", Version(13, 1),"üë©üèª‚Äç‚ù§Ô∏è‚Äçüë©üèª"),
	Emoji::new("couple with heart: woman, woman, light skin tone, medium-light skin tone", Version(13, 1),"üë©üèª‚Äç‚ù§Ô∏è‚Äçüë©üèº"),
	Emoji::new("couple with heart: woman, woman, light skin tone, medium skin tone", Version(13, 1),"üë©üèª‚Äç‚ù§Ô∏è‚Äçüë©üèΩ"),
	Emoji::new("couple with heart: woman, woman, light skin tone, medium-dark skin tone", Version(13, 1),"üë©üèª‚Äç‚ù§Ô∏è‚Äçüë©üèæ"),
	Emoji::new("couple with heart: woman, woman, light skin tone, dark skin tone", Version(13, 1),"üë©üèª‚Äç‚ù§Ô∏è‚Äçüë©üèø"),
	Emoji::new("couple with heart: woman, woman, medium-light skin tone, light skin tone", Version(13, 1),"üë©üèº‚Äç‚ù§Ô∏è‚Äçüë©üèª"),
	Emoji::new("couple with heart: woman, woman, medium-light skin tone", Version(13, 1),"üë©üèº‚Äç‚ù§Ô∏è‚Äçüë©üèº"),
	Emoji::new("couple with heart: woman, woman, medium-light skin tone, medium skin tone", Version(13, 1),"üë©üèº‚Äç‚ù§Ô∏è‚Äçüë©üèΩ"),
	Emoji::new("couple with heart: woman, woman, medium-light skin tone, medium-dark skin tone", Version(13, 1),"üë©üèº‚Äç‚ù§Ô∏è‚Äçüë©üèæ"),
	Emoji::new("couple with heart: woman, woman, medium-light skin tone, dark skin tone", Version(13, 1),"üë©üèº‚Äç‚ù§Ô∏è‚Äçüë©üèø"),
	Emoji::new("couple with heart: woman, woman, medium skin tone, light skin tone", Version(13, 1),"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë©üèª"),
	Emoji::new("couple with heart: woman, woman, medium skin tone, medium-light skin tone", Version(13, 1),"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë©üèº"),
	Emoji::new("couple with heart: woman, woman, medium skin tone", Version(13, 1),"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë©üèΩ"),
	Emoji::new("couple with heart: woman, woman, medium skin tone, medium-dark skin tone", Version(13, 1),"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë©üèæ"),
	Emoji::new("couple with heart: woman, woman, medium skin tone, dark skin tone", Version(13, 1),"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüë©üèø"),
	Emoji::new("couple with heart: woman, woman, medium-dark skin tone, light skin tone", Version(13, 1),"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë©üèª"),
	Emoji::new("couple with heart: woman, woman, medium-dark skin tone, medium-light skin tone", Version(13, 1),"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë©üèº"),
	Emoji::new("couple with heart: woman, woman, medium-dark skin tone, medium skin tone", Version(13, 1),"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë©üèΩ"),
	Emoji::new("couple with heart: woman, woman, medium-dark skin tone", Version(13, 1),"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë©üèæ"),
	Emoji::new("couple with heart: woman, woman, medium-dark skin tone, dark skin tone", Version(13, 1),"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüë©üèø"),
	Emoji::new("couple with heart: woman, woman, dark skin tone, light skin tone", Version(13, 1),"üë©üèø‚Äç‚ù§Ô∏è‚Äçüë©üèª"),
	Emoji::new("couple with heart: woman, woman, dark skin tone, medium-light skin tone", Version(13, 1),"üë©üèø‚Äç‚ù§Ô∏è‚Äçüë©üèº"),
	Emoji::new("couple with heart: woman, woman, dark skin tone, medium skin tone", Version(13, 1),"üë©üèø‚Äç‚ù§Ô∏è‚Äçüë©üèΩ"),
	Emoji::new("couple with heart: woman, woman, dark skin tone, medium-dark skin tone", Version(13, 1),"üë©üèø‚Äç‚ù§Ô∏è‚Äçüë©üèæ"),
	Emoji::new("couple with heart: woman, woman, dark skin tone", Version(13, 1),"üë©üèø‚Äç‚ù§Ô∏è‚Äçüë©üèø"),
	]),
	]);

		
		#[doc="family üë™"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FAMILY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FAMILY); // üë™ (`U+1F46A`)"] #[doc="# assert_eq!(FAMILY.to_string().as_str(), \"üë™\");"]#[doc="println!(\"{}\", FAMILY.gender((Gender::Male, Gender::Male))); // üë®‚Äçüë¶ (`U+1F468 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Gender::Male, Gender::Male)).to_string().as_str(), \"üë®‚Äçüë¶\");"]#[doc="println!(\"{}\", FAMILY.gender((Gender::Male, Gender::Female))); // üë®‚Äçüëß (`U+1F468 U+200D U+1F467`)"] #[doc="# assert_eq!(FAMILY.gender((Gender::Male, Gender::Female)).to_string().as_str(), \"üë®‚Äçüëß\");"]#[doc="println!(\"{}\", FAMILY.gender((Gender::Male, Pair::Males))); // üë®‚Äçüë¶‚Äçüë¶ (`U+1F468 U+200D U+1F466 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Gender::Male, Pair::Males)).to_string().as_str(), \"üë®‚Äçüë¶‚Äçüë¶\");"]#[doc="println!(\"{}\", FAMILY.gender((Gender::Male, Pair::Mixed))); // üë®‚Äçüëß‚Äçüë¶ (`U+1F468 U+200D U+1F467 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Gender::Male, Pair::Mixed)).to_string().as_str(), \"üë®‚Äçüëß‚Äçüë¶\");"]#[doc="println!(\"{}\", FAMILY.gender((Gender::Male, Pair::Females))); // üë®‚Äçüëß‚Äçüëß (`U+1F468 U+200D U+1F467 U+200D U+1F467`)"] #[doc="# assert_eq!(FAMILY.gender((Gender::Male, Pair::Females)).to_string().as_str(), \"üë®‚Äçüëß‚Äçüëß\");"]#[doc="println!(\"{}\", FAMILY.gender((Gender::Female, Gender::Male))); // üë©‚Äçüë¶ (`U+1F469 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Gender::Female, Gender::Male)).to_string().as_str(), \"üë©‚Äçüë¶\");"]#[doc="println!(\"{}\", FAMILY.gender((Gender::Female, Gender::Female))); // üë©‚Äçüëß (`U+1F469 U+200D U+1F467`)"] #[doc="# assert_eq!(FAMILY.gender((Gender::Female, Gender::Female)).to_string().as_str(), \"üë©‚Äçüëß\");"]#[doc="println!(\"{}\", FAMILY.gender((Gender::Female, Pair::Males))); // üë©‚Äçüë¶‚Äçüë¶ (`U+1F469 U+200D U+1F466 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Gender::Female, Pair::Males)).to_string().as_str(), \"üë©‚Äçüë¶‚Äçüë¶\");"]#[doc="println!(\"{}\", FAMILY.gender((Gender::Female, Pair::Mixed))); // üë©‚Äçüëß‚Äçüë¶ (`U+1F469 U+200D U+1F467 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Gender::Female, Pair::Mixed)).to_string().as_str(), \"üë©‚Äçüëß‚Äçüë¶\");"]#[doc="println!(\"{}\", FAMILY.gender((Gender::Female, Pair::Females))); // üë©‚Äçüëß‚Äçüëß (`U+1F469 U+200D U+1F467 U+200D U+1F467`)"] #[doc="# assert_eq!(FAMILY.gender((Gender::Female, Pair::Females)).to_string().as_str(), \"üë©‚Äçüëß‚Äçüëß\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Males, Gender::Male))); // üë®‚Äçüë®‚Äçüë¶ (`U+1F468 U+200D U+1F468 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Males, Gender::Male)).to_string().as_str(), \"üë®‚Äçüë®‚Äçüë¶\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Males, Gender::Female))); // üë®‚Äçüë®‚Äçüëß (`U+1F468 U+200D U+1F468 U+200D U+1F467`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Males, Gender::Female)).to_string().as_str(), \"üë®‚Äçüë®‚Äçüëß\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Males, Pair::Males))); // üë®‚Äçüë®‚Äçüë¶‚Äçüë¶ (`U+1F468 U+200D U+1F468 U+200D U+1F466 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Males, Pair::Males)).to_string().as_str(), \"üë®‚Äçüë®‚Äçüë¶‚Äçüë¶\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Males, Pair::Mixed))); // üë®‚Äçüë®‚Äçüëß‚Äçüë¶ (`U+1F468 U+200D U+1F468 U+200D U+1F467 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Males, Pair::Mixed)).to_string().as_str(), \"üë®‚Äçüë®‚Äçüëß‚Äçüë¶\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Males, Pair::Females))); // üë®‚Äçüë®‚Äçüëß‚Äçüëß (`U+1F468 U+200D U+1F468 U+200D U+1F467 U+200D U+1F467`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Males, Pair::Females)).to_string().as_str(), \"üë®‚Äçüë®‚Äçüëß‚Äçüëß\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Mixed, Gender::Male))); // üë®‚Äçüë©‚Äçüë¶ (`U+1F468 U+200D U+1F469 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Mixed, Gender::Male)).to_string().as_str(), \"üë®‚Äçüë©‚Äçüë¶\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Mixed, Gender::Female))); // üë®‚Äçüë©‚Äçüëß (`U+1F468 U+200D U+1F469 U+200D U+1F467`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Mixed, Gender::Female)).to_string().as_str(), \"üë®‚Äçüë©‚Äçüëß\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Mixed, Pair::Males))); // üë®‚Äçüë©‚Äçüë¶‚Äçüë¶ (`U+1F468 U+200D U+1F469 U+200D U+1F466 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Mixed, Pair::Males)).to_string().as_str(), \"üë®‚Äçüë©‚Äçüë¶‚Äçüë¶\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Mixed, Pair::Mixed))); // üë®‚Äçüë©‚Äçüëß‚Äçüë¶ (`U+1F468 U+200D U+1F469 U+200D U+1F467 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Mixed, Pair::Mixed)).to_string().as_str(), \"üë®‚Äçüë©‚Äçüëß‚Äçüë¶\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Mixed, Pair::Females))); // üë®‚Äçüë©‚Äçüëß‚Äçüëß (`U+1F468 U+200D U+1F469 U+200D U+1F467 U+200D U+1F467`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Mixed, Pair::Females)).to_string().as_str(), \"üë®‚Äçüë©‚Äçüëß‚Äçüëß\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Females, Gender::Male))); // üë©‚Äçüë©‚Äçüë¶ (`U+1F469 U+200D U+1F469 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Females, Gender::Male)).to_string().as_str(), \"üë©‚Äçüë©‚Äçüë¶\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Females, Gender::Female))); // üë©‚Äçüë©‚Äçüëß (`U+1F469 U+200D U+1F469 U+200D U+1F467`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Females, Gender::Female)).to_string().as_str(), \"üë©‚Äçüë©‚Äçüëß\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Females, Pair::Males))); // üë©‚Äçüë©‚Äçüë¶‚Äçüë¶ (`U+1F469 U+200D U+1F469 U+200D U+1F466 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Females, Pair::Males)).to_string().as_str(), \"üë©‚Äçüë©‚Äçüë¶‚Äçüë¶\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Females, Pair::Mixed))); // üë©‚Äçüë©‚Äçüëß‚Äçüë¶ (`U+1F469 U+200D U+1F469 U+200D U+1F467 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Females, Pair::Mixed)).to_string().as_str(), \"üë©‚Äçüë©‚Äçüëß‚Äçüë¶\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Females, Pair::Females))); // üë©‚Äçüë©‚Äçüëß‚Äçüëß (`U+1F469 U+200D U+1F469 U+200D U+1F467 U+200D U+1F467`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Females, Pair::Females)).to_string().as_str(), \"üë©‚Äçüë©‚Äçüëß‚Äçüëß\");"]
#[doc="```"]
pub static FAMILY: With<Family,Emoji> = With::new(Emoji::new("family", Version(0, 6),"üë™"), 
	&[
		Emoji::new("family: man, boy", Version(4, 0),"üë®‚Äçüë¶"),
	Emoji::new("family: man, girl", Version(4, 0),"üë®‚Äçüëß"),
	Emoji::new("family: man, boy, boy", Version(4, 0),"üë®‚Äçüë¶‚Äçüë¶"),
	Emoji::new("family: man, girl, boy", Version(4, 0),"üë®‚Äçüëß‚Äçüë¶"),
	Emoji::new("family: man, girl, girl", Version(4, 0),"üë®‚Äçüëß‚Äçüëß"),
	Emoji::new("family: woman, boy", Version(4, 0),"üë©‚Äçüë¶"),
	Emoji::new("family: woman, girl", Version(4, 0),"üë©‚Äçüëß"),
	Emoji::new("family: woman, boy, boy", Version(4, 0),"üë©‚Äçüë¶‚Äçüë¶"),
	Emoji::new("family: woman, girl, boy", Version(4, 0),"üë©‚Äçüëß‚Äçüë¶"),
	Emoji::new("family: woman, girl, girl", Version(4, 0),"üë©‚Äçüëß‚Äçüëß"),
	Emoji::new("family: man, man, boy", Version(2, 0),"üë®‚Äçüë®‚Äçüë¶"),
	Emoji::new("family: man, man, girl", Version(2, 0),"üë®‚Äçüë®‚Äçüëß"),
	Emoji::new("family: man, man, boy, boy", Version(2, 0),"üë®‚Äçüë®‚Äçüë¶‚Äçüë¶"),
	Emoji::new("family: man, man, girl, boy", Version(2, 0),"üë®‚Äçüë®‚Äçüëß‚Äçüë¶"),
	Emoji::new("family: man, man, girl, girl", Version(2, 0),"üë®‚Äçüë®‚Äçüëß‚Äçüëß"),
	Emoji::new("family: man, woman, boy", Version(2, 0),"üë®‚Äçüë©‚Äçüë¶"),
	Emoji::new("family: man, woman, girl", Version(2, 0),"üë®‚Äçüë©‚Äçüëß"),
	Emoji::new("family: man, woman, boy, boy", Version(2, 0),"üë®‚Äçüë©‚Äçüë¶‚Äçüë¶"),
	Emoji::new("family: man, woman, girl, boy", Version(2, 0),"üë®‚Äçüë©‚Äçüëß‚Äçüë¶"),
	Emoji::new("family: man, woman, girl, girl", Version(2, 0),"üë®‚Äçüë©‚Äçüëß‚Äçüëß"),
	Emoji::new("family: woman, woman, boy", Version(2, 0),"üë©‚Äçüë©‚Äçüë¶"),
	Emoji::new("family: woman, woman, girl", Version(2, 0),"üë©‚Äçüë©‚Äçüëß"),
	Emoji::new("family: woman, woman, boy, boy", Version(2, 0),"üë©‚Äçüë©‚Äçüë¶‚Äçüë¶"),
	Emoji::new("family: woman, woman, girl, boy", Version(2, 0),"üë©‚Äçüë©‚Äçüëß‚Äçüë¶"),
	Emoji::new("family: woman, woman, girl, girl", Version(2, 0),"üë©‚Äçüë©‚Äçüëß‚Äçüëß"),
	]);

		
		#[doc="kiss üíè"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KISS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KISS); // üíè (`U+1F48F`)"] #[doc="# assert_eq!(KISS.to_string().as_str(), \"üíè\");"]#[doc="println!(\"{}\", KISS.tone(Tone::Light)); // üíèüèª (`U+1F48F U+1F3FB`)"] #[doc="# assert_eq!(KISS.tone(Tone::Light).to_string().as_str(), \"üíèüèª\");"]#[doc="println!(\"{}\", KISS.tone((Tone::Light, Tone::MediumLight))); // üßëüèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèº (`U+1F9D1 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(KISS.tone((Tone::Light, Tone::MediumLight)).to_string().as_str(), \"üßëüèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèº\");"]#[doc="println!(\"{}\", KISS.tone((Tone::Light, Tone::Medium))); // üßëüèª‚Äç‚ù§Ô∏è‚Äçüíã‚ÄçüßëüèΩ (`U+1F9D1 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(KISS.tone((Tone::Light, Tone::Medium)).to_string().as_str(), \"üßëüèª‚Äç‚ù§Ô∏è‚Äçüíã‚ÄçüßëüèΩ\");"]#[doc="println!(\"{}\", KISS.tone((Tone::Light, Tone::MediumDark))); // üßëüèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèæ (`U+1F9D1 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(KISS.tone((Tone::Light, Tone::MediumDark)).to_string().as_str(), \"üßëüèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèæ\");"]#[doc="println!(\"{}\", KISS.tone((Tone::Light, Tone::Dark))); // üßëüèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèø (`U+1F9D1 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(KISS.tone((Tone::Light, Tone::Dark)).to_string().as_str(), \"üßëüèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèø\");"]#[doc="println!(\"{}\", KISS.tone((Tone::MediumLight, Tone::Light))); // üßëüèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèª (`U+1F9D1 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(KISS.tone((Tone::MediumLight, Tone::Light)).to_string().as_str(), \"üßëüèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèª\");"]#[doc="println!(\"{}\", KISS.tone(Tone::MediumLight)); // üíèüèº (`U+1F48F U+1F3FC`)"] #[doc="# assert_eq!(KISS.tone(Tone::MediumLight).to_string().as_str(), \"üíèüèº\");"]#[doc="println!(\"{}\", KISS.tone((Tone::MediumLight, Tone::Medium))); // üßëüèº‚Äç‚ù§Ô∏è‚Äçüíã‚ÄçüßëüèΩ (`U+1F9D1 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(KISS.tone((Tone::MediumLight, Tone::Medium)).to_string().as_str(), \"üßëüèº‚Äç‚ù§Ô∏è‚Äçüíã‚ÄçüßëüèΩ\");"]#[doc="println!(\"{}\", KISS.tone((Tone::MediumLight, Tone::MediumDark))); // üßëüèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèæ (`U+1F9D1 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(KISS.tone((Tone::MediumLight, Tone::MediumDark)).to_string().as_str(), \"üßëüèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèæ\");"]#[doc="println!(\"{}\", KISS.tone((Tone::MediumLight, Tone::Dark))); // üßëüèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèø (`U+1F9D1 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(KISS.tone((Tone::MediumLight, Tone::Dark)).to_string().as_str(), \"üßëüèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèø\");"]#[doc="println!(\"{}\", KISS.tone((Tone::Medium, Tone::Light))); // üßëüèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèª (`U+1F9D1 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(KISS.tone((Tone::Medium, Tone::Light)).to_string().as_str(), \"üßëüèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèª\");"]#[doc="println!(\"{}\", KISS.tone((Tone::Medium, Tone::MediumLight))); // üßëüèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèº (`U+1F9D1 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(KISS.tone((Tone::Medium, Tone::MediumLight)).to_string().as_str(), \"üßëüèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèº\");"]#[doc="println!(\"{}\", KISS.tone(Tone::Medium)); // üíèüèΩ (`U+1F48F U+1F3FD`)"] #[doc="# assert_eq!(KISS.tone(Tone::Medium).to_string().as_str(), \"üíèüèΩ\");"]#[doc="println!(\"{}\", KISS.tone((Tone::Medium, Tone::MediumDark))); // üßëüèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèæ (`U+1F9D1 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(KISS.tone((Tone::Medium, Tone::MediumDark)).to_string().as_str(), \"üßëüèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèæ\");"]#[doc="println!(\"{}\", KISS.tone((Tone::Medium, Tone::Dark))); // üßëüèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèø (`U+1F9D1 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(KISS.tone((Tone::Medium, Tone::Dark)).to_string().as_str(), \"üßëüèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèø\");"]#[doc="println!(\"{}\", KISS.tone((Tone::MediumDark, Tone::Light))); // üßëüèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèª (`U+1F9D1 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(KISS.tone((Tone::MediumDark, Tone::Light)).to_string().as_str(), \"üßëüèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèª\");"]#[doc="println!(\"{}\", KISS.tone((Tone::MediumDark, Tone::MediumLight))); // üßëüèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèº (`U+1F9D1 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(KISS.tone((Tone::MediumDark, Tone::MediumLight)).to_string().as_str(), \"üßëüèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèº\");"]#[doc="println!(\"{}\", KISS.tone((Tone::MediumDark, Tone::Medium))); // üßëüèæ‚Äç‚ù§Ô∏è‚Äçüíã‚ÄçüßëüèΩ (`U+1F9D1 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(KISS.tone((Tone::MediumDark, Tone::Medium)).to_string().as_str(), \"üßëüèæ‚Äç‚ù§Ô∏è‚Äçüíã‚ÄçüßëüèΩ\");"]#[doc="println!(\"{}\", KISS.tone(Tone::MediumDark)); // üíèüèæ (`U+1F48F U+1F3FE`)"] #[doc="# assert_eq!(KISS.tone(Tone::MediumDark).to_string().as_str(), \"üíèüèæ\");"]#[doc="println!(\"{}\", KISS.tone((Tone::MediumDark, Tone::Dark))); // üßëüèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèø (`U+1F9D1 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(KISS.tone((Tone::MediumDark, Tone::Dark)).to_string().as_str(), \"üßëüèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèø\");"]#[doc="println!(\"{}\", KISS.tone((Tone::Dark, Tone::Light))); // üßëüèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèª (`U+1F9D1 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(KISS.tone((Tone::Dark, Tone::Light)).to_string().as_str(), \"üßëüèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèª\");"]#[doc="println!(\"{}\", KISS.tone((Tone::Dark, Tone::MediumLight))); // üßëüèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèº (`U+1F9D1 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(KISS.tone((Tone::Dark, Tone::MediumLight)).to_string().as_str(), \"üßëüèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèº\");"]#[doc="println!(\"{}\", KISS.tone((Tone::Dark, Tone::Medium))); // üßëüèø‚Äç‚ù§Ô∏è‚Äçüíã‚ÄçüßëüèΩ (`U+1F9D1 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(KISS.tone((Tone::Dark, Tone::Medium)).to_string().as_str(), \"üßëüèø‚Äç‚ù§Ô∏è‚Äçüíã‚ÄçüßëüèΩ\");"]#[doc="println!(\"{}\", KISS.tone((Tone::Dark, Tone::MediumDark))); // üßëüèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèæ (`U+1F9D1 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(KISS.tone((Tone::Dark, Tone::MediumDark)).to_string().as_str(), \"üßëüèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèæ\");"]#[doc="println!(\"{}\", KISS.tone(Tone::Dark)); // üíèüèø (`U+1F48F U+1F3FF`)"] #[doc="# assert_eq!(KISS.tone(Tone::Dark).to_string().as_str(), \"üíèüèø\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males)); // üë®‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë® (`U+1F468 U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).to_string().as_str(), \"üë®‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone(Tone::Light)); // üë®üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª (`U+1F468 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone(Tone::Light).to_string().as_str(), \"üë®üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::Light, Tone::MediumLight))); // üë®üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº (`U+1F468 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::Light, Tone::MediumLight)).to_string().as_str(), \"üë®üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::Light, Tone::Medium))); // üë®üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ (`U+1F468 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::Light, Tone::Medium)).to_string().as_str(), \"üë®üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::Light, Tone::MediumDark))); // üë®üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ (`U+1F468 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::Light, Tone::MediumDark)).to_string().as_str(), \"üë®üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::Light, Tone::Dark))); // üë®üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø (`U+1F468 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::Light, Tone::Dark)).to_string().as_str(), \"üë®üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::MediumLight, Tone::Light))); // üë®üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª (`U+1F468 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::MediumLight, Tone::Light)).to_string().as_str(), \"üë®üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone(Tone::MediumLight)); // üë®üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº (`U+1F468 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::MediumLight, Tone::Medium))); // üë®üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ (`U+1F468 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::MediumLight, Tone::Medium)).to_string().as_str(), \"üë®üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::MediumLight, Tone::MediumDark))); // üë®üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ (`U+1F468 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::MediumLight, Tone::MediumDark)).to_string().as_str(), \"üë®üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::MediumLight, Tone::Dark))); // üë®üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø (`U+1F468 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::MediumLight, Tone::Dark)).to_string().as_str(), \"üë®üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::Medium, Tone::Light))); // üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª (`U+1F468 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::Medium, Tone::Light)).to_string().as_str(), \"üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::Medium, Tone::MediumLight))); // üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº (`U+1F468 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::Medium, Tone::MediumLight)).to_string().as_str(), \"üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone(Tone::Medium)); // üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ (`U+1F468 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::Medium, Tone::MediumDark))); // üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ (`U+1F468 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::Medium, Tone::MediumDark)).to_string().as_str(), \"üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::Medium, Tone::Dark))); // üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø (`U+1F468 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::Medium, Tone::Dark)).to_string().as_str(), \"üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::MediumDark, Tone::Light))); // üë®üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª (`U+1F468 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::MediumDark, Tone::Light)).to_string().as_str(), \"üë®üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::MediumDark, Tone::MediumLight))); // üë®üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº (`U+1F468 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::MediumDark, Tone::MediumLight)).to_string().as_str(), \"üë®üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::MediumDark, Tone::Medium))); // üë®üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ (`U+1F468 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::MediumDark, Tone::Medium)).to_string().as_str(), \"üë®üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone(Tone::MediumDark)); // üë®üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ (`U+1F468 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::MediumDark, Tone::Dark))); // üë®üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø (`U+1F468 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::MediumDark, Tone::Dark)).to_string().as_str(), \"üë®üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::Dark, Tone::Light))); // üë®üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª (`U+1F468 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::Dark, Tone::Light)).to_string().as_str(), \"üë®üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::Dark, Tone::MediumLight))); // üë®üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº (`U+1F468 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::Dark, Tone::MediumLight)).to_string().as_str(), \"üë®üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::Dark, Tone::Medium))); // üë®üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ (`U+1F468 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::Dark, Tone::Medium)).to_string().as_str(), \"üë®üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::Dark, Tone::MediumDark))); // üë®üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ (`U+1F468 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::Dark, Tone::MediumDark)).to_string().as_str(), \"üë®üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone(Tone::Dark)); // üë®üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø (`U+1F468 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone(Tone::Dark).to_string().as_str(), \"üë®üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed)); // üë©‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë® (`U+1F469 U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).to_string().as_str(), \"üë©‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone(Tone::Light)); // üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::Light, Tone::MediumLight))); // üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::Light, Tone::MediumLight)).to_string().as_str(), \"üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::Light, Tone::Medium))); // üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::Light, Tone::Medium)).to_string().as_str(), \"üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::Light, Tone::MediumDark))); // üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::Light, Tone::MediumDark)).to_string().as_str(), \"üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::Light, Tone::Dark))); // üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::Light, Tone::Dark)).to_string().as_str(), \"üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Light))); // üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Light)).to_string().as_str(), \"üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone(Tone::MediumLight)); // üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Medium))); // üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Medium)).to_string().as_str(), \"üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::MediumDark))); // üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::MediumDark)).to_string().as_str(), \"üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Dark))); // üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Dark)).to_string().as_str(), \"üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::Medium, Tone::Light))); // üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::Medium, Tone::Light)).to_string().as_str(), \"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::Medium, Tone::MediumLight))); // üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::Medium, Tone::MediumLight)).to_string().as_str(), \"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone(Tone::Medium)); // üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::Medium, Tone::MediumDark))); // üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::Medium, Tone::MediumDark)).to_string().as_str(), \"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::Medium, Tone::Dark))); // üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::Medium, Tone::Dark)).to_string().as_str(), \"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Light))); // üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Light)).to_string().as_str(), \"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::MediumLight))); // üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::MediumLight)).to_string().as_str(), \"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Medium))); // üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Medium)).to_string().as_str(), \"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone(Tone::MediumDark)); // üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Dark))); // üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Dark)).to_string().as_str(), \"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::Dark, Tone::Light))); // üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::Dark, Tone::Light)).to_string().as_str(), \"üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::Dark, Tone::MediumLight))); // üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::Dark, Tone::MediumLight)).to_string().as_str(), \"üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::Dark, Tone::Medium))); // üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::Dark, Tone::Medium)).to_string().as_str(), \"üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::Dark, Tone::MediumDark))); // üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::Dark, Tone::MediumDark)).to_string().as_str(), \"üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone(Tone::Dark)); // üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females)); // üë©‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë© (`U+1F469 U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).to_string().as_str(), \"üë©‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone(Tone::Light)); // üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèª (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèª\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::Light, Tone::MediumLight))); // üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèº (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::Light, Tone::MediumLight)).to_string().as_str(), \"üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèº\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::Light, Tone::Medium))); // üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèΩ (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::Light, Tone::Medium)).to_string().as_str(), \"üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèΩ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::Light, Tone::MediumDark))); // üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèæ (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::Light, Tone::MediumDark)).to_string().as_str(), \"üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèæ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::Light, Tone::Dark))); // üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèø (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::Light, Tone::Dark)).to_string().as_str(), \"üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèø\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::MediumLight, Tone::Light))); // üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèª (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::MediumLight, Tone::Light)).to_string().as_str(), \"üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèª\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone(Tone::MediumLight)); // üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèº (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèº\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::MediumLight, Tone::Medium))); // üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèΩ (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::MediumLight, Tone::Medium)).to_string().as_str(), \"üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèΩ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::MediumLight, Tone::MediumDark))); // üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèæ (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::MediumLight, Tone::MediumDark)).to_string().as_str(), \"üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèæ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::MediumLight, Tone::Dark))); // üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèø (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::MediumLight, Tone::Dark)).to_string().as_str(), \"üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèø\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::Medium, Tone::Light))); // üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèª (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::Medium, Tone::Light)).to_string().as_str(), \"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèª\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::Medium, Tone::MediumLight))); // üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèº (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::Medium, Tone::MediumLight)).to_string().as_str(), \"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèº\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone(Tone::Medium)); // üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèΩ (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèΩ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::Medium, Tone::MediumDark))); // üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèæ (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::Medium, Tone::MediumDark)).to_string().as_str(), \"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèæ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::Medium, Tone::Dark))); // üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèø (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::Medium, Tone::Dark)).to_string().as_str(), \"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèø\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::MediumDark, Tone::Light))); // üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèª (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::MediumDark, Tone::Light)).to_string().as_str(), \"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèª\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::MediumDark, Tone::MediumLight))); // üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèº (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::MediumDark, Tone::MediumLight)).to_string().as_str(), \"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèº\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::MediumDark, Tone::Medium))); // üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèΩ (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::MediumDark, Tone::Medium)).to_string().as_str(), \"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèΩ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone(Tone::MediumDark)); // üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèæ (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèæ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::MediumDark, Tone::Dark))); // üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèø (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::MediumDark, Tone::Dark)).to_string().as_str(), \"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèø\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::Dark, Tone::Light))); // üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèª (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::Dark, Tone::Light)).to_string().as_str(), \"üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèª\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::Dark, Tone::MediumLight))); // üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèº (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::Dark, Tone::MediumLight)).to_string().as_str(), \"üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèº\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::Dark, Tone::Medium))); // üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèΩ (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::Dark, Tone::Medium)).to_string().as_str(), \"üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèΩ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::Dark, Tone::MediumDark))); // üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèæ (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::Dark, Tone::MediumDark)).to_string().as_str(), \"üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèæ\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone(Tone::Dark)); // üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèø (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèø\");"]
#[doc="```"]
pub static KISS: With<Pair,With<TonePair,Emoji>> = With::new(With::new(Emoji::new("kiss", Version(0, 6),"üíè"), 
	&[
		Emoji::new("kiss: light skin tone", Version(13, 1),"üíèüèª"),
	Emoji::new("kiss: person, person, light skin tone, medium-light skin tone", Version(13, 1),"üßëüèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèº"),
	Emoji::new("kiss: person, person, light skin tone, medium skin tone", Version(13, 1),"üßëüèª‚Äç‚ù§Ô∏è‚Äçüíã‚ÄçüßëüèΩ"),
	Emoji::new("kiss: person, person, light skin tone, medium-dark skin tone", Version(13, 1),"üßëüèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèæ"),
	Emoji::new("kiss: person, person, light skin tone, dark skin tone", Version(13, 1),"üßëüèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèø"),
	Emoji::new("kiss: person, person, medium-light skin tone, light skin tone", Version(13, 1),"üßëüèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèª"),
	Emoji::new("kiss: medium-light skin tone", Version(13, 1),"üíèüèº"),
	Emoji::new("kiss: person, person, medium-light skin tone, medium skin tone", Version(13, 1),"üßëüèº‚Äç‚ù§Ô∏è‚Äçüíã‚ÄçüßëüèΩ"),
	Emoji::new("kiss: person, person, medium-light skin tone, medium-dark skin tone", Version(13, 1),"üßëüèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèæ"),
	Emoji::new("kiss: person, person, medium-light skin tone, dark skin tone", Version(13, 1),"üßëüèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèø"),
	Emoji::new("kiss: person, person, medium skin tone, light skin tone", Version(13, 1),"üßëüèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèª"),
	Emoji::new("kiss: person, person, medium skin tone, medium-light skin tone", Version(13, 1),"üßëüèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèº"),
	Emoji::new("kiss: medium skin tone", Version(13, 1),"üíèüèΩ"),
	Emoji::new("kiss: person, person, medium skin tone, medium-dark skin tone", Version(13, 1),"üßëüèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèæ"),
	Emoji::new("kiss: person, person, medium skin tone, dark skin tone", Version(13, 1),"üßëüèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèø"),
	Emoji::new("kiss: person, person, medium-dark skin tone, light skin tone", Version(13, 1),"üßëüèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèª"),
	Emoji::new("kiss: person, person, medium-dark skin tone, medium-light skin tone", Version(13, 1),"üßëüèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèº"),
	Emoji::new("kiss: person, person, medium-dark skin tone, medium skin tone", Version(13, 1),"üßëüèæ‚Äç‚ù§Ô∏è‚Äçüíã‚ÄçüßëüèΩ"),
	Emoji::new("kiss: medium-dark skin tone", Version(13, 1),"üíèüèæ"),
	Emoji::new("kiss: person, person, medium-dark skin tone, dark skin tone", Version(13, 1),"üßëüèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèø"),
	Emoji::new("kiss: person, person, dark skin tone, light skin tone", Version(13, 1),"üßëüèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèª"),
	Emoji::new("kiss: person, person, dark skin tone, medium-light skin tone", Version(13, 1),"üßëüèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèº"),
	Emoji::new("kiss: person, person, dark skin tone, medium skin tone", Version(13, 1),"üßëüèø‚Äç‚ù§Ô∏è‚Äçüíã‚ÄçüßëüèΩ"),
	Emoji::new("kiss: person, person, dark skin tone, medium-dark skin tone", Version(13, 1),"üßëüèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüßëüèæ"),
	Emoji::new("kiss: dark skin tone", Version(13, 1),"üíèüèø"),
	]), 
	&[
		With::new(Emoji::new("kiss: man, man", Version(2, 0),"üë®‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®"), 
	&[
		Emoji::new("kiss: man, man, light skin tone", Version(13, 1),"üë®üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª"),
	Emoji::new("kiss: man, man, light skin tone, medium-light skin tone", Version(13, 1),"üë®üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº"),
	Emoji::new("kiss: man, man, light skin tone, medium skin tone", Version(13, 1),"üë®üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ"),
	Emoji::new("kiss: man, man, light skin tone, medium-dark skin tone", Version(13, 1),"üë®üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ"),
	Emoji::new("kiss: man, man, light skin tone, dark skin tone", Version(13, 1),"üë®üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø"),
	Emoji::new("kiss: man, man, medium-light skin tone, light skin tone", Version(13, 1),"üë®üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª"),
	Emoji::new("kiss: man, man, medium-light skin tone", Version(13, 1),"üë®üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº"),
	Emoji::new("kiss: man, man, medium-light skin tone, medium skin tone", Version(13, 1),"üë®üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ"),
	Emoji::new("kiss: man, man, medium-light skin tone, medium-dark skin tone", Version(13, 1),"üë®üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ"),
	Emoji::new("kiss: man, man, medium-light skin tone, dark skin tone", Version(13, 1),"üë®üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø"),
	Emoji::new("kiss: man, man, medium skin tone, light skin tone", Version(13, 1),"üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª"),
	Emoji::new("kiss: man, man, medium skin tone, medium-light skin tone", Version(13, 1),"üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº"),
	Emoji::new("kiss: man, man, medium skin tone", Version(13, 1),"üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ"),
	Emoji::new("kiss: man, man, medium skin tone, medium-dark skin tone", Version(13, 1),"üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ"),
	Emoji::new("kiss: man, man, medium skin tone, dark skin tone", Version(13, 1),"üë®üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø"),
	Emoji::new("kiss: man, man, medium-dark skin tone, light skin tone", Version(13, 1),"üë®üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª"),
	Emoji::new("kiss: man, man, medium-dark skin tone, medium-light skin tone", Version(13, 1),"üë®üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº"),
	Emoji::new("kiss: man, man, medium-dark skin tone, medium skin tone", Version(13, 1),"üë®üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ"),
	Emoji::new("kiss: man, man, medium-dark skin tone", Version(13, 1),"üë®üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ"),
	Emoji::new("kiss: man, man, medium-dark skin tone, dark skin tone", Version(13, 1),"üë®üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø"),
	Emoji::new("kiss: man, man, dark skin tone, light skin tone", Version(13, 1),"üë®üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª"),
	Emoji::new("kiss: man, man, dark skin tone, medium-light skin tone", Version(13, 1),"üë®üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº"),
	Emoji::new("kiss: man, man, dark skin tone, medium skin tone", Version(13, 1),"üë®üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ"),
	Emoji::new("kiss: man, man, dark skin tone, medium-dark skin tone", Version(13, 1),"üë®üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ"),
	Emoji::new("kiss: man, man, dark skin tone", Version(13, 1),"üë®üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø"),
	]),
	With::new(Emoji::new("kiss: woman, man", Version(2, 0),"üë©‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®"), 
	&[
		Emoji::new("kiss: woman, man, light skin tone", Version(13, 1),"üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª"),
	Emoji::new("kiss: woman, man, light skin tone, medium-light skin tone", Version(13, 1),"üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº"),
	Emoji::new("kiss: woman, man, light skin tone, medium skin tone", Version(13, 1),"üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ"),
	Emoji::new("kiss: woman, man, light skin tone, medium-dark skin tone", Version(13, 1),"üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ"),
	Emoji::new("kiss: woman, man, light skin tone, dark skin tone", Version(13, 1),"üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø"),
	Emoji::new("kiss: woman, man, medium-light skin tone, light skin tone", Version(13, 1),"üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª"),
	Emoji::new("kiss: woman, man, medium-light skin tone", Version(13, 1),"üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº"),
	Emoji::new("kiss: woman, man, medium-light skin tone, medium skin tone", Version(13, 1),"üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ"),
	Emoji::new("kiss: woman, man, medium-light skin tone, medium-dark skin tone", Version(13, 1),"üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ"),
	Emoji::new("kiss: woman, man, medium-light skin tone, dark skin tone", Version(13, 1),"üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø"),
	Emoji::new("kiss: woman, man, medium skin tone, light skin tone", Version(13, 1),"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª"),
	Emoji::new("kiss: woman, man, medium skin tone, medium-light skin tone", Version(13, 1),"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº"),
	Emoji::new("kiss: woman, man, medium skin tone", Version(13, 1),"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ"),
	Emoji::new("kiss: woman, man, medium skin tone, medium-dark skin tone", Version(13, 1),"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ"),
	Emoji::new("kiss: woman, man, medium skin tone, dark skin tone", Version(13, 1),"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø"),
	Emoji::new("kiss: woman, man, medium-dark skin tone, light skin tone", Version(13, 1),"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª"),
	Emoji::new("kiss: woman, man, medium-dark skin tone, medium-light skin tone", Version(13, 1),"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº"),
	Emoji::new("kiss: woman, man, medium-dark skin tone, medium skin tone", Version(13, 1),"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ"),
	Emoji::new("kiss: woman, man, medium-dark skin tone", Version(13, 1),"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ"),
	Emoji::new("kiss: woman, man, medium-dark skin tone, dark skin tone", Version(13, 1),"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø"),
	Emoji::new("kiss: woman, man, dark skin tone, light skin tone", Version(13, 1),"üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèª"),
	Emoji::new("kiss: woman, man, dark skin tone, medium-light skin tone", Version(13, 1),"üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèº"),
	Emoji::new("kiss: woman, man, dark skin tone, medium skin tone", Version(13, 1),"üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèΩ"),
	Emoji::new("kiss: woman, man, dark skin tone, medium-dark skin tone", Version(13, 1),"üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèæ"),
	Emoji::new("kiss: woman, man, dark skin tone", Version(13, 1),"üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üèø"),
	]),
	With::new(Emoji::new("kiss: woman, woman", Version(2, 0),"üë©‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©"), 
	&[
		Emoji::new("kiss: woman, woman, light skin tone", Version(13, 1),"üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèª"),
	Emoji::new("kiss: woman, woman, light skin tone, medium-light skin tone", Version(13, 1),"üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèº"),
	Emoji::new("kiss: woman, woman, light skin tone, medium skin tone", Version(13, 1),"üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèΩ"),
	Emoji::new("kiss: woman, woman, light skin tone, medium-dark skin tone", Version(13, 1),"üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèæ"),
	Emoji::new("kiss: woman, woman, light skin tone, dark skin tone", Version(13, 1),"üë©üèª‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèø"),
	Emoji::new("kiss: woman, woman, medium-light skin tone, light skin tone", Version(13, 1),"üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèª"),
	Emoji::new("kiss: woman, woman, medium-light skin tone", Version(13, 1),"üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèº"),
	Emoji::new("kiss: woman, woman, medium-light skin tone, medium skin tone", Version(13, 1),"üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèΩ"),
	Emoji::new("kiss: woman, woman, medium-light skin tone, medium-dark skin tone", Version(13, 1),"üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèæ"),
	Emoji::new("kiss: woman, woman, medium-light skin tone, dark skin tone", Version(13, 1),"üë©üèº‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèø"),
	Emoji::new("kiss: woman, woman, medium skin tone, light skin tone", Version(13, 1),"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèª"),
	Emoji::new("kiss: woman, woman, medium skin tone, medium-light skin tone", Version(13, 1),"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèº"),
	Emoji::new("kiss: woman, woman, medium skin tone", Version(13, 1),"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèΩ"),
	Emoji::new("kiss: woman, woman, medium skin tone, medium-dark skin tone", Version(13, 1),"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèæ"),
	Emoji::new("kiss: woman, woman, medium skin tone, dark skin tone", Version(13, 1),"üë©üèΩ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèø"),
	Emoji::new("kiss: woman, woman, medium-dark skin tone, light skin tone", Version(13, 1),"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèª"),
	Emoji::new("kiss: woman, woman, medium-dark skin tone, medium-light skin tone", Version(13, 1),"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèº"),
	Emoji::new("kiss: woman, woman, medium-dark skin tone, medium skin tone", Version(13, 1),"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèΩ"),
	Emoji::new("kiss: woman, woman, medium-dark skin tone", Version(13, 1),"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèæ"),
	Emoji::new("kiss: woman, woman, medium-dark skin tone, dark skin tone", Version(13, 1),"üë©üèæ‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèø"),
	Emoji::new("kiss: woman, woman, dark skin tone, light skin tone", Version(13, 1),"üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèª"),
	Emoji::new("kiss: woman, woman, dark skin tone, medium-light skin tone", Version(13, 1),"üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèº"),
	Emoji::new("kiss: woman, woman, dark skin tone, medium skin tone", Version(13, 1),"üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèΩ"),
	Emoji::new("kiss: woman, woman, dark skin tone, medium-dark skin tone", Version(13, 1),"üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèæ"),
	Emoji::new("kiss: woman, woman, dark skin tone", Version(13, 1),"üë©üèø‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©üèø"),
	]),
	]);

		
		#[doc="person holding hands üßë‚Äçü§ù‚Äçüßë"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_HOLDING_HANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_HOLDING_HANDS); // üßë‚Äçü§ù‚Äçüßë (`U+1F9D1 U+200D U+1F91D U+200D U+1F9D1`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.to_string().as_str(), \"üßë‚Äçü§ù‚Äçüßë\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone(Tone::Light)); // üßëüèª‚Äçü§ù‚Äçüßëüèª (`U+1F9D1 U+1F3FB U+200D U+1F91D U+200D U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone(Tone::Light).to_string().as_str(), \"üßëüèª‚Äçü§ù‚Äçüßëüèª\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::Light, Tone::MediumLight))); // üßëüèª‚Äçü§ù‚Äçüßëüèº (`U+1F9D1 U+1F3FB U+200D U+1F91D U+200D U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::Light, Tone::MediumLight)).to_string().as_str(), \"üßëüèª‚Äçü§ù‚Äçüßëüèº\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::Light, Tone::Medium))); // üßëüèª‚Äçü§ù‚ÄçüßëüèΩ (`U+1F9D1 U+1F3FB U+200D U+1F91D U+200D U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::Light, Tone::Medium)).to_string().as_str(), \"üßëüèª‚Äçü§ù‚ÄçüßëüèΩ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::Light, Tone::MediumDark))); // üßëüèª‚Äçü§ù‚Äçüßëüèæ (`U+1F9D1 U+1F3FB U+200D U+1F91D U+200D U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::Light, Tone::MediumDark)).to_string().as_str(), \"üßëüèª‚Äçü§ù‚Äçüßëüèæ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::Light, Tone::Dark))); // üßëüèª‚Äçü§ù‚Äçüßëüèø (`U+1F9D1 U+1F3FB U+200D U+1F91D U+200D U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::Light, Tone::Dark)).to_string().as_str(), \"üßëüèª‚Äçü§ù‚Äçüßëüèø\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::MediumLight, Tone::Light))); // üßëüèº‚Äçü§ù‚Äçüßëüèª (`U+1F9D1 U+1F3FC U+200D U+1F91D U+200D U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::MediumLight, Tone::Light)).to_string().as_str(), \"üßëüèº‚Äçü§ù‚Äçüßëüèª\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone(Tone::MediumLight)); // üßëüèº‚Äçü§ù‚Äçüßëüèº (`U+1F9D1 U+1F3FC U+200D U+1F91D U+200D U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº‚Äçü§ù‚Äçüßëüèº\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::MediumLight, Tone::Medium))); // üßëüèº‚Äçü§ù‚ÄçüßëüèΩ (`U+1F9D1 U+1F3FC U+200D U+1F91D U+200D U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::MediumLight, Tone::Medium)).to_string().as_str(), \"üßëüèº‚Äçü§ù‚ÄçüßëüèΩ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::MediumLight, Tone::MediumDark))); // üßëüèº‚Äçü§ù‚Äçüßëüèæ (`U+1F9D1 U+1F3FC U+200D U+1F91D U+200D U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::MediumLight, Tone::MediumDark)).to_string().as_str(), \"üßëüèº‚Äçü§ù‚Äçüßëüèæ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::MediumLight, Tone::Dark))); // üßëüèº‚Äçü§ù‚Äçüßëüèø (`U+1F9D1 U+1F3FC U+200D U+1F91D U+200D U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::MediumLight, Tone::Dark)).to_string().as_str(), \"üßëüèº‚Äçü§ù‚Äçüßëüèø\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::Medium, Tone::Light))); // üßëüèΩ‚Äçü§ù‚Äçüßëüèª (`U+1F9D1 U+1F3FD U+200D U+1F91D U+200D U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::Medium, Tone::Light)).to_string().as_str(), \"üßëüèΩ‚Äçü§ù‚Äçüßëüèª\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::Medium, Tone::MediumLight))); // üßëüèΩ‚Äçü§ù‚Äçüßëüèº (`U+1F9D1 U+1F3FD U+200D U+1F91D U+200D U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::Medium, Tone::MediumLight)).to_string().as_str(), \"üßëüèΩ‚Äçü§ù‚Äçüßëüèº\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone(Tone::Medium)); // üßëüèΩ‚Äçü§ù‚ÄçüßëüèΩ (`U+1F9D1 U+1F3FD U+200D U+1F91D U+200D U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ‚Äçü§ù‚ÄçüßëüèΩ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::Medium, Tone::MediumDark))); // üßëüèΩ‚Äçü§ù‚Äçüßëüèæ (`U+1F9D1 U+1F3FD U+200D U+1F91D U+200D U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::Medium, Tone::MediumDark)).to_string().as_str(), \"üßëüèΩ‚Äçü§ù‚Äçüßëüèæ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::Medium, Tone::Dark))); // üßëüèΩ‚Äçü§ù‚Äçüßëüèø (`U+1F9D1 U+1F3FD U+200D U+1F91D U+200D U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::Medium, Tone::Dark)).to_string().as_str(), \"üßëüèΩ‚Äçü§ù‚Äçüßëüèø\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::MediumDark, Tone::Light))); // üßëüèæ‚Äçü§ù‚Äçüßëüèª (`U+1F9D1 U+1F3FE U+200D U+1F91D U+200D U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::MediumDark, Tone::Light)).to_string().as_str(), \"üßëüèæ‚Äçü§ù‚Äçüßëüèª\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::MediumDark, Tone::MediumLight))); // üßëüèæ‚Äçü§ù‚Äçüßëüèº (`U+1F9D1 U+1F3FE U+200D U+1F91D U+200D U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::MediumDark, Tone::MediumLight)).to_string().as_str(), \"üßëüèæ‚Äçü§ù‚Äçüßëüèº\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::MediumDark, Tone::Medium))); // üßëüèæ‚Äçü§ù‚ÄçüßëüèΩ (`U+1F9D1 U+1F3FE U+200D U+1F91D U+200D U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::MediumDark, Tone::Medium)).to_string().as_str(), \"üßëüèæ‚Äçü§ù‚ÄçüßëüèΩ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone(Tone::MediumDark)); // üßëüèæ‚Äçü§ù‚Äçüßëüèæ (`U+1F9D1 U+1F3FE U+200D U+1F91D U+200D U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ‚Äçü§ù‚Äçüßëüèæ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::MediumDark, Tone::Dark))); // üßëüèæ‚Äçü§ù‚Äçüßëüèø (`U+1F9D1 U+1F3FE U+200D U+1F91D U+200D U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::MediumDark, Tone::Dark)).to_string().as_str(), \"üßëüèæ‚Äçü§ù‚Äçüßëüèø\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::Dark, Tone::Light))); // üßëüèø‚Äçü§ù‚Äçüßëüèª (`U+1F9D1 U+1F3FF U+200D U+1F91D U+200D U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::Dark, Tone::Light)).to_string().as_str(), \"üßëüèø‚Äçü§ù‚Äçüßëüèª\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::Dark, Tone::MediumLight))); // üßëüèø‚Äçü§ù‚Äçüßëüèº (`U+1F9D1 U+1F3FF U+200D U+1F91D U+200D U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::Dark, Tone::MediumLight)).to_string().as_str(), \"üßëüèø‚Äçü§ù‚Äçüßëüèº\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::Dark, Tone::Medium))); // üßëüèø‚Äçü§ù‚ÄçüßëüèΩ (`U+1F9D1 U+1F3FF U+200D U+1F91D U+200D U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::Dark, Tone::Medium)).to_string().as_str(), \"üßëüèø‚Äçü§ù‚ÄçüßëüèΩ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::Dark, Tone::MediumDark))); // üßëüèø‚Äçü§ù‚Äçüßëüèæ (`U+1F9D1 U+1F3FF U+200D U+1F91D U+200D U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::Dark, Tone::MediumDark)).to_string().as_str(), \"üßëüèø‚Äçü§ù‚Äçüßëüèæ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone(Tone::Dark)); // üßëüèø‚Äçü§ù‚Äçüßëüèø (`U+1F9D1 U+1F3FF U+200D U+1F91D U+200D U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone(Tone::Dark).to_string().as_str(), \"üßëüèø‚Äçü§ù‚Äçüßëüèø\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males)); // üë¨ (`U+1F46C`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).to_string().as_str(), \"üë¨\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone(Tone::Light)); // üë¨üèª (`U+1F46C U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone(Tone::Light).to_string().as_str(), \"üë¨üèª\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Light, Tone::MediumLight))); // üë®üèª‚Äçü§ù‚Äçüë®üèº (`U+1F468 U+1F3FB U+200D U+1F91D U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Light, Tone::MediumLight)).to_string().as_str(), \"üë®üèª‚Äçü§ù‚Äçüë®üèº\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Light, Tone::Medium))); // üë®üèª‚Äçü§ù‚Äçüë®üèΩ (`U+1F468 U+1F3FB U+200D U+1F91D U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Light, Tone::Medium)).to_string().as_str(), \"üë®üèª‚Äçü§ù‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Light, Tone::MediumDark))); // üë®üèª‚Äçü§ù‚Äçüë®üèæ (`U+1F468 U+1F3FB U+200D U+1F91D U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Light, Tone::MediumDark)).to_string().as_str(), \"üë®üèª‚Äçü§ù‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Light, Tone::Dark))); // üë®üèª‚Äçü§ù‚Äçüë®üèø (`U+1F468 U+1F3FB U+200D U+1F91D U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Light, Tone::Dark)).to_string().as_str(), \"üë®üèª‚Äçü§ù‚Äçüë®üèø\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumLight, Tone::Light))); // üë®üèº‚Äçü§ù‚Äçüë®üèª (`U+1F468 U+1F3FC U+200D U+1F91D U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumLight, Tone::Light)).to_string().as_str(), \"üë®üèº‚Äçü§ù‚Äçüë®üèª\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone(Tone::MediumLight)); // üë¨üèº (`U+1F46C U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone(Tone::MediumLight).to_string().as_str(), \"üë¨üèº\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumLight, Tone::Medium))); // üë®üèº‚Äçü§ù‚Äçüë®üèΩ (`U+1F468 U+1F3FC U+200D U+1F91D U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumLight, Tone::Medium)).to_string().as_str(), \"üë®üèº‚Äçü§ù‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumLight, Tone::MediumDark))); // üë®üèº‚Äçü§ù‚Äçüë®üèæ (`U+1F468 U+1F3FC U+200D U+1F91D U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumLight, Tone::MediumDark)).to_string().as_str(), \"üë®üèº‚Äçü§ù‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumLight, Tone::Dark))); // üë®üèº‚Äçü§ù‚Äçüë®üèø (`U+1F468 U+1F3FC U+200D U+1F91D U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumLight, Tone::Dark)).to_string().as_str(), \"üë®üèº‚Äçü§ù‚Äçüë®üèø\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Medium, Tone::Light))); // üë®üèΩ‚Äçü§ù‚Äçüë®üèª (`U+1F468 U+1F3FD U+200D U+1F91D U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Medium, Tone::Light)).to_string().as_str(), \"üë®üèΩ‚Äçü§ù‚Äçüë®üèª\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Medium, Tone::MediumLight))); // üë®üèΩ‚Äçü§ù‚Äçüë®üèº (`U+1F468 U+1F3FD U+200D U+1F91D U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Medium, Tone::MediumLight)).to_string().as_str(), \"üë®üèΩ‚Äçü§ù‚Äçüë®üèº\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone(Tone::Medium)); // üë¨üèΩ (`U+1F46C U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone(Tone::Medium).to_string().as_str(), \"üë¨üèΩ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Medium, Tone::MediumDark))); // üë®üèΩ‚Äçü§ù‚Äçüë®üèæ (`U+1F468 U+1F3FD U+200D U+1F91D U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Medium, Tone::MediumDark)).to_string().as_str(), \"üë®üèΩ‚Äçü§ù‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Medium, Tone::Dark))); // üë®üèΩ‚Äçü§ù‚Äçüë®üèø (`U+1F468 U+1F3FD U+200D U+1F91D U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Medium, Tone::Dark)).to_string().as_str(), \"üë®üèΩ‚Äçü§ù‚Äçüë®üèø\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumDark, Tone::Light))); // üë®üèæ‚Äçü§ù‚Äçüë®üèª (`U+1F468 U+1F3FE U+200D U+1F91D U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumDark, Tone::Light)).to_string().as_str(), \"üë®üèæ‚Äçü§ù‚Äçüë®üèª\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumDark, Tone::MediumLight))); // üë®üèæ‚Äçü§ù‚Äçüë®üèº (`U+1F468 U+1F3FE U+200D U+1F91D U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumDark, Tone::MediumLight)).to_string().as_str(), \"üë®üèæ‚Äçü§ù‚Äçüë®üèº\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumDark, Tone::Medium))); // üë®üèæ‚Äçü§ù‚Äçüë®üèΩ (`U+1F468 U+1F3FE U+200D U+1F91D U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumDark, Tone::Medium)).to_string().as_str(), \"üë®üèæ‚Äçü§ù‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone(Tone::MediumDark)); // üë¨üèæ (`U+1F46C U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone(Tone::MediumDark).to_string().as_str(), \"üë¨üèæ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumDark, Tone::Dark))); // üë®üèæ‚Äçü§ù‚Äçüë®üèø (`U+1F468 U+1F3FE U+200D U+1F91D U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumDark, Tone::Dark)).to_string().as_str(), \"üë®üèæ‚Äçü§ù‚Äçüë®üèø\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Dark, Tone::Light))); // üë®üèø‚Äçü§ù‚Äçüë®üèª (`U+1F468 U+1F3FF U+200D U+1F91D U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Dark, Tone::Light)).to_string().as_str(), \"üë®üèø‚Äçü§ù‚Äçüë®üèª\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Dark, Tone::MediumLight))); // üë®üèø‚Äçü§ù‚Äçüë®üèº (`U+1F468 U+1F3FF U+200D U+1F91D U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Dark, Tone::MediumLight)).to_string().as_str(), \"üë®üèø‚Äçü§ù‚Äçüë®üèº\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Dark, Tone::Medium))); // üë®üèø‚Äçü§ù‚Äçüë®üèΩ (`U+1F468 U+1F3FF U+200D U+1F91D U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Dark, Tone::Medium)).to_string().as_str(), \"üë®üèø‚Äçü§ù‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Dark, Tone::MediumDark))); // üë®üèø‚Äçü§ù‚Äçüë®üèæ (`U+1F468 U+1F3FF U+200D U+1F91D U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Dark, Tone::MediumDark)).to_string().as_str(), \"üë®üèø‚Äçü§ù‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone(Tone::Dark)); // üë¨üèø (`U+1F46C U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone(Tone::Dark).to_string().as_str(), \"üë¨üèø\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed)); // üë´ (`U+1F46B`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).to_string().as_str(), \"üë´\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone(Tone::Light)); // üë´üèª (`U+1F46B U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone(Tone::Light).to_string().as_str(), \"üë´üèª\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Light, Tone::MediumLight))); // üë©üèª‚Äçü§ù‚Äçüë®üèº (`U+1F469 U+1F3FB U+200D U+1F91D U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Light, Tone::MediumLight)).to_string().as_str(), \"üë©üèª‚Äçü§ù‚Äçüë®üèº\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Light, Tone::Medium))); // üë©üèª‚Äçü§ù‚Äçüë®üèΩ (`U+1F469 U+1F3FB U+200D U+1F91D U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Light, Tone::Medium)).to_string().as_str(), \"üë©üèª‚Äçü§ù‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Light, Tone::MediumDark))); // üë©üèª‚Äçü§ù‚Äçüë®üèæ (`U+1F469 U+1F3FB U+200D U+1F91D U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Light, Tone::MediumDark)).to_string().as_str(), \"üë©üèª‚Äçü§ù‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Light, Tone::Dark))); // üë©üèª‚Äçü§ù‚Äçüë®üèø (`U+1F469 U+1F3FB U+200D U+1F91D U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Light, Tone::Dark)).to_string().as_str(), \"üë©üèª‚Äçü§ù‚Äçüë®üèø\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Light))); // üë©üèº‚Äçü§ù‚Äçüë®üèª (`U+1F469 U+1F3FC U+200D U+1F91D U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Light)).to_string().as_str(), \"üë©üèº‚Äçü§ù‚Äçüë®üèª\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone(Tone::MediumLight)); // üë´üèº (`U+1F46B U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone(Tone::MediumLight).to_string().as_str(), \"üë´üèº\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Medium))); // üë©üèº‚Äçü§ù‚Äçüë®üèΩ (`U+1F469 U+1F3FC U+200D U+1F91D U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Medium)).to_string().as_str(), \"üë©üèº‚Äçü§ù‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::MediumDark))); // üë©üèº‚Äçü§ù‚Äçüë®üèæ (`U+1F469 U+1F3FC U+200D U+1F91D U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::MediumDark)).to_string().as_str(), \"üë©üèº‚Äçü§ù‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Dark))); // üë©üèº‚Äçü§ù‚Äçüë®üèø (`U+1F469 U+1F3FC U+200D U+1F91D U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Dark)).to_string().as_str(), \"üë©üèº‚Äçü§ù‚Äçüë®üèø\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Medium, Tone::Light))); // üë©üèΩ‚Äçü§ù‚Äçüë®üèª (`U+1F469 U+1F3FD U+200D U+1F91D U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Medium, Tone::Light)).to_string().as_str(), \"üë©üèΩ‚Äçü§ù‚Äçüë®üèª\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Medium, Tone::MediumLight))); // üë©üèΩ‚Äçü§ù‚Äçüë®üèº (`U+1F469 U+1F3FD U+200D U+1F91D U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Medium, Tone::MediumLight)).to_string().as_str(), \"üë©üèΩ‚Äçü§ù‚Äçüë®üèº\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone(Tone::Medium)); // üë´üèΩ (`U+1F46B U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone(Tone::Medium).to_string().as_str(), \"üë´üèΩ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Medium, Tone::MediumDark))); // üë©üèΩ‚Äçü§ù‚Äçüë®üèæ (`U+1F469 U+1F3FD U+200D U+1F91D U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Medium, Tone::MediumDark)).to_string().as_str(), \"üë©üèΩ‚Äçü§ù‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Medium, Tone::Dark))); // üë©üèΩ‚Äçü§ù‚Äçüë®üèø (`U+1F469 U+1F3FD U+200D U+1F91D U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Medium, Tone::Dark)).to_string().as_str(), \"üë©üèΩ‚Äçü§ù‚Äçüë®üèø\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Light))); // üë©üèæ‚Äçü§ù‚Äçüë®üèª (`U+1F469 U+1F3FE U+200D U+1F91D U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Light)).to_string().as_str(), \"üë©üèæ‚Äçü§ù‚Äçüë®üèª\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::MediumLight))); // üë©üèæ‚Äçü§ù‚Äçüë®üèº (`U+1F469 U+1F3FE U+200D U+1F91D U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::MediumLight)).to_string().as_str(), \"üë©üèæ‚Äçü§ù‚Äçüë®üèº\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Medium))); // üë©üèæ‚Äçü§ù‚Äçüë®üèΩ (`U+1F469 U+1F3FE U+200D U+1F91D U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Medium)).to_string().as_str(), \"üë©üèæ‚Äçü§ù‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone(Tone::MediumDark)); // üë´üèæ (`U+1F46B U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone(Tone::MediumDark).to_string().as_str(), \"üë´üèæ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Dark))); // üë©üèæ‚Äçü§ù‚Äçüë®üèø (`U+1F469 U+1F3FE U+200D U+1F91D U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Dark)).to_string().as_str(), \"üë©üèæ‚Äçü§ù‚Äçüë®üèø\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Dark, Tone::Light))); // üë©üèø‚Äçü§ù‚Äçüë®üèª (`U+1F469 U+1F3FF U+200D U+1F91D U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Dark, Tone::Light)).to_string().as_str(), \"üë©üèø‚Äçü§ù‚Äçüë®üèª\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Dark, Tone::MediumLight))); // üë©üèø‚Äçü§ù‚Äçüë®üèº (`U+1F469 U+1F3FF U+200D U+1F91D U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Dark, Tone::MediumLight)).to_string().as_str(), \"üë©üèø‚Äçü§ù‚Äçüë®üèº\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Dark, Tone::Medium))); // üë©üèø‚Äçü§ù‚Äçüë®üèΩ (`U+1F469 U+1F3FF U+200D U+1F91D U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Dark, Tone::Medium)).to_string().as_str(), \"üë©üèø‚Äçü§ù‚Äçüë®üèΩ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Dark, Tone::MediumDark))); // üë©üèø‚Äçü§ù‚Äçüë®üèæ (`U+1F469 U+1F3FF U+200D U+1F91D U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Dark, Tone::MediumDark)).to_string().as_str(), \"üë©üèø‚Äçü§ù‚Äçüë®üèæ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone(Tone::Dark)); // üë´üèø (`U+1F46B U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone(Tone::Dark).to_string().as_str(), \"üë´üèø\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females)); // üë≠ (`U+1F46D`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).to_string().as_str(), \"üë≠\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone(Tone::Light)); // üë≠üèª (`U+1F46D U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone(Tone::Light).to_string().as_str(), \"üë≠üèª\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Light, Tone::MediumLight))); // üë©üèª‚Äçü§ù‚Äçüë©üèº (`U+1F469 U+1F3FB U+200D U+1F91D U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Light, Tone::MediumLight)).to_string().as_str(), \"üë©üèª‚Äçü§ù‚Äçüë©üèº\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Light, Tone::Medium))); // üë©üèª‚Äçü§ù‚Äçüë©üèΩ (`U+1F469 U+1F3FB U+200D U+1F91D U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Light, Tone::Medium)).to_string().as_str(), \"üë©üèª‚Äçü§ù‚Äçüë©üèΩ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Light, Tone::MediumDark))); // üë©üèª‚Äçü§ù‚Äçüë©üèæ (`U+1F469 U+1F3FB U+200D U+1F91D U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Light, Tone::MediumDark)).to_string().as_str(), \"üë©üèª‚Äçü§ù‚Äçüë©üèæ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Light, Tone::Dark))); // üë©üèª‚Äçü§ù‚Äçüë©üèø (`U+1F469 U+1F3FB U+200D U+1F91D U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Light, Tone::Dark)).to_string().as_str(), \"üë©üèª‚Äçü§ù‚Äçüë©üèø\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumLight, Tone::Light))); // üë©üèº‚Äçü§ù‚Äçüë©üèª (`U+1F469 U+1F3FC U+200D U+1F91D U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumLight, Tone::Light)).to_string().as_str(), \"üë©üèº‚Äçü§ù‚Äçüë©üèª\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone(Tone::MediumLight)); // üë≠üèº (`U+1F46D U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone(Tone::MediumLight).to_string().as_str(), \"üë≠üèº\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumLight, Tone::Medium))); // üë©üèº‚Äçü§ù‚Äçüë©üèΩ (`U+1F469 U+1F3FC U+200D U+1F91D U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumLight, Tone::Medium)).to_string().as_str(), \"üë©üèº‚Äçü§ù‚Äçüë©üèΩ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumLight, Tone::MediumDark))); // üë©üèº‚Äçü§ù‚Äçüë©üèæ (`U+1F469 U+1F3FC U+200D U+1F91D U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumLight, Tone::MediumDark)).to_string().as_str(), \"üë©üèº‚Äçü§ù‚Äçüë©üèæ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumLight, Tone::Dark))); // üë©üèº‚Äçü§ù‚Äçüë©üèø (`U+1F469 U+1F3FC U+200D U+1F91D U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumLight, Tone::Dark)).to_string().as_str(), \"üë©üèº‚Äçü§ù‚Äçüë©üèø\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Medium, Tone::Light))); // üë©üèΩ‚Äçü§ù‚Äçüë©üèª (`U+1F469 U+1F3FD U+200D U+1F91D U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Medium, Tone::Light)).to_string().as_str(), \"üë©üèΩ‚Äçü§ù‚Äçüë©üèª\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Medium, Tone::MediumLight))); // üë©üèΩ‚Äçü§ù‚Äçüë©üèº (`U+1F469 U+1F3FD U+200D U+1F91D U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Medium, Tone::MediumLight)).to_string().as_str(), \"üë©üèΩ‚Äçü§ù‚Äçüë©üèº\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone(Tone::Medium)); // üë≠üèΩ (`U+1F46D U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone(Tone::Medium).to_string().as_str(), \"üë≠üèΩ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Medium, Tone::MediumDark))); // üë©üèΩ‚Äçü§ù‚Äçüë©üèæ (`U+1F469 U+1F3FD U+200D U+1F91D U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Medium, Tone::MediumDark)).to_string().as_str(), \"üë©üèΩ‚Äçü§ù‚Äçüë©üèæ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Medium, Tone::Dark))); // üë©üèΩ‚Äçü§ù‚Äçüë©üèø (`U+1F469 U+1F3FD U+200D U+1F91D U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Medium, Tone::Dark)).to_string().as_str(), \"üë©üèΩ‚Äçü§ù‚Äçüë©üèø\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumDark, Tone::Light))); // üë©üèæ‚Äçü§ù‚Äçüë©üèª (`U+1F469 U+1F3FE U+200D U+1F91D U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumDark, Tone::Light)).to_string().as_str(), \"üë©üèæ‚Äçü§ù‚Äçüë©üèª\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumDark, Tone::MediumLight))); // üë©üèæ‚Äçü§ù‚Äçüë©üèº (`U+1F469 U+1F3FE U+200D U+1F91D U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumDark, Tone::MediumLight)).to_string().as_str(), \"üë©üèæ‚Äçü§ù‚Äçüë©üèº\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumDark, Tone::Medium))); // üë©üèæ‚Äçü§ù‚Äçüë©üèΩ (`U+1F469 U+1F3FE U+200D U+1F91D U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumDark, Tone::Medium)).to_string().as_str(), \"üë©üèæ‚Äçü§ù‚Äçüë©üèΩ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone(Tone::MediumDark)); // üë≠üèæ (`U+1F46D U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone(Tone::MediumDark).to_string().as_str(), \"üë≠üèæ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumDark, Tone::Dark))); // üë©üèæ‚Äçü§ù‚Äçüë©üèø (`U+1F469 U+1F3FE U+200D U+1F91D U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumDark, Tone::Dark)).to_string().as_str(), \"üë©üèæ‚Äçü§ù‚Äçüë©üèø\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Dark, Tone::Light))); // üë©üèø‚Äçü§ù‚Äçüë©üèª (`U+1F469 U+1F3FF U+200D U+1F91D U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Dark, Tone::Light)).to_string().as_str(), \"üë©üèø‚Äçü§ù‚Äçüë©üèª\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Dark, Tone::MediumLight))); // üë©üèø‚Äçü§ù‚Äçüë©üèº (`U+1F469 U+1F3FF U+200D U+1F91D U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Dark, Tone::MediumLight)).to_string().as_str(), \"üë©üèø‚Äçü§ù‚Äçüë©üèº\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Dark, Tone::Medium))); // üë©üèø‚Äçü§ù‚Äçüë©üèΩ (`U+1F469 U+1F3FF U+200D U+1F91D U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Dark, Tone::Medium)).to_string().as_str(), \"üë©üèø‚Äçü§ù‚Äçüë©üèΩ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Dark, Tone::MediumDark))); // üë©üèø‚Äçü§ù‚Äçüë©üèæ (`U+1F469 U+1F3FF U+200D U+1F91D U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Dark, Tone::MediumDark)).to_string().as_str(), \"üë©üèø‚Äçü§ù‚Äçüë©üèæ\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone(Tone::Dark)); // üë≠üèø (`U+1F46D U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone(Tone::Dark).to_string().as_str(), \"üë≠üèø\");"]
#[doc="```"]
pub static PERSON_HOLDING_HANDS: With<Pair,With<TonePair,Emoji>> = With::new(With::new(Emoji::new("people holding hands", Version(12, 0),"üßë‚Äçü§ù‚Äçüßë"), 
	&[
		Emoji::new("people holding hands: light skin tone", Version(12, 0),"üßëüèª‚Äçü§ù‚Äçüßëüèª"),
	Emoji::new("people holding hands: light skin tone, medium-light skin tone", Version(12, 1),"üßëüèª‚Äçü§ù‚Äçüßëüèº"),
	Emoji::new("people holding hands: light skin tone, medium skin tone", Version(12, 1),"üßëüèª‚Äçü§ù‚ÄçüßëüèΩ"),
	Emoji::new("people holding hands: light skin tone, medium-dark skin tone", Version(12, 1),"üßëüèª‚Äçü§ù‚Äçüßëüèæ"),
	Emoji::new("people holding hands: light skin tone, dark skin tone", Version(12, 1),"üßëüèª‚Äçü§ù‚Äçüßëüèø"),
	Emoji::new("people holding hands: medium-light skin tone, light skin tone", Version(12, 0),"üßëüèº‚Äçü§ù‚Äçüßëüèª"),
	Emoji::new("people holding hands: medium-light skin tone", Version(12, 0),"üßëüèº‚Äçü§ù‚Äçüßëüèº"),
	Emoji::new("people holding hands: medium-light skin tone, medium skin tone", Version(12, 1),"üßëüèº‚Äçü§ù‚ÄçüßëüèΩ"),
	Emoji::new("people holding hands: medium-light skin tone, medium-dark skin tone", Version(12, 1),"üßëüèº‚Äçü§ù‚Äçüßëüèæ"),
	Emoji::new("people holding hands: medium-light skin tone, dark skin tone", Version(12, 1),"üßëüèº‚Äçü§ù‚Äçüßëüèø"),
	Emoji::new("people holding hands: medium skin tone, light skin tone", Version(12, 0),"üßëüèΩ‚Äçü§ù‚Äçüßëüèª"),
	Emoji::new("people holding hands: medium skin tone, medium-light skin tone", Version(12, 0),"üßëüèΩ‚Äçü§ù‚Äçüßëüèº"),
	Emoji::new("people holding hands: medium skin tone", Version(12, 0),"üßëüèΩ‚Äçü§ù‚ÄçüßëüèΩ"),
	Emoji::new("people holding hands: medium skin tone, medium-dark skin tone", Version(12, 1),"üßëüèΩ‚Äçü§ù‚Äçüßëüèæ"),
	Emoji::new("people holding hands: medium skin tone, dark skin tone", Version(12, 1),"üßëüèΩ‚Äçü§ù‚Äçüßëüèø"),
	Emoji::new("people holding hands: medium-dark skin tone, light skin tone", Version(12, 0),"üßëüèæ‚Äçü§ù‚Äçüßëüèª"),
	Emoji::new("people holding hands: medium-dark skin tone, medium-light skin tone", Version(12, 0),"üßëüèæ‚Äçü§ù‚Äçüßëüèº"),
	Emoji::new("people holding hands: medium-dark skin tone, medium skin tone", Version(12, 0),"üßëüèæ‚Äçü§ù‚ÄçüßëüèΩ"),
	Emoji::new("people holding hands: medium-dark skin tone", Version(12, 0),"üßëüèæ‚Äçü§ù‚Äçüßëüèæ"),
	Emoji::new("people holding hands: medium-dark skin tone, dark skin tone", Version(12, 1),"üßëüèæ‚Äçü§ù‚Äçüßëüèø"),
	Emoji::new("people holding hands: dark skin tone, light skin tone", Version(12, 0),"üßëüèø‚Äçü§ù‚Äçüßëüèª"),
	Emoji::new("people holding hands: dark skin tone, medium-light skin tone", Version(12, 0),"üßëüèø‚Äçü§ù‚Äçüßëüèº"),
	Emoji::new("people holding hands: dark skin tone, medium skin tone", Version(12, 0),"üßëüèø‚Äçü§ù‚ÄçüßëüèΩ"),
	Emoji::new("people holding hands: dark skin tone, medium-dark skin tone", Version(12, 0),"üßëüèø‚Äçü§ù‚Äçüßëüèæ"),
	Emoji::new("people holding hands: dark skin tone", Version(12, 0),"üßëüèø‚Äçü§ù‚Äçüßëüèø"),
	]), 
	&[
		With::new(Emoji::new("men holding hands", Version(1, 0),"üë¨"), 
	&[
		Emoji::new("men holding hands: light skin tone", Version(12, 0),"üë¨üèª"),
	Emoji::new("men holding hands: light skin tone, medium-light skin tone", Version(12, 1),"üë®üèª‚Äçü§ù‚Äçüë®üèº"),
	Emoji::new("men holding hands: light skin tone, medium skin tone", Version(12, 1),"üë®üèª‚Äçü§ù‚Äçüë®üèΩ"),
	Emoji::new("men holding hands: light skin tone, medium-dark skin tone", Version(12, 1),"üë®üèª‚Äçü§ù‚Äçüë®üèæ"),
	Emoji::new("men holding hands: light skin tone, dark skin tone", Version(12, 1),"üë®üèª‚Äçü§ù‚Äçüë®üèø"),
	Emoji::new("men holding hands: medium-light skin tone, light skin tone", Version(12, 0),"üë®üèº‚Äçü§ù‚Äçüë®üèª"),
	Emoji::new("men holding hands: medium-light skin tone", Version(12, 0),"üë¨üèº"),
	Emoji::new("men holding hands: medium-light skin tone, medium skin tone", Version(12, 1),"üë®üèº‚Äçü§ù‚Äçüë®üèΩ"),
	Emoji::new("men holding hands: medium-light skin tone, medium-dark skin tone", Version(12, 1),"üë®üèº‚Äçü§ù‚Äçüë®üèæ"),
	Emoji::new("men holding hands: medium-light skin tone, dark skin tone", Version(12, 1),"üë®üèº‚Äçü§ù‚Äçüë®üèø"),
	Emoji::new("men holding hands: medium skin tone, light skin tone", Version(12, 0),"üë®üèΩ‚Äçü§ù‚Äçüë®üèª"),
	Emoji::new("men holding hands: medium skin tone, medium-light skin tone", Version(12, 0),"üë®üèΩ‚Äçü§ù‚Äçüë®üèº"),
	Emoji::new("men holding hands: medium skin tone", Version(12, 0),"üë¨üèΩ"),
	Emoji::new("men holding hands: medium skin tone, medium-dark skin tone", Version(12, 1),"üë®üèΩ‚Äçü§ù‚Äçüë®üèæ"),
	Emoji::new("men holding hands: medium skin tone, dark skin tone", Version(12, 1),"üë®üèΩ‚Äçü§ù‚Äçüë®üèø"),
	Emoji::new("men holding hands: medium-dark skin tone, light skin tone", Version(12, 0),"üë®üèæ‚Äçü§ù‚Äçüë®üèª"),
	Emoji::new("men holding hands: medium-dark skin tone, medium-light skin tone", Version(12, 0),"üë®üèæ‚Äçü§ù‚Äçüë®üèº"),
	Emoji::new("men holding hands: medium-dark skin tone, medium skin tone", Version(12, 0),"üë®üèæ‚Äçü§ù‚Äçüë®üèΩ"),
	Emoji::new("men holding hands: medium-dark skin tone", Version(12, 0),"üë¨üèæ"),
	Emoji::new("men holding hands: medium-dark skin tone, dark skin tone", Version(12, 1),"üë®üèæ‚Äçü§ù‚Äçüë®üèø"),
	Emoji::new("men holding hands: dark skin tone, light skin tone", Version(12, 0),"üë®üèø‚Äçü§ù‚Äçüë®üèª"),
	Emoji::new("men holding hands: dark skin tone, medium-light skin tone", Version(12, 0),"üë®üèø‚Äçü§ù‚Äçüë®üèº"),
	Emoji::new("men holding hands: dark skin tone, medium skin tone", Version(12, 0),"üë®üèø‚Äçü§ù‚Äçüë®üèΩ"),
	Emoji::new("men holding hands: dark skin tone, medium-dark skin tone", Version(12, 0),"üë®üèø‚Äçü§ù‚Äçüë®üèæ"),
	Emoji::new("men holding hands: dark skin tone", Version(12, 0),"üë¨üèø"),
	]),
	With::new(Emoji::new("woman and man holding hands", Version(0, 6),"üë´"), 
	&[
		Emoji::new("woman and man holding hands: light skin tone", Version(12, 0),"üë´üèª"),
	Emoji::new("woman and man holding hands: light skin tone, medium-light skin tone", Version(12, 0),"üë©üèª‚Äçü§ù‚Äçüë®üèº"),
	Emoji::new("woman and man holding hands: light skin tone, medium skin tone", Version(12, 0),"üë©üèª‚Äçü§ù‚Äçüë®üèΩ"),
	Emoji::new("woman and man holding hands: light skin tone, medium-dark skin tone", Version(12, 0),"üë©üèª‚Äçü§ù‚Äçüë®üèæ"),
	Emoji::new("woman and man holding hands: light skin tone, dark skin tone", Version(12, 0),"üë©üèª‚Äçü§ù‚Äçüë®üèø"),
	Emoji::new("woman and man holding hands: medium-light skin tone, light skin tone", Version(12, 0),"üë©üèº‚Äçü§ù‚Äçüë®üèª"),
	Emoji::new("woman and man holding hands: medium-light skin tone", Version(12, 0),"üë´üèº"),
	Emoji::new("woman and man holding hands: medium-light skin tone, medium skin tone", Version(12, 0),"üë©üèº‚Äçü§ù‚Äçüë®üèΩ"),
	Emoji::new("woman and man holding hands: medium-light skin tone, medium-dark skin tone", Version(12, 0),"üë©üèº‚Äçü§ù‚Äçüë®üèæ"),
	Emoji::new("woman and man holding hands: medium-light skin tone, dark skin tone", Version(12, 0),"üë©üèº‚Äçü§ù‚Äçüë®üèø"),
	Emoji::new("woman and man holding hands: medium skin tone, light skin tone", Version(12, 0),"üë©üèΩ‚Äçü§ù‚Äçüë®üèª"),
	Emoji::new("woman and man holding hands: medium skin tone, medium-light skin tone", Version(12, 0),"üë©üèΩ‚Äçü§ù‚Äçüë®üèº"),
	Emoji::new("woman and man holding hands: medium skin tone", Version(12, 0),"üë´üèΩ"),
	Emoji::new("woman and man holding hands: medium skin tone, medium-dark skin tone", Version(12, 0),"üë©üèΩ‚Äçü§ù‚Äçüë®üèæ"),
	Emoji::new("woman and man holding hands: medium skin tone, dark skin tone", Version(12, 0),"üë©üèΩ‚Äçü§ù‚Äçüë®üèø"),
	Emoji::new("woman and man holding hands: medium-dark skin tone, light skin tone", Version(12, 0),"üë©üèæ‚Äçü§ù‚Äçüë®üèª"),
	Emoji::new("woman and man holding hands: medium-dark skin tone, medium-light skin tone", Version(12, 0),"üë©üèæ‚Äçü§ù‚Äçüë®üèº"),
	Emoji::new("woman and man holding hands: medium-dark skin tone, medium skin tone", Version(12, 0),"üë©üèæ‚Äçü§ù‚Äçüë®üèΩ"),
	Emoji::new("woman and man holding hands: medium-dark skin tone", Version(12, 0),"üë´üèæ"),
	Emoji::new("woman and man holding hands: medium-dark skin tone, dark skin tone", Version(12, 0),"üë©üèæ‚Äçü§ù‚Äçüë®üèø"),
	Emoji::new("woman and man holding hands: dark skin tone, light skin tone", Version(12, 0),"üë©üèø‚Äçü§ù‚Äçüë®üèª"),
	Emoji::new("woman and man holding hands: dark skin tone, medium-light skin tone", Version(12, 0),"üë©üèø‚Äçü§ù‚Äçüë®üèº"),
	Emoji::new("woman and man holding hands: dark skin tone, medium skin tone", Version(12, 0),"üë©üèø‚Äçü§ù‚Äçüë®üèΩ"),
	Emoji::new("woman and man holding hands: dark skin tone, medium-dark skin tone", Version(12, 0),"üë©üèø‚Äçü§ù‚Äçüë®üèæ"),
	Emoji::new("woman and man holding hands: dark skin tone", Version(12, 0),"üë´üèø"),
	]),
	With::new(Emoji::new("women holding hands", Version(1, 0),"üë≠"), 
	&[
		Emoji::new("women holding hands: light skin tone", Version(12, 0),"üë≠üèª"),
	Emoji::new("women holding hands: light skin tone, medium-light skin tone", Version(12, 1),"üë©üèª‚Äçü§ù‚Äçüë©üèº"),
	Emoji::new("women holding hands: light skin tone, medium skin tone", Version(12, 1),"üë©üèª‚Äçü§ù‚Äçüë©üèΩ"),
	Emoji::new("women holding hands: light skin tone, medium-dark skin tone", Version(12, 1),"üë©üèª‚Äçü§ù‚Äçüë©üèæ"),
	Emoji::new("women holding hands: light skin tone, dark skin tone", Version(12, 1),"üë©üèª‚Äçü§ù‚Äçüë©üèø"),
	Emoji::new("women holding hands: medium-light skin tone, light skin tone", Version(12, 0),"üë©üèº‚Äçü§ù‚Äçüë©üèª"),
	Emoji::new("women holding hands: medium-light skin tone", Version(12, 0),"üë≠üèº"),
	Emoji::new("women holding hands: medium-light skin tone, medium skin tone", Version(12, 1),"üë©üèº‚Äçü§ù‚Äçüë©üèΩ"),
	Emoji::new("women holding hands: medium-light skin tone, medium-dark skin tone", Version(12, 1),"üë©üèº‚Äçü§ù‚Äçüë©üèæ"),
	Emoji::new("women holding hands: medium-light skin tone, dark skin tone", Version(12, 1),"üë©üèº‚Äçü§ù‚Äçüë©üèø"),
	Emoji::new("women holding hands: medium skin tone, light skin tone", Version(12, 0),"üë©üèΩ‚Äçü§ù‚Äçüë©üèª"),
	Emoji::new("women holding hands: medium skin tone, medium-light skin tone", Version(12, 0),"üë©üèΩ‚Äçü§ù‚Äçüë©üèº"),
	Emoji::new("women holding hands: medium skin tone", Version(12, 0),"üë≠üèΩ"),
	Emoji::new("women holding hands: medium skin tone, medium-dark skin tone", Version(12, 1),"üë©üèΩ‚Äçü§ù‚Äçüë©üèæ"),
	Emoji::new("women holding hands: medium skin tone, dark skin tone", Version(12, 1),"üë©üèΩ‚Äçü§ù‚Äçüë©üèø"),
	Emoji::new("women holding hands: medium-dark skin tone, light skin tone", Version(12, 0),"üë©üèæ‚Äçü§ù‚Äçüë©üèª"),
	Emoji::new("women holding hands: medium-dark skin tone, medium-light skin tone", Version(12, 0),"üë©üèæ‚Äçü§ù‚Äçüë©üèº"),
	Emoji::new("women holding hands: medium-dark skin tone, medium skin tone", Version(12, 0),"üë©üèæ‚Äçü§ù‚Äçüë©üèΩ"),
	Emoji::new("women holding hands: medium-dark skin tone", Version(12, 0),"üë≠üèæ"),
	Emoji::new("women holding hands: medium-dark skin tone, dark skin tone", Version(12, 1),"üë©üèæ‚Äçü§ù‚Äçüë©üèø"),
	Emoji::new("women holding hands: dark skin tone, light skin tone", Version(12, 0),"üë©üèø‚Äçü§ù‚Äçüë©üèª"),
	Emoji::new("women holding hands: dark skin tone, medium-light skin tone", Version(12, 0),"üë©üèø‚Äçü§ù‚Äçüë©üèº"),
	Emoji::new("women holding hands: dark skin tone, medium skin tone", Version(12, 0),"üë©üèø‚Äçü§ù‚Äçüë©üèΩ"),
	Emoji::new("women holding hands: dark skin tone, medium-dark skin tone", Version(12, 0),"üë©üèø‚Äçü§ù‚Äçüë©üèæ"),
	Emoji::new("women holding hands: dark skin tone", Version(12, 0),"üë≠üèø"),
	]),
	]);

		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // COUPLE_WITH_HEART
				
				&COUPLE_WITH_HEART.default.default,
				
				&COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Light, right: Tone::Light }),
				
				&COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Light, right: Tone::MediumLight }),
				
				&COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Light, right: Tone::Medium }),
				
				&COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Light, right: Tone::MediumDark }),
				
				&COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Light, right: Tone::Dark }),
				
				&COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Light }),
				
				&COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumLight }),
				
				&COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Medium }),
				
				&COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumDark }),
				
				&COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Dark }),
				
				&COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::Light }),
				
				&COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumLight }),
				
				&COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::Medium }),
				
				&COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumDark }),
				
				&COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::Dark }),
				
				&COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Light }),
				
				&COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumLight }),
				
				&COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Medium }),
				
				&COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumDark }),
				
				&COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Dark }),
				
				&COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::Light }),
				
				&COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumLight }),
				
				&COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::Medium }),
				
				&COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumDark }),
				
				&COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::Dark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Males).default,
				
				&COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::Light }),
				
				&COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumLight }),
				
				&COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::Medium }),
				
				&COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumDark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::Dark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Light }),
				
				&COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumLight }),
				
				&COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Medium }),
				
				&COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumDark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Dark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::Light }),
				
				&COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumLight }),
				
				&COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::Medium }),
				
				&COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumDark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::Dark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Light }),
				
				&COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumLight }),
				
				&COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Medium }),
				
				&COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumDark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Dark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::Light }),
				
				&COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumLight }),
				
				&COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::Medium }),
				
				&COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumDark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::Dark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Mixed).default,
				
				&COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::Light }),
				
				&COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumLight }),
				
				&COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::Medium }),
				
				&COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumDark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::Dark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Light }),
				
				&COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumLight }),
				
				&COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Medium }),
				
				&COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumDark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Dark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::Light }),
				
				&COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumLight }),
				
				&COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::Medium }),
				
				&COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumDark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::Dark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Light }),
				
				&COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumLight }),
				
				&COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Medium }),
				
				&COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumDark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Dark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::Light }),
				
				&COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumLight }),
				
				&COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::Medium }),
				
				&COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumDark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::Dark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Females).default,
				
				&COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::Light }),
				
				&COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumLight }),
				
				&COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::Medium }),
				
				&COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumDark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::Dark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Light }),
				
				&COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumLight }),
				
				&COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Medium }),
				
				&COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumDark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Dark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::Light }),
				
				&COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumLight }),
				
				&COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::Medium }),
				
				&COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumDark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::Dark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Light }),
				
				&COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumLight }),
				
				&COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Medium }),
				
				&COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumDark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Dark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::Light }),
				
				&COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumLight }),
				
				&COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::Medium }),
				
				&COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumDark }),
				
				&COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::Dark }),
				
			],
			
			&[ // FAMILY
				
				&FAMILY.default,
				
				&FAMILY.family(Family{parents: OneOrTwo::One(Gender::Male), children: OneOrTwo::One(Gender::Male) }),
				
				&FAMILY.family(Family{parents: OneOrTwo::One(Gender::Male), children: OneOrTwo::One(Gender::Female) }),
				
				&FAMILY.family(Family{parents: OneOrTwo::One(Gender::Male), children: OneOrTwo::Two(Pair::Males) }),
				
				&FAMILY.family(Family{parents: OneOrTwo::One(Gender::Male), children: OneOrTwo::Two(Pair::Mixed) }),
				
				&FAMILY.family(Family{parents: OneOrTwo::One(Gender::Male), children: OneOrTwo::Two(Pair::Females) }),
				
				&FAMILY.family(Family{parents: OneOrTwo::One(Gender::Female), children: OneOrTwo::One(Gender::Male) }),
				
				&FAMILY.family(Family{parents: OneOrTwo::One(Gender::Female), children: OneOrTwo::One(Gender::Female) }),
				
				&FAMILY.family(Family{parents: OneOrTwo::One(Gender::Female), children: OneOrTwo::Two(Pair::Males) }),
				
				&FAMILY.family(Family{parents: OneOrTwo::One(Gender::Female), children: OneOrTwo::Two(Pair::Mixed) }),
				
				&FAMILY.family(Family{parents: OneOrTwo::One(Gender::Female), children: OneOrTwo::Two(Pair::Females) }),
				
				&FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Males), children: OneOrTwo::One(Gender::Male) }),
				
				&FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Males), children: OneOrTwo::One(Gender::Female) }),
				
				&FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Males), children: OneOrTwo::Two(Pair::Males) }),
				
				&FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Males), children: OneOrTwo::Two(Pair::Mixed) }),
				
				&FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Males), children: OneOrTwo::Two(Pair::Females) }),
				
				&FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Mixed), children: OneOrTwo::One(Gender::Male) }),
				
				&FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Mixed), children: OneOrTwo::One(Gender::Female) }),
				
				&FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Mixed), children: OneOrTwo::Two(Pair::Males) }),
				
				&FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Mixed), children: OneOrTwo::Two(Pair::Mixed) }),
				
				&FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Mixed), children: OneOrTwo::Two(Pair::Females) }),
				
				&FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Females), children: OneOrTwo::One(Gender::Male) }),
				
				&FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Females), children: OneOrTwo::One(Gender::Female) }),
				
				&FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Females), children: OneOrTwo::Two(Pair::Males) }),
				
				&FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Females), children: OneOrTwo::Two(Pair::Mixed) }),
				
				&FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Females), children: OneOrTwo::Two(Pair::Females) }),
				
			],
			
			&[ // KISS
				
				&KISS.default.default,
				
				&KISS.default.tone_pair(TonePair{left: Tone::Light, right: Tone::Light }),
				
				&KISS.default.tone_pair(TonePair{left: Tone::Light, right: Tone::MediumLight }),
				
				&KISS.default.tone_pair(TonePair{left: Tone::Light, right: Tone::Medium }),
				
				&KISS.default.tone_pair(TonePair{left: Tone::Light, right: Tone::MediumDark }),
				
				&KISS.default.tone_pair(TonePair{left: Tone::Light, right: Tone::Dark }),
				
				&KISS.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Light }),
				
				&KISS.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumLight }),
				
				&KISS.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Medium }),
				
				&KISS.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumDark }),
				
				&KISS.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Dark }),
				
				&KISS.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::Light }),
				
				&KISS.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumLight }),
				
				&KISS.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::Medium }),
				
				&KISS.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumDark }),
				
				&KISS.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::Dark }),
				
				&KISS.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Light }),
				
				&KISS.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumLight }),
				
				&KISS.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Medium }),
				
				&KISS.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumDark }),
				
				&KISS.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Dark }),
				
				&KISS.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::Light }),
				
				&KISS.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumLight }),
				
				&KISS.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::Medium }),
				
				&KISS.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumDark }),
				
				&KISS.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::Dark }),
				
				&KISS.pair(Pair::Males).default,
				
				&KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::Light }),
				
				&KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumLight }),
				
				&KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::Medium }),
				
				&KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumDark }),
				
				&KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::Dark }),
				
				&KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Light }),
				
				&KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumLight }),
				
				&KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Medium }),
				
				&KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumDark }),
				
				&KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Dark }),
				
				&KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::Light }),
				
				&KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumLight }),
				
				&KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::Medium }),
				
				&KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumDark }),
				
				&KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::Dark }),
				
				&KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Light }),
				
				&KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumLight }),
				
				&KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Medium }),
				
				&KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumDark }),
				
				&KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Dark }),
				
				&KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::Light }),
				
				&KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumLight }),
				
				&KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::Medium }),
				
				&KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumDark }),
				
				&KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::Dark }),
				
				&KISS.pair(Pair::Mixed).default,
				
				&KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::Light }),
				
				&KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumLight }),
				
				&KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::Medium }),
				
				&KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumDark }),
				
				&KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::Dark }),
				
				&KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Light }),
				
				&KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumLight }),
				
				&KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Medium }),
				
				&KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumDark }),
				
				&KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Dark }),
				
				&KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::Light }),
				
				&KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumLight }),
				
				&KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::Medium }),
				
				&KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumDark }),
				
				&KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::Dark }),
				
				&KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Light }),
				
				&KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumLight }),
				
				&KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Medium }),
				
				&KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumDark }),
				
				&KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Dark }),
				
				&KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::Light }),
				
				&KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumLight }),
				
				&KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::Medium }),
				
				&KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumDark }),
				
				&KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::Dark }),
				
				&KISS.pair(Pair::Females).default,
				
				&KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::Light }),
				
				&KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumLight }),
				
				&KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::Medium }),
				
				&KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumDark }),
				
				&KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::Dark }),
				
				&KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Light }),
				
				&KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumLight }),
				
				&KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Medium }),
				
				&KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumDark }),
				
				&KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Dark }),
				
				&KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::Light }),
				
				&KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumLight }),
				
				&KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::Medium }),
				
				&KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumDark }),
				
				&KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::Dark }),
				
				&KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Light }),
				
				&KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumLight }),
				
				&KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Medium }),
				
				&KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumDark }),
				
				&KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Dark }),
				
				&KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::Light }),
				
				&KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumLight }),
				
				&KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::Medium }),
				
				&KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumDark }),
				
				&KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::Dark }),
				
			],
			
			&[ // PERSON_HOLDING_HANDS
				
				&PERSON_HOLDING_HANDS.default.default,
				
				&PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Light, right: Tone::Light }),
				
				&PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Light, right: Tone::MediumLight }),
				
				&PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Light, right: Tone::Medium }),
				
				&PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Light, right: Tone::MediumDark }),
				
				&PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Light, right: Tone::Dark }),
				
				&PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Light }),
				
				&PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumLight }),
				
				&PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Medium }),
				
				&PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumDark }),
				
				&PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Dark }),
				
				&PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::Light }),
				
				&PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumLight }),
				
				&PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::Medium }),
				
				&PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumDark }),
				
				&PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::Dark }),
				
				&PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Light }),
				
				&PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumLight }),
				
				&PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Medium }),
				
				&PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumDark }),
				
				&PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Dark }),
				
				&PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::Light }),
				
				&PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumLight }),
				
				&PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::Medium }),
				
				&PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumDark }),
				
				&PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::Dark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Males).default,
				
				&PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::Light }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumLight }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::Medium }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumDark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::Dark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Light }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumLight }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Medium }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumDark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Dark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::Light }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumLight }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::Medium }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumDark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::Dark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Light }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumLight }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Medium }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumDark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Dark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::Light }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumLight }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::Medium }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumDark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::Dark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Mixed).default,
				
				&PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::Light }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumLight }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::Medium }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumDark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::Dark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Light }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumLight }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Medium }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumDark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Dark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::Light }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumLight }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::Medium }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumDark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::Dark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Light }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumLight }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Medium }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumDark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Dark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::Light }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumLight }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::Medium }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumDark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::Dark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Females).default,
				
				&PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::Light }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumLight }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::Medium }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumDark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::Dark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Light }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumLight }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Medium }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumDark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Dark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::Light }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumLight }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::Medium }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumDark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::Dark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Light }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumLight }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Medium }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumDark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Dark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::Light }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumLight }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::Medium }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumDark }),
				
				&PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::Dark }),
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&COUPLE_WITH_HEART.default.default, // COUPLE_WITH_HEART
				
			
				
				&FAMILY.default, // FAMILY
				
			
				
				&KISS.default.default, // KISS
				
			
				
				&PERSON_HOLDING_HANDS.default.default, // PERSON_HOLDING_HANDS
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // family
	
	/// hand_fingers_closed ü§õüëä‚úä
	pub mod hand_fingers_closed {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="left-facing fist ü§õ"]#[doc=""]#[doc="Since E3.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEFT_FACING_FIST;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEFT_FACING_FIST); // ü§õ (`U+1F91B`)"] #[doc="# assert_eq!(LEFT_FACING_FIST.to_string().as_str(), \"ü§õ\");"]#[doc="println!(\"{}\", LEFT_FACING_FIST.tone(Tone::Light)); // ü§õüèª (`U+1F91B U+1F3FB`)"] #[doc="# assert_eq!(LEFT_FACING_FIST.tone(Tone::Light).to_string().as_str(), \"ü§õüèª\");"]#[doc="println!(\"{}\", LEFT_FACING_FIST.tone(Tone::MediumLight)); // ü§õüèº (`U+1F91B U+1F3FC`)"] #[doc="# assert_eq!(LEFT_FACING_FIST.tone(Tone::MediumLight).to_string().as_str(), \"ü§õüèº\");"]#[doc="println!(\"{}\", LEFT_FACING_FIST.tone(Tone::Medium)); // ü§õüèΩ (`U+1F91B U+1F3FD`)"] #[doc="# assert_eq!(LEFT_FACING_FIST.tone(Tone::Medium).to_string().as_str(), \"ü§õüèΩ\");"]#[doc="println!(\"{}\", LEFT_FACING_FIST.tone(Tone::MediumDark)); // ü§õüèæ (`U+1F91B U+1F3FE`)"] #[doc="# assert_eq!(LEFT_FACING_FIST.tone(Tone::MediumDark).to_string().as_str(), \"ü§õüèæ\");"]#[doc="println!(\"{}\", LEFT_FACING_FIST.tone(Tone::Dark)); // ü§õüèø (`U+1F91B U+1F3FF`)"] #[doc="# assert_eq!(LEFT_FACING_FIST.tone(Tone::Dark).to_string().as_str(), \"ü§õüèø\");"]
#[doc="```"]
pub static LEFT_FACING_FIST: With<Tone,Emoji> = With::new(Emoji::new("left-facing fist", Version(3, 0),"ü§õ"), 
	&[
		Emoji::new("left-facing fist: light skin tone", Version(3, 0),"ü§õüèª"),
	Emoji::new("left-facing fist: medium-light skin tone", Version(3, 0),"ü§õüèº"),
	Emoji::new("left-facing fist: medium skin tone", Version(3, 0),"ü§õüèΩ"),
	Emoji::new("left-facing fist: medium-dark skin tone", Version(3, 0),"ü§õüèæ"),
	Emoji::new("left-facing fist: dark skin tone", Version(3, 0),"ü§õüèø"),
	]);

		
		#[doc="oncoming fist üëä"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ONCOMING_FIST;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ONCOMING_FIST); // üëä (`U+1F44A`)"] #[doc="# assert_eq!(ONCOMING_FIST.to_string().as_str(), \"üëä\");"]#[doc="println!(\"{}\", ONCOMING_FIST.tone(Tone::Light)); // üëäüèª (`U+1F44A U+1F3FB`)"] #[doc="# assert_eq!(ONCOMING_FIST.tone(Tone::Light).to_string().as_str(), \"üëäüèª\");"]#[doc="println!(\"{}\", ONCOMING_FIST.tone(Tone::MediumLight)); // üëäüèº (`U+1F44A U+1F3FC`)"] #[doc="# assert_eq!(ONCOMING_FIST.tone(Tone::MediumLight).to_string().as_str(), \"üëäüèº\");"]#[doc="println!(\"{}\", ONCOMING_FIST.tone(Tone::Medium)); // üëäüèΩ (`U+1F44A U+1F3FD`)"] #[doc="# assert_eq!(ONCOMING_FIST.tone(Tone::Medium).to_string().as_str(), \"üëäüèΩ\");"]#[doc="println!(\"{}\", ONCOMING_FIST.tone(Tone::MediumDark)); // üëäüèæ (`U+1F44A U+1F3FE`)"] #[doc="# assert_eq!(ONCOMING_FIST.tone(Tone::MediumDark).to_string().as_str(), \"üëäüèæ\");"]#[doc="println!(\"{}\", ONCOMING_FIST.tone(Tone::Dark)); // üëäüèø (`U+1F44A U+1F3FF`)"] #[doc="# assert_eq!(ONCOMING_FIST.tone(Tone::Dark).to_string().as_str(), \"üëäüèø\");"]
#[doc="```"]
pub static ONCOMING_FIST: With<Tone,Emoji> = With::new(Emoji::new("oncoming fist", Version(0, 6),"üëä"), 
	&[
		Emoji::new("oncoming fist: light skin tone", Version(1, 0),"üëäüèª"),
	Emoji::new("oncoming fist: medium-light skin tone", Version(1, 0),"üëäüèº"),
	Emoji::new("oncoming fist: medium skin tone", Version(1, 0),"üëäüèΩ"),
	Emoji::new("oncoming fist: medium-dark skin tone", Version(1, 0),"üëäüèæ"),
	Emoji::new("oncoming fist: dark skin tone", Version(1, 0),"üëäüèø"),
	]);

		
		#[doc="raised fist ‚úä"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RAISED_FIST;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RAISED_FIST); // ‚úä (`U+270A`)"] #[doc="# assert_eq!(RAISED_FIST.to_string().as_str(), \"‚úä\");"]#[doc="println!(\"{}\", RAISED_FIST.tone(Tone::Light)); // ‚úäüèª (`U+270A U+1F3FB`)"] #[doc="# assert_eq!(RAISED_FIST.tone(Tone::Light).to_string().as_str(), \"‚úäüèª\");"]#[doc="println!(\"{}\", RAISED_FIST.tone(Tone::MediumLight)); // ‚úäüèº (`U+270A U+1F3FC`)"] #[doc="# assert_eq!(RAISED_FIST.tone(Tone::MediumLight).to_string().as_str(), \"‚úäüèº\");"]#[doc="println!(\"{}\", RAISED_FIST.tone(Tone::Medium)); // ‚úäüèΩ (`U+270A U+1F3FD`)"] #[doc="# assert_eq!(RAISED_FIST.tone(Tone::Medium).to_string().as_str(), \"‚úäüèΩ\");"]#[doc="println!(\"{}\", RAISED_FIST.tone(Tone::MediumDark)); // ‚úäüèæ (`U+270A U+1F3FE`)"] #[doc="# assert_eq!(RAISED_FIST.tone(Tone::MediumDark).to_string().as_str(), \"‚úäüèæ\");"]#[doc="println!(\"{}\", RAISED_FIST.tone(Tone::Dark)); // ‚úäüèø (`U+270A U+1F3FF`)"] #[doc="# assert_eq!(RAISED_FIST.tone(Tone::Dark).to_string().as_str(), \"‚úäüèø\");"]
#[doc="```"]
pub static RAISED_FIST: With<Tone,Emoji> = With::new(Emoji::new("raised fist", Version(0, 6),"‚úä"), 
	&[
		Emoji::new("raised fist: light skin tone", Version(1, 0),"‚úäüèª"),
	Emoji::new("raised fist: medium-light skin tone", Version(1, 0),"‚úäüèº"),
	Emoji::new("raised fist: medium skin tone", Version(1, 0),"‚úäüèΩ"),
	Emoji::new("raised fist: medium-dark skin tone", Version(1, 0),"‚úäüèæ"),
	Emoji::new("raised fist: dark skin tone", Version(1, 0),"‚úäüèø"),
	]);

		
		#[doc="right-facing fist ü§ú"]#[doc=""]#[doc="Since E3.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RIGHT_FACING_FIST;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RIGHT_FACING_FIST); // ü§ú (`U+1F91C`)"] #[doc="# assert_eq!(RIGHT_FACING_FIST.to_string().as_str(), \"ü§ú\");"]#[doc="println!(\"{}\", RIGHT_FACING_FIST.tone(Tone::Light)); // ü§úüèª (`U+1F91C U+1F3FB`)"] #[doc="# assert_eq!(RIGHT_FACING_FIST.tone(Tone::Light).to_string().as_str(), \"ü§úüèª\");"]#[doc="println!(\"{}\", RIGHT_FACING_FIST.tone(Tone::MediumLight)); // ü§úüèº (`U+1F91C U+1F3FC`)"] #[doc="# assert_eq!(RIGHT_FACING_FIST.tone(Tone::MediumLight).to_string().as_str(), \"ü§úüèº\");"]#[doc="println!(\"{}\", RIGHT_FACING_FIST.tone(Tone::Medium)); // ü§úüèΩ (`U+1F91C U+1F3FD`)"] #[doc="# assert_eq!(RIGHT_FACING_FIST.tone(Tone::Medium).to_string().as_str(), \"ü§úüèΩ\");"]#[doc="println!(\"{}\", RIGHT_FACING_FIST.tone(Tone::MediumDark)); // ü§úüèæ (`U+1F91C U+1F3FE`)"] #[doc="# assert_eq!(RIGHT_FACING_FIST.tone(Tone::MediumDark).to_string().as_str(), \"ü§úüèæ\");"]#[doc="println!(\"{}\", RIGHT_FACING_FIST.tone(Tone::Dark)); // ü§úüèø (`U+1F91C U+1F3FF`)"] #[doc="# assert_eq!(RIGHT_FACING_FIST.tone(Tone::Dark).to_string().as_str(), \"ü§úüèø\");"]
#[doc="```"]
pub static RIGHT_FACING_FIST: With<Tone,Emoji> = With::new(Emoji::new("right-facing fist", Version(3, 0),"ü§ú"), 
	&[
		Emoji::new("right-facing fist: light skin tone", Version(3, 0),"ü§úüèª"),
	Emoji::new("right-facing fist: medium-light skin tone", Version(3, 0),"ü§úüèº"),
	Emoji::new("right-facing fist: medium skin tone", Version(3, 0),"ü§úüèΩ"),
	Emoji::new("right-facing fist: medium-dark skin tone", Version(3, 0),"ü§úüèæ"),
	Emoji::new("right-facing fist: dark skin tone", Version(3, 0),"ü§úüèø"),
	]);

		
		#[doc="thumbs down üëé"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::THUMBS_DOWN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", THUMBS_DOWN); // üëé (`U+1F44E`)"] #[doc="# assert_eq!(THUMBS_DOWN.to_string().as_str(), \"üëé\");"]#[doc="println!(\"{}\", THUMBS_DOWN.tone(Tone::Light)); // üëéüèª (`U+1F44E U+1F3FB`)"] #[doc="# assert_eq!(THUMBS_DOWN.tone(Tone::Light).to_string().as_str(), \"üëéüèª\");"]#[doc="println!(\"{}\", THUMBS_DOWN.tone(Tone::MediumLight)); // üëéüèº (`U+1F44E U+1F3FC`)"] #[doc="# assert_eq!(THUMBS_DOWN.tone(Tone::MediumLight).to_string().as_str(), \"üëéüèº\");"]#[doc="println!(\"{}\", THUMBS_DOWN.tone(Tone::Medium)); // üëéüèΩ (`U+1F44E U+1F3FD`)"] #[doc="# assert_eq!(THUMBS_DOWN.tone(Tone::Medium).to_string().as_str(), \"üëéüèΩ\");"]#[doc="println!(\"{}\", THUMBS_DOWN.tone(Tone::MediumDark)); // üëéüèæ (`U+1F44E U+1F3FE`)"] #[doc="# assert_eq!(THUMBS_DOWN.tone(Tone::MediumDark).to_string().as_str(), \"üëéüèæ\");"]#[doc="println!(\"{}\", THUMBS_DOWN.tone(Tone::Dark)); // üëéüèø (`U+1F44E U+1F3FF`)"] #[doc="# assert_eq!(THUMBS_DOWN.tone(Tone::Dark).to_string().as_str(), \"üëéüèø\");"]
#[doc="```"]
pub static THUMBS_DOWN: With<Tone,Emoji> = With::new(Emoji::new("thumbs down", Version(0, 6),"üëé"), 
	&[
		Emoji::new("thumbs down: light skin tone", Version(1, 0),"üëéüèª"),
	Emoji::new("thumbs down: medium-light skin tone", Version(1, 0),"üëéüèº"),
	Emoji::new("thumbs down: medium skin tone", Version(1, 0),"üëéüèΩ"),
	Emoji::new("thumbs down: medium-dark skin tone", Version(1, 0),"üëéüèæ"),
	Emoji::new("thumbs down: dark skin tone", Version(1, 0),"üëéüèø"),
	]);

		
		#[doc="thumbs up üëç"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::THUMBS_UP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", THUMBS_UP); // üëç (`U+1F44D`)"] #[doc="# assert_eq!(THUMBS_UP.to_string().as_str(), \"üëç\");"]#[doc="println!(\"{}\", THUMBS_UP.tone(Tone::Light)); // üëçüèª (`U+1F44D U+1F3FB`)"] #[doc="# assert_eq!(THUMBS_UP.tone(Tone::Light).to_string().as_str(), \"üëçüèª\");"]#[doc="println!(\"{}\", THUMBS_UP.tone(Tone::MediumLight)); // üëçüèº (`U+1F44D U+1F3FC`)"] #[doc="# assert_eq!(THUMBS_UP.tone(Tone::MediumLight).to_string().as_str(), \"üëçüèº\");"]#[doc="println!(\"{}\", THUMBS_UP.tone(Tone::Medium)); // üëçüèΩ (`U+1F44D U+1F3FD`)"] #[doc="# assert_eq!(THUMBS_UP.tone(Tone::Medium).to_string().as_str(), \"üëçüèΩ\");"]#[doc="println!(\"{}\", THUMBS_UP.tone(Tone::MediumDark)); // üëçüèæ (`U+1F44D U+1F3FE`)"] #[doc="# assert_eq!(THUMBS_UP.tone(Tone::MediumDark).to_string().as_str(), \"üëçüèæ\");"]#[doc="println!(\"{}\", THUMBS_UP.tone(Tone::Dark)); // üëçüèø (`U+1F44D U+1F3FF`)"] #[doc="# assert_eq!(THUMBS_UP.tone(Tone::Dark).to_string().as_str(), \"üëçüèø\");"]
#[doc="```"]
pub static THUMBS_UP: With<Tone,Emoji> = With::new(Emoji::new("thumbs up", Version(0, 6),"üëç"), 
	&[
		Emoji::new("thumbs up: light skin tone", Version(1, 0),"üëçüèª"),
	Emoji::new("thumbs up: medium-light skin tone", Version(1, 0),"üëçüèº"),
	Emoji::new("thumbs up: medium skin tone", Version(1, 0),"üëçüèΩ"),
	Emoji::new("thumbs up: medium-dark skin tone", Version(1, 0),"üëçüèæ"),
	Emoji::new("thumbs up: dark skin tone", Version(1, 0),"üëçüèø"),
	]);

		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // LEFT_FACING_FIST
				
				&LEFT_FACING_FIST.default,
				
				&LEFT_FACING_FIST.tone(Tone::Light),
				
				&LEFT_FACING_FIST.tone(Tone::MediumLight),
				
				&LEFT_FACING_FIST.tone(Tone::Medium),
				
				&LEFT_FACING_FIST.tone(Tone::MediumDark),
				
				&LEFT_FACING_FIST.tone(Tone::Dark),
				
			],
			
			&[ // ONCOMING_FIST
				
				&ONCOMING_FIST.default,
				
				&ONCOMING_FIST.tone(Tone::Light),
				
				&ONCOMING_FIST.tone(Tone::MediumLight),
				
				&ONCOMING_FIST.tone(Tone::Medium),
				
				&ONCOMING_FIST.tone(Tone::MediumDark),
				
				&ONCOMING_FIST.tone(Tone::Dark),
				
			],
			
			&[ // RAISED_FIST
				
				&RAISED_FIST.default,
				
				&RAISED_FIST.tone(Tone::Light),
				
				&RAISED_FIST.tone(Tone::MediumLight),
				
				&RAISED_FIST.tone(Tone::Medium),
				
				&RAISED_FIST.tone(Tone::MediumDark),
				
				&RAISED_FIST.tone(Tone::Dark),
				
			],
			
			&[ // RIGHT_FACING_FIST
				
				&RIGHT_FACING_FIST.default,
				
				&RIGHT_FACING_FIST.tone(Tone::Light),
				
				&RIGHT_FACING_FIST.tone(Tone::MediumLight),
				
				&RIGHT_FACING_FIST.tone(Tone::Medium),
				
				&RIGHT_FACING_FIST.tone(Tone::MediumDark),
				
				&RIGHT_FACING_FIST.tone(Tone::Dark),
				
			],
			
			&[ // THUMBS_DOWN
				
				&THUMBS_DOWN.default,
				
				&THUMBS_DOWN.tone(Tone::Light),
				
				&THUMBS_DOWN.tone(Tone::MediumLight),
				
				&THUMBS_DOWN.tone(Tone::Medium),
				
				&THUMBS_DOWN.tone(Tone::MediumDark),
				
				&THUMBS_DOWN.tone(Tone::Dark),
				
			],
			
			&[ // THUMBS_UP
				
				&THUMBS_UP.default,
				
				&THUMBS_UP.tone(Tone::Light),
				
				&THUMBS_UP.tone(Tone::MediumLight),
				
				&THUMBS_UP.tone(Tone::Medium),
				
				&THUMBS_UP.tone(Tone::MediumDark),
				
				&THUMBS_UP.tone(Tone::Dark),
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&LEFT_FACING_FIST.default, // LEFT_FACING_FIST
				
			
				
				&ONCOMING_FIST.default, // ONCOMING_FIST
				
			
				
				&RAISED_FIST.default, // RAISED_FIST
				
			
				
				&RIGHT_FACING_FIST.default, // RIGHT_FACING_FIST
				
			
				
				&THUMBS_DOWN.default, // THUMBS_DOWN
				
			
				
				&THUMBS_UP.default, // THUMBS_UP
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // hand_fingers_closed
	
	/// hand_fingers_open üñêÔ∏èü§ö‚úã
	pub mod hand_fingers_open {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="hand with fingers splayed üñêÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HAND_WITH_FINGERS_SPLAYED;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HAND_WITH_FINGERS_SPLAYED); // üñêÔ∏è (`U+1F590 U+FE0F`)"] #[doc="# assert_eq!(HAND_WITH_FINGERS_SPLAYED.to_string().as_str(), \"üñêÔ∏è\");"]#[doc="println!(\"{}\", HAND_WITH_FINGERS_SPLAYED.tone(Tone::Light)); // üñêüèª (`U+1F590 U+1F3FB`)"] #[doc="# assert_eq!(HAND_WITH_FINGERS_SPLAYED.tone(Tone::Light).to_string().as_str(), \"üñêüèª\");"]#[doc="println!(\"{}\", HAND_WITH_FINGERS_SPLAYED.tone(Tone::MediumLight)); // üñêüèº (`U+1F590 U+1F3FC`)"] #[doc="# assert_eq!(HAND_WITH_FINGERS_SPLAYED.tone(Tone::MediumLight).to_string().as_str(), \"üñêüèº\");"]#[doc="println!(\"{}\", HAND_WITH_FINGERS_SPLAYED.tone(Tone::Medium)); // üñêüèΩ (`U+1F590 U+1F3FD`)"] #[doc="# assert_eq!(HAND_WITH_FINGERS_SPLAYED.tone(Tone::Medium).to_string().as_str(), \"üñêüèΩ\");"]#[doc="println!(\"{}\", HAND_WITH_FINGERS_SPLAYED.tone(Tone::MediumDark)); // üñêüèæ (`U+1F590 U+1F3FE`)"] #[doc="# assert_eq!(HAND_WITH_FINGERS_SPLAYED.tone(Tone::MediumDark).to_string().as_str(), \"üñêüèæ\");"]#[doc="println!(\"{}\", HAND_WITH_FINGERS_SPLAYED.tone(Tone::Dark)); // üñêüèø (`U+1F590 U+1F3FF`)"] #[doc="# assert_eq!(HAND_WITH_FINGERS_SPLAYED.tone(Tone::Dark).to_string().as_str(), \"üñêüèø\");"]
#[doc="```"]
pub static HAND_WITH_FINGERS_SPLAYED: With<Tone,Emoji> = With::new(Emoji::new("hand with fingers splayed", Version(0, 7),"üñêÔ∏è"), 
	&[
		Emoji::new("hand with fingers splayed: light skin tone", Version(1, 0),"üñêüèª"),
	Emoji::new("hand with fingers splayed: medium-light skin tone", Version(1, 0),"üñêüèº"),
	Emoji::new("hand with fingers splayed: medium skin tone", Version(1, 0),"üñêüèΩ"),
	Emoji::new("hand with fingers splayed: medium-dark skin tone", Version(1, 0),"üñêüèæ"),
	Emoji::new("hand with fingers splayed: dark skin tone", Version(1, 0),"üñêüèø"),
	]);

		
		#[doc="raised back of hand ü§ö"]#[doc=""]#[doc="Since E3.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RAISED_BACK_OF_HAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RAISED_BACK_OF_HAND); // ü§ö (`U+1F91A`)"] #[doc="# assert_eq!(RAISED_BACK_OF_HAND.to_string().as_str(), \"ü§ö\");"]#[doc="println!(\"{}\", RAISED_BACK_OF_HAND.tone(Tone::Light)); // ü§öüèª (`U+1F91A U+1F3FB`)"] #[doc="# assert_eq!(RAISED_BACK_OF_HAND.tone(Tone::Light).to_string().as_str(), \"ü§öüèª\");"]#[doc="println!(\"{}\", RAISED_BACK_OF_HAND.tone(Tone::MediumLight)); // ü§öüèº (`U+1F91A U+1F3FC`)"] #[doc="# assert_eq!(RAISED_BACK_OF_HAND.tone(Tone::MediumLight).to_string().as_str(), \"ü§öüèº\");"]#[doc="println!(\"{}\", RAISED_BACK_OF_HAND.tone(Tone::Medium)); // ü§öüèΩ (`U+1F91A U+1F3FD`)"] #[doc="# assert_eq!(RAISED_BACK_OF_HAND.tone(Tone::Medium).to_string().as_str(), \"ü§öüèΩ\");"]#[doc="println!(\"{}\", RAISED_BACK_OF_HAND.tone(Tone::MediumDark)); // ü§öüèæ (`U+1F91A U+1F3FE`)"] #[doc="# assert_eq!(RAISED_BACK_OF_HAND.tone(Tone::MediumDark).to_string().as_str(), \"ü§öüèæ\");"]#[doc="println!(\"{}\", RAISED_BACK_OF_HAND.tone(Tone::Dark)); // ü§öüèø (`U+1F91A U+1F3FF`)"] #[doc="# assert_eq!(RAISED_BACK_OF_HAND.tone(Tone::Dark).to_string().as_str(), \"ü§öüèø\");"]
#[doc="```"]
pub static RAISED_BACK_OF_HAND: With<Tone,Emoji> = With::new(Emoji::new("raised back of hand", Version(3, 0),"ü§ö"), 
	&[
		Emoji::new("raised back of hand: light skin tone", Version(3, 0),"ü§öüèª"),
	Emoji::new("raised back of hand: medium-light skin tone", Version(3, 0),"ü§öüèº"),
	Emoji::new("raised back of hand: medium skin tone", Version(3, 0),"ü§öüèΩ"),
	Emoji::new("raised back of hand: medium-dark skin tone", Version(3, 0),"ü§öüèæ"),
	Emoji::new("raised back of hand: dark skin tone", Version(3, 0),"ü§öüèø"),
	]);

		
		#[doc="raised hand ‚úã"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RAISED_HAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RAISED_HAND); // ‚úã (`U+270B`)"] #[doc="# assert_eq!(RAISED_HAND.to_string().as_str(), \"‚úã\");"]#[doc="println!(\"{}\", RAISED_HAND.tone(Tone::Light)); // ‚úãüèª (`U+270B U+1F3FB`)"] #[doc="# assert_eq!(RAISED_HAND.tone(Tone::Light).to_string().as_str(), \"‚úãüèª\");"]#[doc="println!(\"{}\", RAISED_HAND.tone(Tone::MediumLight)); // ‚úãüèº (`U+270B U+1F3FC`)"] #[doc="# assert_eq!(RAISED_HAND.tone(Tone::MediumLight).to_string().as_str(), \"‚úãüèº\");"]#[doc="println!(\"{}\", RAISED_HAND.tone(Tone::Medium)); // ‚úãüèΩ (`U+270B U+1F3FD`)"] #[doc="# assert_eq!(RAISED_HAND.tone(Tone::Medium).to_string().as_str(), \"‚úãüèΩ\");"]#[doc="println!(\"{}\", RAISED_HAND.tone(Tone::MediumDark)); // ‚úãüèæ (`U+270B U+1F3FE`)"] #[doc="# assert_eq!(RAISED_HAND.tone(Tone::MediumDark).to_string().as_str(), \"‚úãüèæ\");"]#[doc="println!(\"{}\", RAISED_HAND.tone(Tone::Dark)); // ‚úãüèø (`U+270B U+1F3FF`)"] #[doc="# assert_eq!(RAISED_HAND.tone(Tone::Dark).to_string().as_str(), \"‚úãüèø\");"]
#[doc="```"]
pub static RAISED_HAND: With<Tone,Emoji> = With::new(Emoji::new("raised hand", Version(0, 6),"‚úã"), 
	&[
		Emoji::new("raised hand: light skin tone", Version(1, 0),"‚úãüèª"),
	Emoji::new("raised hand: medium-light skin tone", Version(1, 0),"‚úãüèº"),
	Emoji::new("raised hand: medium skin tone", Version(1, 0),"‚úãüèΩ"),
	Emoji::new("raised hand: medium-dark skin tone", Version(1, 0),"‚úãüèæ"),
	Emoji::new("raised hand: dark skin tone", Version(1, 0),"‚úãüèø"),
	]);

		
		#[doc="vulcan salute üññ"]#[doc=""]#[doc="Since E1.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::VULCAN_SALUTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", VULCAN_SALUTE); // üññ (`U+1F596`)"] #[doc="# assert_eq!(VULCAN_SALUTE.to_string().as_str(), \"üññ\");"]#[doc="println!(\"{}\", VULCAN_SALUTE.tone(Tone::Light)); // üññüèª (`U+1F596 U+1F3FB`)"] #[doc="# assert_eq!(VULCAN_SALUTE.tone(Tone::Light).to_string().as_str(), \"üññüèª\");"]#[doc="println!(\"{}\", VULCAN_SALUTE.tone(Tone::MediumLight)); // üññüèº (`U+1F596 U+1F3FC`)"] #[doc="# assert_eq!(VULCAN_SALUTE.tone(Tone::MediumLight).to_string().as_str(), \"üññüèº\");"]#[doc="println!(\"{}\", VULCAN_SALUTE.tone(Tone::Medium)); // üññüèΩ (`U+1F596 U+1F3FD`)"] #[doc="# assert_eq!(VULCAN_SALUTE.tone(Tone::Medium).to_string().as_str(), \"üññüèΩ\");"]#[doc="println!(\"{}\", VULCAN_SALUTE.tone(Tone::MediumDark)); // üññüèæ (`U+1F596 U+1F3FE`)"] #[doc="# assert_eq!(VULCAN_SALUTE.tone(Tone::MediumDark).to_string().as_str(), \"üññüèæ\");"]#[doc="println!(\"{}\", VULCAN_SALUTE.tone(Tone::Dark)); // üññüèø (`U+1F596 U+1F3FF`)"] #[doc="# assert_eq!(VULCAN_SALUTE.tone(Tone::Dark).to_string().as_str(), \"üññüèø\");"]
#[doc="```"]
pub static VULCAN_SALUTE: With<Tone,Emoji> = With::new(Emoji::new("vulcan salute", Version(1, 0),"üññ"), 
	&[
		Emoji::new("vulcan salute: light skin tone", Version(1, 0),"üññüèª"),
	Emoji::new("vulcan salute: medium-light skin tone", Version(1, 0),"üññüèº"),
	Emoji::new("vulcan salute: medium skin tone", Version(1, 0),"üññüèΩ"),
	Emoji::new("vulcan salute: medium-dark skin tone", Version(1, 0),"üññüèæ"),
	Emoji::new("vulcan salute: dark skin tone", Version(1, 0),"üññüèø"),
	]);

		
		#[doc="waving hand üëã"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WAVING_HAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WAVING_HAND); // üëã (`U+1F44B`)"] #[doc="# assert_eq!(WAVING_HAND.to_string().as_str(), \"üëã\");"]#[doc="println!(\"{}\", WAVING_HAND.tone(Tone::Light)); // üëãüèª (`U+1F44B U+1F3FB`)"] #[doc="# assert_eq!(WAVING_HAND.tone(Tone::Light).to_string().as_str(), \"üëãüèª\");"]#[doc="println!(\"{}\", WAVING_HAND.tone(Tone::MediumLight)); // üëãüèº (`U+1F44B U+1F3FC`)"] #[doc="# assert_eq!(WAVING_HAND.tone(Tone::MediumLight).to_string().as_str(), \"üëãüèº\");"]#[doc="println!(\"{}\", WAVING_HAND.tone(Tone::Medium)); // üëãüèΩ (`U+1F44B U+1F3FD`)"] #[doc="# assert_eq!(WAVING_HAND.tone(Tone::Medium).to_string().as_str(), \"üëãüèΩ\");"]#[doc="println!(\"{}\", WAVING_HAND.tone(Tone::MediumDark)); // üëãüèæ (`U+1F44B U+1F3FE`)"] #[doc="# assert_eq!(WAVING_HAND.tone(Tone::MediumDark).to_string().as_str(), \"üëãüèæ\");"]#[doc="println!(\"{}\", WAVING_HAND.tone(Tone::Dark)); // üëãüèø (`U+1F44B U+1F3FF`)"] #[doc="# assert_eq!(WAVING_HAND.tone(Tone::Dark).to_string().as_str(), \"üëãüèø\");"]
#[doc="```"]
pub static WAVING_HAND: With<Tone,Emoji> = With::new(Emoji::new("waving hand", Version(0, 6),"üëã"), 
	&[
		Emoji::new("waving hand: light skin tone", Version(1, 0),"üëãüèª"),
	Emoji::new("waving hand: medium-light skin tone", Version(1, 0),"üëãüèº"),
	Emoji::new("waving hand: medium skin tone", Version(1, 0),"üëãüèΩ"),
	Emoji::new("waving hand: medium-dark skin tone", Version(1, 0),"üëãüèæ"),
	Emoji::new("waving hand: dark skin tone", Version(1, 0),"üëãüèø"),
	]);

		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // HAND_WITH_FINGERS_SPLAYED
				
				&HAND_WITH_FINGERS_SPLAYED.default,
				
				&HAND_WITH_FINGERS_SPLAYED.tone(Tone::Light),
				
				&HAND_WITH_FINGERS_SPLAYED.tone(Tone::MediumLight),
				
				&HAND_WITH_FINGERS_SPLAYED.tone(Tone::Medium),
				
				&HAND_WITH_FINGERS_SPLAYED.tone(Tone::MediumDark),
				
				&HAND_WITH_FINGERS_SPLAYED.tone(Tone::Dark),
				
			],
			
			&[ // RAISED_BACK_OF_HAND
				
				&RAISED_BACK_OF_HAND.default,
				
				&RAISED_BACK_OF_HAND.tone(Tone::Light),
				
				&RAISED_BACK_OF_HAND.tone(Tone::MediumLight),
				
				&RAISED_BACK_OF_HAND.tone(Tone::Medium),
				
				&RAISED_BACK_OF_HAND.tone(Tone::MediumDark),
				
				&RAISED_BACK_OF_HAND.tone(Tone::Dark),
				
			],
			
			&[ // RAISED_HAND
				
				&RAISED_HAND.default,
				
				&RAISED_HAND.tone(Tone::Light),
				
				&RAISED_HAND.tone(Tone::MediumLight),
				
				&RAISED_HAND.tone(Tone::Medium),
				
				&RAISED_HAND.tone(Tone::MediumDark),
				
				&RAISED_HAND.tone(Tone::Dark),
				
			],
			
			&[ // VULCAN_SALUTE
				
				&VULCAN_SALUTE.default,
				
				&VULCAN_SALUTE.tone(Tone::Light),
				
				&VULCAN_SALUTE.tone(Tone::MediumLight),
				
				&VULCAN_SALUTE.tone(Tone::Medium),
				
				&VULCAN_SALUTE.tone(Tone::MediumDark),
				
				&VULCAN_SALUTE.tone(Tone::Dark),
				
			],
			
			&[ // WAVING_HAND
				
				&WAVING_HAND.default,
				
				&WAVING_HAND.tone(Tone::Light),
				
				&WAVING_HAND.tone(Tone::MediumLight),
				
				&WAVING_HAND.tone(Tone::Medium),
				
				&WAVING_HAND.tone(Tone::MediumDark),
				
				&WAVING_HAND.tone(Tone::Dark),
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&HAND_WITH_FINGERS_SPLAYED.default, // HAND_WITH_FINGERS_SPLAYED
				
			
				
				&RAISED_BACK_OF_HAND.default, // RAISED_BACK_OF_HAND
				
			
				
				&RAISED_HAND.default, // RAISED_HAND
				
			
				
				&VULCAN_SALUTE.default, // VULCAN_SALUTE
				
			
				
				&WAVING_HAND.default, // WAVING_HAND
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // hand_fingers_open
	
	/// hand_fingers_partial ü§ôü§ûü§ü
	pub mod hand_fingers_partial {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="call me hand ü§ô"]#[doc=""]#[doc="Since E3.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CALL_ME_HAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CALL_ME_HAND); // ü§ô (`U+1F919`)"] #[doc="# assert_eq!(CALL_ME_HAND.to_string().as_str(), \"ü§ô\");"]#[doc="println!(\"{}\", CALL_ME_HAND.tone(Tone::Light)); // ü§ôüèª (`U+1F919 U+1F3FB`)"] #[doc="# assert_eq!(CALL_ME_HAND.tone(Tone::Light).to_string().as_str(), \"ü§ôüèª\");"]#[doc="println!(\"{}\", CALL_ME_HAND.tone(Tone::MediumLight)); // ü§ôüèº (`U+1F919 U+1F3FC`)"] #[doc="# assert_eq!(CALL_ME_HAND.tone(Tone::MediumLight).to_string().as_str(), \"ü§ôüèº\");"]#[doc="println!(\"{}\", CALL_ME_HAND.tone(Tone::Medium)); // ü§ôüèΩ (`U+1F919 U+1F3FD`)"] #[doc="# assert_eq!(CALL_ME_HAND.tone(Tone::Medium).to_string().as_str(), \"ü§ôüèΩ\");"]#[doc="println!(\"{}\", CALL_ME_HAND.tone(Tone::MediumDark)); // ü§ôüèæ (`U+1F919 U+1F3FE`)"] #[doc="# assert_eq!(CALL_ME_HAND.tone(Tone::MediumDark).to_string().as_str(), \"ü§ôüèæ\");"]#[doc="println!(\"{}\", CALL_ME_HAND.tone(Tone::Dark)); // ü§ôüèø (`U+1F919 U+1F3FF`)"] #[doc="# assert_eq!(CALL_ME_HAND.tone(Tone::Dark).to_string().as_str(), \"ü§ôüèø\");"]
#[doc="```"]
pub static CALL_ME_HAND: With<Tone,Emoji> = With::new(Emoji::new("call me hand", Version(3, 0),"ü§ô"), 
	&[
		Emoji::new("call me hand: light skin tone", Version(3, 0),"ü§ôüèª"),
	Emoji::new("call me hand: medium-light skin tone", Version(3, 0),"ü§ôüèº"),
	Emoji::new("call me hand: medium skin tone", Version(3, 0),"ü§ôüèΩ"),
	Emoji::new("call me hand: medium-dark skin tone", Version(3, 0),"ü§ôüèæ"),
	Emoji::new("call me hand: dark skin tone", Version(3, 0),"ü§ôüèø"),
	]);

		
		#[doc="crossed fingers ü§û"]#[doc=""]#[doc="Since E3.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CROSSED_FINGERS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CROSSED_FINGERS); // ü§û (`U+1F91E`)"] #[doc="# assert_eq!(CROSSED_FINGERS.to_string().as_str(), \"ü§û\");"]#[doc="println!(\"{}\", CROSSED_FINGERS.tone(Tone::Light)); // ü§ûüèª (`U+1F91E U+1F3FB`)"] #[doc="# assert_eq!(CROSSED_FINGERS.tone(Tone::Light).to_string().as_str(), \"ü§ûüèª\");"]#[doc="println!(\"{}\", CROSSED_FINGERS.tone(Tone::MediumLight)); // ü§ûüèº (`U+1F91E U+1F3FC`)"] #[doc="# assert_eq!(CROSSED_FINGERS.tone(Tone::MediumLight).to_string().as_str(), \"ü§ûüèº\");"]#[doc="println!(\"{}\", CROSSED_FINGERS.tone(Tone::Medium)); // ü§ûüèΩ (`U+1F91E U+1F3FD`)"] #[doc="# assert_eq!(CROSSED_FINGERS.tone(Tone::Medium).to_string().as_str(), \"ü§ûüèΩ\");"]#[doc="println!(\"{}\", CROSSED_FINGERS.tone(Tone::MediumDark)); // ü§ûüèæ (`U+1F91E U+1F3FE`)"] #[doc="# assert_eq!(CROSSED_FINGERS.tone(Tone::MediumDark).to_string().as_str(), \"ü§ûüèæ\");"]#[doc="println!(\"{}\", CROSSED_FINGERS.tone(Tone::Dark)); // ü§ûüèø (`U+1F91E U+1F3FF`)"] #[doc="# assert_eq!(CROSSED_FINGERS.tone(Tone::Dark).to_string().as_str(), \"ü§ûüèø\");"]
#[doc="```"]
pub static CROSSED_FINGERS: With<Tone,Emoji> = With::new(Emoji::new("crossed fingers", Version(3, 0),"ü§û"), 
	&[
		Emoji::new("crossed fingers: light skin tone", Version(3, 0),"ü§ûüèª"),
	Emoji::new("crossed fingers: medium-light skin tone", Version(3, 0),"ü§ûüèº"),
	Emoji::new("crossed fingers: medium skin tone", Version(3, 0),"ü§ûüèΩ"),
	Emoji::new("crossed fingers: medium-dark skin tone", Version(3, 0),"ü§ûüèæ"),
	Emoji::new("crossed fingers: dark skin tone", Version(3, 0),"ü§ûüèø"),
	]);

		
		#[doc="love-you gesture ü§ü"]#[doc=""]#[doc="Since E5.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LOVE_YOU_GESTURE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LOVE_YOU_GESTURE); // ü§ü (`U+1F91F`)"] #[doc="# assert_eq!(LOVE_YOU_GESTURE.to_string().as_str(), \"ü§ü\");"]#[doc="println!(\"{}\", LOVE_YOU_GESTURE.tone(Tone::Light)); // ü§üüèª (`U+1F91F U+1F3FB`)"] #[doc="# assert_eq!(LOVE_YOU_GESTURE.tone(Tone::Light).to_string().as_str(), \"ü§üüèª\");"]#[doc="println!(\"{}\", LOVE_YOU_GESTURE.tone(Tone::MediumLight)); // ü§üüèº (`U+1F91F U+1F3FC`)"] #[doc="# assert_eq!(LOVE_YOU_GESTURE.tone(Tone::MediumLight).to_string().as_str(), \"ü§üüèº\");"]#[doc="println!(\"{}\", LOVE_YOU_GESTURE.tone(Tone::Medium)); // ü§üüèΩ (`U+1F91F U+1F3FD`)"] #[doc="# assert_eq!(LOVE_YOU_GESTURE.tone(Tone::Medium).to_string().as_str(), \"ü§üüèΩ\");"]#[doc="println!(\"{}\", LOVE_YOU_GESTURE.tone(Tone::MediumDark)); // ü§üüèæ (`U+1F91F U+1F3FE`)"] #[doc="# assert_eq!(LOVE_YOU_GESTURE.tone(Tone::MediumDark).to_string().as_str(), \"ü§üüèæ\");"]#[doc="println!(\"{}\", LOVE_YOU_GESTURE.tone(Tone::Dark)); // ü§üüèø (`U+1F91F U+1F3FF`)"] #[doc="# assert_eq!(LOVE_YOU_GESTURE.tone(Tone::Dark).to_string().as_str(), \"ü§üüèø\");"]
#[doc="```"]
pub static LOVE_YOU_GESTURE: With<Tone,Emoji> = With::new(Emoji::new("love-you gesture", Version(5, 0),"ü§ü"), 
	&[
		Emoji::new("love-you gesture: light skin tone", Version(5, 0),"ü§üüèª"),
	Emoji::new("love-you gesture: medium-light skin tone", Version(5, 0),"ü§üüèº"),
	Emoji::new("love-you gesture: medium skin tone", Version(5, 0),"ü§üüèΩ"),
	Emoji::new("love-you gesture: medium-dark skin tone", Version(5, 0),"ü§üüèæ"),
	Emoji::new("love-you gesture: dark skin tone", Version(5, 0),"ü§üüèø"),
	]);

		
		#[doc="OK hand üëå"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OK_HAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OK_HAND); // üëå (`U+1F44C`)"] #[doc="# assert_eq!(OK_HAND.to_string().as_str(), \"üëå\");"]#[doc="println!(\"{}\", OK_HAND.tone(Tone::Light)); // üëåüèª (`U+1F44C U+1F3FB`)"] #[doc="# assert_eq!(OK_HAND.tone(Tone::Light).to_string().as_str(), \"üëåüèª\");"]#[doc="println!(\"{}\", OK_HAND.tone(Tone::MediumLight)); // üëåüèº (`U+1F44C U+1F3FC`)"] #[doc="# assert_eq!(OK_HAND.tone(Tone::MediumLight).to_string().as_str(), \"üëåüèº\");"]#[doc="println!(\"{}\", OK_HAND.tone(Tone::Medium)); // üëåüèΩ (`U+1F44C U+1F3FD`)"] #[doc="# assert_eq!(OK_HAND.tone(Tone::Medium).to_string().as_str(), \"üëåüèΩ\");"]#[doc="println!(\"{}\", OK_HAND.tone(Tone::MediumDark)); // üëåüèæ (`U+1F44C U+1F3FE`)"] #[doc="# assert_eq!(OK_HAND.tone(Tone::MediumDark).to_string().as_str(), \"üëåüèæ\");"]#[doc="println!(\"{}\", OK_HAND.tone(Tone::Dark)); // üëåüèø (`U+1F44C U+1F3FF`)"] #[doc="# assert_eq!(OK_HAND.tone(Tone::Dark).to_string().as_str(), \"üëåüèø\");"]
#[doc="```"]
pub static OK_HAND: With<Tone,Emoji> = With::new(Emoji::new("OK hand", Version(0, 6),"üëå"), 
	&[
		Emoji::new("OK hand: light skin tone", Version(1, 0),"üëåüèª"),
	Emoji::new("OK hand: medium-light skin tone", Version(1, 0),"üëåüèº"),
	Emoji::new("OK hand: medium skin tone", Version(1, 0),"üëåüèΩ"),
	Emoji::new("OK hand: medium-dark skin tone", Version(1, 0),"üëåüèæ"),
	Emoji::new("OK hand: dark skin tone", Version(1, 0),"üëåüèø"),
	]);

		
		#[doc="pinched fingers ü§å"]#[doc=""]#[doc="Since E13.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PINCHED_FINGERS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PINCHED_FINGERS); // ü§å (`U+1F90C`)"] #[doc="# assert_eq!(PINCHED_FINGERS.to_string().as_str(), \"ü§å\");"]#[doc="println!(\"{}\", PINCHED_FINGERS.tone(Tone::Light)); // ü§åüèª (`U+1F90C U+1F3FB`)"] #[doc="# assert_eq!(PINCHED_FINGERS.tone(Tone::Light).to_string().as_str(), \"ü§åüèª\");"]#[doc="println!(\"{}\", PINCHED_FINGERS.tone(Tone::MediumLight)); // ü§åüèº (`U+1F90C U+1F3FC`)"] #[doc="# assert_eq!(PINCHED_FINGERS.tone(Tone::MediumLight).to_string().as_str(), \"ü§åüèº\");"]#[doc="println!(\"{}\", PINCHED_FINGERS.tone(Tone::Medium)); // ü§åüèΩ (`U+1F90C U+1F3FD`)"] #[doc="# assert_eq!(PINCHED_FINGERS.tone(Tone::Medium).to_string().as_str(), \"ü§åüèΩ\");"]#[doc="println!(\"{}\", PINCHED_FINGERS.tone(Tone::MediumDark)); // ü§åüèæ (`U+1F90C U+1F3FE`)"] #[doc="# assert_eq!(PINCHED_FINGERS.tone(Tone::MediumDark).to_string().as_str(), \"ü§åüèæ\");"]#[doc="println!(\"{}\", PINCHED_FINGERS.tone(Tone::Dark)); // ü§åüèø (`U+1F90C U+1F3FF`)"] #[doc="# assert_eq!(PINCHED_FINGERS.tone(Tone::Dark).to_string().as_str(), \"ü§åüèø\");"]
#[doc="```"]
pub static PINCHED_FINGERS: With<Tone,Emoji> = With::new(Emoji::new("pinched fingers", Version(13, 0),"ü§å"), 
	&[
		Emoji::new("pinched fingers: light skin tone", Version(13, 0),"ü§åüèª"),
	Emoji::new("pinched fingers: medium-light skin tone", Version(13, 0),"ü§åüèº"),
	Emoji::new("pinched fingers: medium skin tone", Version(13, 0),"ü§åüèΩ"),
	Emoji::new("pinched fingers: medium-dark skin tone", Version(13, 0),"ü§åüèæ"),
	Emoji::new("pinched fingers: dark skin tone", Version(13, 0),"ü§åüèø"),
	]);

		
		#[doc="pinching hand ü§è"]#[doc=""]#[doc="Since E12.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PINCHING_HAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PINCHING_HAND); // ü§è (`U+1F90F`)"] #[doc="# assert_eq!(PINCHING_HAND.to_string().as_str(), \"ü§è\");"]#[doc="println!(\"{}\", PINCHING_HAND.tone(Tone::Light)); // ü§èüèª (`U+1F90F U+1F3FB`)"] #[doc="# assert_eq!(PINCHING_HAND.tone(Tone::Light).to_string().as_str(), \"ü§èüèª\");"]#[doc="println!(\"{}\", PINCHING_HAND.tone(Tone::MediumLight)); // ü§èüèº (`U+1F90F U+1F3FC`)"] #[doc="# assert_eq!(PINCHING_HAND.tone(Tone::MediumLight).to_string().as_str(), \"ü§èüèº\");"]#[doc="println!(\"{}\", PINCHING_HAND.tone(Tone::Medium)); // ü§èüèΩ (`U+1F90F U+1F3FD`)"] #[doc="# assert_eq!(PINCHING_HAND.tone(Tone::Medium).to_string().as_str(), \"ü§èüèΩ\");"]#[doc="println!(\"{}\", PINCHING_HAND.tone(Tone::MediumDark)); // ü§èüèæ (`U+1F90F U+1F3FE`)"] #[doc="# assert_eq!(PINCHING_HAND.tone(Tone::MediumDark).to_string().as_str(), \"ü§èüèæ\");"]#[doc="println!(\"{}\", PINCHING_HAND.tone(Tone::Dark)); // ü§èüèø (`U+1F90F U+1F3FF`)"] #[doc="# assert_eq!(PINCHING_HAND.tone(Tone::Dark).to_string().as_str(), \"ü§èüèø\");"]
#[doc="```"]
pub static PINCHING_HAND: With<Tone,Emoji> = With::new(Emoji::new("pinching hand", Version(12, 0),"ü§è"), 
	&[
		Emoji::new("pinching hand: light skin tone", Version(12, 0),"ü§èüèª"),
	Emoji::new("pinching hand: medium-light skin tone", Version(12, 0),"ü§èüèº"),
	Emoji::new("pinching hand: medium skin tone", Version(12, 0),"ü§èüèΩ"),
	Emoji::new("pinching hand: medium-dark skin tone", Version(12, 0),"ü§èüèæ"),
	Emoji::new("pinching hand: dark skin tone", Version(12, 0),"ü§èüèø"),
	]);

		
		#[doc="sign of the horns ü§ò"]#[doc=""]#[doc="Since E1.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SIGN_OF_THE_HORNS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SIGN_OF_THE_HORNS); // ü§ò (`U+1F918`)"] #[doc="# assert_eq!(SIGN_OF_THE_HORNS.to_string().as_str(), \"ü§ò\");"]#[doc="println!(\"{}\", SIGN_OF_THE_HORNS.tone(Tone::Light)); // ü§òüèª (`U+1F918 U+1F3FB`)"] #[doc="# assert_eq!(SIGN_OF_THE_HORNS.tone(Tone::Light).to_string().as_str(), \"ü§òüèª\");"]#[doc="println!(\"{}\", SIGN_OF_THE_HORNS.tone(Tone::MediumLight)); // ü§òüèº (`U+1F918 U+1F3FC`)"] #[doc="# assert_eq!(SIGN_OF_THE_HORNS.tone(Tone::MediumLight).to_string().as_str(), \"ü§òüèº\");"]#[doc="println!(\"{}\", SIGN_OF_THE_HORNS.tone(Tone::Medium)); // ü§òüèΩ (`U+1F918 U+1F3FD`)"] #[doc="# assert_eq!(SIGN_OF_THE_HORNS.tone(Tone::Medium).to_string().as_str(), \"ü§òüèΩ\");"]#[doc="println!(\"{}\", SIGN_OF_THE_HORNS.tone(Tone::MediumDark)); // ü§òüèæ (`U+1F918 U+1F3FE`)"] #[doc="# assert_eq!(SIGN_OF_THE_HORNS.tone(Tone::MediumDark).to_string().as_str(), \"ü§òüèæ\");"]#[doc="println!(\"{}\", SIGN_OF_THE_HORNS.tone(Tone::Dark)); // ü§òüèø (`U+1F918 U+1F3FF`)"] #[doc="# assert_eq!(SIGN_OF_THE_HORNS.tone(Tone::Dark).to_string().as_str(), \"ü§òüèø\");"]
#[doc="```"]
pub static SIGN_OF_THE_HORNS: With<Tone,Emoji> = With::new(Emoji::new("sign of the horns", Version(1, 0),"ü§ò"), 
	&[
		Emoji::new("sign of the horns: light skin tone", Version(1, 0),"ü§òüèª"),
	Emoji::new("sign of the horns: medium-light skin tone", Version(1, 0),"ü§òüèº"),
	Emoji::new("sign of the horns: medium skin tone", Version(1, 0),"ü§òüèΩ"),
	Emoji::new("sign of the horns: medium-dark skin tone", Version(1, 0),"ü§òüèæ"),
	Emoji::new("sign of the horns: dark skin tone", Version(1, 0),"ü§òüèø"),
	]);

		
		#[doc="victory hand ‚úåÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::VICTORY_HAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", VICTORY_HAND); // ‚úåÔ∏è (`U+270C U+FE0F`)"] #[doc="# assert_eq!(VICTORY_HAND.to_string().as_str(), \"‚úåÔ∏è\");"]#[doc="println!(\"{}\", VICTORY_HAND.tone(Tone::Light)); // ‚úåüèª (`U+270C U+1F3FB`)"] #[doc="# assert_eq!(VICTORY_HAND.tone(Tone::Light).to_string().as_str(), \"‚úåüèª\");"]#[doc="println!(\"{}\", VICTORY_HAND.tone(Tone::MediumLight)); // ‚úåüèº (`U+270C U+1F3FC`)"] #[doc="# assert_eq!(VICTORY_HAND.tone(Tone::MediumLight).to_string().as_str(), \"‚úåüèº\");"]#[doc="println!(\"{}\", VICTORY_HAND.tone(Tone::Medium)); // ‚úåüèΩ (`U+270C U+1F3FD`)"] #[doc="# assert_eq!(VICTORY_HAND.tone(Tone::Medium).to_string().as_str(), \"‚úåüèΩ\");"]#[doc="println!(\"{}\", VICTORY_HAND.tone(Tone::MediumDark)); // ‚úåüèæ (`U+270C U+1F3FE`)"] #[doc="# assert_eq!(VICTORY_HAND.tone(Tone::MediumDark).to_string().as_str(), \"‚úåüèæ\");"]#[doc="println!(\"{}\", VICTORY_HAND.tone(Tone::Dark)); // ‚úåüèø (`U+270C U+1F3FF`)"] #[doc="# assert_eq!(VICTORY_HAND.tone(Tone::Dark).to_string().as_str(), \"‚úåüèø\");"]
#[doc="```"]
pub static VICTORY_HAND: With<Tone,Emoji> = With::new(Emoji::new("victory hand", Version(0, 6),"‚úåÔ∏è"), 
	&[
		Emoji::new("victory hand: light skin tone", Version(1, 0),"‚úåüèª"),
	Emoji::new("victory hand: medium-light skin tone", Version(1, 0),"‚úåüèº"),
	Emoji::new("victory hand: medium skin tone", Version(1, 0),"‚úåüèΩ"),
	Emoji::new("victory hand: medium-dark skin tone", Version(1, 0),"‚úåüèæ"),
	Emoji::new("victory hand: dark skin tone", Version(1, 0),"‚úåüèø"),
	]);

		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // CALL_ME_HAND
				
				&CALL_ME_HAND.default,
				
				&CALL_ME_HAND.tone(Tone::Light),
				
				&CALL_ME_HAND.tone(Tone::MediumLight),
				
				&CALL_ME_HAND.tone(Tone::Medium),
				
				&CALL_ME_HAND.tone(Tone::MediumDark),
				
				&CALL_ME_HAND.tone(Tone::Dark),
				
			],
			
			&[ // CROSSED_FINGERS
				
				&CROSSED_FINGERS.default,
				
				&CROSSED_FINGERS.tone(Tone::Light),
				
				&CROSSED_FINGERS.tone(Tone::MediumLight),
				
				&CROSSED_FINGERS.tone(Tone::Medium),
				
				&CROSSED_FINGERS.tone(Tone::MediumDark),
				
				&CROSSED_FINGERS.tone(Tone::Dark),
				
			],
			
			&[ // LOVE_YOU_GESTURE
				
				&LOVE_YOU_GESTURE.default,
				
				&LOVE_YOU_GESTURE.tone(Tone::Light),
				
				&LOVE_YOU_GESTURE.tone(Tone::MediumLight),
				
				&LOVE_YOU_GESTURE.tone(Tone::Medium),
				
				&LOVE_YOU_GESTURE.tone(Tone::MediumDark),
				
				&LOVE_YOU_GESTURE.tone(Tone::Dark),
				
			],
			
			&[ // OK_HAND
				
				&OK_HAND.default,
				
				&OK_HAND.tone(Tone::Light),
				
				&OK_HAND.tone(Tone::MediumLight),
				
				&OK_HAND.tone(Tone::Medium),
				
				&OK_HAND.tone(Tone::MediumDark),
				
				&OK_HAND.tone(Tone::Dark),
				
			],
			
			&[ // PINCHED_FINGERS
				
				&PINCHED_FINGERS.default,
				
				&PINCHED_FINGERS.tone(Tone::Light),
				
				&PINCHED_FINGERS.tone(Tone::MediumLight),
				
				&PINCHED_FINGERS.tone(Tone::Medium),
				
				&PINCHED_FINGERS.tone(Tone::MediumDark),
				
				&PINCHED_FINGERS.tone(Tone::Dark),
				
			],
			
			&[ // PINCHING_HAND
				
				&PINCHING_HAND.default,
				
				&PINCHING_HAND.tone(Tone::Light),
				
				&PINCHING_HAND.tone(Tone::MediumLight),
				
				&PINCHING_HAND.tone(Tone::Medium),
				
				&PINCHING_HAND.tone(Tone::MediumDark),
				
				&PINCHING_HAND.tone(Tone::Dark),
				
			],
			
			&[ // SIGN_OF_THE_HORNS
				
				&SIGN_OF_THE_HORNS.default,
				
				&SIGN_OF_THE_HORNS.tone(Tone::Light),
				
				&SIGN_OF_THE_HORNS.tone(Tone::MediumLight),
				
				&SIGN_OF_THE_HORNS.tone(Tone::Medium),
				
				&SIGN_OF_THE_HORNS.tone(Tone::MediumDark),
				
				&SIGN_OF_THE_HORNS.tone(Tone::Dark),
				
			],
			
			&[ // VICTORY_HAND
				
				&VICTORY_HAND.default,
				
				&VICTORY_HAND.tone(Tone::Light),
				
				&VICTORY_HAND.tone(Tone::MediumLight),
				
				&VICTORY_HAND.tone(Tone::Medium),
				
				&VICTORY_HAND.tone(Tone::MediumDark),
				
				&VICTORY_HAND.tone(Tone::Dark),
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&CALL_ME_HAND.default, // CALL_ME_HAND
				
			
				
				&CROSSED_FINGERS.default, // CROSSED_FINGERS
				
			
				
				&LOVE_YOU_GESTURE.default, // LOVE_YOU_GESTURE
				
			
				
				&OK_HAND.default, // OK_HAND
				
			
				
				&PINCHED_FINGERS.default, // PINCHED_FINGERS
				
			
				
				&PINCHING_HAND.default, // PINCHING_HAND
				
			
				
				&SIGN_OF_THE_HORNS.default, // SIGN_OF_THE_HORNS
				
			
				
				&VICTORY_HAND.default, // VICTORY_HAND
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // hand_fingers_partial
	
	/// hand_prop üíÖü§≥‚úçÔ∏è
	pub mod hand_prop {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="nail polish üíÖ"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NAIL_POLISH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NAIL_POLISH); // üíÖ (`U+1F485`)"] #[doc="# assert_eq!(NAIL_POLISH.to_string().as_str(), \"üíÖ\");"]#[doc="println!(\"{}\", NAIL_POLISH.tone(Tone::Light)); // üíÖüèª (`U+1F485 U+1F3FB`)"] #[doc="# assert_eq!(NAIL_POLISH.tone(Tone::Light).to_string().as_str(), \"üíÖüèª\");"]#[doc="println!(\"{}\", NAIL_POLISH.tone(Tone::MediumLight)); // üíÖüèº (`U+1F485 U+1F3FC`)"] #[doc="# assert_eq!(NAIL_POLISH.tone(Tone::MediumLight).to_string().as_str(), \"üíÖüèº\");"]#[doc="println!(\"{}\", NAIL_POLISH.tone(Tone::Medium)); // üíÖüèΩ (`U+1F485 U+1F3FD`)"] #[doc="# assert_eq!(NAIL_POLISH.tone(Tone::Medium).to_string().as_str(), \"üíÖüèΩ\");"]#[doc="println!(\"{}\", NAIL_POLISH.tone(Tone::MediumDark)); // üíÖüèæ (`U+1F485 U+1F3FE`)"] #[doc="# assert_eq!(NAIL_POLISH.tone(Tone::MediumDark).to_string().as_str(), \"üíÖüèæ\");"]#[doc="println!(\"{}\", NAIL_POLISH.tone(Tone::Dark)); // üíÖüèø (`U+1F485 U+1F3FF`)"] #[doc="# assert_eq!(NAIL_POLISH.tone(Tone::Dark).to_string().as_str(), \"üíÖüèø\");"]
#[doc="```"]
pub static NAIL_POLISH: With<Tone,Emoji> = With::new(Emoji::new("nail polish", Version(0, 6),"üíÖ"), 
	&[
		Emoji::new("nail polish: light skin tone", Version(1, 0),"üíÖüèª"),
	Emoji::new("nail polish: medium-light skin tone", Version(1, 0),"üíÖüèº"),
	Emoji::new("nail polish: medium skin tone", Version(1, 0),"üíÖüèΩ"),
	Emoji::new("nail polish: medium-dark skin tone", Version(1, 0),"üíÖüèæ"),
	Emoji::new("nail polish: dark skin tone", Version(1, 0),"üíÖüèø"),
	]);

		
		#[doc="selfie ü§≥"]#[doc=""]#[doc="Since E3.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SELFIE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SELFIE); // ü§≥ (`U+1F933`)"] #[doc="# assert_eq!(SELFIE.to_string().as_str(), \"ü§≥\");"]#[doc="println!(\"{}\", SELFIE.tone(Tone::Light)); // ü§≥üèª (`U+1F933 U+1F3FB`)"] #[doc="# assert_eq!(SELFIE.tone(Tone::Light).to_string().as_str(), \"ü§≥üèª\");"]#[doc="println!(\"{}\", SELFIE.tone(Tone::MediumLight)); // ü§≥üèº (`U+1F933 U+1F3FC`)"] #[doc="# assert_eq!(SELFIE.tone(Tone::MediumLight).to_string().as_str(), \"ü§≥üèº\");"]#[doc="println!(\"{}\", SELFIE.tone(Tone::Medium)); // ü§≥üèΩ (`U+1F933 U+1F3FD`)"] #[doc="# assert_eq!(SELFIE.tone(Tone::Medium).to_string().as_str(), \"ü§≥üèΩ\");"]#[doc="println!(\"{}\", SELFIE.tone(Tone::MediumDark)); // ü§≥üèæ (`U+1F933 U+1F3FE`)"] #[doc="# assert_eq!(SELFIE.tone(Tone::MediumDark).to_string().as_str(), \"ü§≥üèæ\");"]#[doc="println!(\"{}\", SELFIE.tone(Tone::Dark)); // ü§≥üèø (`U+1F933 U+1F3FF`)"] #[doc="# assert_eq!(SELFIE.tone(Tone::Dark).to_string().as_str(), \"ü§≥üèø\");"]
#[doc="```"]
pub static SELFIE: With<Tone,Emoji> = With::new(Emoji::new("selfie", Version(3, 0),"ü§≥"), 
	&[
		Emoji::new("selfie: light skin tone", Version(3, 0),"ü§≥üèª"),
	Emoji::new("selfie: medium-light skin tone", Version(3, 0),"ü§≥üèº"),
	Emoji::new("selfie: medium skin tone", Version(3, 0),"ü§≥üèΩ"),
	Emoji::new("selfie: medium-dark skin tone", Version(3, 0),"ü§≥üèæ"),
	Emoji::new("selfie: dark skin tone", Version(3, 0),"ü§≥üèø"),
	]);

		
		#[doc="writing hand ‚úçÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WRITING_HAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WRITING_HAND); // ‚úçÔ∏è (`U+270D U+FE0F`)"] #[doc="# assert_eq!(WRITING_HAND.to_string().as_str(), \"‚úçÔ∏è\");"]#[doc="println!(\"{}\", WRITING_HAND.tone(Tone::Light)); // ‚úçüèª (`U+270D U+1F3FB`)"] #[doc="# assert_eq!(WRITING_HAND.tone(Tone::Light).to_string().as_str(), \"‚úçüèª\");"]#[doc="println!(\"{}\", WRITING_HAND.tone(Tone::MediumLight)); // ‚úçüèº (`U+270D U+1F3FC`)"] #[doc="# assert_eq!(WRITING_HAND.tone(Tone::MediumLight).to_string().as_str(), \"‚úçüèº\");"]#[doc="println!(\"{}\", WRITING_HAND.tone(Tone::Medium)); // ‚úçüèΩ (`U+270D U+1F3FD`)"] #[doc="# assert_eq!(WRITING_HAND.tone(Tone::Medium).to_string().as_str(), \"‚úçüèΩ\");"]#[doc="println!(\"{}\", WRITING_HAND.tone(Tone::MediumDark)); // ‚úçüèæ (`U+270D U+1F3FE`)"] #[doc="# assert_eq!(WRITING_HAND.tone(Tone::MediumDark).to_string().as_str(), \"‚úçüèæ\");"]#[doc="println!(\"{}\", WRITING_HAND.tone(Tone::Dark)); // ‚úçüèø (`U+270D U+1F3FF`)"] #[doc="# assert_eq!(WRITING_HAND.tone(Tone::Dark).to_string().as_str(), \"‚úçüèø\");"]
#[doc="```"]
pub static WRITING_HAND: With<Tone,Emoji> = With::new(Emoji::new("writing hand", Version(0, 7),"‚úçÔ∏è"), 
	&[
		Emoji::new("writing hand: light skin tone", Version(1, 0),"‚úçüèª"),
	Emoji::new("writing hand: medium-light skin tone", Version(1, 0),"‚úçüèº"),
	Emoji::new("writing hand: medium skin tone", Version(1, 0),"‚úçüèΩ"),
	Emoji::new("writing hand: medium-dark skin tone", Version(1, 0),"‚úçüèæ"),
	Emoji::new("writing hand: dark skin tone", Version(1, 0),"‚úçüèø"),
	]);

		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // NAIL_POLISH
				
				&NAIL_POLISH.default,
				
				&NAIL_POLISH.tone(Tone::Light),
				
				&NAIL_POLISH.tone(Tone::MediumLight),
				
				&NAIL_POLISH.tone(Tone::Medium),
				
				&NAIL_POLISH.tone(Tone::MediumDark),
				
				&NAIL_POLISH.tone(Tone::Dark),
				
			],
			
			&[ // SELFIE
				
				&SELFIE.default,
				
				&SELFIE.tone(Tone::Light),
				
				&SELFIE.tone(Tone::MediumLight),
				
				&SELFIE.tone(Tone::Medium),
				
				&SELFIE.tone(Tone::MediumDark),
				
				&SELFIE.tone(Tone::Dark),
				
			],
			
			&[ // WRITING_HAND
				
				&WRITING_HAND.default,
				
				&WRITING_HAND.tone(Tone::Light),
				
				&WRITING_HAND.tone(Tone::MediumLight),
				
				&WRITING_HAND.tone(Tone::Medium),
				
				&WRITING_HAND.tone(Tone::MediumDark),
				
				&WRITING_HAND.tone(Tone::Dark),
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&NAIL_POLISH.default, // NAIL_POLISH
				
			
				
				&SELFIE.default, // SELFIE
				
			
				
				&WRITING_HAND.default, // WRITING_HAND
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // hand_prop
	
	/// hand_single_finger üëáüëàüëâ
	pub mod hand_single_finger {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="backhand index pointing down üëá"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BACKHAND_INDEX_POINTING_DOWN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_DOWN); // üëá (`U+1F447`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_DOWN.to_string().as_str(), \"üëá\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_DOWN.tone(Tone::Light)); // üëáüèª (`U+1F447 U+1F3FB`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_DOWN.tone(Tone::Light).to_string().as_str(), \"üëáüèª\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_DOWN.tone(Tone::MediumLight)); // üëáüèº (`U+1F447 U+1F3FC`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_DOWN.tone(Tone::MediumLight).to_string().as_str(), \"üëáüèº\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_DOWN.tone(Tone::Medium)); // üëáüèΩ (`U+1F447 U+1F3FD`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_DOWN.tone(Tone::Medium).to_string().as_str(), \"üëáüèΩ\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_DOWN.tone(Tone::MediumDark)); // üëáüèæ (`U+1F447 U+1F3FE`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_DOWN.tone(Tone::MediumDark).to_string().as_str(), \"üëáüèæ\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_DOWN.tone(Tone::Dark)); // üëáüèø (`U+1F447 U+1F3FF`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_DOWN.tone(Tone::Dark).to_string().as_str(), \"üëáüèø\");"]
#[doc="```"]
pub static BACKHAND_INDEX_POINTING_DOWN: With<Tone,Emoji> = With::new(Emoji::new("backhand index pointing down", Version(0, 6),"üëá"), 
	&[
		Emoji::new("backhand index pointing down: light skin tone", Version(1, 0),"üëáüèª"),
	Emoji::new("backhand index pointing down: medium-light skin tone", Version(1, 0),"üëáüèº"),
	Emoji::new("backhand index pointing down: medium skin tone", Version(1, 0),"üëáüèΩ"),
	Emoji::new("backhand index pointing down: medium-dark skin tone", Version(1, 0),"üëáüèæ"),
	Emoji::new("backhand index pointing down: dark skin tone", Version(1, 0),"üëáüèø"),
	]);

		
		#[doc="backhand index pointing left üëà"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BACKHAND_INDEX_POINTING_LEFT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_LEFT); // üëà (`U+1F448`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_LEFT.to_string().as_str(), \"üëà\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_LEFT.tone(Tone::Light)); // üëàüèª (`U+1F448 U+1F3FB`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_LEFT.tone(Tone::Light).to_string().as_str(), \"üëàüèª\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_LEFT.tone(Tone::MediumLight)); // üëàüèº (`U+1F448 U+1F3FC`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_LEFT.tone(Tone::MediumLight).to_string().as_str(), \"üëàüèº\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_LEFT.tone(Tone::Medium)); // üëàüèΩ (`U+1F448 U+1F3FD`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_LEFT.tone(Tone::Medium).to_string().as_str(), \"üëàüèΩ\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_LEFT.tone(Tone::MediumDark)); // üëàüèæ (`U+1F448 U+1F3FE`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_LEFT.tone(Tone::MediumDark).to_string().as_str(), \"üëàüèæ\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_LEFT.tone(Tone::Dark)); // üëàüèø (`U+1F448 U+1F3FF`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_LEFT.tone(Tone::Dark).to_string().as_str(), \"üëàüèø\");"]
#[doc="```"]
pub static BACKHAND_INDEX_POINTING_LEFT: With<Tone,Emoji> = With::new(Emoji::new("backhand index pointing left", Version(0, 6),"üëà"), 
	&[
		Emoji::new("backhand index pointing left: light skin tone", Version(1, 0),"üëàüèª"),
	Emoji::new("backhand index pointing left: medium-light skin tone", Version(1, 0),"üëàüèº"),
	Emoji::new("backhand index pointing left: medium skin tone", Version(1, 0),"üëàüèΩ"),
	Emoji::new("backhand index pointing left: medium-dark skin tone", Version(1, 0),"üëàüèæ"),
	Emoji::new("backhand index pointing left: dark skin tone", Version(1, 0),"üëàüèø"),
	]);

		
		#[doc="backhand index pointing right üëâ"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BACKHAND_INDEX_POINTING_RIGHT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_RIGHT); // üëâ (`U+1F449`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_RIGHT.to_string().as_str(), \"üëâ\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::Light)); // üëâüèª (`U+1F449 U+1F3FB`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::Light).to_string().as_str(), \"üëâüèª\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::MediumLight)); // üëâüèº (`U+1F449 U+1F3FC`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::MediumLight).to_string().as_str(), \"üëâüèº\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::Medium)); // üëâüèΩ (`U+1F449 U+1F3FD`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::Medium).to_string().as_str(), \"üëâüèΩ\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::MediumDark)); // üëâüèæ (`U+1F449 U+1F3FE`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::MediumDark).to_string().as_str(), \"üëâüèæ\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::Dark)); // üëâüèø (`U+1F449 U+1F3FF`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::Dark).to_string().as_str(), \"üëâüèø\");"]
#[doc="```"]
pub static BACKHAND_INDEX_POINTING_RIGHT: With<Tone,Emoji> = With::new(Emoji::new("backhand index pointing right", Version(0, 6),"üëâ"), 
	&[
		Emoji::new("backhand index pointing right: light skin tone", Version(1, 0),"üëâüèª"),
	Emoji::new("backhand index pointing right: medium-light skin tone", Version(1, 0),"üëâüèº"),
	Emoji::new("backhand index pointing right: medium skin tone", Version(1, 0),"üëâüèΩ"),
	Emoji::new("backhand index pointing right: medium-dark skin tone", Version(1, 0),"üëâüèæ"),
	Emoji::new("backhand index pointing right: dark skin tone", Version(1, 0),"üëâüèø"),
	]);

		
		#[doc="backhand index pointing up üëÜ"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BACKHAND_INDEX_POINTING_UP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_UP); // üëÜ (`U+1F446`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_UP.to_string().as_str(), \"üëÜ\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_UP.tone(Tone::Light)); // üëÜüèª (`U+1F446 U+1F3FB`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_UP.tone(Tone::Light).to_string().as_str(), \"üëÜüèª\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_UP.tone(Tone::MediumLight)); // üëÜüèº (`U+1F446 U+1F3FC`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_UP.tone(Tone::MediumLight).to_string().as_str(), \"üëÜüèº\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_UP.tone(Tone::Medium)); // üëÜüèΩ (`U+1F446 U+1F3FD`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_UP.tone(Tone::Medium).to_string().as_str(), \"üëÜüèΩ\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_UP.tone(Tone::MediumDark)); // üëÜüèæ (`U+1F446 U+1F3FE`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_UP.tone(Tone::MediumDark).to_string().as_str(), \"üëÜüèæ\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_UP.tone(Tone::Dark)); // üëÜüèø (`U+1F446 U+1F3FF`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_UP.tone(Tone::Dark).to_string().as_str(), \"üëÜüèø\");"]
#[doc="```"]
pub static BACKHAND_INDEX_POINTING_UP: With<Tone,Emoji> = With::new(Emoji::new("backhand index pointing up", Version(0, 6),"üëÜ"), 
	&[
		Emoji::new("backhand index pointing up: light skin tone", Version(1, 0),"üëÜüèª"),
	Emoji::new("backhand index pointing up: medium-light skin tone", Version(1, 0),"üëÜüèº"),
	Emoji::new("backhand index pointing up: medium skin tone", Version(1, 0),"üëÜüèΩ"),
	Emoji::new("backhand index pointing up: medium-dark skin tone", Version(1, 0),"üëÜüèæ"),
	Emoji::new("backhand index pointing up: dark skin tone", Version(1, 0),"üëÜüèø"),
	]);

		
		#[doc="index pointing up ‚òùÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::INDEX_POINTING_UP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", INDEX_POINTING_UP); // ‚òùÔ∏è (`U+261D U+FE0F`)"] #[doc="# assert_eq!(INDEX_POINTING_UP.to_string().as_str(), \"‚òùÔ∏è\");"]#[doc="println!(\"{}\", INDEX_POINTING_UP.tone(Tone::Light)); // ‚òùüèª (`U+261D U+1F3FB`)"] #[doc="# assert_eq!(INDEX_POINTING_UP.tone(Tone::Light).to_string().as_str(), \"‚òùüèª\");"]#[doc="println!(\"{}\", INDEX_POINTING_UP.tone(Tone::MediumLight)); // ‚òùüèº (`U+261D U+1F3FC`)"] #[doc="# assert_eq!(INDEX_POINTING_UP.tone(Tone::MediumLight).to_string().as_str(), \"‚òùüèº\");"]#[doc="println!(\"{}\", INDEX_POINTING_UP.tone(Tone::Medium)); // ‚òùüèΩ (`U+261D U+1F3FD`)"] #[doc="# assert_eq!(INDEX_POINTING_UP.tone(Tone::Medium).to_string().as_str(), \"‚òùüèΩ\");"]#[doc="println!(\"{}\", INDEX_POINTING_UP.tone(Tone::MediumDark)); // ‚òùüèæ (`U+261D U+1F3FE`)"] #[doc="# assert_eq!(INDEX_POINTING_UP.tone(Tone::MediumDark).to_string().as_str(), \"‚òùüèæ\");"]#[doc="println!(\"{}\", INDEX_POINTING_UP.tone(Tone::Dark)); // ‚òùüèø (`U+261D U+1F3FF`)"] #[doc="# assert_eq!(INDEX_POINTING_UP.tone(Tone::Dark).to_string().as_str(), \"‚òùüèø\");"]
#[doc="```"]
pub static INDEX_POINTING_UP: With<Tone,Emoji> = With::new(Emoji::new("index pointing up", Version(0, 6),"‚òùÔ∏è"), 
	&[
		Emoji::new("index pointing up: light skin tone", Version(1, 0),"‚òùüèª"),
	Emoji::new("index pointing up: medium-light skin tone", Version(1, 0),"‚òùüèº"),
	Emoji::new("index pointing up: medium skin tone", Version(1, 0),"‚òùüèΩ"),
	Emoji::new("index pointing up: medium-dark skin tone", Version(1, 0),"‚òùüèæ"),
	Emoji::new("index pointing up: dark skin tone", Version(1, 0),"‚òùüèø"),
	]);

		
		#[doc="middle finger üñï"]#[doc=""]#[doc="Since E1.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MIDDLE_FINGER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MIDDLE_FINGER); // üñï (`U+1F595`)"] #[doc="# assert_eq!(MIDDLE_FINGER.to_string().as_str(), \"üñï\");"]#[doc="println!(\"{}\", MIDDLE_FINGER.tone(Tone::Light)); // üñïüèª (`U+1F595 U+1F3FB`)"] #[doc="# assert_eq!(MIDDLE_FINGER.tone(Tone::Light).to_string().as_str(), \"üñïüèª\");"]#[doc="println!(\"{}\", MIDDLE_FINGER.tone(Tone::MediumLight)); // üñïüèº (`U+1F595 U+1F3FC`)"] #[doc="# assert_eq!(MIDDLE_FINGER.tone(Tone::MediumLight).to_string().as_str(), \"üñïüèº\");"]#[doc="println!(\"{}\", MIDDLE_FINGER.tone(Tone::Medium)); // üñïüèΩ (`U+1F595 U+1F3FD`)"] #[doc="# assert_eq!(MIDDLE_FINGER.tone(Tone::Medium).to_string().as_str(), \"üñïüèΩ\");"]#[doc="println!(\"{}\", MIDDLE_FINGER.tone(Tone::MediumDark)); // üñïüèæ (`U+1F595 U+1F3FE`)"] #[doc="# assert_eq!(MIDDLE_FINGER.tone(Tone::MediumDark).to_string().as_str(), \"üñïüèæ\");"]#[doc="println!(\"{}\", MIDDLE_FINGER.tone(Tone::Dark)); // üñïüèø (`U+1F595 U+1F3FF`)"] #[doc="# assert_eq!(MIDDLE_FINGER.tone(Tone::Dark).to_string().as_str(), \"üñïüèø\");"]
#[doc="```"]
pub static MIDDLE_FINGER: With<Tone,Emoji> = With::new(Emoji::new("middle finger", Version(1, 0),"üñï"), 
	&[
		Emoji::new("middle finger: light skin tone", Version(1, 0),"üñïüèª"),
	Emoji::new("middle finger: medium-light skin tone", Version(1, 0),"üñïüèº"),
	Emoji::new("middle finger: medium skin tone", Version(1, 0),"üñïüèΩ"),
	Emoji::new("middle finger: medium-dark skin tone", Version(1, 0),"üñïüèæ"),
	Emoji::new("middle finger: dark skin tone", Version(1, 0),"üñïüèø"),
	]);

		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BACKHAND_INDEX_POINTING_DOWN
				
				&BACKHAND_INDEX_POINTING_DOWN.default,
				
				&BACKHAND_INDEX_POINTING_DOWN.tone(Tone::Light),
				
				&BACKHAND_INDEX_POINTING_DOWN.tone(Tone::MediumLight),
				
				&BACKHAND_INDEX_POINTING_DOWN.tone(Tone::Medium),
				
				&BACKHAND_INDEX_POINTING_DOWN.tone(Tone::MediumDark),
				
				&BACKHAND_INDEX_POINTING_DOWN.tone(Tone::Dark),
				
			],
			
			&[ // BACKHAND_INDEX_POINTING_LEFT
				
				&BACKHAND_INDEX_POINTING_LEFT.default,
				
				&BACKHAND_INDEX_POINTING_LEFT.tone(Tone::Light),
				
				&BACKHAND_INDEX_POINTING_LEFT.tone(Tone::MediumLight),
				
				&BACKHAND_INDEX_POINTING_LEFT.tone(Tone::Medium),
				
				&BACKHAND_INDEX_POINTING_LEFT.tone(Tone::MediumDark),
				
				&BACKHAND_INDEX_POINTING_LEFT.tone(Tone::Dark),
				
			],
			
			&[ // BACKHAND_INDEX_POINTING_RIGHT
				
				&BACKHAND_INDEX_POINTING_RIGHT.default,
				
				&BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::Light),
				
				&BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::MediumLight),
				
				&BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::Medium),
				
				&BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::MediumDark),
				
				&BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::Dark),
				
			],
			
			&[ // BACKHAND_INDEX_POINTING_UP
				
				&BACKHAND_INDEX_POINTING_UP.default,
				
				&BACKHAND_INDEX_POINTING_UP.tone(Tone::Light),
				
				&BACKHAND_INDEX_POINTING_UP.tone(Tone::MediumLight),
				
				&BACKHAND_INDEX_POINTING_UP.tone(Tone::Medium),
				
				&BACKHAND_INDEX_POINTING_UP.tone(Tone::MediumDark),
				
				&BACKHAND_INDEX_POINTING_UP.tone(Tone::Dark),
				
			],
			
			&[ // INDEX_POINTING_UP
				
				&INDEX_POINTING_UP.default,
				
				&INDEX_POINTING_UP.tone(Tone::Light),
				
				&INDEX_POINTING_UP.tone(Tone::MediumLight),
				
				&INDEX_POINTING_UP.tone(Tone::Medium),
				
				&INDEX_POINTING_UP.tone(Tone::MediumDark),
				
				&INDEX_POINTING_UP.tone(Tone::Dark),
				
			],
			
			&[ // MIDDLE_FINGER
				
				&MIDDLE_FINGER.default,
				
				&MIDDLE_FINGER.tone(Tone::Light),
				
				&MIDDLE_FINGER.tone(Tone::MediumLight),
				
				&MIDDLE_FINGER.tone(Tone::Medium),
				
				&MIDDLE_FINGER.tone(Tone::MediumDark),
				
				&MIDDLE_FINGER.tone(Tone::Dark),
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BACKHAND_INDEX_POINTING_DOWN.default, // BACKHAND_INDEX_POINTING_DOWN
				
			
				
				&BACKHAND_INDEX_POINTING_LEFT.default, // BACKHAND_INDEX_POINTING_LEFT
				
			
				
				&BACKHAND_INDEX_POINTING_RIGHT.default, // BACKHAND_INDEX_POINTING_RIGHT
				
			
				
				&BACKHAND_INDEX_POINTING_UP.default, // BACKHAND_INDEX_POINTING_UP
				
			
				
				&INDEX_POINTING_UP.default, // INDEX_POINTING_UP
				
			
				
				&MIDDLE_FINGER.default, // MIDDLE_FINGER
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // hand_single_finger
	
	/// hands üëèüôèü§ù
	pub mod hands {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="clapping hands üëè"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLAPPING_HANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLAPPING_HANDS); // üëè (`U+1F44F`)"] #[doc="# assert_eq!(CLAPPING_HANDS.to_string().as_str(), \"üëè\");"]#[doc="println!(\"{}\", CLAPPING_HANDS.tone(Tone::Light)); // üëèüèª (`U+1F44F U+1F3FB`)"] #[doc="# assert_eq!(CLAPPING_HANDS.tone(Tone::Light).to_string().as_str(), \"üëèüèª\");"]#[doc="println!(\"{}\", CLAPPING_HANDS.tone(Tone::MediumLight)); // üëèüèº (`U+1F44F U+1F3FC`)"] #[doc="# assert_eq!(CLAPPING_HANDS.tone(Tone::MediumLight).to_string().as_str(), \"üëèüèº\");"]#[doc="println!(\"{}\", CLAPPING_HANDS.tone(Tone::Medium)); // üëèüèΩ (`U+1F44F U+1F3FD`)"] #[doc="# assert_eq!(CLAPPING_HANDS.tone(Tone::Medium).to_string().as_str(), \"üëèüèΩ\");"]#[doc="println!(\"{}\", CLAPPING_HANDS.tone(Tone::MediumDark)); // üëèüèæ (`U+1F44F U+1F3FE`)"] #[doc="# assert_eq!(CLAPPING_HANDS.tone(Tone::MediumDark).to_string().as_str(), \"üëèüèæ\");"]#[doc="println!(\"{}\", CLAPPING_HANDS.tone(Tone::Dark)); // üëèüèø (`U+1F44F U+1F3FF`)"] #[doc="# assert_eq!(CLAPPING_HANDS.tone(Tone::Dark).to_string().as_str(), \"üëèüèø\");"]
#[doc="```"]
pub static CLAPPING_HANDS: With<Tone,Emoji> = With::new(Emoji::new("clapping hands", Version(0, 6),"üëè"), 
	&[
		Emoji::new("clapping hands: light skin tone", Version(1, 0),"üëèüèª"),
	Emoji::new("clapping hands: medium-light skin tone", Version(1, 0),"üëèüèº"),
	Emoji::new("clapping hands: medium skin tone", Version(1, 0),"üëèüèΩ"),
	Emoji::new("clapping hands: medium-dark skin tone", Version(1, 0),"üëèüèæ"),
	Emoji::new("clapping hands: dark skin tone", Version(1, 0),"üëèüèø"),
	]);

		
		#[doc="folded hands üôè"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FOLDED_HANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FOLDED_HANDS); // üôè (`U+1F64F`)"] #[doc="# assert_eq!(FOLDED_HANDS.to_string().as_str(), \"üôè\");"]#[doc="println!(\"{}\", FOLDED_HANDS.tone(Tone::Light)); // üôèüèª (`U+1F64F U+1F3FB`)"] #[doc="# assert_eq!(FOLDED_HANDS.tone(Tone::Light).to_string().as_str(), \"üôèüèª\");"]#[doc="println!(\"{}\", FOLDED_HANDS.tone(Tone::MediumLight)); // üôèüèº (`U+1F64F U+1F3FC`)"] #[doc="# assert_eq!(FOLDED_HANDS.tone(Tone::MediumLight).to_string().as_str(), \"üôèüèº\");"]#[doc="println!(\"{}\", FOLDED_HANDS.tone(Tone::Medium)); // üôèüèΩ (`U+1F64F U+1F3FD`)"] #[doc="# assert_eq!(FOLDED_HANDS.tone(Tone::Medium).to_string().as_str(), \"üôèüèΩ\");"]#[doc="println!(\"{}\", FOLDED_HANDS.tone(Tone::MediumDark)); // üôèüèæ (`U+1F64F U+1F3FE`)"] #[doc="# assert_eq!(FOLDED_HANDS.tone(Tone::MediumDark).to_string().as_str(), \"üôèüèæ\");"]#[doc="println!(\"{}\", FOLDED_HANDS.tone(Tone::Dark)); // üôèüèø (`U+1F64F U+1F3FF`)"] #[doc="# assert_eq!(FOLDED_HANDS.tone(Tone::Dark).to_string().as_str(), \"üôèüèø\");"]
#[doc="```"]
pub static FOLDED_HANDS: With<Tone,Emoji> = With::new(Emoji::new("folded hands", Version(0, 6),"üôè"), 
	&[
		Emoji::new("folded hands: light skin tone", Version(1, 0),"üôèüèª"),
	Emoji::new("folded hands: medium-light skin tone", Version(1, 0),"üôèüèº"),
	Emoji::new("folded hands: medium skin tone", Version(1, 0),"üôèüèΩ"),
	Emoji::new("folded hands: medium-dark skin tone", Version(1, 0),"üôèüèæ"),
	Emoji::new("folded hands: dark skin tone", Version(1, 0),"üôèüèø"),
	]);

		
		#[doc="handshake ü§ù"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HANDSHAKE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HANDSHAKE); // ü§ù (`U+1F91D`)"] #[doc="# assert_eq!(HANDSHAKE.to_string().as_str(), \"ü§ù\");"]
#[doc="```"]
pub static HANDSHAKE :  Emoji = Emoji::new("handshake", Version(3, 0), "ü§ù"); // handshake
		
		#[doc="open hands üëê"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OPEN_HANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OPEN_HANDS); // üëê (`U+1F450`)"] #[doc="# assert_eq!(OPEN_HANDS.to_string().as_str(), \"üëê\");"]#[doc="println!(\"{}\", OPEN_HANDS.tone(Tone::Light)); // üëêüèª (`U+1F450 U+1F3FB`)"] #[doc="# assert_eq!(OPEN_HANDS.tone(Tone::Light).to_string().as_str(), \"üëêüèª\");"]#[doc="println!(\"{}\", OPEN_HANDS.tone(Tone::MediumLight)); // üëêüèº (`U+1F450 U+1F3FC`)"] #[doc="# assert_eq!(OPEN_HANDS.tone(Tone::MediumLight).to_string().as_str(), \"üëêüèº\");"]#[doc="println!(\"{}\", OPEN_HANDS.tone(Tone::Medium)); // üëêüèΩ (`U+1F450 U+1F3FD`)"] #[doc="# assert_eq!(OPEN_HANDS.tone(Tone::Medium).to_string().as_str(), \"üëêüèΩ\");"]#[doc="println!(\"{}\", OPEN_HANDS.tone(Tone::MediumDark)); // üëêüèæ (`U+1F450 U+1F3FE`)"] #[doc="# assert_eq!(OPEN_HANDS.tone(Tone::MediumDark).to_string().as_str(), \"üëêüèæ\");"]#[doc="println!(\"{}\", OPEN_HANDS.tone(Tone::Dark)); // üëêüèø (`U+1F450 U+1F3FF`)"] #[doc="# assert_eq!(OPEN_HANDS.tone(Tone::Dark).to_string().as_str(), \"üëêüèø\");"]
#[doc="```"]
pub static OPEN_HANDS: With<Tone,Emoji> = With::new(Emoji::new("open hands", Version(0, 6),"üëê"), 
	&[
		Emoji::new("open hands: light skin tone", Version(1, 0),"üëêüèª"),
	Emoji::new("open hands: medium-light skin tone", Version(1, 0),"üëêüèº"),
	Emoji::new("open hands: medium skin tone", Version(1, 0),"üëêüèΩ"),
	Emoji::new("open hands: medium-dark skin tone", Version(1, 0),"üëêüèæ"),
	Emoji::new("open hands: dark skin tone", Version(1, 0),"üëêüèø"),
	]);

		
		#[doc="palms up together ü§≤"]#[doc=""]#[doc="Since E5.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PALMS_UP_TOGETHER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PALMS_UP_TOGETHER); // ü§≤ (`U+1F932`)"] #[doc="# assert_eq!(PALMS_UP_TOGETHER.to_string().as_str(), \"ü§≤\");"]#[doc="println!(\"{}\", PALMS_UP_TOGETHER.tone(Tone::Light)); // ü§≤üèª (`U+1F932 U+1F3FB`)"] #[doc="# assert_eq!(PALMS_UP_TOGETHER.tone(Tone::Light).to_string().as_str(), \"ü§≤üèª\");"]#[doc="println!(\"{}\", PALMS_UP_TOGETHER.tone(Tone::MediumLight)); // ü§≤üèº (`U+1F932 U+1F3FC`)"] #[doc="# assert_eq!(PALMS_UP_TOGETHER.tone(Tone::MediumLight).to_string().as_str(), \"ü§≤üèº\");"]#[doc="println!(\"{}\", PALMS_UP_TOGETHER.tone(Tone::Medium)); // ü§≤üèΩ (`U+1F932 U+1F3FD`)"] #[doc="# assert_eq!(PALMS_UP_TOGETHER.tone(Tone::Medium).to_string().as_str(), \"ü§≤üèΩ\");"]#[doc="println!(\"{}\", PALMS_UP_TOGETHER.tone(Tone::MediumDark)); // ü§≤üèæ (`U+1F932 U+1F3FE`)"] #[doc="# assert_eq!(PALMS_UP_TOGETHER.tone(Tone::MediumDark).to_string().as_str(), \"ü§≤üèæ\");"]#[doc="println!(\"{}\", PALMS_UP_TOGETHER.tone(Tone::Dark)); // ü§≤üèø (`U+1F932 U+1F3FF`)"] #[doc="# assert_eq!(PALMS_UP_TOGETHER.tone(Tone::Dark).to_string().as_str(), \"ü§≤üèø\");"]
#[doc="```"]
pub static PALMS_UP_TOGETHER: With<Tone,Emoji> = With::new(Emoji::new("palms up together", Version(5, 0),"ü§≤"), 
	&[
		Emoji::new("palms up together: light skin tone", Version(5, 0),"ü§≤üèª"),
	Emoji::new("palms up together: medium-light skin tone", Version(5, 0),"ü§≤üèº"),
	Emoji::new("palms up together: medium skin tone", Version(5, 0),"ü§≤üèΩ"),
	Emoji::new("palms up together: medium-dark skin tone", Version(5, 0),"ü§≤üèæ"),
	Emoji::new("palms up together: dark skin tone", Version(5, 0),"ü§≤üèø"),
	]);

		
		#[doc="raising hands üôå"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RAISING_HANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RAISING_HANDS); // üôå (`U+1F64C`)"] #[doc="# assert_eq!(RAISING_HANDS.to_string().as_str(), \"üôå\");"]#[doc="println!(\"{}\", RAISING_HANDS.tone(Tone::Light)); // üôåüèª (`U+1F64C U+1F3FB`)"] #[doc="# assert_eq!(RAISING_HANDS.tone(Tone::Light).to_string().as_str(), \"üôåüèª\");"]#[doc="println!(\"{}\", RAISING_HANDS.tone(Tone::MediumLight)); // üôåüèº (`U+1F64C U+1F3FC`)"] #[doc="# assert_eq!(RAISING_HANDS.tone(Tone::MediumLight).to_string().as_str(), \"üôåüèº\");"]#[doc="println!(\"{}\", RAISING_HANDS.tone(Tone::Medium)); // üôåüèΩ (`U+1F64C U+1F3FD`)"] #[doc="# assert_eq!(RAISING_HANDS.tone(Tone::Medium).to_string().as_str(), \"üôåüèΩ\");"]#[doc="println!(\"{}\", RAISING_HANDS.tone(Tone::MediumDark)); // üôåüèæ (`U+1F64C U+1F3FE`)"] #[doc="# assert_eq!(RAISING_HANDS.tone(Tone::MediumDark).to_string().as_str(), \"üôåüèæ\");"]#[doc="println!(\"{}\", RAISING_HANDS.tone(Tone::Dark)); // üôåüèø (`U+1F64C U+1F3FF`)"] #[doc="# assert_eq!(RAISING_HANDS.tone(Tone::Dark).to_string().as_str(), \"üôåüèø\");"]
#[doc="```"]
pub static RAISING_HANDS: With<Tone,Emoji> = With::new(Emoji::new("raising hands", Version(0, 6),"üôå"), 
	&[
		Emoji::new("raising hands: light skin tone", Version(1, 0),"üôåüèª"),
	Emoji::new("raising hands: medium-light skin tone", Version(1, 0),"üôåüèº"),
	Emoji::new("raising hands: medium skin tone", Version(1, 0),"üôåüèΩ"),
	Emoji::new("raising hands: medium-dark skin tone", Version(1, 0),"üôåüèæ"),
	Emoji::new("raising hands: dark skin tone", Version(1, 0),"üôåüèø"),
	]);

		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // CLAPPING_HANDS
				
				&CLAPPING_HANDS.default,
				
				&CLAPPING_HANDS.tone(Tone::Light),
				
				&CLAPPING_HANDS.tone(Tone::MediumLight),
				
				&CLAPPING_HANDS.tone(Tone::Medium),
				
				&CLAPPING_HANDS.tone(Tone::MediumDark),
				
				&CLAPPING_HANDS.tone(Tone::Dark),
				
			],
			
			&[ // FOLDED_HANDS
				
				&FOLDED_HANDS.default,
				
				&FOLDED_HANDS.tone(Tone::Light),
				
				&FOLDED_HANDS.tone(Tone::MediumLight),
				
				&FOLDED_HANDS.tone(Tone::Medium),
				
				&FOLDED_HANDS.tone(Tone::MediumDark),
				
				&FOLDED_HANDS.tone(Tone::Dark),
				
			],
			
			&[ // HANDSHAKE
				
				&HANDSHAKE,
				
			],
			
			&[ // OPEN_HANDS
				
				&OPEN_HANDS.default,
				
				&OPEN_HANDS.tone(Tone::Light),
				
				&OPEN_HANDS.tone(Tone::MediumLight),
				
				&OPEN_HANDS.tone(Tone::Medium),
				
				&OPEN_HANDS.tone(Tone::MediumDark),
				
				&OPEN_HANDS.tone(Tone::Dark),
				
			],
			
			&[ // PALMS_UP_TOGETHER
				
				&PALMS_UP_TOGETHER.default,
				
				&PALMS_UP_TOGETHER.tone(Tone::Light),
				
				&PALMS_UP_TOGETHER.tone(Tone::MediumLight),
				
				&PALMS_UP_TOGETHER.tone(Tone::Medium),
				
				&PALMS_UP_TOGETHER.tone(Tone::MediumDark),
				
				&PALMS_UP_TOGETHER.tone(Tone::Dark),
				
			],
			
			&[ // RAISING_HANDS
				
				&RAISING_HANDS.default,
				
				&RAISING_HANDS.tone(Tone::Light),
				
				&RAISING_HANDS.tone(Tone::MediumLight),
				
				&RAISING_HANDS.tone(Tone::Medium),
				
				&RAISING_HANDS.tone(Tone::MediumDark),
				
				&RAISING_HANDS.tone(Tone::Dark),
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&CLAPPING_HANDS.default, // CLAPPING_HANDS
				
			
				
				&FOLDED_HANDS.default, // FOLDED_HANDS
				
			
				
				&HANDSHAKE, // HANDSHAKE
				
			
				
				&OPEN_HANDS.default, // OPEN_HANDS
				
			
				
				&PALMS_UP_TOGETHER.default, // PALMS_UP_TOGETHER
				
			
				
				&RAISING_HANDS.default, // RAISING_HANDS
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // hands
	
	/// person üë∂üë¶üßí
	pub mod person {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="baby üë∂"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BABY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BABY); // üë∂ (`U+1F476`)"] #[doc="# assert_eq!(BABY.to_string().as_str(), \"üë∂\");"]#[doc="println!(\"{}\", BABY.tone(Tone::Light)); // üë∂üèª (`U+1F476 U+1F3FB`)"] #[doc="# assert_eq!(BABY.tone(Tone::Light).to_string().as_str(), \"üë∂üèª\");"]#[doc="println!(\"{}\", BABY.tone(Tone::MediumLight)); // üë∂üèº (`U+1F476 U+1F3FC`)"] #[doc="# assert_eq!(BABY.tone(Tone::MediumLight).to_string().as_str(), \"üë∂üèº\");"]#[doc="println!(\"{}\", BABY.tone(Tone::Medium)); // üë∂üèΩ (`U+1F476 U+1F3FD`)"] #[doc="# assert_eq!(BABY.tone(Tone::Medium).to_string().as_str(), \"üë∂üèΩ\");"]#[doc="println!(\"{}\", BABY.tone(Tone::MediumDark)); // üë∂üèæ (`U+1F476 U+1F3FE`)"] #[doc="# assert_eq!(BABY.tone(Tone::MediumDark).to_string().as_str(), \"üë∂üèæ\");"]#[doc="println!(\"{}\", BABY.tone(Tone::Dark)); // üë∂üèø (`U+1F476 U+1F3FF`)"] #[doc="# assert_eq!(BABY.tone(Tone::Dark).to_string().as_str(), \"üë∂üèø\");"]
#[doc="```"]
pub static BABY: With<Tone,Emoji> = With::new(Emoji::new("baby", Version(0, 6),"üë∂"), 
	&[
		Emoji::new("baby: light skin tone", Version(1, 0),"üë∂üèª"),
	Emoji::new("baby: medium-light skin tone", Version(1, 0),"üë∂üèº"),
	Emoji::new("baby: medium skin tone", Version(1, 0),"üë∂üèΩ"),
	Emoji::new("baby: medium-dark skin tone", Version(1, 0),"üë∂üèæ"),
	Emoji::new("baby: dark skin tone", Version(1, 0),"üë∂üèø"),
	]);

		
		#[doc="boy üë¶"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BOY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BOY); // üë¶ (`U+1F466`)"] #[doc="# assert_eq!(BOY.to_string().as_str(), \"üë¶\");"]#[doc="println!(\"{}\", BOY.tone(Tone::Light)); // üë¶üèª (`U+1F466 U+1F3FB`)"] #[doc="# assert_eq!(BOY.tone(Tone::Light).to_string().as_str(), \"üë¶üèª\");"]#[doc="println!(\"{}\", BOY.tone(Tone::MediumLight)); // üë¶üèº (`U+1F466 U+1F3FC`)"] #[doc="# assert_eq!(BOY.tone(Tone::MediumLight).to_string().as_str(), \"üë¶üèº\");"]#[doc="println!(\"{}\", BOY.tone(Tone::Medium)); // üë¶üèΩ (`U+1F466 U+1F3FD`)"] #[doc="# assert_eq!(BOY.tone(Tone::Medium).to_string().as_str(), \"üë¶üèΩ\");"]#[doc="println!(\"{}\", BOY.tone(Tone::MediumDark)); // üë¶üèæ (`U+1F466 U+1F3FE`)"] #[doc="# assert_eq!(BOY.tone(Tone::MediumDark).to_string().as_str(), \"üë¶üèæ\");"]#[doc="println!(\"{}\", BOY.tone(Tone::Dark)); // üë¶üèø (`U+1F466 U+1F3FF`)"] #[doc="# assert_eq!(BOY.tone(Tone::Dark).to_string().as_str(), \"üë¶üèø\");"]
#[doc="```"]
pub static BOY: With<Tone,Emoji> = With::new(Emoji::new("boy", Version(0, 6),"üë¶"), 
	&[
		Emoji::new("boy: light skin tone", Version(1, 0),"üë¶üèª"),
	Emoji::new("boy: medium-light skin tone", Version(1, 0),"üë¶üèº"),
	Emoji::new("boy: medium skin tone", Version(1, 0),"üë¶üèΩ"),
	Emoji::new("boy: medium-dark skin tone", Version(1, 0),"üë¶üèæ"),
	Emoji::new("boy: dark skin tone", Version(1, 0),"üë¶üèø"),
	]);

		
		#[doc="child üßí"]#[doc=""]#[doc="Since E5.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHILD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHILD); // üßí (`U+1F9D2`)"] #[doc="# assert_eq!(CHILD.to_string().as_str(), \"üßí\");"]#[doc="println!(\"{}\", CHILD.tone(Tone::Light)); // üßíüèª (`U+1F9D2 U+1F3FB`)"] #[doc="# assert_eq!(CHILD.tone(Tone::Light).to_string().as_str(), \"üßíüèª\");"]#[doc="println!(\"{}\", CHILD.tone(Tone::MediumLight)); // üßíüèº (`U+1F9D2 U+1F3FC`)"] #[doc="# assert_eq!(CHILD.tone(Tone::MediumLight).to_string().as_str(), \"üßíüèº\");"]#[doc="println!(\"{}\", CHILD.tone(Tone::Medium)); // üßíüèΩ (`U+1F9D2 U+1F3FD`)"] #[doc="# assert_eq!(CHILD.tone(Tone::Medium).to_string().as_str(), \"üßíüèΩ\");"]#[doc="println!(\"{}\", CHILD.tone(Tone::MediumDark)); // üßíüèæ (`U+1F9D2 U+1F3FE`)"] #[doc="# assert_eq!(CHILD.tone(Tone::MediumDark).to_string().as_str(), \"üßíüèæ\");"]#[doc="println!(\"{}\", CHILD.tone(Tone::Dark)); // üßíüèø (`U+1F9D2 U+1F3FF`)"] #[doc="# assert_eq!(CHILD.tone(Tone::Dark).to_string().as_str(), \"üßíüèø\");"]
#[doc="```"]
pub static CHILD: With<Tone,Emoji> = With::new(Emoji::new("child", Version(5, 0),"üßí"), 
	&[
		Emoji::new("child: light skin tone", Version(5, 0),"üßíüèª"),
	Emoji::new("child: medium-light skin tone", Version(5, 0),"üßíüèº"),
	Emoji::new("child: medium skin tone", Version(5, 0),"üßíüèΩ"),
	Emoji::new("child: medium-dark skin tone", Version(5, 0),"üßíüèæ"),
	Emoji::new("child: dark skin tone", Version(5, 0),"üßíüèø"),
	]);

		
		#[doc="girl üëß"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GIRL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GIRL); // üëß (`U+1F467`)"] #[doc="# assert_eq!(GIRL.to_string().as_str(), \"üëß\");"]#[doc="println!(\"{}\", GIRL.tone(Tone::Light)); // üëßüèª (`U+1F467 U+1F3FB`)"] #[doc="# assert_eq!(GIRL.tone(Tone::Light).to_string().as_str(), \"üëßüèª\");"]#[doc="println!(\"{}\", GIRL.tone(Tone::MediumLight)); // üëßüèº (`U+1F467 U+1F3FC`)"] #[doc="# assert_eq!(GIRL.tone(Tone::MediumLight).to_string().as_str(), \"üëßüèº\");"]#[doc="println!(\"{}\", GIRL.tone(Tone::Medium)); // üëßüèΩ (`U+1F467 U+1F3FD`)"] #[doc="# assert_eq!(GIRL.tone(Tone::Medium).to_string().as_str(), \"üëßüèΩ\");"]#[doc="println!(\"{}\", GIRL.tone(Tone::MediumDark)); // üëßüèæ (`U+1F467 U+1F3FE`)"] #[doc="# assert_eq!(GIRL.tone(Tone::MediumDark).to_string().as_str(), \"üëßüèæ\");"]#[doc="println!(\"{}\", GIRL.tone(Tone::Dark)); // üëßüèø (`U+1F467 U+1F3FF`)"] #[doc="# assert_eq!(GIRL.tone(Tone::Dark).to_string().as_str(), \"üëßüèø\");"]
#[doc="```"]
pub static GIRL: With<Tone,Emoji> = With::new(Emoji::new("girl", Version(0, 6),"üëß"), 
	&[
		Emoji::new("girl: light skin tone", Version(1, 0),"üëßüèª"),
	Emoji::new("girl: medium-light skin tone", Version(1, 0),"üëßüèº"),
	Emoji::new("girl: medium skin tone", Version(1, 0),"üëßüèΩ"),
	Emoji::new("girl: medium-dark skin tone", Version(1, 0),"üëßüèæ"),
	Emoji::new("girl: dark skin tone", Version(1, 0),"üëßüèø"),
	]);

		
		#[doc="older person üßì"]#[doc=""]#[doc="Since E5.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OLDER_PERSON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OLDER_PERSON); // üßì (`U+1F9D3`)"] #[doc="# assert_eq!(OLDER_PERSON.to_string().as_str(), \"üßì\");"]#[doc="println!(\"{}\", OLDER_PERSON.tone(Tone::Light)); // üßìüèª (`U+1F9D3 U+1F3FB`)"] #[doc="# assert_eq!(OLDER_PERSON.tone(Tone::Light).to_string().as_str(), \"üßìüèª\");"]#[doc="println!(\"{}\", OLDER_PERSON.tone(Tone::MediumLight)); // üßìüèº (`U+1F9D3 U+1F3FC`)"] #[doc="# assert_eq!(OLDER_PERSON.tone(Tone::MediumLight).to_string().as_str(), \"üßìüèº\");"]#[doc="println!(\"{}\", OLDER_PERSON.tone(Tone::Medium)); // üßìüèΩ (`U+1F9D3 U+1F3FD`)"] #[doc="# assert_eq!(OLDER_PERSON.tone(Tone::Medium).to_string().as_str(), \"üßìüèΩ\");"]#[doc="println!(\"{}\", OLDER_PERSON.tone(Tone::MediumDark)); // üßìüèæ (`U+1F9D3 U+1F3FE`)"] #[doc="# assert_eq!(OLDER_PERSON.tone(Tone::MediumDark).to_string().as_str(), \"üßìüèæ\");"]#[doc="println!(\"{}\", OLDER_PERSON.tone(Tone::Dark)); // üßìüèø (`U+1F9D3 U+1F3FF`)"] #[doc="# assert_eq!(OLDER_PERSON.tone(Tone::Dark).to_string().as_str(), \"üßìüèø\");"]
#[doc="```"]
pub static OLDER_PERSON: With<Tone,Emoji> = With::new(Emoji::new("older person", Version(5, 0),"üßì"), 
	&[
		Emoji::new("older person: light skin tone", Version(5, 0),"üßìüèª"),
	Emoji::new("older person: medium-light skin tone", Version(5, 0),"üßìüèº"),
	Emoji::new("older person: medium skin tone", Version(5, 0),"üßìüèΩ"),
	Emoji::new("older person: medium-dark skin tone", Version(5, 0),"üßìüèæ"),
	Emoji::new("older person: dark skin tone", Version(5, 0),"üßìüèø"),
	]);

		
		#[doc="old person üëµüë¥"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OLD_PERSON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OLD_PERSON.gender(Gender::Male)); // üë¥ (`U+1F474`)"] #[doc="# assert_eq!(OLD_PERSON.gender(Gender::Male).to_string().as_str(), \"üë¥\");"]#[doc="println!(\"{}\", OLD_PERSON.gender(Gender::Male).tone(Tone::Light)); // üë¥üèª (`U+1F474 U+1F3FB`)"] #[doc="# assert_eq!(OLD_PERSON.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë¥üèª\");"]#[doc="println!(\"{}\", OLD_PERSON.gender(Gender::Male).tone(Tone::MediumLight)); // üë¥üèº (`U+1F474 U+1F3FC`)"] #[doc="# assert_eq!(OLD_PERSON.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë¥üèº\");"]#[doc="println!(\"{}\", OLD_PERSON.gender(Gender::Male).tone(Tone::Medium)); // üë¥üèΩ (`U+1F474 U+1F3FD`)"] #[doc="# assert_eq!(OLD_PERSON.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë¥üèΩ\");"]#[doc="println!(\"{}\", OLD_PERSON.gender(Gender::Male).tone(Tone::MediumDark)); // üë¥üèæ (`U+1F474 U+1F3FE`)"] #[doc="# assert_eq!(OLD_PERSON.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë¥üèæ\");"]#[doc="println!(\"{}\", OLD_PERSON.gender(Gender::Male).tone(Tone::Dark)); // üë¥üèø (`U+1F474 U+1F3FF`)"] #[doc="# assert_eq!(OLD_PERSON.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë¥üèø\");"]#[doc="println!(\"{}\", OLD_PERSON.gender(Gender::Female)); // üëµ (`U+1F475`)"] #[doc="# assert_eq!(OLD_PERSON.gender(Gender::Female).to_string().as_str(), \"üëµ\");"]#[doc="println!(\"{}\", OLD_PERSON.gender(Gender::Female).tone(Tone::Light)); // üëµüèª (`U+1F475 U+1F3FB`)"] #[doc="# assert_eq!(OLD_PERSON.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üëµüèª\");"]#[doc="println!(\"{}\", OLD_PERSON.gender(Gender::Female).tone(Tone::MediumLight)); // üëµüèº (`U+1F475 U+1F3FC`)"] #[doc="# assert_eq!(OLD_PERSON.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üëµüèº\");"]#[doc="println!(\"{}\", OLD_PERSON.gender(Gender::Female).tone(Tone::Medium)); // üëµüèΩ (`U+1F475 U+1F3FD`)"] #[doc="# assert_eq!(OLD_PERSON.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üëµüèΩ\");"]#[doc="println!(\"{}\", OLD_PERSON.gender(Gender::Female).tone(Tone::MediumDark)); // üëµüèæ (`U+1F475 U+1F3FE`)"] #[doc="# assert_eq!(OLD_PERSON.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üëµüèæ\");"]#[doc="println!(\"{}\", OLD_PERSON.gender(Gender::Female).tone(Tone::Dark)); // üëµüèø (`U+1F475 U+1F3FF`)"] #[doc="# assert_eq!(OLD_PERSON.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üëµüèø\");"]
#[doc="```"]
pub static OLD_PERSON: WithNoDef<Gender,With<Tone,Emoji>> = WithNoDef::new(
	&[
		With::new(Emoji::new("old man", Version(0, 6),"üë¥"), 
	&[
		Emoji::new("old man: light skin tone", Version(1, 0),"üë¥üèª"),
	Emoji::new("old man: medium-light skin tone", Version(1, 0),"üë¥üèº"),
	Emoji::new("old man: medium skin tone", Version(1, 0),"üë¥üèΩ"),
	Emoji::new("old man: medium-dark skin tone", Version(1, 0),"üë¥üèæ"),
	Emoji::new("old man: dark skin tone", Version(1, 0),"üë¥üèø"),
	]),
	With::new(Emoji::new("old woman", Version(0, 6),"üëµ"), 
	&[
		Emoji::new("old woman: light skin tone", Version(1, 0),"üëµüèª"),
	Emoji::new("old woman: medium-light skin tone", Version(1, 0),"üëµüèº"),
	Emoji::new("old woman: medium skin tone", Version(1, 0),"üëµüèΩ"),
	Emoji::new("old woman: medium-dark skin tone", Version(1, 0),"üëµüèæ"),
	Emoji::new("old woman: dark skin tone", Version(1, 0),"üëµüèø"),
	]),
	]);

		
		#[doc="person üßë"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON); // üßë (`U+1F9D1`)"] #[doc="# assert_eq!(PERSON.to_string().as_str(), \"üßë\");"]#[doc="println!(\"{}\", PERSON.tone(Tone::Light)); // üßëüèª (`U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(PERSON.tone(Tone::Light).to_string().as_str(), \"üßëüèª\");"]#[doc="println!(\"{}\", PERSON.tone(Tone::MediumLight)); // üßëüèº (`U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(PERSON.tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº\");"]#[doc="println!(\"{}\", PERSON.tone(Tone::Medium)); // üßëüèΩ (`U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(PERSON.tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ\");"]#[doc="println!(\"{}\", PERSON.tone(Tone::MediumDark)); // üßëüèæ (`U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(PERSON.tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ\");"]#[doc="println!(\"{}\", PERSON.tone(Tone::Dark)); // üßëüèø (`U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(PERSON.tone(Tone::Dark).to_string().as_str(), \"üßëüèø\");"]#[doc="println!(\"{}\", PERSON.gender(Gender::Male)); // üë® (`U+1F468`)"] #[doc="# assert_eq!(PERSON.gender(Gender::Male).to_string().as_str(), \"üë®\");"]#[doc="println!(\"{}\", PERSON.gender(Gender::Male).tone(Tone::Light)); // üë®üèª (`U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(PERSON.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë®üèª\");"]#[doc="println!(\"{}\", PERSON.gender(Gender::Male).tone(Tone::MediumLight)); // üë®üèº (`U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(PERSON.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº\");"]#[doc="println!(\"{}\", PERSON.gender(Gender::Male).tone(Tone::Medium)); // üë®üèΩ (`U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(PERSON.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ\");"]#[doc="println!(\"{}\", PERSON.gender(Gender::Male).tone(Tone::MediumDark)); // üë®üèæ (`U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(PERSON.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ\");"]#[doc="println!(\"{}\", PERSON.gender(Gender::Male).tone(Tone::Dark)); // üë®üèø (`U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(PERSON.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë®üèø\");"]#[doc="println!(\"{}\", PERSON.gender(Gender::Female)); // üë© (`U+1F469`)"] #[doc="# assert_eq!(PERSON.gender(Gender::Female).to_string().as_str(), \"üë©\");"]#[doc="println!(\"{}\", PERSON.gender(Gender::Female).tone(Tone::Light)); // üë©üèª (`U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(PERSON.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë©üèª\");"]#[doc="println!(\"{}\", PERSON.gender(Gender::Female).tone(Tone::MediumLight)); // üë©üèº (`U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(PERSON.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº\");"]#[doc="println!(\"{}\", PERSON.gender(Gender::Female).tone(Tone::Medium)); // üë©üèΩ (`U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(PERSON.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ\");"]#[doc="println!(\"{}\", PERSON.gender(Gender::Female).tone(Tone::MediumDark)); // üë©üèæ (`U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(PERSON.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ\");"]#[doc="println!(\"{}\", PERSON.gender(Gender::Female).tone(Tone::Dark)); // üë©üèø (`U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(PERSON.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë©üèø\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard)); // üßî (`U+1F9D4`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).to_string().as_str(), \"üßî\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).tone(Tone::Light)); // üßîüèª (`U+1F9D4 U+1F3FB`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).tone(Tone::Light).to_string().as_str(), \"üßîüèª\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).tone(Tone::MediumLight)); // üßîüèº (`U+1F9D4 U+1F3FC`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).tone(Tone::MediumLight).to_string().as_str(), \"üßîüèº\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).tone(Tone::Medium)); // üßîüèΩ (`U+1F9D4 U+1F3FD`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).tone(Tone::Medium).to_string().as_str(), \"üßîüèΩ\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).tone(Tone::MediumDark)); // üßîüèæ (`U+1F9D4 U+1F3FE`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).tone(Tone::MediumDark).to_string().as_str(), \"üßîüèæ\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).tone(Tone::Dark)); // üßîüèø (`U+1F9D4 U+1F3FF`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).tone(Tone::Dark).to_string().as_str(), \"üßîüèø\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).gender(Gender::Male)); // üßî‚Äç‚ôÇÔ∏è (`U+1F9D4 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).gender(Gender::Male).to_string().as_str(), \"üßî‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::Light)); // üßîüèª‚Äç‚ôÇÔ∏è (`U+1F9D4 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üßîüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::MediumLight)); // üßîüèº‚Äç‚ôÇÔ∏è (`U+1F9D4 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üßîüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::Medium)); // üßîüèΩ‚Äç‚ôÇÔ∏è (`U+1F9D4 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üßîüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::MediumDark)); // üßîüèæ‚Äç‚ôÇÔ∏è (`U+1F9D4 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üßîüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::Dark)); // üßîüèø‚Äç‚ôÇÔ∏è (`U+1F9D4 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üßîüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).gender(Gender::Female)); // üßî‚Äç‚ôÄÔ∏è (`U+1F9D4 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).gender(Gender::Female).to_string().as_str(), \"üßî‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::Light)); // üßîüèª‚Äç‚ôÄÔ∏è (`U+1F9D4 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üßîüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::MediumLight)); // üßîüèº‚Äç‚ôÄÔ∏è (`U+1F9D4 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üßîüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::Medium)); // üßîüèΩ‚Äç‚ôÄÔ∏è (`U+1F9D4 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üßîüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::MediumDark)); // üßîüèæ‚Äç‚ôÄÔ∏è (`U+1F9D4 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üßîüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::Dark)); // üßîüèø‚Äç‚ôÄÔ∏è (`U+1F9D4 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üßîüèø‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond)); // üë± (`U+1F471`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).to_string().as_str(), \"üë±\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).tone(Tone::Light)); // üë±üèª (`U+1F471 U+1F3FB`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).tone(Tone::Light).to_string().as_str(), \"üë±üèª\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).tone(Tone::MediumLight)); // üë±üèº (`U+1F471 U+1F3FC`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).tone(Tone::MediumLight).to_string().as_str(), \"üë±üèº\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).tone(Tone::Medium)); // üë±üèΩ (`U+1F471 U+1F3FD`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).tone(Tone::Medium).to_string().as_str(), \"üë±üèΩ\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).tone(Tone::MediumDark)); // üë±üèæ (`U+1F471 U+1F3FE`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).tone(Tone::MediumDark).to_string().as_str(), \"üë±üèæ\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).tone(Tone::Dark)); // üë±üèø (`U+1F471 U+1F3FF`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).tone(Tone::Dark).to_string().as_str(), \"üë±üèø\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).gender(Gender::Male)); // üë±‚Äç‚ôÇÔ∏è (`U+1F471 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).gender(Gender::Male).to_string().as_str(), \"üë±‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::Light)); // üë±üèª‚Äç‚ôÇÔ∏è (`U+1F471 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë±üèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::MediumLight)); // üë±üèº‚Äç‚ôÇÔ∏è (`U+1F471 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë±üèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::Medium)); // üë±üèΩ‚Äç‚ôÇÔ∏è (`U+1F471 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë±üèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::MediumDark)); // üë±üèæ‚Äç‚ôÇÔ∏è (`U+1F471 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë±üèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::Dark)); // üë±üèø‚Äç‚ôÇÔ∏è (`U+1F471 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë±üèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).gender(Gender::Female)); // üë±‚Äç‚ôÄÔ∏è (`U+1F471 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).gender(Gender::Female).to_string().as_str(), \"üë±‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::Light)); // üë±üèª‚Äç‚ôÄÔ∏è (`U+1F471 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë±üèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::MediumLight)); // üë±üèº‚Äç‚ôÄÔ∏è (`U+1F471 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë±üèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::Medium)); // üë±üèΩ‚Äç‚ôÄÔ∏è (`U+1F471 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë±üèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::MediumDark)); // üë±üèæ‚Äç‚ôÄÔ∏è (`U+1F471 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë±üèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::Dark)); // üë±üèø‚Äç‚ôÄÔ∏è (`U+1F471 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë±üèø‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red)); // üßë‚Äçü¶∞ (`U+1F9D1 U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).to_string().as_str(), \"üßë‚Äçü¶∞\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).tone(Tone::Light)); // üßëüèª‚Äçü¶∞ (`U+1F9D1 U+1F3FB U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).tone(Tone::Light).to_string().as_str(), \"üßëüèª‚Äçü¶∞\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).tone(Tone::MediumLight)); // üßëüèº‚Äçü¶∞ (`U+1F9D1 U+1F3FC U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº‚Äçü¶∞\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).tone(Tone::Medium)); // üßëüèΩ‚Äçü¶∞ (`U+1F9D1 U+1F3FD U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ‚Äçü¶∞\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).tone(Tone::MediumDark)); // üßëüèæ‚Äçü¶∞ (`U+1F9D1 U+1F3FE U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ‚Äçü¶∞\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).tone(Tone::Dark)); // üßëüèø‚Äçü¶∞ (`U+1F9D1 U+1F3FF U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).tone(Tone::Dark).to_string().as_str(), \"üßëüèø‚Äçü¶∞\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).gender(Gender::Male)); // üë®‚Äçü¶∞ (`U+1F468 U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).gender(Gender::Male).to_string().as_str(), \"üë®‚Äçü¶∞\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::Light)); // üë®üèª‚Äçü¶∞ (`U+1F468 U+1F3FB U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë®üèª‚Äçü¶∞\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::MediumLight)); // üë®üèº‚Äçü¶∞ (`U+1F468 U+1F3FC U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº‚Äçü¶∞\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::Medium)); // üë®üèΩ‚Äçü¶∞ (`U+1F468 U+1F3FD U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ‚Äçü¶∞\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::MediumDark)); // üë®üèæ‚Äçü¶∞ (`U+1F468 U+1F3FE U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ‚Äçü¶∞\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::Dark)); // üë®üèø‚Äçü¶∞ (`U+1F468 U+1F3FF U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë®üèø‚Äçü¶∞\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).gender(Gender::Female)); // üë©‚Äçü¶∞ (`U+1F469 U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).gender(Gender::Female).to_string().as_str(), \"üë©‚Äçü¶∞\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::Light)); // üë©üèª‚Äçü¶∞ (`U+1F469 U+1F3FB U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äçü¶∞\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::MediumLight)); // üë©üèº‚Äçü¶∞ (`U+1F469 U+1F3FC U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äçü¶∞\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::Medium)); // üë©üèΩ‚Äçü¶∞ (`U+1F469 U+1F3FD U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äçü¶∞\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::MediumDark)); // üë©üèæ‚Äçü¶∞ (`U+1F469 U+1F3FE U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äçü¶∞\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::Dark)); // üë©üèø‚Äçü¶∞ (`U+1F469 U+1F3FF U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äçü¶∞\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly)); // üßë‚Äçü¶± (`U+1F9D1 U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).to_string().as_str(), \"üßë‚Äçü¶±\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).tone(Tone::Light)); // üßëüèª‚Äçü¶± (`U+1F9D1 U+1F3FB U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).tone(Tone::Light).to_string().as_str(), \"üßëüèª‚Äçü¶±\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).tone(Tone::MediumLight)); // üßëüèº‚Äçü¶± (`U+1F9D1 U+1F3FC U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº‚Äçü¶±\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).tone(Tone::Medium)); // üßëüèΩ‚Äçü¶± (`U+1F9D1 U+1F3FD U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ‚Äçü¶±\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).tone(Tone::MediumDark)); // üßëüèæ‚Äçü¶± (`U+1F9D1 U+1F3FE U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ‚Äçü¶±\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).tone(Tone::Dark)); // üßëüèø‚Äçü¶± (`U+1F9D1 U+1F3FF U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).tone(Tone::Dark).to_string().as_str(), \"üßëüèø‚Äçü¶±\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).gender(Gender::Male)); // üë®‚Äçü¶± (`U+1F468 U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).gender(Gender::Male).to_string().as_str(), \"üë®‚Äçü¶±\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::Light)); // üë®üèª‚Äçü¶± (`U+1F468 U+1F3FB U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë®üèª‚Äçü¶±\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::MediumLight)); // üë®üèº‚Äçü¶± (`U+1F468 U+1F3FC U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº‚Äçü¶±\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::Medium)); // üë®üèΩ‚Äçü¶± (`U+1F468 U+1F3FD U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ‚Äçü¶±\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::MediumDark)); // üë®üèæ‚Äçü¶± (`U+1F468 U+1F3FE U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ‚Äçü¶±\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::Dark)); // üë®üèø‚Äçü¶± (`U+1F468 U+1F3FF U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë®üèø‚Äçü¶±\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).gender(Gender::Female)); // üë©‚Äçü¶± (`U+1F469 U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).gender(Gender::Female).to_string().as_str(), \"üë©‚Äçü¶±\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::Light)); // üë©üèª‚Äçü¶± (`U+1F469 U+1F3FB U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äçü¶±\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::MediumLight)); // üë©üèº‚Äçü¶± (`U+1F469 U+1F3FC U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äçü¶±\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::Medium)); // üë©üèΩ‚Äçü¶± (`U+1F469 U+1F3FD U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äçü¶±\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::MediumDark)); // üë©üèæ‚Äçü¶± (`U+1F469 U+1F3FE U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äçü¶±\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::Dark)); // üë©üèø‚Äçü¶± (`U+1F469 U+1F3FF U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äçü¶±\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White)); // üßë‚Äçü¶≥ (`U+1F9D1 U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).to_string().as_str(), \"üßë‚Äçü¶≥\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).tone(Tone::Light)); // üßëüèª‚Äçü¶≥ (`U+1F9D1 U+1F3FB U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).tone(Tone::Light).to_string().as_str(), \"üßëüèª‚Äçü¶≥\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).tone(Tone::MediumLight)); // üßëüèº‚Äçü¶≥ (`U+1F9D1 U+1F3FC U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº‚Äçü¶≥\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).tone(Tone::Medium)); // üßëüèΩ‚Äçü¶≥ (`U+1F9D1 U+1F3FD U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ‚Äçü¶≥\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).tone(Tone::MediumDark)); // üßëüèæ‚Äçü¶≥ (`U+1F9D1 U+1F3FE U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ‚Äçü¶≥\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).tone(Tone::Dark)); // üßëüèø‚Äçü¶≥ (`U+1F9D1 U+1F3FF U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).tone(Tone::Dark).to_string().as_str(), \"üßëüèø‚Äçü¶≥\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).gender(Gender::Male)); // üë®‚Äçü¶≥ (`U+1F468 U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).gender(Gender::Male).to_string().as_str(), \"üë®‚Äçü¶≥\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::Light)); // üë®üèª‚Äçü¶≥ (`U+1F468 U+1F3FB U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë®üèª‚Äçü¶≥\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::MediumLight)); // üë®üèº‚Äçü¶≥ (`U+1F468 U+1F3FC U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº‚Äçü¶≥\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::Medium)); // üë®üèΩ‚Äçü¶≥ (`U+1F468 U+1F3FD U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ‚Äçü¶≥\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::MediumDark)); // üë®üèæ‚Äçü¶≥ (`U+1F468 U+1F3FE U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ‚Äçü¶≥\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::Dark)); // üë®üèø‚Äçü¶≥ (`U+1F468 U+1F3FF U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë®üèø‚Äçü¶≥\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).gender(Gender::Female)); // üë©‚Äçü¶≥ (`U+1F469 U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).gender(Gender::Female).to_string().as_str(), \"üë©‚Äçü¶≥\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::Light)); // üë©üèª‚Äçü¶≥ (`U+1F469 U+1F3FB U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äçü¶≥\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::MediumLight)); // üë©üèº‚Äçü¶≥ (`U+1F469 U+1F3FC U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äçü¶≥\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::Medium)); // üë©üèΩ‚Äçü¶≥ (`U+1F469 U+1F3FD U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äçü¶≥\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::MediumDark)); // üë©üèæ‚Äçü¶≥ (`U+1F469 U+1F3FE U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äçü¶≥\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::Dark)); // üë©üèø‚Äçü¶≥ (`U+1F469 U+1F3FF U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äçü¶≥\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald)); // üßë‚Äçü¶≤ (`U+1F9D1 U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).to_string().as_str(), \"üßë‚Äçü¶≤\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).tone(Tone::Light)); // üßëüèª‚Äçü¶≤ (`U+1F9D1 U+1F3FB U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).tone(Tone::Light).to_string().as_str(), \"üßëüèª‚Äçü¶≤\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).tone(Tone::MediumLight)); // üßëüèº‚Äçü¶≤ (`U+1F9D1 U+1F3FC U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº‚Äçü¶≤\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).tone(Tone::Medium)); // üßëüèΩ‚Äçü¶≤ (`U+1F9D1 U+1F3FD U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ‚Äçü¶≤\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).tone(Tone::MediumDark)); // üßëüèæ‚Äçü¶≤ (`U+1F9D1 U+1F3FE U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ‚Äçü¶≤\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).tone(Tone::Dark)); // üßëüèø‚Äçü¶≤ (`U+1F9D1 U+1F3FF U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).tone(Tone::Dark).to_string().as_str(), \"üßëüèø‚Äçü¶≤\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).gender(Gender::Male)); // üë®‚Äçü¶≤ (`U+1F468 U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).gender(Gender::Male).to_string().as_str(), \"üë®‚Äçü¶≤\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::Light)); // üë®üèª‚Äçü¶≤ (`U+1F468 U+1F3FB U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë®üèª‚Äçü¶≤\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::MediumLight)); // üë®üèº‚Äçü¶≤ (`U+1F468 U+1F3FC U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº‚Äçü¶≤\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::Medium)); // üë®üèΩ‚Äçü¶≤ (`U+1F468 U+1F3FD U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ‚Äçü¶≤\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::MediumDark)); // üë®üèæ‚Äçü¶≤ (`U+1F468 U+1F3FE U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ‚Äçü¶≤\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::Dark)); // üë®üèø‚Äçü¶≤ (`U+1F468 U+1F3FF U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë®üèø‚Äçü¶≤\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).gender(Gender::Female)); // üë©‚Äçü¶≤ (`U+1F469 U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).gender(Gender::Female).to_string().as_str(), \"üë©‚Äçü¶≤\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::Light)); // üë©üèª‚Äçü¶≤ (`U+1F469 U+1F3FB U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äçü¶≤\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::MediumLight)); // üë©üèº‚Äçü¶≤ (`U+1F469 U+1F3FC U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äçü¶≤\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::Medium)); // üë©üèΩ‚Äçü¶≤ (`U+1F469 U+1F3FD U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äçü¶≤\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::MediumDark)); // üë©üèæ‚Äçü¶≤ (`U+1F469 U+1F3FE U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äçü¶≤\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::Dark)); // üë©üèø‚Äçü¶≤ (`U+1F469 U+1F3FF U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äçü¶≤\");"]
#[doc="```"]
pub static PERSON: With<Hair,With<Gender,With<Tone,Emoji>>> = With::new(With::new(With::new(Emoji::new("person", Version(5, 0),"üßë"), 
	&[
		Emoji::new("person: light skin tone", Version(5, 0),"üßëüèª"),
	Emoji::new("person: medium-light skin tone", Version(5, 0),"üßëüèº"),
	Emoji::new("person: medium skin tone", Version(5, 0),"üßëüèΩ"),
	Emoji::new("person: medium-dark skin tone", Version(5, 0),"üßëüèæ"),
	Emoji::new("person: dark skin tone", Version(5, 0),"üßëüèø"),
	]), 
	&[
		With::new(Emoji::new("man", Version(0, 6),"üë®"), 
	&[
		Emoji::new("man: light skin tone", Version(1, 0),"üë®üèª"),
	Emoji::new("man: medium-light skin tone", Version(1, 0),"üë®üèº"),
	Emoji::new("man: medium skin tone", Version(1, 0),"üë®üèΩ"),
	Emoji::new("man: medium-dark skin tone", Version(1, 0),"üë®üèæ"),
	Emoji::new("man: dark skin tone", Version(1, 0),"üë®üèø"),
	]),
	With::new(Emoji::new("woman", Version(0, 6),"üë©"), 
	&[
		Emoji::new("woman: light skin tone", Version(1, 0),"üë©üèª"),
	Emoji::new("woman: medium-light skin tone", Version(1, 0),"üë©üèº"),
	Emoji::new("woman: medium skin tone", Version(1, 0),"üë©üèΩ"),
	Emoji::new("woman: medium-dark skin tone", Version(1, 0),"üë©üèæ"),
	Emoji::new("woman: dark skin tone", Version(1, 0),"üë©üèø"),
	]),
	]), 
	&[
		With::new(With::new(Emoji::new("person: beard", Version(5, 0),"üßî"), 
	&[
		Emoji::new("person: light skin tone, beard", Version(5, 0),"üßîüèª"),
	Emoji::new("person: medium-light skin tone, beard", Version(5, 0),"üßîüèº"),
	Emoji::new("person: medium skin tone, beard", Version(5, 0),"üßîüèΩ"),
	Emoji::new("person: medium-dark skin tone, beard", Version(5, 0),"üßîüèæ"),
	Emoji::new("person: dark skin tone, beard", Version(5, 0),"üßîüèø"),
	]), 
	&[
		With::new(Emoji::new("man: beard", Version(13, 1),"üßî‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man: light skin tone, beard", Version(13, 1),"üßîüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man: medium-light skin tone, beard", Version(13, 1),"üßîüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man: medium skin tone, beard", Version(13, 1),"üßîüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man: medium-dark skin tone, beard", Version(13, 1),"üßîüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man: dark skin tone, beard", Version(13, 1),"üßîüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman: beard", Version(13, 1),"üßî‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman: light skin tone, beard", Version(13, 1),"üßîüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman: medium-light skin tone, beard", Version(13, 1),"üßîüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman: medium skin tone, beard", Version(13, 1),"üßîüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman: medium-dark skin tone, beard", Version(13, 1),"üßîüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman: dark skin tone, beard", Version(13, 1),"üßîüèø‚Äç‚ôÄÔ∏è"),
	]),
	]),
	With::new(With::new(Emoji::new("person: blond hair", Version(0, 6),"üë±"), 
	&[
		Emoji::new("person: light skin tone, blond hair", Version(1, 0),"üë±üèª"),
	Emoji::new("person: medium-light skin tone, blond hair", Version(1, 0),"üë±üèº"),
	Emoji::new("person: medium skin tone, blond hair", Version(1, 0),"üë±üèΩ"),
	Emoji::new("person: medium-dark skin tone, blond hair", Version(1, 0),"üë±üèæ"),
	Emoji::new("person: dark skin tone, blond hair", Version(1, 0),"üë±üèø"),
	]), 
	&[
		With::new(Emoji::new("man: blond hair", Version(4, 0),"üë±‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man: light skin tone, blond hair", Version(4, 0),"üë±üèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man: medium-light skin tone, blond hair", Version(4, 0),"üë±üèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man: medium skin tone, blond hair", Version(4, 0),"üë±üèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man: medium-dark skin tone, blond hair", Version(4, 0),"üë±üèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man: dark skin tone, blond hair", Version(4, 0),"üë±üèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman: blond hair", Version(4, 0),"üë±‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman: light skin tone, blond hair", Version(4, 0),"üë±üèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman: medium-light skin tone, blond hair", Version(4, 0),"üë±üèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman: medium skin tone, blond hair", Version(4, 0),"üë±üèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman: medium-dark skin tone, blond hair", Version(4, 0),"üë±üèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman: dark skin tone, blond hair", Version(4, 0),"üë±üèø‚Äç‚ôÄÔ∏è"),
	]),
	]),
	With::new(With::new(Emoji::new("person: red hair", Version(12, 1),"üßë‚Äçü¶∞"), 
	&[
		Emoji::new("person: light skin tone, red hair", Version(12, 1),"üßëüèª‚Äçü¶∞"),
	Emoji::new("person: medium-light skin tone, red hair", Version(12, 1),"üßëüèº‚Äçü¶∞"),
	Emoji::new("person: medium skin tone, red hair", Version(12, 1),"üßëüèΩ‚Äçü¶∞"),
	Emoji::new("person: medium-dark skin tone, red hair", Version(12, 1),"üßëüèæ‚Äçü¶∞"),
	Emoji::new("person: dark skin tone, red hair", Version(12, 1),"üßëüèø‚Äçü¶∞"),
	]), 
	&[
		With::new(Emoji::new("man: red hair", Version(11, 0),"üë®‚Äçü¶∞"), 
	&[
		Emoji::new("man: light skin tone, red hair", Version(11, 0),"üë®üèª‚Äçü¶∞"),
	Emoji::new("man: medium-light skin tone, red hair", Version(11, 0),"üë®üèº‚Äçü¶∞"),
	Emoji::new("man: medium skin tone, red hair", Version(11, 0),"üë®üèΩ‚Äçü¶∞"),
	Emoji::new("man: medium-dark skin tone, red hair", Version(11, 0),"üë®üèæ‚Äçü¶∞"),
	Emoji::new("man: dark skin tone, red hair", Version(11, 0),"üë®üèø‚Äçü¶∞"),
	]),
	With::new(Emoji::new("woman: red hair", Version(11, 0),"üë©‚Äçü¶∞"), 
	&[
		Emoji::new("woman: light skin tone, red hair", Version(11, 0),"üë©üèª‚Äçü¶∞"),
	Emoji::new("woman: medium-light skin tone, red hair", Version(11, 0),"üë©üèº‚Äçü¶∞"),
	Emoji::new("woman: medium skin tone, red hair", Version(11, 0),"üë©üèΩ‚Äçü¶∞"),
	Emoji::new("woman: medium-dark skin tone, red hair", Version(11, 0),"üë©üèæ‚Äçü¶∞"),
	Emoji::new("woman: dark skin tone, red hair", Version(11, 0),"üë©üèø‚Äçü¶∞"),
	]),
	]),
	With::new(With::new(Emoji::new("person: curly hair", Version(12, 1),"üßë‚Äçü¶±"), 
	&[
		Emoji::new("person: light skin tone, curly hair", Version(12, 1),"üßëüèª‚Äçü¶±"),
	Emoji::new("person: medium-light skin tone, curly hair", Version(12, 1),"üßëüèº‚Äçü¶±"),
	Emoji::new("person: medium skin tone, curly hair", Version(12, 1),"üßëüèΩ‚Äçü¶±"),
	Emoji::new("person: medium-dark skin tone, curly hair", Version(12, 1),"üßëüèæ‚Äçü¶±"),
	Emoji::new("person: dark skin tone, curly hair", Version(12, 1),"üßëüèø‚Äçü¶±"),
	]), 
	&[
		With::new(Emoji::new("man: curly hair", Version(11, 0),"üë®‚Äçü¶±"), 
	&[
		Emoji::new("man: light skin tone, curly hair", Version(11, 0),"üë®üèª‚Äçü¶±"),
	Emoji::new("man: medium-light skin tone, curly hair", Version(11, 0),"üë®üèº‚Äçü¶±"),
	Emoji::new("man: medium skin tone, curly hair", Version(11, 0),"üë®üèΩ‚Äçü¶±"),
	Emoji::new("man: medium-dark skin tone, curly hair", Version(11, 0),"üë®üèæ‚Äçü¶±"),
	Emoji::new("man: dark skin tone, curly hair", Version(11, 0),"üë®üèø‚Äçü¶±"),
	]),
	With::new(Emoji::new("woman: curly hair", Version(11, 0),"üë©‚Äçü¶±"), 
	&[
		Emoji::new("woman: light skin tone, curly hair", Version(11, 0),"üë©üèª‚Äçü¶±"),
	Emoji::new("woman: medium-light skin tone, curly hair", Version(11, 0),"üë©üèº‚Äçü¶±"),
	Emoji::new("woman: medium skin tone, curly hair", Version(11, 0),"üë©üèΩ‚Äçü¶±"),
	Emoji::new("woman: medium-dark skin tone, curly hair", Version(11, 0),"üë©üèæ‚Äçü¶±"),
	Emoji::new("woman: dark skin tone, curly hair", Version(11, 0),"üë©üèø‚Äçü¶±"),
	]),
	]),
	With::new(With::new(Emoji::new("person: white hair", Version(12, 1),"üßë‚Äçü¶≥"), 
	&[
		Emoji::new("person: light skin tone, white hair", Version(12, 1),"üßëüèª‚Äçü¶≥"),
	Emoji::new("person: medium-light skin tone, white hair", Version(12, 1),"üßëüèº‚Äçü¶≥"),
	Emoji::new("person: medium skin tone, white hair", Version(12, 1),"üßëüèΩ‚Äçü¶≥"),
	Emoji::new("person: medium-dark skin tone, white hair", Version(12, 1),"üßëüèæ‚Äçü¶≥"),
	Emoji::new("person: dark skin tone, white hair", Version(12, 1),"üßëüèø‚Äçü¶≥"),
	]), 
	&[
		With::new(Emoji::new("man: white hair", Version(11, 0),"üë®‚Äçü¶≥"), 
	&[
		Emoji::new("man: light skin tone, white hair", Version(11, 0),"üë®üèª‚Äçü¶≥"),
	Emoji::new("man: medium-light skin tone, white hair", Version(11, 0),"üë®üèº‚Äçü¶≥"),
	Emoji::new("man: medium skin tone, white hair", Version(11, 0),"üë®üèΩ‚Äçü¶≥"),
	Emoji::new("man: medium-dark skin tone, white hair", Version(11, 0),"üë®üèæ‚Äçü¶≥"),
	Emoji::new("man: dark skin tone, white hair", Version(11, 0),"üë®üèø‚Äçü¶≥"),
	]),
	With::new(Emoji::new("woman: white hair", Version(11, 0),"üë©‚Äçü¶≥"), 
	&[
		Emoji::new("woman: light skin tone, white hair", Version(11, 0),"üë©üèª‚Äçü¶≥"),
	Emoji::new("woman: medium-light skin tone, white hair", Version(11, 0),"üë©üèº‚Äçü¶≥"),
	Emoji::new("woman: medium skin tone, white hair", Version(11, 0),"üë©üèΩ‚Äçü¶≥"),
	Emoji::new("woman: medium-dark skin tone, white hair", Version(11, 0),"üë©üèæ‚Äçü¶≥"),
	Emoji::new("woman: dark skin tone, white hair", Version(11, 0),"üë©üèø‚Äçü¶≥"),
	]),
	]),
	With::new(With::new(Emoji::new("person: bald", Version(12, 1),"üßë‚Äçü¶≤"), 
	&[
		Emoji::new("person: light skin tone, bald", Version(12, 1),"üßëüèª‚Äçü¶≤"),
	Emoji::new("person: medium-light skin tone, bald", Version(12, 1),"üßëüèº‚Äçü¶≤"),
	Emoji::new("person: medium skin tone, bald", Version(12, 1),"üßëüèΩ‚Äçü¶≤"),
	Emoji::new("person: medium-dark skin tone, bald", Version(12, 1),"üßëüèæ‚Äçü¶≤"),
	Emoji::new("person: dark skin tone, bald", Version(12, 1),"üßëüèø‚Äçü¶≤"),
	]), 
	&[
		With::new(Emoji::new("man: bald", Version(11, 0),"üë®‚Äçü¶≤"), 
	&[
		Emoji::new("man: light skin tone, bald", Version(11, 0),"üë®üèª‚Äçü¶≤"),
	Emoji::new("man: medium-light skin tone, bald", Version(11, 0),"üë®üèº‚Äçü¶≤"),
	Emoji::new("man: medium skin tone, bald", Version(11, 0),"üë®üèΩ‚Äçü¶≤"),
	Emoji::new("man: medium-dark skin tone, bald", Version(11, 0),"üë®üèæ‚Äçü¶≤"),
	Emoji::new("man: dark skin tone, bald", Version(11, 0),"üë®üèø‚Äçü¶≤"),
	]),
	With::new(Emoji::new("woman: bald", Version(11, 0),"üë©‚Äçü¶≤"), 
	&[
		Emoji::new("woman: light skin tone, bald", Version(11, 0),"üë©üèª‚Äçü¶≤"),
	Emoji::new("woman: medium-light skin tone, bald", Version(11, 0),"üë©üèº‚Äçü¶≤"),
	Emoji::new("woman: medium skin tone, bald", Version(11, 0),"üë©üèΩ‚Äçü¶≤"),
	Emoji::new("woman: medium-dark skin tone, bald", Version(11, 0),"üë©üèæ‚Äçü¶≤"),
	Emoji::new("woman: dark skin tone, bald", Version(11, 0),"üë©üèø‚Äçü¶≤"),
	]),
	]),
	]);

		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BABY
				
				&BABY.default,
				
				&BABY.tone(Tone::Light),
				
				&BABY.tone(Tone::MediumLight),
				
				&BABY.tone(Tone::Medium),
				
				&BABY.tone(Tone::MediumDark),
				
				&BABY.tone(Tone::Dark),
				
			],
			
			&[ // BOY
				
				&BOY.default,
				
				&BOY.tone(Tone::Light),
				
				&BOY.tone(Tone::MediumLight),
				
				&BOY.tone(Tone::Medium),
				
				&BOY.tone(Tone::MediumDark),
				
				&BOY.tone(Tone::Dark),
				
			],
			
			&[ // CHILD
				
				&CHILD.default,
				
				&CHILD.tone(Tone::Light),
				
				&CHILD.tone(Tone::MediumLight),
				
				&CHILD.tone(Tone::Medium),
				
				&CHILD.tone(Tone::MediumDark),
				
				&CHILD.tone(Tone::Dark),
				
			],
			
			&[ // GIRL
				
				&GIRL.default,
				
				&GIRL.tone(Tone::Light),
				
				&GIRL.tone(Tone::MediumLight),
				
				&GIRL.tone(Tone::Medium),
				
				&GIRL.tone(Tone::MediumDark),
				
				&GIRL.tone(Tone::Dark),
				
			],
			
			&[ // OLDER_PERSON
				
				&OLDER_PERSON.default,
				
				&OLDER_PERSON.tone(Tone::Light),
				
				&OLDER_PERSON.tone(Tone::MediumLight),
				
				&OLDER_PERSON.tone(Tone::Medium),
				
				&OLDER_PERSON.tone(Tone::MediumDark),
				
				&OLDER_PERSON.tone(Tone::Dark),
				
			],
			
			&[ // OLD_PERSON
				
				&OLD_PERSON.gender(Gender::Male).default,
				
				&OLD_PERSON.gender(Gender::Male).tone(Tone::Light),
				
				&OLD_PERSON.gender(Gender::Male).tone(Tone::MediumLight),
				
				&OLD_PERSON.gender(Gender::Male).tone(Tone::Medium),
				
				&OLD_PERSON.gender(Gender::Male).tone(Tone::MediumDark),
				
				&OLD_PERSON.gender(Gender::Male).tone(Tone::Dark),
				
				&OLD_PERSON.gender(Gender::Female).default,
				
				&OLD_PERSON.gender(Gender::Female).tone(Tone::Light),
				
				&OLD_PERSON.gender(Gender::Female).tone(Tone::MediumLight),
				
				&OLD_PERSON.gender(Gender::Female).tone(Tone::Medium),
				
				&OLD_PERSON.gender(Gender::Female).tone(Tone::MediumDark),
				
				&OLD_PERSON.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON
				
				&PERSON.default.default.default,
				
				&PERSON.default.default.tone(Tone::Light),
				
				&PERSON.default.default.tone(Tone::MediumLight),
				
				&PERSON.default.default.tone(Tone::Medium),
				
				&PERSON.default.default.tone(Tone::MediumDark),
				
				&PERSON.default.default.tone(Tone::Dark),
				
				&PERSON.default.gender(Gender::Male).default,
				
				&PERSON.default.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON.default.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON.default.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON.default.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON.default.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON.default.gender(Gender::Female).default,
				
				&PERSON.default.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON.default.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON.default.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON.default.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON.default.gender(Gender::Female).tone(Tone::Dark),
				
				&PERSON.hair(Hair::Beard).default.default,
				
				&PERSON.hair(Hair::Beard).default.tone(Tone::Light),
				
				&PERSON.hair(Hair::Beard).default.tone(Tone::MediumLight),
				
				&PERSON.hair(Hair::Beard).default.tone(Tone::Medium),
				
				&PERSON.hair(Hair::Beard).default.tone(Tone::MediumDark),
				
				&PERSON.hair(Hair::Beard).default.tone(Tone::Dark),
				
				&PERSON.hair(Hair::Beard).gender(Gender::Male).default,
				
				&PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::Light),
				
				&PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON.hair(Hair::Beard).gender(Gender::Female).default,
				
				&PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::Light),
				
				&PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::Dark),
				
				&PERSON.hair(Hair::Blond).default.default,
				
				&PERSON.hair(Hair::Blond).default.tone(Tone::Light),
				
				&PERSON.hair(Hair::Blond).default.tone(Tone::MediumLight),
				
				&PERSON.hair(Hair::Blond).default.tone(Tone::Medium),
				
				&PERSON.hair(Hair::Blond).default.tone(Tone::MediumDark),
				
				&PERSON.hair(Hair::Blond).default.tone(Tone::Dark),
				
				&PERSON.hair(Hair::Blond).gender(Gender::Male).default,
				
				&PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::Light),
				
				&PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON.hair(Hair::Blond).gender(Gender::Female).default,
				
				&PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::Light),
				
				&PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::Dark),
				
				&PERSON.hair(Hair::Red).default.default,
				
				&PERSON.hair(Hair::Red).default.tone(Tone::Light),
				
				&PERSON.hair(Hair::Red).default.tone(Tone::MediumLight),
				
				&PERSON.hair(Hair::Red).default.tone(Tone::Medium),
				
				&PERSON.hair(Hair::Red).default.tone(Tone::MediumDark),
				
				&PERSON.hair(Hair::Red).default.tone(Tone::Dark),
				
				&PERSON.hair(Hair::Red).gender(Gender::Male).default,
				
				&PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::Light),
				
				&PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON.hair(Hair::Red).gender(Gender::Female).default,
				
				&PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::Light),
				
				&PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::Dark),
				
				&PERSON.hair(Hair::Curly).default.default,
				
				&PERSON.hair(Hair::Curly).default.tone(Tone::Light),
				
				&PERSON.hair(Hair::Curly).default.tone(Tone::MediumLight),
				
				&PERSON.hair(Hair::Curly).default.tone(Tone::Medium),
				
				&PERSON.hair(Hair::Curly).default.tone(Tone::MediumDark),
				
				&PERSON.hair(Hair::Curly).default.tone(Tone::Dark),
				
				&PERSON.hair(Hair::Curly).gender(Gender::Male).default,
				
				&PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::Light),
				
				&PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON.hair(Hair::Curly).gender(Gender::Female).default,
				
				&PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::Light),
				
				&PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::Dark),
				
				&PERSON.hair(Hair::White).default.default,
				
				&PERSON.hair(Hair::White).default.tone(Tone::Light),
				
				&PERSON.hair(Hair::White).default.tone(Tone::MediumLight),
				
				&PERSON.hair(Hair::White).default.tone(Tone::Medium),
				
				&PERSON.hair(Hair::White).default.tone(Tone::MediumDark),
				
				&PERSON.hair(Hair::White).default.tone(Tone::Dark),
				
				&PERSON.hair(Hair::White).gender(Gender::Male).default,
				
				&PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::Light),
				
				&PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON.hair(Hair::White).gender(Gender::Female).default,
				
				&PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::Light),
				
				&PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::Dark),
				
				&PERSON.hair(Hair::Bald).default.default,
				
				&PERSON.hair(Hair::Bald).default.tone(Tone::Light),
				
				&PERSON.hair(Hair::Bald).default.tone(Tone::MediumLight),
				
				&PERSON.hair(Hair::Bald).default.tone(Tone::Medium),
				
				&PERSON.hair(Hair::Bald).default.tone(Tone::MediumDark),
				
				&PERSON.hair(Hair::Bald).default.tone(Tone::Dark),
				
				&PERSON.hair(Hair::Bald).gender(Gender::Male).default,
				
				&PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::Light),
				
				&PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON.hair(Hair::Bald).gender(Gender::Female).default,
				
				&PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::Light),
				
				&PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::Dark),
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BABY.default, // BABY
				
			
				
				&BOY.default, // BOY
				
			
				
				&CHILD.default, // CHILD
				
			
				
				&GIRL.default, // GIRL
				
			
				
				&OLDER_PERSON.default, // OLDER_PERSON
				
			
				
				&OLD_PERSON.gender(Gender::Female).default, // OLD_PERSON
				
				&OLD_PERSON.gender(Gender::Male).default, // OLD_PERSON
				
			
				
				&PERSON.default.default.default, // PERSON
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // person
	
	/// person_activity üßóüíáüíÜ
	pub mod person_activity {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="person climbing üßó"]#[doc=""]#[doc="Since E5.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_CLIMBING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_CLIMBING); // üßó (`U+1F9D7`)"] #[doc="# assert_eq!(PERSON_CLIMBING.to_string().as_str(), \"üßó\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.tone(Tone::Light)); // üßóüèª (`U+1F9D7 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_CLIMBING.tone(Tone::Light).to_string().as_str(), \"üßóüèª\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.tone(Tone::MediumLight)); // üßóüèº (`U+1F9D7 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_CLIMBING.tone(Tone::MediumLight).to_string().as_str(), \"üßóüèº\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.tone(Tone::Medium)); // üßóüèΩ (`U+1F9D7 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_CLIMBING.tone(Tone::Medium).to_string().as_str(), \"üßóüèΩ\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.tone(Tone::MediumDark)); // üßóüèæ (`U+1F9D7 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_CLIMBING.tone(Tone::MediumDark).to_string().as_str(), \"üßóüèæ\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.tone(Tone::Dark)); // üßóüèø (`U+1F9D7 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_CLIMBING.tone(Tone::Dark).to_string().as_str(), \"üßóüèø\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.gender(Gender::Male)); // üßó‚Äç‚ôÇÔ∏è (`U+1F9D7 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CLIMBING.gender(Gender::Male).to_string().as_str(), \"üßó‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.gender(Gender::Male).tone(Tone::Light)); // üßóüèª‚Äç‚ôÇÔ∏è (`U+1F9D7 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CLIMBING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üßóüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.gender(Gender::Male).tone(Tone::MediumLight)); // üßóüèº‚Äç‚ôÇÔ∏è (`U+1F9D7 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CLIMBING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üßóüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.gender(Gender::Male).tone(Tone::Medium)); // üßóüèΩ‚Äç‚ôÇÔ∏è (`U+1F9D7 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CLIMBING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üßóüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.gender(Gender::Male).tone(Tone::MediumDark)); // üßóüèæ‚Äç‚ôÇÔ∏è (`U+1F9D7 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CLIMBING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üßóüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.gender(Gender::Male).tone(Tone::Dark)); // üßóüèø‚Äç‚ôÇÔ∏è (`U+1F9D7 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CLIMBING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üßóüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.gender(Gender::Female)); // üßó‚Äç‚ôÄÔ∏è (`U+1F9D7 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CLIMBING.gender(Gender::Female).to_string().as_str(), \"üßó‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.gender(Gender::Female).tone(Tone::Light)); // üßóüèª‚Äç‚ôÄÔ∏è (`U+1F9D7 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CLIMBING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üßóüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.gender(Gender::Female).tone(Tone::MediumLight)); // üßóüèº‚Äç‚ôÄÔ∏è (`U+1F9D7 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CLIMBING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üßóüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.gender(Gender::Female).tone(Tone::Medium)); // üßóüèΩ‚Äç‚ôÄÔ∏è (`U+1F9D7 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CLIMBING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üßóüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.gender(Gender::Female).tone(Tone::MediumDark)); // üßóüèæ‚Äç‚ôÄÔ∏è (`U+1F9D7 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CLIMBING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üßóüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.gender(Gender::Female).tone(Tone::Dark)); // üßóüèø‚Äç‚ôÄÔ∏è (`U+1F9D7 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CLIMBING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üßóüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_CLIMBING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person climbing", Version(5, 0),"üßó"), 
	&[
		Emoji::new("person climbing: light skin tone", Version(5, 0),"üßóüèª"),
	Emoji::new("person climbing: medium-light skin tone", Version(5, 0),"üßóüèº"),
	Emoji::new("person climbing: medium skin tone", Version(5, 0),"üßóüèΩ"),
	Emoji::new("person climbing: medium-dark skin tone", Version(5, 0),"üßóüèæ"),
	Emoji::new("person climbing: dark skin tone", Version(5, 0),"üßóüèø"),
	]), 
	&[
		With::new(Emoji::new("man climbing", Version(5, 0),"üßó‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man climbing: light skin tone", Version(5, 0),"üßóüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man climbing: medium-light skin tone", Version(5, 0),"üßóüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man climbing: medium skin tone", Version(5, 0),"üßóüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man climbing: medium-dark skin tone", Version(5, 0),"üßóüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man climbing: dark skin tone", Version(5, 0),"üßóüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman climbing", Version(5, 0),"üßó‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman climbing: light skin tone", Version(5, 0),"üßóüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman climbing: medium-light skin tone", Version(5, 0),"üßóüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman climbing: medium skin tone", Version(5, 0),"üßóüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman climbing: medium-dark skin tone", Version(5, 0),"üßóüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman climbing: dark skin tone", Version(5, 0),"üßóüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person dancing üíÉüï∫"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_DANCING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_DANCING.gender(Gender::Male)); // üï∫ (`U+1F57A`)"] #[doc="# assert_eq!(PERSON_DANCING.gender(Gender::Male).to_string().as_str(), \"üï∫\");"]#[doc="println!(\"{}\", PERSON_DANCING.gender(Gender::Male).tone(Tone::Light)); // üï∫üèª (`U+1F57A U+1F3FB`)"] #[doc="# assert_eq!(PERSON_DANCING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üï∫üèª\");"]#[doc="println!(\"{}\", PERSON_DANCING.gender(Gender::Male).tone(Tone::MediumLight)); // üï∫üèº (`U+1F57A U+1F3FC`)"] #[doc="# assert_eq!(PERSON_DANCING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üï∫üèº\");"]#[doc="println!(\"{}\", PERSON_DANCING.gender(Gender::Male).tone(Tone::Medium)); // üï∫üèΩ (`U+1F57A U+1F3FD`)"] #[doc="# assert_eq!(PERSON_DANCING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üï∫üèΩ\");"]#[doc="println!(\"{}\", PERSON_DANCING.gender(Gender::Male).tone(Tone::MediumDark)); // üï∫üèæ (`U+1F57A U+1F3FE`)"] #[doc="# assert_eq!(PERSON_DANCING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üï∫üèæ\");"]#[doc="println!(\"{}\", PERSON_DANCING.gender(Gender::Male).tone(Tone::Dark)); // üï∫üèø (`U+1F57A U+1F3FF`)"] #[doc="# assert_eq!(PERSON_DANCING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üï∫üèø\");"]#[doc="println!(\"{}\", PERSON_DANCING.gender(Gender::Female)); // üíÉ (`U+1F483`)"] #[doc="# assert_eq!(PERSON_DANCING.gender(Gender::Female).to_string().as_str(), \"üíÉ\");"]#[doc="println!(\"{}\", PERSON_DANCING.gender(Gender::Female).tone(Tone::Light)); // üíÉüèª (`U+1F483 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_DANCING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üíÉüèª\");"]#[doc="println!(\"{}\", PERSON_DANCING.gender(Gender::Female).tone(Tone::MediumLight)); // üíÉüèº (`U+1F483 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_DANCING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üíÉüèº\");"]#[doc="println!(\"{}\", PERSON_DANCING.gender(Gender::Female).tone(Tone::Medium)); // üíÉüèΩ (`U+1F483 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_DANCING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üíÉüèΩ\");"]#[doc="println!(\"{}\", PERSON_DANCING.gender(Gender::Female).tone(Tone::MediumDark)); // üíÉüèæ (`U+1F483 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_DANCING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üíÉüèæ\");"]#[doc="println!(\"{}\", PERSON_DANCING.gender(Gender::Female).tone(Tone::Dark)); // üíÉüèø (`U+1F483 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_DANCING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üíÉüèø\");"]
#[doc="```"]
pub static PERSON_DANCING: WithNoDef<Gender,With<Tone,Emoji>> = WithNoDef::new(
	&[
		With::new(Emoji::new("man dancing", Version(3, 0),"üï∫"), 
	&[
		Emoji::new("man dancing: light skin tone", Version(3, 0),"üï∫üèª"),
	Emoji::new("man dancing: medium-light skin tone", Version(3, 0),"üï∫üèº"),
	Emoji::new("man dancing: medium skin tone", Version(3, 0),"üï∫üèΩ"),
	Emoji::new("man dancing: medium-dark skin tone", Version(3, 0),"üï∫üèæ"),
	Emoji::new("man dancing: dark skin tone", Version(3, 0),"üï∫üèø"),
	]),
	With::new(Emoji::new("woman dancing", Version(0, 6),"üíÉ"), 
	&[
		Emoji::new("woman dancing: light skin tone", Version(1, 0),"üíÉüèª"),
	Emoji::new("woman dancing: medium-light skin tone", Version(1, 0),"üíÉüèº"),
	Emoji::new("woman dancing: medium skin tone", Version(1, 0),"üíÉüèΩ"),
	Emoji::new("woman dancing: medium-dark skin tone", Version(1, 0),"üíÉüèæ"),
	Emoji::new("woman dancing: dark skin tone", Version(1, 0),"üíÉüèø"),
	]),
	]);

		
		#[doc="person getting haircut üíá"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_GETTING_HAIRCUT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT); // üíá (`U+1F487`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.to_string().as_str(), \"üíá\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.tone(Tone::Light)); // üíáüèª (`U+1F487 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.tone(Tone::Light).to_string().as_str(), \"üíáüèª\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.tone(Tone::MediumLight)); // üíáüèº (`U+1F487 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.tone(Tone::MediumLight).to_string().as_str(), \"üíáüèº\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.tone(Tone::Medium)); // üíáüèΩ (`U+1F487 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.tone(Tone::Medium).to_string().as_str(), \"üíáüèΩ\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.tone(Tone::MediumDark)); // üíáüèæ (`U+1F487 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.tone(Tone::MediumDark).to_string().as_str(), \"üíáüèæ\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.tone(Tone::Dark)); // üíáüèø (`U+1F487 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.tone(Tone::Dark).to_string().as_str(), \"üíáüèø\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.gender(Gender::Male)); // üíá‚Äç‚ôÇÔ∏è (`U+1F487 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.gender(Gender::Male).to_string().as_str(), \"üíá‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::Light)); // üíáüèª‚Äç‚ôÇÔ∏è (`U+1F487 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üíáüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::MediumLight)); // üíáüèº‚Äç‚ôÇÔ∏è (`U+1F487 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üíáüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::Medium)); // üíáüèΩ‚Äç‚ôÇÔ∏è (`U+1F487 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üíáüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::MediumDark)); // üíáüèæ‚Äç‚ôÇÔ∏è (`U+1F487 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üíáüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::Dark)); // üíáüèø‚Äç‚ôÇÔ∏è (`U+1F487 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üíáüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.gender(Gender::Female)); // üíá‚Äç‚ôÄÔ∏è (`U+1F487 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.gender(Gender::Female).to_string().as_str(), \"üíá‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::Light)); // üíáüèª‚Äç‚ôÄÔ∏è (`U+1F487 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üíáüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::MediumLight)); // üíáüèº‚Äç‚ôÄÔ∏è (`U+1F487 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üíáüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::Medium)); // üíáüèΩ‚Äç‚ôÄÔ∏è (`U+1F487 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üíáüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::MediumDark)); // üíáüèæ‚Äç‚ôÄÔ∏è (`U+1F487 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üíáüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::Dark)); // üíáüèø‚Äç‚ôÄÔ∏è (`U+1F487 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üíáüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_GETTING_HAIRCUT: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person getting haircut", Version(0, 6),"üíá"), 
	&[
		Emoji::new("person getting haircut: light skin tone", Version(1, 0),"üíáüèª"),
	Emoji::new("person getting haircut: medium-light skin tone", Version(1, 0),"üíáüèº"),
	Emoji::new("person getting haircut: medium skin tone", Version(1, 0),"üíáüèΩ"),
	Emoji::new("person getting haircut: medium-dark skin tone", Version(1, 0),"üíáüèæ"),
	Emoji::new("person getting haircut: dark skin tone", Version(1, 0),"üíáüèø"),
	]), 
	&[
		With::new(Emoji::new("man getting haircut", Version(4, 0),"üíá‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man getting haircut: light skin tone", Version(4, 0),"üíáüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man getting haircut: medium-light skin tone", Version(4, 0),"üíáüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man getting haircut: medium skin tone", Version(4, 0),"üíáüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man getting haircut: medium-dark skin tone", Version(4, 0),"üíáüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man getting haircut: dark skin tone", Version(4, 0),"üíáüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman getting haircut", Version(4, 0),"üíá‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman getting haircut: light skin tone", Version(4, 0),"üíáüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman getting haircut: medium-light skin tone", Version(4, 0),"üíáüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman getting haircut: medium skin tone", Version(4, 0),"üíáüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman getting haircut: medium-dark skin tone", Version(4, 0),"üíáüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman getting haircut: dark skin tone", Version(4, 0),"üíáüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person getting massage üíÜ"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_GETTING_MASSAGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE); // üíÜ (`U+1F486`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.to_string().as_str(), \"üíÜ\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.tone(Tone::Light)); // üíÜüèª (`U+1F486 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.tone(Tone::Light).to_string().as_str(), \"üíÜüèª\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.tone(Tone::MediumLight)); // üíÜüèº (`U+1F486 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.tone(Tone::MediumLight).to_string().as_str(), \"üíÜüèº\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.tone(Tone::Medium)); // üíÜüèΩ (`U+1F486 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.tone(Tone::Medium).to_string().as_str(), \"üíÜüèΩ\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.tone(Tone::MediumDark)); // üíÜüèæ (`U+1F486 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.tone(Tone::MediumDark).to_string().as_str(), \"üíÜüèæ\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.tone(Tone::Dark)); // üíÜüèø (`U+1F486 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.tone(Tone::Dark).to_string().as_str(), \"üíÜüèø\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.gender(Gender::Male)); // üíÜ‚Äç‚ôÇÔ∏è (`U+1F486 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.gender(Gender::Male).to_string().as_str(), \"üíÜ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::Light)); // üíÜüèª‚Äç‚ôÇÔ∏è (`U+1F486 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üíÜüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::MediumLight)); // üíÜüèº‚Äç‚ôÇÔ∏è (`U+1F486 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üíÜüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::Medium)); // üíÜüèΩ‚Äç‚ôÇÔ∏è (`U+1F486 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üíÜüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::MediumDark)); // üíÜüèæ‚Äç‚ôÇÔ∏è (`U+1F486 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üíÜüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::Dark)); // üíÜüèø‚Äç‚ôÇÔ∏è (`U+1F486 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üíÜüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.gender(Gender::Female)); // üíÜ‚Äç‚ôÄÔ∏è (`U+1F486 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.gender(Gender::Female).to_string().as_str(), \"üíÜ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::Light)); // üíÜüèª‚Äç‚ôÄÔ∏è (`U+1F486 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üíÜüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::MediumLight)); // üíÜüèº‚Äç‚ôÄÔ∏è (`U+1F486 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üíÜüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::Medium)); // üíÜüèΩ‚Äç‚ôÄÔ∏è (`U+1F486 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üíÜüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::MediumDark)); // üíÜüèæ‚Äç‚ôÄÔ∏è (`U+1F486 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üíÜüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::Dark)); // üíÜüèø‚Äç‚ôÄÔ∏è (`U+1F486 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üíÜüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_GETTING_MASSAGE: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person getting massage", Version(0, 6),"üíÜ"), 
	&[
		Emoji::new("person getting massage: light skin tone", Version(1, 0),"üíÜüèª"),
	Emoji::new("person getting massage: medium-light skin tone", Version(1, 0),"üíÜüèº"),
	Emoji::new("person getting massage: medium skin tone", Version(1, 0),"üíÜüèΩ"),
	Emoji::new("person getting massage: medium-dark skin tone", Version(1, 0),"üíÜüèæ"),
	Emoji::new("person getting massage: dark skin tone", Version(1, 0),"üíÜüèø"),
	]), 
	&[
		With::new(Emoji::new("man getting massage", Version(4, 0),"üíÜ‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man getting massage: light skin tone", Version(4, 0),"üíÜüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man getting massage: medium-light skin tone", Version(4, 0),"üíÜüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man getting massage: medium skin tone", Version(4, 0),"üíÜüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man getting massage: medium-dark skin tone", Version(4, 0),"üíÜüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man getting massage: dark skin tone", Version(4, 0),"üíÜüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman getting massage", Version(4, 0),"üíÜ‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman getting massage: light skin tone", Version(4, 0),"üíÜüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman getting massage: medium-light skin tone", Version(4, 0),"üíÜüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman getting massage: medium skin tone", Version(4, 0),"üíÜüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman getting massage: medium-dark skin tone", Version(4, 0),"üíÜüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman getting massage: dark skin tone", Version(4, 0),"üíÜüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person in manual wheelchair üßë‚Äçü¶Ω"]#[doc=""]#[doc="Since E12.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_IN_MANUAL_WHEELCHAIR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR); // üßë‚Äçü¶Ω (`U+1F9D1 U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.to_string().as_str(), \"üßë‚Äçü¶Ω\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.tone(Tone::Light)); // üßëüèª‚Äçü¶Ω (`U+1F9D1 U+1F3FB U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.tone(Tone::Light).to_string().as_str(), \"üßëüèª‚Äçü¶Ω\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.tone(Tone::MediumLight)); // üßëüèº‚Äçü¶Ω (`U+1F9D1 U+1F3FC U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº‚Äçü¶Ω\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.tone(Tone::Medium)); // üßëüèΩ‚Äçü¶Ω (`U+1F9D1 U+1F3FD U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ‚Äçü¶Ω\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.tone(Tone::MediumDark)); // üßëüèæ‚Äçü¶Ω (`U+1F9D1 U+1F3FE U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ‚Äçü¶Ω\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.tone(Tone::Dark)); // üßëüèø‚Äçü¶Ω (`U+1F9D1 U+1F3FF U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.tone(Tone::Dark).to_string().as_str(), \"üßëüèø‚Äçü¶Ω\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male)); // üë®‚Äçü¶Ω (`U+1F468 U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).to_string().as_str(), \"üë®‚Äçü¶Ω\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::Light)); // üë®üèª‚Äçü¶Ω (`U+1F468 U+1F3FB U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë®üèª‚Äçü¶Ω\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::MediumLight)); // üë®üèº‚Äçü¶Ω (`U+1F468 U+1F3FC U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº‚Äçü¶Ω\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::Medium)); // üë®üèΩ‚Äçü¶Ω (`U+1F468 U+1F3FD U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ‚Äçü¶Ω\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::MediumDark)); // üë®üèæ‚Äçü¶Ω (`U+1F468 U+1F3FE U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ‚Äçü¶Ω\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::Dark)); // üë®üèø‚Äçü¶Ω (`U+1F468 U+1F3FF U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë®üèø‚Äçü¶Ω\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female)); // üë©‚Äçü¶Ω (`U+1F469 U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).to_string().as_str(), \"üë©‚Äçü¶Ω\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::Light)); // üë©üèª‚Äçü¶Ω (`U+1F469 U+1F3FB U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äçü¶Ω\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::MediumLight)); // üë©üèº‚Äçü¶Ω (`U+1F469 U+1F3FC U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äçü¶Ω\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::Medium)); // üë©üèΩ‚Äçü¶Ω (`U+1F469 U+1F3FD U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äçü¶Ω\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::MediumDark)); // üë©üèæ‚Äçü¶Ω (`U+1F469 U+1F3FE U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äçü¶Ω\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::Dark)); // üë©üèø‚Äçü¶Ω (`U+1F469 U+1F3FF U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äçü¶Ω\");"]
#[doc="```"]
pub static PERSON_IN_MANUAL_WHEELCHAIR: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person in manual wheelchair", Version(12, 1),"üßë‚Äçü¶Ω"), 
	&[
		Emoji::new("person in manual wheelchair: light skin tone", Version(12, 1),"üßëüèª‚Äçü¶Ω"),
	Emoji::new("person in manual wheelchair: medium-light skin tone", Version(12, 1),"üßëüèº‚Äçü¶Ω"),
	Emoji::new("person in manual wheelchair: medium skin tone", Version(12, 1),"üßëüèΩ‚Äçü¶Ω"),
	Emoji::new("person in manual wheelchair: medium-dark skin tone", Version(12, 1),"üßëüèæ‚Äçü¶Ω"),
	Emoji::new("person in manual wheelchair: dark skin tone", Version(12, 1),"üßëüèø‚Äçü¶Ω"),
	]), 
	&[
		With::new(Emoji::new("man in manual wheelchair", Version(12, 0),"üë®‚Äçü¶Ω"), 
	&[
		Emoji::new("man in manual wheelchair: light skin tone", Version(12, 0),"üë®üèª‚Äçü¶Ω"),
	Emoji::new("man in manual wheelchair: medium-light skin tone", Version(12, 0),"üë®üèº‚Äçü¶Ω"),
	Emoji::new("man in manual wheelchair: medium skin tone", Version(12, 0),"üë®üèΩ‚Äçü¶Ω"),
	Emoji::new("man in manual wheelchair: medium-dark skin tone", Version(12, 0),"üë®üèæ‚Äçü¶Ω"),
	Emoji::new("man in manual wheelchair: dark skin tone", Version(12, 0),"üë®üèø‚Äçü¶Ω"),
	]),
	With::new(Emoji::new("woman in manual wheelchair", Version(12, 0),"üë©‚Äçü¶Ω"), 
	&[
		Emoji::new("woman in manual wheelchair: light skin tone", Version(12, 0),"üë©üèª‚Äçü¶Ω"),
	Emoji::new("woman in manual wheelchair: medium-light skin tone", Version(12, 0),"üë©üèº‚Äçü¶Ω"),
	Emoji::new("woman in manual wheelchair: medium skin tone", Version(12, 0),"üë©üèΩ‚Äçü¶Ω"),
	Emoji::new("woman in manual wheelchair: medium-dark skin tone", Version(12, 0),"üë©üèæ‚Äçü¶Ω"),
	Emoji::new("woman in manual wheelchair: dark skin tone", Version(12, 0),"üë©üèø‚Äçü¶Ω"),
	]),
	]);

		
		#[doc="person in motorized wheelchair üßë‚Äçü¶º"]#[doc=""]#[doc="Since E12.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_IN_MOTORIZED_WHEELCHAIR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR); // üßë‚Äçü¶º (`U+1F9D1 U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.to_string().as_str(), \"üßë‚Äçü¶º\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.tone(Tone::Light)); // üßëüèª‚Äçü¶º (`U+1F9D1 U+1F3FB U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.tone(Tone::Light).to_string().as_str(), \"üßëüèª‚Äçü¶º\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.tone(Tone::MediumLight)); // üßëüèº‚Äçü¶º (`U+1F9D1 U+1F3FC U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº‚Äçü¶º\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.tone(Tone::Medium)); // üßëüèΩ‚Äçü¶º (`U+1F9D1 U+1F3FD U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ‚Äçü¶º\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.tone(Tone::MediumDark)); // üßëüèæ‚Äçü¶º (`U+1F9D1 U+1F3FE U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ‚Äçü¶º\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.tone(Tone::Dark)); // üßëüèø‚Äçü¶º (`U+1F9D1 U+1F3FF U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.tone(Tone::Dark).to_string().as_str(), \"üßëüèø‚Äçü¶º\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male)); // üë®‚Äçü¶º (`U+1F468 U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).to_string().as_str(), \"üë®‚Äçü¶º\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::Light)); // üë®üèª‚Äçü¶º (`U+1F468 U+1F3FB U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë®üèª‚Äçü¶º\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::MediumLight)); // üë®üèº‚Äçü¶º (`U+1F468 U+1F3FC U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº‚Äçü¶º\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::Medium)); // üë®üèΩ‚Äçü¶º (`U+1F468 U+1F3FD U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ‚Äçü¶º\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::MediumDark)); // üë®üèæ‚Äçü¶º (`U+1F468 U+1F3FE U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ‚Äçü¶º\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::Dark)); // üë®üèø‚Äçü¶º (`U+1F468 U+1F3FF U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë®üèø‚Äçü¶º\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female)); // üë©‚Äçü¶º (`U+1F469 U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).to_string().as_str(), \"üë©‚Äçü¶º\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::Light)); // üë©üèª‚Äçü¶º (`U+1F469 U+1F3FB U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äçü¶º\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::MediumLight)); // üë©üèº‚Äçü¶º (`U+1F469 U+1F3FC U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äçü¶º\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::Medium)); // üë©üèΩ‚Äçü¶º (`U+1F469 U+1F3FD U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äçü¶º\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::MediumDark)); // üë©üèæ‚Äçü¶º (`U+1F469 U+1F3FE U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äçü¶º\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::Dark)); // üë©üèø‚Äçü¶º (`U+1F469 U+1F3FF U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äçü¶º\");"]
#[doc="```"]
pub static PERSON_IN_MOTORIZED_WHEELCHAIR: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person in motorized wheelchair", Version(12, 1),"üßë‚Äçü¶º"), 
	&[
		Emoji::new("person in motorized wheelchair: light skin tone", Version(12, 1),"üßëüèª‚Äçü¶º"),
	Emoji::new("person in motorized wheelchair: medium-light skin tone", Version(12, 1),"üßëüèº‚Äçü¶º"),
	Emoji::new("person in motorized wheelchair: medium skin tone", Version(12, 1),"üßëüèΩ‚Äçü¶º"),
	Emoji::new("person in motorized wheelchair: medium-dark skin tone", Version(12, 1),"üßëüèæ‚Äçü¶º"),
	Emoji::new("person in motorized wheelchair: dark skin tone", Version(12, 1),"üßëüèø‚Äçü¶º"),
	]), 
	&[
		With::new(Emoji::new("man in motorized wheelchair", Version(12, 0),"üë®‚Äçü¶º"), 
	&[
		Emoji::new("man in motorized wheelchair: light skin tone", Version(12, 0),"üë®üèª‚Äçü¶º"),
	Emoji::new("man in motorized wheelchair: medium-light skin tone", Version(12, 0),"üë®üèº‚Äçü¶º"),
	Emoji::new("man in motorized wheelchair: medium skin tone", Version(12, 0),"üë®üèΩ‚Äçü¶º"),
	Emoji::new("man in motorized wheelchair: medium-dark skin tone", Version(12, 0),"üë®üèæ‚Äçü¶º"),
	Emoji::new("man in motorized wheelchair: dark skin tone", Version(12, 0),"üë®üèø‚Äçü¶º"),
	]),
	With::new(Emoji::new("woman in motorized wheelchair", Version(12, 0),"üë©‚Äçü¶º"), 
	&[
		Emoji::new("woman in motorized wheelchair: light skin tone", Version(12, 0),"üë©üèª‚Äçü¶º"),
	Emoji::new("woman in motorized wheelchair: medium-light skin tone", Version(12, 0),"üë©üèº‚Äçü¶º"),
	Emoji::new("woman in motorized wheelchair: medium skin tone", Version(12, 0),"üë©üèΩ‚Äçü¶º"),
	Emoji::new("woman in motorized wheelchair: medium-dark skin tone", Version(12, 0),"üë©üèæ‚Äçü¶º"),
	Emoji::new("woman in motorized wheelchair: dark skin tone", Version(12, 0),"üë©üèø‚Äçü¶º"),
	]),
	]);

		
		#[doc="person in steamy room üßñ"]#[doc=""]#[doc="Since E5.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_IN_STEAMY_ROOM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM); // üßñ (`U+1F9D6`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.to_string().as_str(), \"üßñ\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.tone(Tone::Light)); // üßñüèª (`U+1F9D6 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.tone(Tone::Light).to_string().as_str(), \"üßñüèª\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.tone(Tone::MediumLight)); // üßñüèº (`U+1F9D6 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.tone(Tone::MediumLight).to_string().as_str(), \"üßñüèº\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.tone(Tone::Medium)); // üßñüèΩ (`U+1F9D6 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.tone(Tone::Medium).to_string().as_str(), \"üßñüèΩ\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.tone(Tone::MediumDark)); // üßñüèæ (`U+1F9D6 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.tone(Tone::MediumDark).to_string().as_str(), \"üßñüèæ\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.tone(Tone::Dark)); // üßñüèø (`U+1F9D6 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.tone(Tone::Dark).to_string().as_str(), \"üßñüèø\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.gender(Gender::Male)); // üßñ‚Äç‚ôÇÔ∏è (`U+1F9D6 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.gender(Gender::Male).to_string().as_str(), \"üßñ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::Light)); // üßñüèª‚Äç‚ôÇÔ∏è (`U+1F9D6 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üßñüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::MediumLight)); // üßñüèº‚Äç‚ôÇÔ∏è (`U+1F9D6 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üßñüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::Medium)); // üßñüèΩ‚Äç‚ôÇÔ∏è (`U+1F9D6 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üßñüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::MediumDark)); // üßñüèæ‚Äç‚ôÇÔ∏è (`U+1F9D6 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üßñüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::Dark)); // üßñüèø‚Äç‚ôÇÔ∏è (`U+1F9D6 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üßñüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.gender(Gender::Female)); // üßñ‚Äç‚ôÄÔ∏è (`U+1F9D6 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.gender(Gender::Female).to_string().as_str(), \"üßñ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::Light)); // üßñüèª‚Äç‚ôÄÔ∏è (`U+1F9D6 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üßñüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::MediumLight)); // üßñüèº‚Äç‚ôÄÔ∏è (`U+1F9D6 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üßñüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::Medium)); // üßñüèΩ‚Äç‚ôÄÔ∏è (`U+1F9D6 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üßñüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::MediumDark)); // üßñüèæ‚Äç‚ôÄÔ∏è (`U+1F9D6 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üßñüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::Dark)); // üßñüèø‚Äç‚ôÄÔ∏è (`U+1F9D6 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üßñüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_IN_STEAMY_ROOM: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person in steamy room", Version(5, 0),"üßñ"), 
	&[
		Emoji::new("person in steamy room: light skin tone", Version(5, 0),"üßñüèª"),
	Emoji::new("person in steamy room: medium-light skin tone", Version(5, 0),"üßñüèº"),
	Emoji::new("person in steamy room: medium skin tone", Version(5, 0),"üßñüèΩ"),
	Emoji::new("person in steamy room: medium-dark skin tone", Version(5, 0),"üßñüèæ"),
	Emoji::new("person in steamy room: dark skin tone", Version(5, 0),"üßñüèø"),
	]), 
	&[
		With::new(Emoji::new("man in steamy room", Version(5, 0),"üßñ‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man in steamy room: light skin tone", Version(5, 0),"üßñüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man in steamy room: medium-light skin tone", Version(5, 0),"üßñüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man in steamy room: medium skin tone", Version(5, 0),"üßñüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man in steamy room: medium-dark skin tone", Version(5, 0),"üßñüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man in steamy room: dark skin tone", Version(5, 0),"üßñüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman in steamy room", Version(5, 0),"üßñ‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman in steamy room: light skin tone", Version(5, 0),"üßñüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman in steamy room: medium-light skin tone", Version(5, 0),"üßñüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman in steamy room: medium skin tone", Version(5, 0),"üßñüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman in steamy room: medium-dark skin tone", Version(5, 0),"üßñüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman in steamy room: dark skin tone", Version(5, 0),"üßñüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person in suit levitating üï¥Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_IN_SUIT_LEVITATING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_IN_SUIT_LEVITATING); // üï¥Ô∏è (`U+1F574 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_SUIT_LEVITATING.to_string().as_str(), \"üï¥Ô∏è\");"]#[doc="println!(\"{}\", PERSON_IN_SUIT_LEVITATING.tone(Tone::Light)); // üï¥üèª (`U+1F574 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_IN_SUIT_LEVITATING.tone(Tone::Light).to_string().as_str(), \"üï¥üèª\");"]#[doc="println!(\"{}\", PERSON_IN_SUIT_LEVITATING.tone(Tone::MediumLight)); // üï¥üèº (`U+1F574 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_IN_SUIT_LEVITATING.tone(Tone::MediumLight).to_string().as_str(), \"üï¥üèº\");"]#[doc="println!(\"{}\", PERSON_IN_SUIT_LEVITATING.tone(Tone::Medium)); // üï¥üèΩ (`U+1F574 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_IN_SUIT_LEVITATING.tone(Tone::Medium).to_string().as_str(), \"üï¥üèΩ\");"]#[doc="println!(\"{}\", PERSON_IN_SUIT_LEVITATING.tone(Tone::MediumDark)); // üï¥üèæ (`U+1F574 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_IN_SUIT_LEVITATING.tone(Tone::MediumDark).to_string().as_str(), \"üï¥üèæ\");"]#[doc="println!(\"{}\", PERSON_IN_SUIT_LEVITATING.tone(Tone::Dark)); // üï¥üèø (`U+1F574 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_IN_SUIT_LEVITATING.tone(Tone::Dark).to_string().as_str(), \"üï¥üèø\");"]
#[doc="```"]
pub static PERSON_IN_SUIT_LEVITATING: With<Tone,Emoji> = With::new(Emoji::new("person in suit levitating", Version(0, 7),"üï¥Ô∏è"), 
	&[
		Emoji::new("person in suit levitating: light skin tone", Version(4, 0),"üï¥üèª"),
	Emoji::new("person in suit levitating: medium-light skin tone", Version(4, 0),"üï¥üèº"),
	Emoji::new("person in suit levitating: medium skin tone", Version(4, 0),"üï¥üèΩ"),
	Emoji::new("person in suit levitating: medium-dark skin tone", Version(4, 0),"üï¥üèæ"),
	Emoji::new("person in suit levitating: dark skin tone", Version(4, 0),"üï¥üèø"),
	]);

		
		#[doc="person kneeling üßé"]#[doc=""]#[doc="Since E12.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_KNEELING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_KNEELING); // üßé (`U+1F9CE`)"] #[doc="# assert_eq!(PERSON_KNEELING.to_string().as_str(), \"üßé\");"]#[doc="println!(\"{}\", PERSON_KNEELING.tone(Tone::Light)); // üßéüèª (`U+1F9CE U+1F3FB`)"] #[doc="# assert_eq!(PERSON_KNEELING.tone(Tone::Light).to_string().as_str(), \"üßéüèª\");"]#[doc="println!(\"{}\", PERSON_KNEELING.tone(Tone::MediumLight)); // üßéüèº (`U+1F9CE U+1F3FC`)"] #[doc="# assert_eq!(PERSON_KNEELING.tone(Tone::MediumLight).to_string().as_str(), \"üßéüèº\");"]#[doc="println!(\"{}\", PERSON_KNEELING.tone(Tone::Medium)); // üßéüèΩ (`U+1F9CE U+1F3FD`)"] #[doc="# assert_eq!(PERSON_KNEELING.tone(Tone::Medium).to_string().as_str(), \"üßéüèΩ\");"]#[doc="println!(\"{}\", PERSON_KNEELING.tone(Tone::MediumDark)); // üßéüèæ (`U+1F9CE U+1F3FE`)"] #[doc="# assert_eq!(PERSON_KNEELING.tone(Tone::MediumDark).to_string().as_str(), \"üßéüèæ\");"]#[doc="println!(\"{}\", PERSON_KNEELING.tone(Tone::Dark)); // üßéüèø (`U+1F9CE U+1F3FF`)"] #[doc="# assert_eq!(PERSON_KNEELING.tone(Tone::Dark).to_string().as_str(), \"üßéüèø\");"]#[doc="println!(\"{}\", PERSON_KNEELING.gender(Gender::Male)); // üßé‚Äç‚ôÇÔ∏è (`U+1F9CE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_KNEELING.gender(Gender::Male).to_string().as_str(), \"üßé‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_KNEELING.gender(Gender::Male).tone(Tone::Light)); // üßéüèª‚Äç‚ôÇÔ∏è (`U+1F9CE U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_KNEELING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üßéüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_KNEELING.gender(Gender::Male).tone(Tone::MediumLight)); // üßéüèº‚Äç‚ôÇÔ∏è (`U+1F9CE U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_KNEELING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üßéüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_KNEELING.gender(Gender::Male).tone(Tone::Medium)); // üßéüèΩ‚Äç‚ôÇÔ∏è (`U+1F9CE U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_KNEELING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üßéüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_KNEELING.gender(Gender::Male).tone(Tone::MediumDark)); // üßéüèæ‚Äç‚ôÇÔ∏è (`U+1F9CE U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_KNEELING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üßéüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_KNEELING.gender(Gender::Male).tone(Tone::Dark)); // üßéüèø‚Äç‚ôÇÔ∏è (`U+1F9CE U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_KNEELING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üßéüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_KNEELING.gender(Gender::Female)); // üßé‚Äç‚ôÄÔ∏è (`U+1F9CE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_KNEELING.gender(Gender::Female).to_string().as_str(), \"üßé‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_KNEELING.gender(Gender::Female).tone(Tone::Light)); // üßéüèª‚Äç‚ôÄÔ∏è (`U+1F9CE U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_KNEELING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üßéüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_KNEELING.gender(Gender::Female).tone(Tone::MediumLight)); // üßéüèº‚Äç‚ôÄÔ∏è (`U+1F9CE U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_KNEELING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üßéüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_KNEELING.gender(Gender::Female).tone(Tone::Medium)); // üßéüèΩ‚Äç‚ôÄÔ∏è (`U+1F9CE U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_KNEELING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üßéüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_KNEELING.gender(Gender::Female).tone(Tone::MediumDark)); // üßéüèæ‚Äç‚ôÄÔ∏è (`U+1F9CE U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_KNEELING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üßéüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_KNEELING.gender(Gender::Female).tone(Tone::Dark)); // üßéüèø‚Äç‚ôÄÔ∏è (`U+1F9CE U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_KNEELING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üßéüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_KNEELING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person kneeling", Version(12, 0),"üßé"), 
	&[
		Emoji::new("person kneeling: light skin tone", Version(12, 0),"üßéüèª"),
	Emoji::new("person kneeling: medium-light skin tone", Version(12, 0),"üßéüèº"),
	Emoji::new("person kneeling: medium skin tone", Version(12, 0),"üßéüèΩ"),
	Emoji::new("person kneeling: medium-dark skin tone", Version(12, 0),"üßéüèæ"),
	Emoji::new("person kneeling: dark skin tone", Version(12, 0),"üßéüèø"),
	]), 
	&[
		With::new(Emoji::new("man kneeling", Version(12, 0),"üßé‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man kneeling: light skin tone", Version(12, 0),"üßéüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man kneeling: medium-light skin tone", Version(12, 0),"üßéüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man kneeling: medium skin tone", Version(12, 0),"üßéüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man kneeling: medium-dark skin tone", Version(12, 0),"üßéüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man kneeling: dark skin tone", Version(12, 0),"üßéüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman kneeling", Version(12, 0),"üßé‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman kneeling: light skin tone", Version(12, 0),"üßéüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman kneeling: medium-light skin tone", Version(12, 0),"üßéüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman kneeling: medium skin tone", Version(12, 0),"üßéüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman kneeling: medium-dark skin tone", Version(12, 0),"üßéüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman kneeling: dark skin tone", Version(12, 0),"üßéüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person running üèÉ"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_RUNNING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_RUNNING); // üèÉ (`U+1F3C3`)"] #[doc="# assert_eq!(PERSON_RUNNING.to_string().as_str(), \"üèÉ\");"]#[doc="println!(\"{}\", PERSON_RUNNING.tone(Tone::Light)); // üèÉüèª (`U+1F3C3 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_RUNNING.tone(Tone::Light).to_string().as_str(), \"üèÉüèª\");"]#[doc="println!(\"{}\", PERSON_RUNNING.tone(Tone::MediumLight)); // üèÉüèº (`U+1F3C3 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_RUNNING.tone(Tone::MediumLight).to_string().as_str(), \"üèÉüèº\");"]#[doc="println!(\"{}\", PERSON_RUNNING.tone(Tone::Medium)); // üèÉüèΩ (`U+1F3C3 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_RUNNING.tone(Tone::Medium).to_string().as_str(), \"üèÉüèΩ\");"]#[doc="println!(\"{}\", PERSON_RUNNING.tone(Tone::MediumDark)); // üèÉüèæ (`U+1F3C3 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_RUNNING.tone(Tone::MediumDark).to_string().as_str(), \"üèÉüèæ\");"]#[doc="println!(\"{}\", PERSON_RUNNING.tone(Tone::Dark)); // üèÉüèø (`U+1F3C3 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_RUNNING.tone(Tone::Dark).to_string().as_str(), \"üèÉüèø\");"]#[doc="println!(\"{}\", PERSON_RUNNING.gender(Gender::Male)); // üèÉ‚Äç‚ôÇÔ∏è (`U+1F3C3 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RUNNING.gender(Gender::Male).to_string().as_str(), \"üèÉ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_RUNNING.gender(Gender::Male).tone(Tone::Light)); // üèÉüèª‚Äç‚ôÇÔ∏è (`U+1F3C3 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RUNNING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üèÉüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_RUNNING.gender(Gender::Male).tone(Tone::MediumLight)); // üèÉüèº‚Äç‚ôÇÔ∏è (`U+1F3C3 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RUNNING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üèÉüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_RUNNING.gender(Gender::Male).tone(Tone::Medium)); // üèÉüèΩ‚Äç‚ôÇÔ∏è (`U+1F3C3 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RUNNING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üèÉüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_RUNNING.gender(Gender::Male).tone(Tone::MediumDark)); // üèÉüèæ‚Äç‚ôÇÔ∏è (`U+1F3C3 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RUNNING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üèÉüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_RUNNING.gender(Gender::Male).tone(Tone::Dark)); // üèÉüèø‚Äç‚ôÇÔ∏è (`U+1F3C3 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RUNNING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üèÉüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_RUNNING.gender(Gender::Female)); // üèÉ‚Äç‚ôÄÔ∏è (`U+1F3C3 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RUNNING.gender(Gender::Female).to_string().as_str(), \"üèÉ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_RUNNING.gender(Gender::Female).tone(Tone::Light)); // üèÉüèª‚Äç‚ôÄÔ∏è (`U+1F3C3 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RUNNING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üèÉüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_RUNNING.gender(Gender::Female).tone(Tone::MediumLight)); // üèÉüèº‚Äç‚ôÄÔ∏è (`U+1F3C3 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RUNNING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üèÉüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_RUNNING.gender(Gender::Female).tone(Tone::Medium)); // üèÉüèΩ‚Äç‚ôÄÔ∏è (`U+1F3C3 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RUNNING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üèÉüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_RUNNING.gender(Gender::Female).tone(Tone::MediumDark)); // üèÉüèæ‚Äç‚ôÄÔ∏è (`U+1F3C3 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RUNNING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üèÉüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_RUNNING.gender(Gender::Female).tone(Tone::Dark)); // üèÉüèø‚Äç‚ôÄÔ∏è (`U+1F3C3 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RUNNING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üèÉüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_RUNNING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person running", Version(0, 6),"üèÉ"), 
	&[
		Emoji::new("person running: light skin tone", Version(1, 0),"üèÉüèª"),
	Emoji::new("person running: medium-light skin tone", Version(1, 0),"üèÉüèº"),
	Emoji::new("person running: medium skin tone", Version(1, 0),"üèÉüèΩ"),
	Emoji::new("person running: medium-dark skin tone", Version(1, 0),"üèÉüèæ"),
	Emoji::new("person running: dark skin tone", Version(1, 0),"üèÉüèø"),
	]), 
	&[
		With::new(Emoji::new("man running", Version(4, 0),"üèÉ‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man running: light skin tone", Version(4, 0),"üèÉüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man running: medium-light skin tone", Version(4, 0),"üèÉüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man running: medium skin tone", Version(4, 0),"üèÉüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man running: medium-dark skin tone", Version(4, 0),"üèÉüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man running: dark skin tone", Version(4, 0),"üèÉüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman running", Version(4, 0),"üèÉ‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman running: light skin tone", Version(4, 0),"üèÉüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman running: medium-light skin tone", Version(4, 0),"üèÉüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman running: medium skin tone", Version(4, 0),"üèÉüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman running: medium-dark skin tone", Version(4, 0),"üèÉüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman running: dark skin tone", Version(4, 0),"üèÉüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person standing üßç"]#[doc=""]#[doc="Since E12.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_STANDING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_STANDING); // üßç (`U+1F9CD`)"] #[doc="# assert_eq!(PERSON_STANDING.to_string().as_str(), \"üßç\");"]#[doc="println!(\"{}\", PERSON_STANDING.tone(Tone::Light)); // üßçüèª (`U+1F9CD U+1F3FB`)"] #[doc="# assert_eq!(PERSON_STANDING.tone(Tone::Light).to_string().as_str(), \"üßçüèª\");"]#[doc="println!(\"{}\", PERSON_STANDING.tone(Tone::MediumLight)); // üßçüèº (`U+1F9CD U+1F3FC`)"] #[doc="# assert_eq!(PERSON_STANDING.tone(Tone::MediumLight).to_string().as_str(), \"üßçüèº\");"]#[doc="println!(\"{}\", PERSON_STANDING.tone(Tone::Medium)); // üßçüèΩ (`U+1F9CD U+1F3FD`)"] #[doc="# assert_eq!(PERSON_STANDING.tone(Tone::Medium).to_string().as_str(), \"üßçüèΩ\");"]#[doc="println!(\"{}\", PERSON_STANDING.tone(Tone::MediumDark)); // üßçüèæ (`U+1F9CD U+1F3FE`)"] #[doc="# assert_eq!(PERSON_STANDING.tone(Tone::MediumDark).to_string().as_str(), \"üßçüèæ\");"]#[doc="println!(\"{}\", PERSON_STANDING.tone(Tone::Dark)); // üßçüèø (`U+1F9CD U+1F3FF`)"] #[doc="# assert_eq!(PERSON_STANDING.tone(Tone::Dark).to_string().as_str(), \"üßçüèø\");"]#[doc="println!(\"{}\", PERSON_STANDING.gender(Gender::Male)); // üßç‚Äç‚ôÇÔ∏è (`U+1F9CD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_STANDING.gender(Gender::Male).to_string().as_str(), \"üßç‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_STANDING.gender(Gender::Male).tone(Tone::Light)); // üßçüèª‚Äç‚ôÇÔ∏è (`U+1F9CD U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_STANDING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üßçüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_STANDING.gender(Gender::Male).tone(Tone::MediumLight)); // üßçüèº‚Äç‚ôÇÔ∏è (`U+1F9CD U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_STANDING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üßçüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_STANDING.gender(Gender::Male).tone(Tone::Medium)); // üßçüèΩ‚Äç‚ôÇÔ∏è (`U+1F9CD U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_STANDING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üßçüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_STANDING.gender(Gender::Male).tone(Tone::MediumDark)); // üßçüèæ‚Äç‚ôÇÔ∏è (`U+1F9CD U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_STANDING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üßçüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_STANDING.gender(Gender::Male).tone(Tone::Dark)); // üßçüèø‚Äç‚ôÇÔ∏è (`U+1F9CD U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_STANDING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üßçüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_STANDING.gender(Gender::Female)); // üßç‚Äç‚ôÄÔ∏è (`U+1F9CD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_STANDING.gender(Gender::Female).to_string().as_str(), \"üßç‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_STANDING.gender(Gender::Female).tone(Tone::Light)); // üßçüèª‚Äç‚ôÄÔ∏è (`U+1F9CD U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_STANDING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üßçüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_STANDING.gender(Gender::Female).tone(Tone::MediumLight)); // üßçüèº‚Äç‚ôÄÔ∏è (`U+1F9CD U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_STANDING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üßçüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_STANDING.gender(Gender::Female).tone(Tone::Medium)); // üßçüèΩ‚Äç‚ôÄÔ∏è (`U+1F9CD U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_STANDING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üßçüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_STANDING.gender(Gender::Female).tone(Tone::MediumDark)); // üßçüèæ‚Äç‚ôÄÔ∏è (`U+1F9CD U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_STANDING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üßçüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_STANDING.gender(Gender::Female).tone(Tone::Dark)); // üßçüèø‚Äç‚ôÄÔ∏è (`U+1F9CD U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_STANDING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üßçüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_STANDING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person standing", Version(12, 0),"üßç"), 
	&[
		Emoji::new("person standing: light skin tone", Version(12, 0),"üßçüèª"),
	Emoji::new("person standing: medium-light skin tone", Version(12, 0),"üßçüèº"),
	Emoji::new("person standing: medium skin tone", Version(12, 0),"üßçüèΩ"),
	Emoji::new("person standing: medium-dark skin tone", Version(12, 0),"üßçüèæ"),
	Emoji::new("person standing: dark skin tone", Version(12, 0),"üßçüèø"),
	]), 
	&[
		With::new(Emoji::new("man standing", Version(12, 0),"üßç‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man standing: light skin tone", Version(12, 0),"üßçüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man standing: medium-light skin tone", Version(12, 0),"üßçüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man standing: medium skin tone", Version(12, 0),"üßçüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man standing: medium-dark skin tone", Version(12, 0),"üßçüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man standing: dark skin tone", Version(12, 0),"üßçüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman standing", Version(12, 0),"üßç‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman standing: light skin tone", Version(12, 0),"üßçüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman standing: medium-light skin tone", Version(12, 0),"üßçüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman standing: medium skin tone", Version(12, 0),"üßçüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman standing: medium-dark skin tone", Version(12, 0),"üßçüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman standing: dark skin tone", Version(12, 0),"üßçüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person walking üö∂"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_WALKING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_WALKING); // üö∂ (`U+1F6B6`)"] #[doc="# assert_eq!(PERSON_WALKING.to_string().as_str(), \"üö∂\");"]#[doc="println!(\"{}\", PERSON_WALKING.tone(Tone::Light)); // üö∂üèª (`U+1F6B6 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_WALKING.tone(Tone::Light).to_string().as_str(), \"üö∂üèª\");"]#[doc="println!(\"{}\", PERSON_WALKING.tone(Tone::MediumLight)); // üö∂üèº (`U+1F6B6 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_WALKING.tone(Tone::MediumLight).to_string().as_str(), \"üö∂üèº\");"]#[doc="println!(\"{}\", PERSON_WALKING.tone(Tone::Medium)); // üö∂üèΩ (`U+1F6B6 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_WALKING.tone(Tone::Medium).to_string().as_str(), \"üö∂üèΩ\");"]#[doc="println!(\"{}\", PERSON_WALKING.tone(Tone::MediumDark)); // üö∂üèæ (`U+1F6B6 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_WALKING.tone(Tone::MediumDark).to_string().as_str(), \"üö∂üèæ\");"]#[doc="println!(\"{}\", PERSON_WALKING.tone(Tone::Dark)); // üö∂üèø (`U+1F6B6 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_WALKING.tone(Tone::Dark).to_string().as_str(), \"üö∂üèø\");"]#[doc="println!(\"{}\", PERSON_WALKING.gender(Gender::Male)); // üö∂‚Äç‚ôÇÔ∏è (`U+1F6B6 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WALKING.gender(Gender::Male).to_string().as_str(), \"üö∂‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WALKING.gender(Gender::Male).tone(Tone::Light)); // üö∂üèª‚Äç‚ôÇÔ∏è (`U+1F6B6 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WALKING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üö∂üèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WALKING.gender(Gender::Male).tone(Tone::MediumLight)); // üö∂üèº‚Äç‚ôÇÔ∏è (`U+1F6B6 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WALKING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üö∂üèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WALKING.gender(Gender::Male).tone(Tone::Medium)); // üö∂üèΩ‚Äç‚ôÇÔ∏è (`U+1F6B6 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WALKING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üö∂üèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WALKING.gender(Gender::Male).tone(Tone::MediumDark)); // üö∂üèæ‚Äç‚ôÇÔ∏è (`U+1F6B6 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WALKING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üö∂üèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WALKING.gender(Gender::Male).tone(Tone::Dark)); // üö∂üèø‚Äç‚ôÇÔ∏è (`U+1F6B6 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WALKING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üö∂üèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WALKING.gender(Gender::Female)); // üö∂‚Äç‚ôÄÔ∏è (`U+1F6B6 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WALKING.gender(Gender::Female).to_string().as_str(), \"üö∂‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WALKING.gender(Gender::Female).tone(Tone::Light)); // üö∂üèª‚Äç‚ôÄÔ∏è (`U+1F6B6 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WALKING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üö∂üèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WALKING.gender(Gender::Female).tone(Tone::MediumLight)); // üö∂üèº‚Äç‚ôÄÔ∏è (`U+1F6B6 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WALKING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üö∂üèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WALKING.gender(Gender::Female).tone(Tone::Medium)); // üö∂üèΩ‚Äç‚ôÄÔ∏è (`U+1F6B6 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WALKING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üö∂üèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WALKING.gender(Gender::Female).tone(Tone::MediumDark)); // üö∂üèæ‚Äç‚ôÄÔ∏è (`U+1F6B6 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WALKING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üö∂üèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WALKING.gender(Gender::Female).tone(Tone::Dark)); // üö∂üèø‚Äç‚ôÄÔ∏è (`U+1F6B6 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WALKING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üö∂üèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_WALKING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person walking", Version(0, 6),"üö∂"), 
	&[
		Emoji::new("person walking: light skin tone", Version(1, 0),"üö∂üèª"),
	Emoji::new("person walking: medium-light skin tone", Version(1, 0),"üö∂üèº"),
	Emoji::new("person walking: medium skin tone", Version(1, 0),"üö∂üèΩ"),
	Emoji::new("person walking: medium-dark skin tone", Version(1, 0),"üö∂üèæ"),
	Emoji::new("person walking: dark skin tone", Version(1, 0),"üö∂üèø"),
	]), 
	&[
		With::new(Emoji::new("man walking", Version(4, 0),"üö∂‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man walking: light skin tone", Version(4, 0),"üö∂üèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man walking: medium-light skin tone", Version(4, 0),"üö∂üèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man walking: medium skin tone", Version(4, 0),"üö∂üèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man walking: medium-dark skin tone", Version(4, 0),"üö∂üèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man walking: dark skin tone", Version(4, 0),"üö∂üèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman walking", Version(4, 0),"üö∂‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman walking: light skin tone", Version(4, 0),"üö∂üèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman walking: medium-light skin tone", Version(4, 0),"üö∂üèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman walking: medium skin tone", Version(4, 0),"üö∂üèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman walking: medium-dark skin tone", Version(4, 0),"üö∂üèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman walking: dark skin tone", Version(4, 0),"üö∂üèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person with bunny ears üëØ"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_WITH_BUNNY_EARS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_WITH_BUNNY_EARS); // üëØ (`U+1F46F`)"] #[doc="# assert_eq!(PERSON_WITH_BUNNY_EARS.to_string().as_str(), \"üëØ\");"]#[doc="println!(\"{}\", PERSON_WITH_BUNNY_EARS.gender(Gender::Male)); // üëØ‚Äç‚ôÇÔ∏è (`U+1F46F U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_BUNNY_EARS.gender(Gender::Male).to_string().as_str(), \"üëØ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WITH_BUNNY_EARS.gender(Gender::Female)); // üëØ‚Äç‚ôÄÔ∏è (`U+1F46F U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_BUNNY_EARS.gender(Gender::Female).to_string().as_str(), \"üëØ‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_WITH_BUNNY_EARS: With<Gender,Emoji> = With::new(Emoji::new("people with bunny ears", Version(0, 6),"üëØ"), 
	&[
		Emoji::new("men with bunny ears", Version(4, 0),"üëØ‚Äç‚ôÇÔ∏è"),
	Emoji::new("women with bunny ears", Version(4, 0),"üëØ‚Äç‚ôÄÔ∏è"),
	]);

		
		#[doc="person with white cane üßë‚Äçü¶Ø"]#[doc=""]#[doc="Since E12.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_WITH_WHITE_CANE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE); // üßë‚Äçü¶Ø (`U+1F9D1 U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.to_string().as_str(), \"üßë‚Äçü¶Ø\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.tone(Tone::Light)); // üßëüèª‚Äçü¶Ø (`U+1F9D1 U+1F3FB U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.tone(Tone::Light).to_string().as_str(), \"üßëüèª‚Äçü¶Ø\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.tone(Tone::MediumLight)); // üßëüèº‚Äçü¶Ø (`U+1F9D1 U+1F3FC U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº‚Äçü¶Ø\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.tone(Tone::Medium)); // üßëüèΩ‚Äçü¶Ø (`U+1F9D1 U+1F3FD U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ‚Äçü¶Ø\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.tone(Tone::MediumDark)); // üßëüèæ‚Äçü¶Ø (`U+1F9D1 U+1F3FE U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ‚Äçü¶Ø\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.tone(Tone::Dark)); // üßëüèø‚Äçü¶Ø (`U+1F9D1 U+1F3FF U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.tone(Tone::Dark).to_string().as_str(), \"üßëüèø‚Äçü¶Ø\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.gender(Gender::Male)); // üë®‚Äçü¶Ø (`U+1F468 U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.gender(Gender::Male).to_string().as_str(), \"üë®‚Äçü¶Ø\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::Light)); // üë®üèª‚Äçü¶Ø (`U+1F468 U+1F3FB U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë®üèª‚Äçü¶Ø\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::MediumLight)); // üë®üèº‚Äçü¶Ø (`U+1F468 U+1F3FC U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº‚Äçü¶Ø\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::Medium)); // üë®üèΩ‚Äçü¶Ø (`U+1F468 U+1F3FD U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ‚Äçü¶Ø\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::MediumDark)); // üë®üèæ‚Äçü¶Ø (`U+1F468 U+1F3FE U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ‚Äçü¶Ø\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::Dark)); // üë®üèø‚Äçü¶Ø (`U+1F468 U+1F3FF U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë®üèø‚Äçü¶Ø\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.gender(Gender::Female)); // üë©‚Äçü¶Ø (`U+1F469 U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.gender(Gender::Female).to_string().as_str(), \"üë©‚Äçü¶Ø\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::Light)); // üë©üèª‚Äçü¶Ø (`U+1F469 U+1F3FB U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äçü¶Ø\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::MediumLight)); // üë©üèº‚Äçü¶Ø (`U+1F469 U+1F3FC U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äçü¶Ø\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::Medium)); // üë©üèΩ‚Äçü¶Ø (`U+1F469 U+1F3FD U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äçü¶Ø\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::MediumDark)); // üë©üèæ‚Äçü¶Ø (`U+1F469 U+1F3FE U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äçü¶Ø\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::Dark)); // üë©üèø‚Äçü¶Ø (`U+1F469 U+1F3FF U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äçü¶Ø\");"]
#[doc="```"]
pub static PERSON_WITH_WHITE_CANE: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person with white cane", Version(12, 1),"üßë‚Äçü¶Ø"), 
	&[
		Emoji::new("person with white cane: light skin tone", Version(12, 1),"üßëüèª‚Äçü¶Ø"),
	Emoji::new("person with white cane: medium-light skin tone", Version(12, 1),"üßëüèº‚Äçü¶Ø"),
	Emoji::new("person with white cane: medium skin tone", Version(12, 1),"üßëüèΩ‚Äçü¶Ø"),
	Emoji::new("person with white cane: medium-dark skin tone", Version(12, 1),"üßëüèæ‚Äçü¶Ø"),
	Emoji::new("person with white cane: dark skin tone", Version(12, 1),"üßëüèø‚Äçü¶Ø"),
	]), 
	&[
		With::new(Emoji::new("man with white cane", Version(12, 0),"üë®‚Äçü¶Ø"), 
	&[
		Emoji::new("man with white cane: light skin tone", Version(12, 0),"üë®üèª‚Äçü¶Ø"),
	Emoji::new("man with white cane: medium-light skin tone", Version(12, 0),"üë®üèº‚Äçü¶Ø"),
	Emoji::new("man with white cane: medium skin tone", Version(12, 0),"üë®üèΩ‚Äçü¶Ø"),
	Emoji::new("man with white cane: medium-dark skin tone", Version(12, 0),"üë®üèæ‚Äçü¶Ø"),
	Emoji::new("man with white cane: dark skin tone", Version(12, 0),"üë®üèø‚Äçü¶Ø"),
	]),
	With::new(Emoji::new("woman with white cane", Version(12, 0),"üë©‚Äçü¶Ø"), 
	&[
		Emoji::new("woman with white cane: light skin tone", Version(12, 0),"üë©üèª‚Äçü¶Ø"),
	Emoji::new("woman with white cane: medium-light skin tone", Version(12, 0),"üë©üèº‚Äçü¶Ø"),
	Emoji::new("woman with white cane: medium skin tone", Version(12, 0),"üë©üèΩ‚Äçü¶Ø"),
	Emoji::new("woman with white cane: medium-dark skin tone", Version(12, 0),"üë©üèæ‚Äçü¶Ø"),
	Emoji::new("woman with white cane: dark skin tone", Version(12, 0),"üë©üèø‚Äçü¶Ø"),
	]),
	]);

		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // PERSON_CLIMBING
				
				&PERSON_CLIMBING.default.default,
				
				&PERSON_CLIMBING.default.tone(Tone::Light),
				
				&PERSON_CLIMBING.default.tone(Tone::MediumLight),
				
				&PERSON_CLIMBING.default.tone(Tone::Medium),
				
				&PERSON_CLIMBING.default.tone(Tone::MediumDark),
				
				&PERSON_CLIMBING.default.tone(Tone::Dark),
				
				&PERSON_CLIMBING.gender(Gender::Male).default,
				
				&PERSON_CLIMBING.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_CLIMBING.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_CLIMBING.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_CLIMBING.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_CLIMBING.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_CLIMBING.gender(Gender::Female).default,
				
				&PERSON_CLIMBING.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_CLIMBING.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_CLIMBING.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_CLIMBING.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_CLIMBING.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_DANCING
				
				&PERSON_DANCING.gender(Gender::Male).default,
				
				&PERSON_DANCING.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_DANCING.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_DANCING.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_DANCING.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_DANCING.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_DANCING.gender(Gender::Female).default,
				
				&PERSON_DANCING.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_DANCING.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_DANCING.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_DANCING.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_DANCING.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_GETTING_HAIRCUT
				
				&PERSON_GETTING_HAIRCUT.default.default,
				
				&PERSON_GETTING_HAIRCUT.default.tone(Tone::Light),
				
				&PERSON_GETTING_HAIRCUT.default.tone(Tone::MediumLight),
				
				&PERSON_GETTING_HAIRCUT.default.tone(Tone::Medium),
				
				&PERSON_GETTING_HAIRCUT.default.tone(Tone::MediumDark),
				
				&PERSON_GETTING_HAIRCUT.default.tone(Tone::Dark),
				
				&PERSON_GETTING_HAIRCUT.gender(Gender::Male).default,
				
				&PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_GETTING_HAIRCUT.gender(Gender::Female).default,
				
				&PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_GETTING_MASSAGE
				
				&PERSON_GETTING_MASSAGE.default.default,
				
				&PERSON_GETTING_MASSAGE.default.tone(Tone::Light),
				
				&PERSON_GETTING_MASSAGE.default.tone(Tone::MediumLight),
				
				&PERSON_GETTING_MASSAGE.default.tone(Tone::Medium),
				
				&PERSON_GETTING_MASSAGE.default.tone(Tone::MediumDark),
				
				&PERSON_GETTING_MASSAGE.default.tone(Tone::Dark),
				
				&PERSON_GETTING_MASSAGE.gender(Gender::Male).default,
				
				&PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_GETTING_MASSAGE.gender(Gender::Female).default,
				
				&PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_IN_MANUAL_WHEELCHAIR
				
				&PERSON_IN_MANUAL_WHEELCHAIR.default.default,
				
				&PERSON_IN_MANUAL_WHEELCHAIR.default.tone(Tone::Light),
				
				&PERSON_IN_MANUAL_WHEELCHAIR.default.tone(Tone::MediumLight),
				
				&PERSON_IN_MANUAL_WHEELCHAIR.default.tone(Tone::Medium),
				
				&PERSON_IN_MANUAL_WHEELCHAIR.default.tone(Tone::MediumDark),
				
				&PERSON_IN_MANUAL_WHEELCHAIR.default.tone(Tone::Dark),
				
				&PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).default,
				
				&PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).default,
				
				&PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_IN_MOTORIZED_WHEELCHAIR
				
				&PERSON_IN_MOTORIZED_WHEELCHAIR.default.default,
				
				&PERSON_IN_MOTORIZED_WHEELCHAIR.default.tone(Tone::Light),
				
				&PERSON_IN_MOTORIZED_WHEELCHAIR.default.tone(Tone::MediumLight),
				
				&PERSON_IN_MOTORIZED_WHEELCHAIR.default.tone(Tone::Medium),
				
				&PERSON_IN_MOTORIZED_WHEELCHAIR.default.tone(Tone::MediumDark),
				
				&PERSON_IN_MOTORIZED_WHEELCHAIR.default.tone(Tone::Dark),
				
				&PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).default,
				
				&PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).default,
				
				&PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_IN_STEAMY_ROOM
				
				&PERSON_IN_STEAMY_ROOM.default.default,
				
				&PERSON_IN_STEAMY_ROOM.default.tone(Tone::Light),
				
				&PERSON_IN_STEAMY_ROOM.default.tone(Tone::MediumLight),
				
				&PERSON_IN_STEAMY_ROOM.default.tone(Tone::Medium),
				
				&PERSON_IN_STEAMY_ROOM.default.tone(Tone::MediumDark),
				
				&PERSON_IN_STEAMY_ROOM.default.tone(Tone::Dark),
				
				&PERSON_IN_STEAMY_ROOM.gender(Gender::Male).default,
				
				&PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_IN_STEAMY_ROOM.gender(Gender::Female).default,
				
				&PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_IN_SUIT_LEVITATING
				
				&PERSON_IN_SUIT_LEVITATING.default,
				
				&PERSON_IN_SUIT_LEVITATING.tone(Tone::Light),
				
				&PERSON_IN_SUIT_LEVITATING.tone(Tone::MediumLight),
				
				&PERSON_IN_SUIT_LEVITATING.tone(Tone::Medium),
				
				&PERSON_IN_SUIT_LEVITATING.tone(Tone::MediumDark),
				
				&PERSON_IN_SUIT_LEVITATING.tone(Tone::Dark),
				
			],
			
			&[ // PERSON_KNEELING
				
				&PERSON_KNEELING.default.default,
				
				&PERSON_KNEELING.default.tone(Tone::Light),
				
				&PERSON_KNEELING.default.tone(Tone::MediumLight),
				
				&PERSON_KNEELING.default.tone(Tone::Medium),
				
				&PERSON_KNEELING.default.tone(Tone::MediumDark),
				
				&PERSON_KNEELING.default.tone(Tone::Dark),
				
				&PERSON_KNEELING.gender(Gender::Male).default,
				
				&PERSON_KNEELING.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_KNEELING.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_KNEELING.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_KNEELING.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_KNEELING.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_KNEELING.gender(Gender::Female).default,
				
				&PERSON_KNEELING.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_KNEELING.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_KNEELING.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_KNEELING.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_KNEELING.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_RUNNING
				
				&PERSON_RUNNING.default.default,
				
				&PERSON_RUNNING.default.tone(Tone::Light),
				
				&PERSON_RUNNING.default.tone(Tone::MediumLight),
				
				&PERSON_RUNNING.default.tone(Tone::Medium),
				
				&PERSON_RUNNING.default.tone(Tone::MediumDark),
				
				&PERSON_RUNNING.default.tone(Tone::Dark),
				
				&PERSON_RUNNING.gender(Gender::Male).default,
				
				&PERSON_RUNNING.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_RUNNING.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_RUNNING.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_RUNNING.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_RUNNING.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_RUNNING.gender(Gender::Female).default,
				
				&PERSON_RUNNING.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_RUNNING.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_RUNNING.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_RUNNING.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_RUNNING.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_STANDING
				
				&PERSON_STANDING.default.default,
				
				&PERSON_STANDING.default.tone(Tone::Light),
				
				&PERSON_STANDING.default.tone(Tone::MediumLight),
				
				&PERSON_STANDING.default.tone(Tone::Medium),
				
				&PERSON_STANDING.default.tone(Tone::MediumDark),
				
				&PERSON_STANDING.default.tone(Tone::Dark),
				
				&PERSON_STANDING.gender(Gender::Male).default,
				
				&PERSON_STANDING.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_STANDING.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_STANDING.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_STANDING.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_STANDING.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_STANDING.gender(Gender::Female).default,
				
				&PERSON_STANDING.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_STANDING.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_STANDING.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_STANDING.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_STANDING.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_WALKING
				
				&PERSON_WALKING.default.default,
				
				&PERSON_WALKING.default.tone(Tone::Light),
				
				&PERSON_WALKING.default.tone(Tone::MediumLight),
				
				&PERSON_WALKING.default.tone(Tone::Medium),
				
				&PERSON_WALKING.default.tone(Tone::MediumDark),
				
				&PERSON_WALKING.default.tone(Tone::Dark),
				
				&PERSON_WALKING.gender(Gender::Male).default,
				
				&PERSON_WALKING.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_WALKING.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_WALKING.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_WALKING.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_WALKING.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_WALKING.gender(Gender::Female).default,
				
				&PERSON_WALKING.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_WALKING.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_WALKING.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_WALKING.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_WALKING.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_WITH_BUNNY_EARS
				
				&PERSON_WITH_BUNNY_EARS.default,
				
				&PERSON_WITH_BUNNY_EARS.gender(Gender::Male),
				
				&PERSON_WITH_BUNNY_EARS.gender(Gender::Female),
				
			],
			
			&[ // PERSON_WITH_WHITE_CANE
				
				&PERSON_WITH_WHITE_CANE.default.default,
				
				&PERSON_WITH_WHITE_CANE.default.tone(Tone::Light),
				
				&PERSON_WITH_WHITE_CANE.default.tone(Tone::MediumLight),
				
				&PERSON_WITH_WHITE_CANE.default.tone(Tone::Medium),
				
				&PERSON_WITH_WHITE_CANE.default.tone(Tone::MediumDark),
				
				&PERSON_WITH_WHITE_CANE.default.tone(Tone::Dark),
				
				&PERSON_WITH_WHITE_CANE.gender(Gender::Male).default,
				
				&PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_WITH_WHITE_CANE.gender(Gender::Female).default,
				
				&PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&PERSON_CLIMBING.default.default, // PERSON_CLIMBING
				
			
				
				&PERSON_DANCING.gender(Gender::Female).default, // PERSON_DANCING
				
				&PERSON_DANCING.gender(Gender::Male).default, // PERSON_DANCING
				
			
				
				&PERSON_GETTING_HAIRCUT.default.default, // PERSON_GETTING_HAIRCUT
				
			
				
				&PERSON_GETTING_MASSAGE.default.default, // PERSON_GETTING_MASSAGE
				
			
				
				&PERSON_IN_MANUAL_WHEELCHAIR.default.default, // PERSON_IN_MANUAL_WHEELCHAIR
				
			
				
				&PERSON_IN_MOTORIZED_WHEELCHAIR.default.default, // PERSON_IN_MOTORIZED_WHEELCHAIR
				
			
				
				&PERSON_IN_STEAMY_ROOM.default.default, // PERSON_IN_STEAMY_ROOM
				
			
				
				&PERSON_IN_SUIT_LEVITATING.default, // PERSON_IN_SUIT_LEVITATING
				
			
				
				&PERSON_KNEELING.default.default, // PERSON_KNEELING
				
			
				
				&PERSON_RUNNING.default.default, // PERSON_RUNNING
				
			
				
				&PERSON_STANDING.default.default, // PERSON_STANDING
				
			
				
				&PERSON_WALKING.default.default, // PERSON_WALKING
				
			
				
				&PERSON_WITH_BUNNY_EARS.default, // PERSON_WITH_BUNNY_EARS
				
			
				
				&PERSON_WITH_WHITE_CANE.default.default, // PERSON_WITH_WHITE_CANE
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // person_activity
	
	/// person_fantasy üëºüßùüßö
	pub mod person_fantasy {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="baby angel üëº"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BABY_ANGEL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BABY_ANGEL); // üëº (`U+1F47C`)"] #[doc="# assert_eq!(BABY_ANGEL.to_string().as_str(), \"üëº\");"]#[doc="println!(\"{}\", BABY_ANGEL.tone(Tone::Light)); // üëºüèª (`U+1F47C U+1F3FB`)"] #[doc="# assert_eq!(BABY_ANGEL.tone(Tone::Light).to_string().as_str(), \"üëºüèª\");"]#[doc="println!(\"{}\", BABY_ANGEL.tone(Tone::MediumLight)); // üëºüèº (`U+1F47C U+1F3FC`)"] #[doc="# assert_eq!(BABY_ANGEL.tone(Tone::MediumLight).to_string().as_str(), \"üëºüèº\");"]#[doc="println!(\"{}\", BABY_ANGEL.tone(Tone::Medium)); // üëºüèΩ (`U+1F47C U+1F3FD`)"] #[doc="# assert_eq!(BABY_ANGEL.tone(Tone::Medium).to_string().as_str(), \"üëºüèΩ\");"]#[doc="println!(\"{}\", BABY_ANGEL.tone(Tone::MediumDark)); // üëºüèæ (`U+1F47C U+1F3FE`)"] #[doc="# assert_eq!(BABY_ANGEL.tone(Tone::MediumDark).to_string().as_str(), \"üëºüèæ\");"]#[doc="println!(\"{}\", BABY_ANGEL.tone(Tone::Dark)); // üëºüèø (`U+1F47C U+1F3FF`)"] #[doc="# assert_eq!(BABY_ANGEL.tone(Tone::Dark).to_string().as_str(), \"üëºüèø\");"]
#[doc="```"]
pub static BABY_ANGEL: With<Tone,Emoji> = With::new(Emoji::new("baby angel", Version(0, 6),"üëº"), 
	&[
		Emoji::new("baby angel: light skin tone", Version(1, 0),"üëºüèª"),
	Emoji::new("baby angel: medium-light skin tone", Version(1, 0),"üëºüèº"),
	Emoji::new("baby angel: medium skin tone", Version(1, 0),"üëºüèΩ"),
	Emoji::new("baby angel: medium-dark skin tone", Version(1, 0),"üëºüèæ"),
	Emoji::new("baby angel: dark skin tone", Version(1, 0),"üëºüèø"),
	]);

		
		#[doc="elf üßù"]#[doc=""]#[doc="Since E5.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ELF;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ELF); // üßù (`U+1F9DD`)"] #[doc="# assert_eq!(ELF.to_string().as_str(), \"üßù\");"]#[doc="println!(\"{}\", ELF.tone(Tone::Light)); // üßùüèª (`U+1F9DD U+1F3FB`)"] #[doc="# assert_eq!(ELF.tone(Tone::Light).to_string().as_str(), \"üßùüèª\");"]#[doc="println!(\"{}\", ELF.tone(Tone::MediumLight)); // üßùüèº (`U+1F9DD U+1F3FC`)"] #[doc="# assert_eq!(ELF.tone(Tone::MediumLight).to_string().as_str(), \"üßùüèº\");"]#[doc="println!(\"{}\", ELF.tone(Tone::Medium)); // üßùüèΩ (`U+1F9DD U+1F3FD`)"] #[doc="# assert_eq!(ELF.tone(Tone::Medium).to_string().as_str(), \"üßùüèΩ\");"]#[doc="println!(\"{}\", ELF.tone(Tone::MediumDark)); // üßùüèæ (`U+1F9DD U+1F3FE`)"] #[doc="# assert_eq!(ELF.tone(Tone::MediumDark).to_string().as_str(), \"üßùüèæ\");"]#[doc="println!(\"{}\", ELF.tone(Tone::Dark)); // üßùüèø (`U+1F9DD U+1F3FF`)"] #[doc="# assert_eq!(ELF.tone(Tone::Dark).to_string().as_str(), \"üßùüèø\");"]#[doc="println!(\"{}\", ELF.gender(Gender::Male)); // üßù‚Äç‚ôÇÔ∏è (`U+1F9DD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(ELF.gender(Gender::Male).to_string().as_str(), \"üßù‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", ELF.gender(Gender::Male).tone(Tone::Light)); // üßùüèª‚Äç‚ôÇÔ∏è (`U+1F9DD U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(ELF.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üßùüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", ELF.gender(Gender::Male).tone(Tone::MediumLight)); // üßùüèº‚Äç‚ôÇÔ∏è (`U+1F9DD U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(ELF.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üßùüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", ELF.gender(Gender::Male).tone(Tone::Medium)); // üßùüèΩ‚Äç‚ôÇÔ∏è (`U+1F9DD U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(ELF.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üßùüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", ELF.gender(Gender::Male).tone(Tone::MediumDark)); // üßùüèæ‚Äç‚ôÇÔ∏è (`U+1F9DD U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(ELF.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üßùüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", ELF.gender(Gender::Male).tone(Tone::Dark)); // üßùüèø‚Äç‚ôÇÔ∏è (`U+1F9DD U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(ELF.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üßùüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", ELF.gender(Gender::Female)); // üßù‚Äç‚ôÄÔ∏è (`U+1F9DD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(ELF.gender(Gender::Female).to_string().as_str(), \"üßù‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", ELF.gender(Gender::Female).tone(Tone::Light)); // üßùüèª‚Äç‚ôÄÔ∏è (`U+1F9DD U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(ELF.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üßùüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", ELF.gender(Gender::Female).tone(Tone::MediumLight)); // üßùüèº‚Äç‚ôÄÔ∏è (`U+1F9DD U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(ELF.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üßùüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", ELF.gender(Gender::Female).tone(Tone::Medium)); // üßùüèΩ‚Äç‚ôÄÔ∏è (`U+1F9DD U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(ELF.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üßùüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", ELF.gender(Gender::Female).tone(Tone::MediumDark)); // üßùüèæ‚Äç‚ôÄÔ∏è (`U+1F9DD U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(ELF.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üßùüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", ELF.gender(Gender::Female).tone(Tone::Dark)); // üßùüèø‚Äç‚ôÄÔ∏è (`U+1F9DD U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(ELF.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üßùüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static ELF: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("elf", Version(5, 0),"üßù"), 
	&[
		Emoji::new("elf: light skin tone", Version(5, 0),"üßùüèª"),
	Emoji::new("elf: medium-light skin tone", Version(5, 0),"üßùüèº"),
	Emoji::new("elf: medium skin tone", Version(5, 0),"üßùüèΩ"),
	Emoji::new("elf: medium-dark skin tone", Version(5, 0),"üßùüèæ"),
	Emoji::new("elf: dark skin tone", Version(5, 0),"üßùüèø"),
	]), 
	&[
		With::new(Emoji::new("man elf", Version(5, 0),"üßù‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man elf: light skin tone", Version(5, 0),"üßùüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man elf: medium-light skin tone", Version(5, 0),"üßùüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man elf: medium skin tone", Version(5, 0),"üßùüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man elf: medium-dark skin tone", Version(5, 0),"üßùüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man elf: dark skin tone", Version(5, 0),"üßùüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman elf", Version(5, 0),"üßù‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman elf: light skin tone", Version(5, 0),"üßùüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman elf: medium-light skin tone", Version(5, 0),"üßùüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman elf: medium skin tone", Version(5, 0),"üßùüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman elf: medium-dark skin tone", Version(5, 0),"üßùüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman elf: dark skin tone", Version(5, 0),"üßùüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="fairy üßö"]#[doc=""]#[doc="Since E5.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FAIRY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FAIRY); // üßö (`U+1F9DA`)"] #[doc="# assert_eq!(FAIRY.to_string().as_str(), \"üßö\");"]#[doc="println!(\"{}\", FAIRY.tone(Tone::Light)); // üßöüèª (`U+1F9DA U+1F3FB`)"] #[doc="# assert_eq!(FAIRY.tone(Tone::Light).to_string().as_str(), \"üßöüèª\");"]#[doc="println!(\"{}\", FAIRY.tone(Tone::MediumLight)); // üßöüèº (`U+1F9DA U+1F3FC`)"] #[doc="# assert_eq!(FAIRY.tone(Tone::MediumLight).to_string().as_str(), \"üßöüèº\");"]#[doc="println!(\"{}\", FAIRY.tone(Tone::Medium)); // üßöüèΩ (`U+1F9DA U+1F3FD`)"] #[doc="# assert_eq!(FAIRY.tone(Tone::Medium).to_string().as_str(), \"üßöüèΩ\");"]#[doc="println!(\"{}\", FAIRY.tone(Tone::MediumDark)); // üßöüèæ (`U+1F9DA U+1F3FE`)"] #[doc="# assert_eq!(FAIRY.tone(Tone::MediumDark).to_string().as_str(), \"üßöüèæ\");"]#[doc="println!(\"{}\", FAIRY.tone(Tone::Dark)); // üßöüèø (`U+1F9DA U+1F3FF`)"] #[doc="# assert_eq!(FAIRY.tone(Tone::Dark).to_string().as_str(), \"üßöüèø\");"]#[doc="println!(\"{}\", FAIRY.gender(Gender::Male)); // üßö‚Äç‚ôÇÔ∏è (`U+1F9DA U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(FAIRY.gender(Gender::Male).to_string().as_str(), \"üßö‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", FAIRY.gender(Gender::Male).tone(Tone::Light)); // üßöüèª‚Äç‚ôÇÔ∏è (`U+1F9DA U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(FAIRY.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üßöüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", FAIRY.gender(Gender::Male).tone(Tone::MediumLight)); // üßöüèº‚Äç‚ôÇÔ∏è (`U+1F9DA U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(FAIRY.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üßöüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", FAIRY.gender(Gender::Male).tone(Tone::Medium)); // üßöüèΩ‚Äç‚ôÇÔ∏è (`U+1F9DA U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(FAIRY.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üßöüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", FAIRY.gender(Gender::Male).tone(Tone::MediumDark)); // üßöüèæ‚Äç‚ôÇÔ∏è (`U+1F9DA U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(FAIRY.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üßöüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", FAIRY.gender(Gender::Male).tone(Tone::Dark)); // üßöüèø‚Äç‚ôÇÔ∏è (`U+1F9DA U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(FAIRY.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üßöüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", FAIRY.gender(Gender::Female)); // üßö‚Äç‚ôÄÔ∏è (`U+1F9DA U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(FAIRY.gender(Gender::Female).to_string().as_str(), \"üßö‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", FAIRY.gender(Gender::Female).tone(Tone::Light)); // üßöüèª‚Äç‚ôÄÔ∏è (`U+1F9DA U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(FAIRY.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üßöüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", FAIRY.gender(Gender::Female).tone(Tone::MediumLight)); // üßöüèº‚Äç‚ôÄÔ∏è (`U+1F9DA U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(FAIRY.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üßöüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", FAIRY.gender(Gender::Female).tone(Tone::Medium)); // üßöüèΩ‚Äç‚ôÄÔ∏è (`U+1F9DA U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(FAIRY.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üßöüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", FAIRY.gender(Gender::Female).tone(Tone::MediumDark)); // üßöüèæ‚Äç‚ôÄÔ∏è (`U+1F9DA U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(FAIRY.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üßöüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", FAIRY.gender(Gender::Female).tone(Tone::Dark)); // üßöüèø‚Äç‚ôÄÔ∏è (`U+1F9DA U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(FAIRY.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üßöüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static FAIRY: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("fairy", Version(5, 0),"üßö"), 
	&[
		Emoji::new("fairy: light skin tone", Version(5, 0),"üßöüèª"),
	Emoji::new("fairy: medium-light skin tone", Version(5, 0),"üßöüèº"),
	Emoji::new("fairy: medium skin tone", Version(5, 0),"üßöüèΩ"),
	Emoji::new("fairy: medium-dark skin tone", Version(5, 0),"üßöüèæ"),
	Emoji::new("fairy: dark skin tone", Version(5, 0),"üßöüèø"),
	]), 
	&[
		With::new(Emoji::new("man fairy", Version(5, 0),"üßö‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man fairy: light skin tone", Version(5, 0),"üßöüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man fairy: medium-light skin tone", Version(5, 0),"üßöüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man fairy: medium skin tone", Version(5, 0),"üßöüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man fairy: medium-dark skin tone", Version(5, 0),"üßöüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man fairy: dark skin tone", Version(5, 0),"üßöüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman fairy", Version(5, 0),"üßö‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman fairy: light skin tone", Version(5, 0),"üßöüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman fairy: medium-light skin tone", Version(5, 0),"üßöüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman fairy: medium skin tone", Version(5, 0),"üßöüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman fairy: medium-dark skin tone", Version(5, 0),"üßöüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman fairy: dark skin tone", Version(5, 0),"üßöüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person genie üßû"]#[doc=""]#[doc="Since E5.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GENIE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GENIE); // üßû (`U+1F9DE`)"] #[doc="# assert_eq!(GENIE.to_string().as_str(), \"üßû\");"]#[doc="println!(\"{}\", GENIE.gender(Gender::Male)); // üßû‚Äç‚ôÇÔ∏è (`U+1F9DE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(GENIE.gender(Gender::Male).to_string().as_str(), \"üßû‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", GENIE.gender(Gender::Female)); // üßû‚Äç‚ôÄÔ∏è (`U+1F9DE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(GENIE.gender(Gender::Female).to_string().as_str(), \"üßû‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static GENIE: With<Gender,Emoji> = With::new(Emoji::new("genie", Version(5, 0),"üßû"), 
	&[
		Emoji::new("man genie", Version(5, 0),"üßû‚Äç‚ôÇÔ∏è"),
	Emoji::new("woman genie", Version(5, 0),"üßû‚Äç‚ôÄÔ∏è"),
	]);

		
		#[doc="mage üßô"]#[doc=""]#[doc="Since E5.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MAGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MAGE); // üßô (`U+1F9D9`)"] #[doc="# assert_eq!(MAGE.to_string().as_str(), \"üßô\");"]#[doc="println!(\"{}\", MAGE.tone(Tone::Light)); // üßôüèª (`U+1F9D9 U+1F3FB`)"] #[doc="# assert_eq!(MAGE.tone(Tone::Light).to_string().as_str(), \"üßôüèª\");"]#[doc="println!(\"{}\", MAGE.tone(Tone::MediumLight)); // üßôüèº (`U+1F9D9 U+1F3FC`)"] #[doc="# assert_eq!(MAGE.tone(Tone::MediumLight).to_string().as_str(), \"üßôüèº\");"]#[doc="println!(\"{}\", MAGE.tone(Tone::Medium)); // üßôüèΩ (`U+1F9D9 U+1F3FD`)"] #[doc="# assert_eq!(MAGE.tone(Tone::Medium).to_string().as_str(), \"üßôüèΩ\");"]#[doc="println!(\"{}\", MAGE.tone(Tone::MediumDark)); // üßôüèæ (`U+1F9D9 U+1F3FE`)"] #[doc="# assert_eq!(MAGE.tone(Tone::MediumDark).to_string().as_str(), \"üßôüèæ\");"]#[doc="println!(\"{}\", MAGE.tone(Tone::Dark)); // üßôüèø (`U+1F9D9 U+1F3FF`)"] #[doc="# assert_eq!(MAGE.tone(Tone::Dark).to_string().as_str(), \"üßôüèø\");"]#[doc="println!(\"{}\", MAGE.gender(Gender::Male)); // üßô‚Äç‚ôÇÔ∏è (`U+1F9D9 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(MAGE.gender(Gender::Male).to_string().as_str(), \"üßô‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", MAGE.gender(Gender::Male).tone(Tone::Light)); // üßôüèª‚Äç‚ôÇÔ∏è (`U+1F9D9 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(MAGE.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üßôüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", MAGE.gender(Gender::Male).tone(Tone::MediumLight)); // üßôüèº‚Äç‚ôÇÔ∏è (`U+1F9D9 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(MAGE.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üßôüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", MAGE.gender(Gender::Male).tone(Tone::Medium)); // üßôüèΩ‚Äç‚ôÇÔ∏è (`U+1F9D9 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(MAGE.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üßôüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", MAGE.gender(Gender::Male).tone(Tone::MediumDark)); // üßôüèæ‚Äç‚ôÇÔ∏è (`U+1F9D9 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(MAGE.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üßôüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", MAGE.gender(Gender::Male).tone(Tone::Dark)); // üßôüèø‚Äç‚ôÇÔ∏è (`U+1F9D9 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(MAGE.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üßôüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", MAGE.gender(Gender::Female)); // üßô‚Äç‚ôÄÔ∏è (`U+1F9D9 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(MAGE.gender(Gender::Female).to_string().as_str(), \"üßô‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", MAGE.gender(Gender::Female).tone(Tone::Light)); // üßôüèª‚Äç‚ôÄÔ∏è (`U+1F9D9 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(MAGE.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üßôüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", MAGE.gender(Gender::Female).tone(Tone::MediumLight)); // üßôüèº‚Äç‚ôÄÔ∏è (`U+1F9D9 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(MAGE.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üßôüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", MAGE.gender(Gender::Female).tone(Tone::Medium)); // üßôüèΩ‚Äç‚ôÄÔ∏è (`U+1F9D9 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(MAGE.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üßôüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", MAGE.gender(Gender::Female).tone(Tone::MediumDark)); // üßôüèæ‚Äç‚ôÄÔ∏è (`U+1F9D9 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(MAGE.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üßôüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", MAGE.gender(Gender::Female).tone(Tone::Dark)); // üßôüèø‚Äç‚ôÄÔ∏è (`U+1F9D9 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(MAGE.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üßôüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static MAGE: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("mage", Version(5, 0),"üßô"), 
	&[
		Emoji::new("mage: light skin tone", Version(5, 0),"üßôüèª"),
	Emoji::new("mage: medium-light skin tone", Version(5, 0),"üßôüèº"),
	Emoji::new("mage: medium skin tone", Version(5, 0),"üßôüèΩ"),
	Emoji::new("mage: medium-dark skin tone", Version(5, 0),"üßôüèæ"),
	Emoji::new("mage: dark skin tone", Version(5, 0),"üßôüèø"),
	]), 
	&[
		With::new(Emoji::new("man mage", Version(5, 0),"üßô‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man mage: light skin tone", Version(5, 0),"üßôüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man mage: medium-light skin tone", Version(5, 0),"üßôüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man mage: medium skin tone", Version(5, 0),"üßôüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man mage: medium-dark skin tone", Version(5, 0),"üßôüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man mage: dark skin tone", Version(5, 0),"üßôüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman mage", Version(5, 0),"üßô‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman mage: light skin tone", Version(5, 0),"üßôüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman mage: medium-light skin tone", Version(5, 0),"üßôüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman mage: medium skin tone", Version(5, 0),"üßôüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman mage: medium-dark skin tone", Version(5, 0),"üßôüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman mage: dark skin tone", Version(5, 0),"üßôüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="mermaid üßú‚Äç‚ôÄÔ∏è"]#[doc=""]#[doc="Since E5.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MERMAID;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MERMAID); // üßú‚Äç‚ôÄÔ∏è (`U+1F9DC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(MERMAID.to_string().as_str(), \"üßú‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", MERMAID.tone(Tone::Light)); // üßúüèª‚Äç‚ôÄÔ∏è (`U+1F9DC U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(MERMAID.tone(Tone::Light).to_string().as_str(), \"üßúüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", MERMAID.tone(Tone::MediumLight)); // üßúüèº‚Äç‚ôÄÔ∏è (`U+1F9DC U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(MERMAID.tone(Tone::MediumLight).to_string().as_str(), \"üßúüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", MERMAID.tone(Tone::Medium)); // üßúüèΩ‚Äç‚ôÄÔ∏è (`U+1F9DC U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(MERMAID.tone(Tone::Medium).to_string().as_str(), \"üßúüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", MERMAID.tone(Tone::MediumDark)); // üßúüèæ‚Äç‚ôÄÔ∏è (`U+1F9DC U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(MERMAID.tone(Tone::MediumDark).to_string().as_str(), \"üßúüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", MERMAID.tone(Tone::Dark)); // üßúüèø‚Äç‚ôÄÔ∏è (`U+1F9DC U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(MERMAID.tone(Tone::Dark).to_string().as_str(), \"üßúüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static MERMAID: With<Tone,Emoji> = With::new(Emoji::new("mermaid", Version(5, 0),"üßú‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("mermaid: light skin tone", Version(5, 0),"üßúüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("mermaid: medium-light skin tone", Version(5, 0),"üßúüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("mermaid: medium skin tone", Version(5, 0),"üßúüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("mermaid: medium-dark skin tone", Version(5, 0),"üßúüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("mermaid: dark skin tone", Version(5, 0),"üßúüèø‚Äç‚ôÄÔ∏è"),
	]);

		
		#[doc="merman üßú‚Äç‚ôÇÔ∏è"]#[doc=""]#[doc="Since E5.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MERMAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MERMAN); // üßú‚Äç‚ôÇÔ∏è (`U+1F9DC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(MERMAN.to_string().as_str(), \"üßú‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", MERMAN.tone(Tone::Light)); // üßúüèª‚Äç‚ôÇÔ∏è (`U+1F9DC U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(MERMAN.tone(Tone::Light).to_string().as_str(), \"üßúüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", MERMAN.tone(Tone::MediumLight)); // üßúüèº‚Äç‚ôÇÔ∏è (`U+1F9DC U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(MERMAN.tone(Tone::MediumLight).to_string().as_str(), \"üßúüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", MERMAN.tone(Tone::Medium)); // üßúüèΩ‚Äç‚ôÇÔ∏è (`U+1F9DC U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(MERMAN.tone(Tone::Medium).to_string().as_str(), \"üßúüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", MERMAN.tone(Tone::MediumDark)); // üßúüèæ‚Äç‚ôÇÔ∏è (`U+1F9DC U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(MERMAN.tone(Tone::MediumDark).to_string().as_str(), \"üßúüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", MERMAN.tone(Tone::Dark)); // üßúüèø‚Äç‚ôÇÔ∏è (`U+1F9DC U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(MERMAN.tone(Tone::Dark).to_string().as_str(), \"üßúüèø‚Äç‚ôÇÔ∏è\");"]
#[doc="```"]
pub static MERMAN: With<Tone,Emoji> = With::new(Emoji::new("merman", Version(5, 0),"üßú‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("merman: light skin tone", Version(5, 0),"üßúüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("merman: medium-light skin tone", Version(5, 0),"üßúüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("merman: medium skin tone", Version(5, 0),"üßúüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("merman: medium-dark skin tone", Version(5, 0),"üßúüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("merman: dark skin tone", Version(5, 0),"üßúüèø‚Äç‚ôÇÔ∏è"),
	]);

		
		#[doc="merperson üßú"]#[doc=""]#[doc="Since E5.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MERPERSON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MERPERSON); // üßú (`U+1F9DC`)"] #[doc="# assert_eq!(MERPERSON.to_string().as_str(), \"üßú\");"]#[doc="println!(\"{}\", MERPERSON.tone(Tone::Light)); // üßúüèª (`U+1F9DC U+1F3FB`)"] #[doc="# assert_eq!(MERPERSON.tone(Tone::Light).to_string().as_str(), \"üßúüèª\");"]#[doc="println!(\"{}\", MERPERSON.tone(Tone::MediumLight)); // üßúüèº (`U+1F9DC U+1F3FC`)"] #[doc="# assert_eq!(MERPERSON.tone(Tone::MediumLight).to_string().as_str(), \"üßúüèº\");"]#[doc="println!(\"{}\", MERPERSON.tone(Tone::Medium)); // üßúüèΩ (`U+1F9DC U+1F3FD`)"] #[doc="# assert_eq!(MERPERSON.tone(Tone::Medium).to_string().as_str(), \"üßúüèΩ\");"]#[doc="println!(\"{}\", MERPERSON.tone(Tone::MediumDark)); // üßúüèæ (`U+1F9DC U+1F3FE`)"] #[doc="# assert_eq!(MERPERSON.tone(Tone::MediumDark).to_string().as_str(), \"üßúüèæ\");"]#[doc="println!(\"{}\", MERPERSON.tone(Tone::Dark)); // üßúüèø (`U+1F9DC U+1F3FF`)"] #[doc="# assert_eq!(MERPERSON.tone(Tone::Dark).to_string().as_str(), \"üßúüèø\");"]
#[doc="```"]
pub static MERPERSON: With<Tone,Emoji> = With::new(Emoji::new("merperson", Version(5, 0),"üßú"), 
	&[
		Emoji::new("merperson: light skin tone", Version(5, 0),"üßúüèª"),
	Emoji::new("merperson: medium-light skin tone", Version(5, 0),"üßúüèº"),
	Emoji::new("merperson: medium skin tone", Version(5, 0),"üßúüèΩ"),
	Emoji::new("merperson: medium-dark skin tone", Version(5, 0),"üßúüèæ"),
	Emoji::new("merperson: dark skin tone", Version(5, 0),"üßúüèø"),
	]);

		
		#[doc="Mrs. Claus ü§∂"]#[doc=""]#[doc="Since E3.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MRS_CLAUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MRS_CLAUS); // ü§∂ (`U+1F936`)"] #[doc="# assert_eq!(MRS_CLAUS.to_string().as_str(), \"ü§∂\");"]#[doc="println!(\"{}\", MRS_CLAUS.tone(Tone::Light)); // ü§∂üèª (`U+1F936 U+1F3FB`)"] #[doc="# assert_eq!(MRS_CLAUS.tone(Tone::Light).to_string().as_str(), \"ü§∂üèª\");"]#[doc="println!(\"{}\", MRS_CLAUS.tone(Tone::MediumLight)); // ü§∂üèº (`U+1F936 U+1F3FC`)"] #[doc="# assert_eq!(MRS_CLAUS.tone(Tone::MediumLight).to_string().as_str(), \"ü§∂üèº\");"]#[doc="println!(\"{}\", MRS_CLAUS.tone(Tone::Medium)); // ü§∂üèΩ (`U+1F936 U+1F3FD`)"] #[doc="# assert_eq!(MRS_CLAUS.tone(Tone::Medium).to_string().as_str(), \"ü§∂üèΩ\");"]#[doc="println!(\"{}\", MRS_CLAUS.tone(Tone::MediumDark)); // ü§∂üèæ (`U+1F936 U+1F3FE`)"] #[doc="# assert_eq!(MRS_CLAUS.tone(Tone::MediumDark).to_string().as_str(), \"ü§∂üèæ\");"]#[doc="println!(\"{}\", MRS_CLAUS.tone(Tone::Dark)); // ü§∂üèø (`U+1F936 U+1F3FF`)"] #[doc="# assert_eq!(MRS_CLAUS.tone(Tone::Dark).to_string().as_str(), \"ü§∂üèø\");"]
#[doc="```"]
pub static MRS_CLAUS: With<Tone,Emoji> = With::new(Emoji::new("Mrs. Claus", Version(3, 0),"ü§∂"), 
	&[
		Emoji::new("Mrs. Claus: light skin tone", Version(3, 0),"ü§∂üèª"),
	Emoji::new("Mrs. Claus: medium-light skin tone", Version(3, 0),"ü§∂üèº"),
	Emoji::new("Mrs. Claus: medium skin tone", Version(3, 0),"ü§∂üèΩ"),
	Emoji::new("Mrs. Claus: medium-dark skin tone", Version(3, 0),"ü§∂üèæ"),
	Emoji::new("Mrs. Claus: dark skin tone", Version(3, 0),"ü§∂üèø"),
	]);

		
		#[doc="mx claus üßë‚ÄçüéÑ"]#[doc=""]#[doc="Since E13.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MX_CLAUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MX_CLAUS); // üßë‚ÄçüéÑ (`U+1F9D1 U+200D U+1F384`)"] #[doc="# assert_eq!(MX_CLAUS.to_string().as_str(), \"üßë‚ÄçüéÑ\");"]#[doc="println!(\"{}\", MX_CLAUS.tone(Tone::Light)); // üßëüèª‚ÄçüéÑ (`U+1F9D1 U+1F3FB U+200D U+1F384`)"] #[doc="# assert_eq!(MX_CLAUS.tone(Tone::Light).to_string().as_str(), \"üßëüèª‚ÄçüéÑ\");"]#[doc="println!(\"{}\", MX_CLAUS.tone(Tone::MediumLight)); // üßëüèº‚ÄçüéÑ (`U+1F9D1 U+1F3FC U+200D U+1F384`)"] #[doc="# assert_eq!(MX_CLAUS.tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº‚ÄçüéÑ\");"]#[doc="println!(\"{}\", MX_CLAUS.tone(Tone::Medium)); // üßëüèΩ‚ÄçüéÑ (`U+1F9D1 U+1F3FD U+200D U+1F384`)"] #[doc="# assert_eq!(MX_CLAUS.tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ‚ÄçüéÑ\");"]#[doc="println!(\"{}\", MX_CLAUS.tone(Tone::MediumDark)); // üßëüèæ‚ÄçüéÑ (`U+1F9D1 U+1F3FE U+200D U+1F384`)"] #[doc="# assert_eq!(MX_CLAUS.tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ‚ÄçüéÑ\");"]#[doc="println!(\"{}\", MX_CLAUS.tone(Tone::Dark)); // üßëüèø‚ÄçüéÑ (`U+1F9D1 U+1F3FF U+200D U+1F384`)"] #[doc="# assert_eq!(MX_CLAUS.tone(Tone::Dark).to_string().as_str(), \"üßëüèø‚ÄçüéÑ\");"]
#[doc="```"]
pub static MX_CLAUS: With<Tone,Emoji> = With::new(Emoji::new("mx claus", Version(13, 0),"üßë‚ÄçüéÑ"), 
	&[
		Emoji::new("mx claus: light skin tone", Version(13, 0),"üßëüèª‚ÄçüéÑ"),
	Emoji::new("mx claus: medium-light skin tone", Version(13, 0),"üßëüèº‚ÄçüéÑ"),
	Emoji::new("mx claus: medium skin tone", Version(13, 0),"üßëüèΩ‚ÄçüéÑ"),
	Emoji::new("mx claus: medium-dark skin tone", Version(13, 0),"üßëüèæ‚ÄçüéÑ"),
	Emoji::new("mx claus: dark skin tone", Version(13, 0),"üßëüèø‚ÄçüéÑ"),
	]);

		
		#[doc="Santa Claus üéÖ"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SANTA_CLAUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SANTA_CLAUS); // üéÖ (`U+1F385`)"] #[doc="# assert_eq!(SANTA_CLAUS.to_string().as_str(), \"üéÖ\");"]#[doc="println!(\"{}\", SANTA_CLAUS.tone(Tone::Light)); // üéÖüèª (`U+1F385 U+1F3FB`)"] #[doc="# assert_eq!(SANTA_CLAUS.tone(Tone::Light).to_string().as_str(), \"üéÖüèª\");"]#[doc="println!(\"{}\", SANTA_CLAUS.tone(Tone::MediumLight)); // üéÖüèº (`U+1F385 U+1F3FC`)"] #[doc="# assert_eq!(SANTA_CLAUS.tone(Tone::MediumLight).to_string().as_str(), \"üéÖüèº\");"]#[doc="println!(\"{}\", SANTA_CLAUS.tone(Tone::Medium)); // üéÖüèΩ (`U+1F385 U+1F3FD`)"] #[doc="# assert_eq!(SANTA_CLAUS.tone(Tone::Medium).to_string().as_str(), \"üéÖüèΩ\");"]#[doc="println!(\"{}\", SANTA_CLAUS.tone(Tone::MediumDark)); // üéÖüèæ (`U+1F385 U+1F3FE`)"] #[doc="# assert_eq!(SANTA_CLAUS.tone(Tone::MediumDark).to_string().as_str(), \"üéÖüèæ\");"]#[doc="println!(\"{}\", SANTA_CLAUS.tone(Tone::Dark)); // üéÖüèø (`U+1F385 U+1F3FF`)"] #[doc="# assert_eq!(SANTA_CLAUS.tone(Tone::Dark).to_string().as_str(), \"üéÖüèø\");"]
#[doc="```"]
pub static SANTA_CLAUS: With<Tone,Emoji> = With::new(Emoji::new("Santa Claus", Version(0, 6),"üéÖ"), 
	&[
		Emoji::new("Santa Claus: light skin tone", Version(1, 0),"üéÖüèª"),
	Emoji::new("Santa Claus: medium-light skin tone", Version(1, 0),"üéÖüèº"),
	Emoji::new("Santa Claus: medium skin tone", Version(1, 0),"üéÖüèΩ"),
	Emoji::new("Santa Claus: medium-dark skin tone", Version(1, 0),"üéÖüèæ"),
	Emoji::new("Santa Claus: dark skin tone", Version(1, 0),"üéÖüèø"),
	]);

		
		#[doc="superhero ü¶∏"]#[doc=""]#[doc="Since E11.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUPERHERO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUPERHERO); // ü¶∏ (`U+1F9B8`)"] #[doc="# assert_eq!(SUPERHERO.to_string().as_str(), \"ü¶∏\");"]#[doc="println!(\"{}\", SUPERHERO.tone(Tone::Light)); // ü¶∏üèª (`U+1F9B8 U+1F3FB`)"] #[doc="# assert_eq!(SUPERHERO.tone(Tone::Light).to_string().as_str(), \"ü¶∏üèª\");"]#[doc="println!(\"{}\", SUPERHERO.tone(Tone::MediumLight)); // ü¶∏üèº (`U+1F9B8 U+1F3FC`)"] #[doc="# assert_eq!(SUPERHERO.tone(Tone::MediumLight).to_string().as_str(), \"ü¶∏üèº\");"]#[doc="println!(\"{}\", SUPERHERO.tone(Tone::Medium)); // ü¶∏üèΩ (`U+1F9B8 U+1F3FD`)"] #[doc="# assert_eq!(SUPERHERO.tone(Tone::Medium).to_string().as_str(), \"ü¶∏üèΩ\");"]#[doc="println!(\"{}\", SUPERHERO.tone(Tone::MediumDark)); // ü¶∏üèæ (`U+1F9B8 U+1F3FE`)"] #[doc="# assert_eq!(SUPERHERO.tone(Tone::MediumDark).to_string().as_str(), \"ü¶∏üèæ\");"]#[doc="println!(\"{}\", SUPERHERO.tone(Tone::Dark)); // ü¶∏üèø (`U+1F9B8 U+1F3FF`)"] #[doc="# assert_eq!(SUPERHERO.tone(Tone::Dark).to_string().as_str(), \"ü¶∏üèø\");"]#[doc="println!(\"{}\", SUPERHERO.gender(Gender::Male)); // ü¶∏‚Äç‚ôÇÔ∏è (`U+1F9B8 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(SUPERHERO.gender(Gender::Male).to_string().as_str(), \"ü¶∏‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", SUPERHERO.gender(Gender::Male).tone(Tone::Light)); // ü¶∏üèª‚Äç‚ôÇÔ∏è (`U+1F9B8 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(SUPERHERO.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"ü¶∏üèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", SUPERHERO.gender(Gender::Male).tone(Tone::MediumLight)); // ü¶∏üèº‚Äç‚ôÇÔ∏è (`U+1F9B8 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(SUPERHERO.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"ü¶∏üèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", SUPERHERO.gender(Gender::Male).tone(Tone::Medium)); // ü¶∏üèΩ‚Äç‚ôÇÔ∏è (`U+1F9B8 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(SUPERHERO.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"ü¶∏üèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", SUPERHERO.gender(Gender::Male).tone(Tone::MediumDark)); // ü¶∏üèæ‚Äç‚ôÇÔ∏è (`U+1F9B8 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(SUPERHERO.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"ü¶∏üèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", SUPERHERO.gender(Gender::Male).tone(Tone::Dark)); // ü¶∏üèø‚Äç‚ôÇÔ∏è (`U+1F9B8 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(SUPERHERO.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"ü¶∏üèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", SUPERHERO.gender(Gender::Female)); // ü¶∏‚Äç‚ôÄÔ∏è (`U+1F9B8 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(SUPERHERO.gender(Gender::Female).to_string().as_str(), \"ü¶∏‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", SUPERHERO.gender(Gender::Female).tone(Tone::Light)); // ü¶∏üèª‚Äç‚ôÄÔ∏è (`U+1F9B8 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(SUPERHERO.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"ü¶∏üèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", SUPERHERO.gender(Gender::Female).tone(Tone::MediumLight)); // ü¶∏üèº‚Äç‚ôÄÔ∏è (`U+1F9B8 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(SUPERHERO.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"ü¶∏üèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", SUPERHERO.gender(Gender::Female).tone(Tone::Medium)); // ü¶∏üèΩ‚Äç‚ôÄÔ∏è (`U+1F9B8 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(SUPERHERO.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"ü¶∏üèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", SUPERHERO.gender(Gender::Female).tone(Tone::MediumDark)); // ü¶∏üèæ‚Äç‚ôÄÔ∏è (`U+1F9B8 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(SUPERHERO.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"ü¶∏üèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", SUPERHERO.gender(Gender::Female).tone(Tone::Dark)); // ü¶∏üèø‚Äç‚ôÄÔ∏è (`U+1F9B8 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(SUPERHERO.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"ü¶∏üèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static SUPERHERO: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("superhero", Version(11, 0),"ü¶∏"), 
	&[
		Emoji::new("superhero: light skin tone", Version(11, 0),"ü¶∏üèª"),
	Emoji::new("superhero: medium-light skin tone", Version(11, 0),"ü¶∏üèº"),
	Emoji::new("superhero: medium skin tone", Version(11, 0),"ü¶∏üèΩ"),
	Emoji::new("superhero: medium-dark skin tone", Version(11, 0),"ü¶∏üèæ"),
	Emoji::new("superhero: dark skin tone", Version(11, 0),"ü¶∏üèø"),
	]), 
	&[
		With::new(Emoji::new("man superhero", Version(11, 0),"ü¶∏‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man superhero: light skin tone", Version(11, 0),"ü¶∏üèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man superhero: medium-light skin tone", Version(11, 0),"ü¶∏üèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man superhero: medium skin tone", Version(11, 0),"ü¶∏üèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man superhero: medium-dark skin tone", Version(11, 0),"ü¶∏üèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man superhero: dark skin tone", Version(11, 0),"ü¶∏üèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman superhero", Version(11, 0),"ü¶∏‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman superhero: light skin tone", Version(11, 0),"ü¶∏üèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman superhero: medium-light skin tone", Version(11, 0),"ü¶∏üèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman superhero: medium skin tone", Version(11, 0),"ü¶∏üèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman superhero: medium-dark skin tone", Version(11, 0),"ü¶∏üèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman superhero: dark skin tone", Version(11, 0),"ü¶∏üèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="supervillain ü¶π"]#[doc=""]#[doc="Since E11.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUPERVILLAIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUPERVILLAIN); // ü¶π (`U+1F9B9`)"] #[doc="# assert_eq!(SUPERVILLAIN.to_string().as_str(), \"ü¶π\");"]#[doc="println!(\"{}\", SUPERVILLAIN.tone(Tone::Light)); // ü¶πüèª (`U+1F9B9 U+1F3FB`)"] #[doc="# assert_eq!(SUPERVILLAIN.tone(Tone::Light).to_string().as_str(), \"ü¶πüèª\");"]#[doc="println!(\"{}\", SUPERVILLAIN.tone(Tone::MediumLight)); // ü¶πüèº (`U+1F9B9 U+1F3FC`)"] #[doc="# assert_eq!(SUPERVILLAIN.tone(Tone::MediumLight).to_string().as_str(), \"ü¶πüèº\");"]#[doc="println!(\"{}\", SUPERVILLAIN.tone(Tone::Medium)); // ü¶πüèΩ (`U+1F9B9 U+1F3FD`)"] #[doc="# assert_eq!(SUPERVILLAIN.tone(Tone::Medium).to_string().as_str(), \"ü¶πüèΩ\");"]#[doc="println!(\"{}\", SUPERVILLAIN.tone(Tone::MediumDark)); // ü¶πüèæ (`U+1F9B9 U+1F3FE`)"] #[doc="# assert_eq!(SUPERVILLAIN.tone(Tone::MediumDark).to_string().as_str(), \"ü¶πüèæ\");"]#[doc="println!(\"{}\", SUPERVILLAIN.tone(Tone::Dark)); // ü¶πüèø (`U+1F9B9 U+1F3FF`)"] #[doc="# assert_eq!(SUPERVILLAIN.tone(Tone::Dark).to_string().as_str(), \"ü¶πüèø\");"]#[doc="println!(\"{}\", SUPERVILLAIN.gender(Gender::Male)); // ü¶π‚Äç‚ôÇÔ∏è (`U+1F9B9 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(SUPERVILLAIN.gender(Gender::Male).to_string().as_str(), \"ü¶π‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", SUPERVILLAIN.gender(Gender::Male).tone(Tone::Light)); // ü¶πüèª‚Äç‚ôÇÔ∏è (`U+1F9B9 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(SUPERVILLAIN.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"ü¶πüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", SUPERVILLAIN.gender(Gender::Male).tone(Tone::MediumLight)); // ü¶πüèº‚Äç‚ôÇÔ∏è (`U+1F9B9 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(SUPERVILLAIN.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"ü¶πüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", SUPERVILLAIN.gender(Gender::Male).tone(Tone::Medium)); // ü¶πüèΩ‚Äç‚ôÇÔ∏è (`U+1F9B9 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(SUPERVILLAIN.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"ü¶πüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", SUPERVILLAIN.gender(Gender::Male).tone(Tone::MediumDark)); // ü¶πüèæ‚Äç‚ôÇÔ∏è (`U+1F9B9 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(SUPERVILLAIN.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"ü¶πüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", SUPERVILLAIN.gender(Gender::Male).tone(Tone::Dark)); // ü¶πüèø‚Äç‚ôÇÔ∏è (`U+1F9B9 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(SUPERVILLAIN.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"ü¶πüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", SUPERVILLAIN.gender(Gender::Female)); // ü¶π‚Äç‚ôÄÔ∏è (`U+1F9B9 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(SUPERVILLAIN.gender(Gender::Female).to_string().as_str(), \"ü¶π‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", SUPERVILLAIN.gender(Gender::Female).tone(Tone::Light)); // ü¶πüèª‚Äç‚ôÄÔ∏è (`U+1F9B9 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(SUPERVILLAIN.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"ü¶πüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", SUPERVILLAIN.gender(Gender::Female).tone(Tone::MediumLight)); // ü¶πüèº‚Äç‚ôÄÔ∏è (`U+1F9B9 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(SUPERVILLAIN.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"ü¶πüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", SUPERVILLAIN.gender(Gender::Female).tone(Tone::Medium)); // ü¶πüèΩ‚Äç‚ôÄÔ∏è (`U+1F9B9 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(SUPERVILLAIN.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"ü¶πüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", SUPERVILLAIN.gender(Gender::Female).tone(Tone::MediumDark)); // ü¶πüèæ‚Äç‚ôÄÔ∏è (`U+1F9B9 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(SUPERVILLAIN.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"ü¶πüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", SUPERVILLAIN.gender(Gender::Female).tone(Tone::Dark)); // ü¶πüèø‚Äç‚ôÄÔ∏è (`U+1F9B9 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(SUPERVILLAIN.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"ü¶πüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static SUPERVILLAIN: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("supervillain", Version(11, 0),"ü¶π"), 
	&[
		Emoji::new("supervillain: light skin tone", Version(11, 0),"ü¶πüèª"),
	Emoji::new("supervillain: medium-light skin tone", Version(11, 0),"ü¶πüèº"),
	Emoji::new("supervillain: medium skin tone", Version(11, 0),"ü¶πüèΩ"),
	Emoji::new("supervillain: medium-dark skin tone", Version(11, 0),"ü¶πüèæ"),
	Emoji::new("supervillain: dark skin tone", Version(11, 0),"ü¶πüèø"),
	]), 
	&[
		With::new(Emoji::new("man supervillain", Version(11, 0),"ü¶π‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man supervillain: light skin tone", Version(11, 0),"ü¶πüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man supervillain: medium-light skin tone", Version(11, 0),"ü¶πüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man supervillain: medium skin tone", Version(11, 0),"ü¶πüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man supervillain: medium-dark skin tone", Version(11, 0),"ü¶πüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man supervillain: dark skin tone", Version(11, 0),"ü¶πüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman supervillain", Version(11, 0),"ü¶π‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman supervillain: light skin tone", Version(11, 0),"ü¶πüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman supervillain: medium-light skin tone", Version(11, 0),"ü¶πüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman supervillain: medium skin tone", Version(11, 0),"ü¶πüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman supervillain: medium-dark skin tone", Version(11, 0),"ü¶πüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman supervillain: dark skin tone", Version(11, 0),"ü¶πüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="vampire üßõ"]#[doc=""]#[doc="Since E5.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::VAMPIRE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", VAMPIRE); // üßõ (`U+1F9DB`)"] #[doc="# assert_eq!(VAMPIRE.to_string().as_str(), \"üßõ\");"]#[doc="println!(\"{}\", VAMPIRE.tone(Tone::Light)); // üßõüèª (`U+1F9DB U+1F3FB`)"] #[doc="# assert_eq!(VAMPIRE.tone(Tone::Light).to_string().as_str(), \"üßõüèª\");"]#[doc="println!(\"{}\", VAMPIRE.tone(Tone::MediumLight)); // üßõüèº (`U+1F9DB U+1F3FC`)"] #[doc="# assert_eq!(VAMPIRE.tone(Tone::MediumLight).to_string().as_str(), \"üßõüèº\");"]#[doc="println!(\"{}\", VAMPIRE.tone(Tone::Medium)); // üßõüèΩ (`U+1F9DB U+1F3FD`)"] #[doc="# assert_eq!(VAMPIRE.tone(Tone::Medium).to_string().as_str(), \"üßõüèΩ\");"]#[doc="println!(\"{}\", VAMPIRE.tone(Tone::MediumDark)); // üßõüèæ (`U+1F9DB U+1F3FE`)"] #[doc="# assert_eq!(VAMPIRE.tone(Tone::MediumDark).to_string().as_str(), \"üßõüèæ\");"]#[doc="println!(\"{}\", VAMPIRE.tone(Tone::Dark)); // üßõüèø (`U+1F9DB U+1F3FF`)"] #[doc="# assert_eq!(VAMPIRE.tone(Tone::Dark).to_string().as_str(), \"üßõüèø\");"]#[doc="println!(\"{}\", VAMPIRE.gender(Gender::Male)); // üßõ‚Äç‚ôÇÔ∏è (`U+1F9DB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(VAMPIRE.gender(Gender::Male).to_string().as_str(), \"üßõ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", VAMPIRE.gender(Gender::Male).tone(Tone::Light)); // üßõüèª‚Äç‚ôÇÔ∏è (`U+1F9DB U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(VAMPIRE.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üßõüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", VAMPIRE.gender(Gender::Male).tone(Tone::MediumLight)); // üßõüèº‚Äç‚ôÇÔ∏è (`U+1F9DB U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(VAMPIRE.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üßõüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", VAMPIRE.gender(Gender::Male).tone(Tone::Medium)); // üßõüèΩ‚Äç‚ôÇÔ∏è (`U+1F9DB U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(VAMPIRE.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üßõüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", VAMPIRE.gender(Gender::Male).tone(Tone::MediumDark)); // üßõüèæ‚Äç‚ôÇÔ∏è (`U+1F9DB U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(VAMPIRE.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üßõüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", VAMPIRE.gender(Gender::Male).tone(Tone::Dark)); // üßõüèø‚Äç‚ôÇÔ∏è (`U+1F9DB U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(VAMPIRE.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üßõüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", VAMPIRE.gender(Gender::Female)); // üßõ‚Äç‚ôÄÔ∏è (`U+1F9DB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(VAMPIRE.gender(Gender::Female).to_string().as_str(), \"üßõ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", VAMPIRE.gender(Gender::Female).tone(Tone::Light)); // üßõüèª‚Äç‚ôÄÔ∏è (`U+1F9DB U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(VAMPIRE.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üßõüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", VAMPIRE.gender(Gender::Female).tone(Tone::MediumLight)); // üßõüèº‚Äç‚ôÄÔ∏è (`U+1F9DB U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(VAMPIRE.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üßõüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", VAMPIRE.gender(Gender::Female).tone(Tone::Medium)); // üßõüèΩ‚Äç‚ôÄÔ∏è (`U+1F9DB U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(VAMPIRE.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üßõüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", VAMPIRE.gender(Gender::Female).tone(Tone::MediumDark)); // üßõüèæ‚Äç‚ôÄÔ∏è (`U+1F9DB U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(VAMPIRE.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üßõüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", VAMPIRE.gender(Gender::Female).tone(Tone::Dark)); // üßõüèø‚Äç‚ôÄÔ∏è (`U+1F9DB U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(VAMPIRE.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üßõüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static VAMPIRE: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("vampire", Version(5, 0),"üßõ"), 
	&[
		Emoji::new("vampire: light skin tone", Version(5, 0),"üßõüèª"),
	Emoji::new("vampire: medium-light skin tone", Version(5, 0),"üßõüèº"),
	Emoji::new("vampire: medium skin tone", Version(5, 0),"üßõüèΩ"),
	Emoji::new("vampire: medium-dark skin tone", Version(5, 0),"üßõüèæ"),
	Emoji::new("vampire: dark skin tone", Version(5, 0),"üßõüèø"),
	]), 
	&[
		With::new(Emoji::new("man vampire", Version(5, 0),"üßõ‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man vampire: light skin tone", Version(5, 0),"üßõüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man vampire: medium-light skin tone", Version(5, 0),"üßõüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man vampire: medium skin tone", Version(5, 0),"üßõüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man vampire: medium-dark skin tone", Version(5, 0),"üßõüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man vampire: dark skin tone", Version(5, 0),"üßõüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman vampire", Version(5, 0),"üßõ‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman vampire: light skin tone", Version(5, 0),"üßõüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman vampire: medium-light skin tone", Version(5, 0),"üßõüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman vampire: medium skin tone", Version(5, 0),"üßõüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman vampire: medium-dark skin tone", Version(5, 0),"üßõüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman vampire: dark skin tone", Version(5, 0),"üßõüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person zombie üßü"]#[doc=""]#[doc="Since E5.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ZOMBIE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ZOMBIE); // üßü (`U+1F9DF`)"] #[doc="# assert_eq!(ZOMBIE.to_string().as_str(), \"üßü\");"]#[doc="println!(\"{}\", ZOMBIE.gender(Gender::Male)); // üßü‚Äç‚ôÇÔ∏è (`U+1F9DF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(ZOMBIE.gender(Gender::Male).to_string().as_str(), \"üßü‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", ZOMBIE.gender(Gender::Female)); // üßü‚Äç‚ôÄÔ∏è (`U+1F9DF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(ZOMBIE.gender(Gender::Female).to_string().as_str(), \"üßü‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static ZOMBIE: With<Gender,Emoji> = With::new(Emoji::new("zombie", Version(5, 0),"üßü"), 
	&[
		Emoji::new("man zombie", Version(5, 0),"üßü‚Äç‚ôÇÔ∏è"),
	Emoji::new("woman zombie", Version(5, 0),"üßü‚Äç‚ôÄÔ∏è"),
	]);

		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BABY_ANGEL
				
				&BABY_ANGEL.default,
				
				&BABY_ANGEL.tone(Tone::Light),
				
				&BABY_ANGEL.tone(Tone::MediumLight),
				
				&BABY_ANGEL.tone(Tone::Medium),
				
				&BABY_ANGEL.tone(Tone::MediumDark),
				
				&BABY_ANGEL.tone(Tone::Dark),
				
			],
			
			&[ // ELF
				
				&ELF.default.default,
				
				&ELF.default.tone(Tone::Light),
				
				&ELF.default.tone(Tone::MediumLight),
				
				&ELF.default.tone(Tone::Medium),
				
				&ELF.default.tone(Tone::MediumDark),
				
				&ELF.default.tone(Tone::Dark),
				
				&ELF.gender(Gender::Male).default,
				
				&ELF.gender(Gender::Male).tone(Tone::Light),
				
				&ELF.gender(Gender::Male).tone(Tone::MediumLight),
				
				&ELF.gender(Gender::Male).tone(Tone::Medium),
				
				&ELF.gender(Gender::Male).tone(Tone::MediumDark),
				
				&ELF.gender(Gender::Male).tone(Tone::Dark),
				
				&ELF.gender(Gender::Female).default,
				
				&ELF.gender(Gender::Female).tone(Tone::Light),
				
				&ELF.gender(Gender::Female).tone(Tone::MediumLight),
				
				&ELF.gender(Gender::Female).tone(Tone::Medium),
				
				&ELF.gender(Gender::Female).tone(Tone::MediumDark),
				
				&ELF.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // FAIRY
				
				&FAIRY.default.default,
				
				&FAIRY.default.tone(Tone::Light),
				
				&FAIRY.default.tone(Tone::MediumLight),
				
				&FAIRY.default.tone(Tone::Medium),
				
				&FAIRY.default.tone(Tone::MediumDark),
				
				&FAIRY.default.tone(Tone::Dark),
				
				&FAIRY.gender(Gender::Male).default,
				
				&FAIRY.gender(Gender::Male).tone(Tone::Light),
				
				&FAIRY.gender(Gender::Male).tone(Tone::MediumLight),
				
				&FAIRY.gender(Gender::Male).tone(Tone::Medium),
				
				&FAIRY.gender(Gender::Male).tone(Tone::MediumDark),
				
				&FAIRY.gender(Gender::Male).tone(Tone::Dark),
				
				&FAIRY.gender(Gender::Female).default,
				
				&FAIRY.gender(Gender::Female).tone(Tone::Light),
				
				&FAIRY.gender(Gender::Female).tone(Tone::MediumLight),
				
				&FAIRY.gender(Gender::Female).tone(Tone::Medium),
				
				&FAIRY.gender(Gender::Female).tone(Tone::MediumDark),
				
				&FAIRY.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // GENIE
				
				&GENIE.default,
				
				&GENIE.gender(Gender::Male),
				
				&GENIE.gender(Gender::Female),
				
			],
			
			&[ // MAGE
				
				&MAGE.default.default,
				
				&MAGE.default.tone(Tone::Light),
				
				&MAGE.default.tone(Tone::MediumLight),
				
				&MAGE.default.tone(Tone::Medium),
				
				&MAGE.default.tone(Tone::MediumDark),
				
				&MAGE.default.tone(Tone::Dark),
				
				&MAGE.gender(Gender::Male).default,
				
				&MAGE.gender(Gender::Male).tone(Tone::Light),
				
				&MAGE.gender(Gender::Male).tone(Tone::MediumLight),
				
				&MAGE.gender(Gender::Male).tone(Tone::Medium),
				
				&MAGE.gender(Gender::Male).tone(Tone::MediumDark),
				
				&MAGE.gender(Gender::Male).tone(Tone::Dark),
				
				&MAGE.gender(Gender::Female).default,
				
				&MAGE.gender(Gender::Female).tone(Tone::Light),
				
				&MAGE.gender(Gender::Female).tone(Tone::MediumLight),
				
				&MAGE.gender(Gender::Female).tone(Tone::Medium),
				
				&MAGE.gender(Gender::Female).tone(Tone::MediumDark),
				
				&MAGE.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // MERMAID
				
				&MERMAID.default,
				
				&MERMAID.tone(Tone::Light),
				
				&MERMAID.tone(Tone::MediumLight),
				
				&MERMAID.tone(Tone::Medium),
				
				&MERMAID.tone(Tone::MediumDark),
				
				&MERMAID.tone(Tone::Dark),
				
			],
			
			&[ // MERMAN
				
				&MERMAN.default,
				
				&MERMAN.tone(Tone::Light),
				
				&MERMAN.tone(Tone::MediumLight),
				
				&MERMAN.tone(Tone::Medium),
				
				&MERMAN.tone(Tone::MediumDark),
				
				&MERMAN.tone(Tone::Dark),
				
			],
			
			&[ // MERPERSON
				
				&MERPERSON.default,
				
				&MERPERSON.tone(Tone::Light),
				
				&MERPERSON.tone(Tone::MediumLight),
				
				&MERPERSON.tone(Tone::Medium),
				
				&MERPERSON.tone(Tone::MediumDark),
				
				&MERPERSON.tone(Tone::Dark),
				
			],
			
			&[ // MRS_CLAUS
				
				&MRS_CLAUS.default,
				
				&MRS_CLAUS.tone(Tone::Light),
				
				&MRS_CLAUS.tone(Tone::MediumLight),
				
				&MRS_CLAUS.tone(Tone::Medium),
				
				&MRS_CLAUS.tone(Tone::MediumDark),
				
				&MRS_CLAUS.tone(Tone::Dark),
				
			],
			
			&[ // MX_CLAUS
				
				&MX_CLAUS.default,
				
				&MX_CLAUS.tone(Tone::Light),
				
				&MX_CLAUS.tone(Tone::MediumLight),
				
				&MX_CLAUS.tone(Tone::Medium),
				
				&MX_CLAUS.tone(Tone::MediumDark),
				
				&MX_CLAUS.tone(Tone::Dark),
				
			],
			
			&[ // SANTA_CLAUS
				
				&SANTA_CLAUS.default,
				
				&SANTA_CLAUS.tone(Tone::Light),
				
				&SANTA_CLAUS.tone(Tone::MediumLight),
				
				&SANTA_CLAUS.tone(Tone::Medium),
				
				&SANTA_CLAUS.tone(Tone::MediumDark),
				
				&SANTA_CLAUS.tone(Tone::Dark),
				
			],
			
			&[ // SUPERHERO
				
				&SUPERHERO.default.default,
				
				&SUPERHERO.default.tone(Tone::Light),
				
				&SUPERHERO.default.tone(Tone::MediumLight),
				
				&SUPERHERO.default.tone(Tone::Medium),
				
				&SUPERHERO.default.tone(Tone::MediumDark),
				
				&SUPERHERO.default.tone(Tone::Dark),
				
				&SUPERHERO.gender(Gender::Male).default,
				
				&SUPERHERO.gender(Gender::Male).tone(Tone::Light),
				
				&SUPERHERO.gender(Gender::Male).tone(Tone::MediumLight),
				
				&SUPERHERO.gender(Gender::Male).tone(Tone::Medium),
				
				&SUPERHERO.gender(Gender::Male).tone(Tone::MediumDark),
				
				&SUPERHERO.gender(Gender::Male).tone(Tone::Dark),
				
				&SUPERHERO.gender(Gender::Female).default,
				
				&SUPERHERO.gender(Gender::Female).tone(Tone::Light),
				
				&SUPERHERO.gender(Gender::Female).tone(Tone::MediumLight),
				
				&SUPERHERO.gender(Gender::Female).tone(Tone::Medium),
				
				&SUPERHERO.gender(Gender::Female).tone(Tone::MediumDark),
				
				&SUPERHERO.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // SUPERVILLAIN
				
				&SUPERVILLAIN.default.default,
				
				&SUPERVILLAIN.default.tone(Tone::Light),
				
				&SUPERVILLAIN.default.tone(Tone::MediumLight),
				
				&SUPERVILLAIN.default.tone(Tone::Medium),
				
				&SUPERVILLAIN.default.tone(Tone::MediumDark),
				
				&SUPERVILLAIN.default.tone(Tone::Dark),
				
				&SUPERVILLAIN.gender(Gender::Male).default,
				
				&SUPERVILLAIN.gender(Gender::Male).tone(Tone::Light),
				
				&SUPERVILLAIN.gender(Gender::Male).tone(Tone::MediumLight),
				
				&SUPERVILLAIN.gender(Gender::Male).tone(Tone::Medium),
				
				&SUPERVILLAIN.gender(Gender::Male).tone(Tone::MediumDark),
				
				&SUPERVILLAIN.gender(Gender::Male).tone(Tone::Dark),
				
				&SUPERVILLAIN.gender(Gender::Female).default,
				
				&SUPERVILLAIN.gender(Gender::Female).tone(Tone::Light),
				
				&SUPERVILLAIN.gender(Gender::Female).tone(Tone::MediumLight),
				
				&SUPERVILLAIN.gender(Gender::Female).tone(Tone::Medium),
				
				&SUPERVILLAIN.gender(Gender::Female).tone(Tone::MediumDark),
				
				&SUPERVILLAIN.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // VAMPIRE
				
				&VAMPIRE.default.default,
				
				&VAMPIRE.default.tone(Tone::Light),
				
				&VAMPIRE.default.tone(Tone::MediumLight),
				
				&VAMPIRE.default.tone(Tone::Medium),
				
				&VAMPIRE.default.tone(Tone::MediumDark),
				
				&VAMPIRE.default.tone(Tone::Dark),
				
				&VAMPIRE.gender(Gender::Male).default,
				
				&VAMPIRE.gender(Gender::Male).tone(Tone::Light),
				
				&VAMPIRE.gender(Gender::Male).tone(Tone::MediumLight),
				
				&VAMPIRE.gender(Gender::Male).tone(Tone::Medium),
				
				&VAMPIRE.gender(Gender::Male).tone(Tone::MediumDark),
				
				&VAMPIRE.gender(Gender::Male).tone(Tone::Dark),
				
				&VAMPIRE.gender(Gender::Female).default,
				
				&VAMPIRE.gender(Gender::Female).tone(Tone::Light),
				
				&VAMPIRE.gender(Gender::Female).tone(Tone::MediumLight),
				
				&VAMPIRE.gender(Gender::Female).tone(Tone::Medium),
				
				&VAMPIRE.gender(Gender::Female).tone(Tone::MediumDark),
				
				&VAMPIRE.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // ZOMBIE
				
				&ZOMBIE.default,
				
				&ZOMBIE.gender(Gender::Male),
				
				&ZOMBIE.gender(Gender::Female),
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BABY_ANGEL.default, // BABY_ANGEL
				
			
				
				&ELF.default.default, // ELF
				
			
				
				&FAIRY.default.default, // FAIRY
				
			
				
				&GENIE.default, // GENIE
				
			
				
				&MAGE.default.default, // MAGE
				
			
				
				&MERMAID.default, // MERMAID
				
			
				
				&MERMAN.default, // MERMAN
				
			
				
				&MERPERSON.default, // MERPERSON
				
			
				
				&MRS_CLAUS.default, // MRS_CLAUS
				
			
				
				&MX_CLAUS.default, // MX_CLAUS
				
			
				
				&SANTA_CLAUS.default, // SANTA_CLAUS
				
			
				
				&SUPERHERO.default.default, // SUPERHERO
				
			
				
				&SUPERVILLAIN.default.default, // SUPERVILLAIN
				
			
				
				&VAMPIRE.default.default, // VAMPIRE
				
			
				
				&ZOMBIE.default, // ZOMBIE
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // person_fantasy
	
	/// person_gesture üßèüôáü§¶
	pub mod person_gesture {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="deaf person üßè"]#[doc=""]#[doc="Since E12.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DEAF_PERSON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DEAF_PERSON); // üßè (`U+1F9CF`)"] #[doc="# assert_eq!(DEAF_PERSON.to_string().as_str(), \"üßè\");"]#[doc="println!(\"{}\", DEAF_PERSON.tone(Tone::Light)); // üßèüèª (`U+1F9CF U+1F3FB`)"] #[doc="# assert_eq!(DEAF_PERSON.tone(Tone::Light).to_string().as_str(), \"üßèüèª\");"]#[doc="println!(\"{}\", DEAF_PERSON.tone(Tone::MediumLight)); // üßèüèº (`U+1F9CF U+1F3FC`)"] #[doc="# assert_eq!(DEAF_PERSON.tone(Tone::MediumLight).to_string().as_str(), \"üßèüèº\");"]#[doc="println!(\"{}\", DEAF_PERSON.tone(Tone::Medium)); // üßèüèΩ (`U+1F9CF U+1F3FD`)"] #[doc="# assert_eq!(DEAF_PERSON.tone(Tone::Medium).to_string().as_str(), \"üßèüèΩ\");"]#[doc="println!(\"{}\", DEAF_PERSON.tone(Tone::MediumDark)); // üßèüèæ (`U+1F9CF U+1F3FE`)"] #[doc="# assert_eq!(DEAF_PERSON.tone(Tone::MediumDark).to_string().as_str(), \"üßèüèæ\");"]#[doc="println!(\"{}\", DEAF_PERSON.tone(Tone::Dark)); // üßèüèø (`U+1F9CF U+1F3FF`)"] #[doc="# assert_eq!(DEAF_PERSON.tone(Tone::Dark).to_string().as_str(), \"üßèüèø\");"]#[doc="println!(\"{}\", DEAF_PERSON.gender(Gender::Male)); // üßè‚Äç‚ôÇÔ∏è (`U+1F9CF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(DEAF_PERSON.gender(Gender::Male).to_string().as_str(), \"üßè‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", DEAF_PERSON.gender(Gender::Male).tone(Tone::Light)); // üßèüèª‚Äç‚ôÇÔ∏è (`U+1F9CF U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(DEAF_PERSON.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üßèüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", DEAF_PERSON.gender(Gender::Male).tone(Tone::MediumLight)); // üßèüèº‚Äç‚ôÇÔ∏è (`U+1F9CF U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(DEAF_PERSON.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üßèüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", DEAF_PERSON.gender(Gender::Male).tone(Tone::Medium)); // üßèüèΩ‚Äç‚ôÇÔ∏è (`U+1F9CF U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(DEAF_PERSON.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üßèüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", DEAF_PERSON.gender(Gender::Male).tone(Tone::MediumDark)); // üßèüèæ‚Äç‚ôÇÔ∏è (`U+1F9CF U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(DEAF_PERSON.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üßèüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", DEAF_PERSON.gender(Gender::Male).tone(Tone::Dark)); // üßèüèø‚Äç‚ôÇÔ∏è (`U+1F9CF U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(DEAF_PERSON.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üßèüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", DEAF_PERSON.gender(Gender::Female)); // üßè‚Äç‚ôÄÔ∏è (`U+1F9CF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(DEAF_PERSON.gender(Gender::Female).to_string().as_str(), \"üßè‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", DEAF_PERSON.gender(Gender::Female).tone(Tone::Light)); // üßèüèª‚Äç‚ôÄÔ∏è (`U+1F9CF U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(DEAF_PERSON.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üßèüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", DEAF_PERSON.gender(Gender::Female).tone(Tone::MediumLight)); // üßèüèº‚Äç‚ôÄÔ∏è (`U+1F9CF U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(DEAF_PERSON.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üßèüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", DEAF_PERSON.gender(Gender::Female).tone(Tone::Medium)); // üßèüèΩ‚Äç‚ôÄÔ∏è (`U+1F9CF U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(DEAF_PERSON.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üßèüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", DEAF_PERSON.gender(Gender::Female).tone(Tone::MediumDark)); // üßèüèæ‚Äç‚ôÄÔ∏è (`U+1F9CF U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(DEAF_PERSON.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üßèüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", DEAF_PERSON.gender(Gender::Female).tone(Tone::Dark)); // üßèüèø‚Äç‚ôÄÔ∏è (`U+1F9CF U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(DEAF_PERSON.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üßèüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static DEAF_PERSON: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("deaf person", Version(12, 0),"üßè"), 
	&[
		Emoji::new("deaf person: light skin tone", Version(12, 0),"üßèüèª"),
	Emoji::new("deaf person: medium-light skin tone", Version(12, 0),"üßèüèº"),
	Emoji::new("deaf person: medium skin tone", Version(12, 0),"üßèüèΩ"),
	Emoji::new("deaf person: medium-dark skin tone", Version(12, 0),"üßèüèæ"),
	Emoji::new("deaf person: dark skin tone", Version(12, 0),"üßèüèø"),
	]), 
	&[
		With::new(Emoji::new("deaf man", Version(12, 0),"üßè‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("deaf man: light skin tone", Version(12, 0),"üßèüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("deaf man: medium-light skin tone", Version(12, 0),"üßèüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("deaf man: medium skin tone", Version(12, 0),"üßèüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("deaf man: medium-dark skin tone", Version(12, 0),"üßèüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("deaf man: dark skin tone", Version(12, 0),"üßèüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("deaf woman", Version(12, 0),"üßè‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("deaf woman: light skin tone", Version(12, 0),"üßèüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("deaf woman: medium-light skin tone", Version(12, 0),"üßèüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("deaf woman: medium skin tone", Version(12, 0),"üßèüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("deaf woman: medium-dark skin tone", Version(12, 0),"üßèüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("deaf woman: dark skin tone", Version(12, 0),"üßèüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person bowing üôá"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_BOWING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_BOWING); // üôá (`U+1F647`)"] #[doc="# assert_eq!(PERSON_BOWING.to_string().as_str(), \"üôá\");"]#[doc="println!(\"{}\", PERSON_BOWING.tone(Tone::Light)); // üôáüèª (`U+1F647 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_BOWING.tone(Tone::Light).to_string().as_str(), \"üôáüèª\");"]#[doc="println!(\"{}\", PERSON_BOWING.tone(Tone::MediumLight)); // üôáüèº (`U+1F647 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_BOWING.tone(Tone::MediumLight).to_string().as_str(), \"üôáüèº\");"]#[doc="println!(\"{}\", PERSON_BOWING.tone(Tone::Medium)); // üôáüèΩ (`U+1F647 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_BOWING.tone(Tone::Medium).to_string().as_str(), \"üôáüèΩ\");"]#[doc="println!(\"{}\", PERSON_BOWING.tone(Tone::MediumDark)); // üôáüèæ (`U+1F647 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_BOWING.tone(Tone::MediumDark).to_string().as_str(), \"üôáüèæ\");"]#[doc="println!(\"{}\", PERSON_BOWING.tone(Tone::Dark)); // üôáüèø (`U+1F647 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_BOWING.tone(Tone::Dark).to_string().as_str(), \"üôáüèø\");"]#[doc="println!(\"{}\", PERSON_BOWING.gender(Gender::Male)); // üôá‚Äç‚ôÇÔ∏è (`U+1F647 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOWING.gender(Gender::Male).to_string().as_str(), \"üôá‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BOWING.gender(Gender::Male).tone(Tone::Light)); // üôáüèª‚Äç‚ôÇÔ∏è (`U+1F647 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOWING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üôáüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BOWING.gender(Gender::Male).tone(Tone::MediumLight)); // üôáüèº‚Äç‚ôÇÔ∏è (`U+1F647 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOWING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üôáüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BOWING.gender(Gender::Male).tone(Tone::Medium)); // üôáüèΩ‚Äç‚ôÇÔ∏è (`U+1F647 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOWING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üôáüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BOWING.gender(Gender::Male).tone(Tone::MediumDark)); // üôáüèæ‚Äç‚ôÇÔ∏è (`U+1F647 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOWING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üôáüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BOWING.gender(Gender::Male).tone(Tone::Dark)); // üôáüèø‚Äç‚ôÇÔ∏è (`U+1F647 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOWING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üôáüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BOWING.gender(Gender::Female)); // üôá‚Äç‚ôÄÔ∏è (`U+1F647 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOWING.gender(Gender::Female).to_string().as_str(), \"üôá‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BOWING.gender(Gender::Female).tone(Tone::Light)); // üôáüèª‚Äç‚ôÄÔ∏è (`U+1F647 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOWING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üôáüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BOWING.gender(Gender::Female).tone(Tone::MediumLight)); // üôáüèº‚Äç‚ôÄÔ∏è (`U+1F647 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOWING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üôáüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BOWING.gender(Gender::Female).tone(Tone::Medium)); // üôáüèΩ‚Äç‚ôÄÔ∏è (`U+1F647 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOWING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üôáüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BOWING.gender(Gender::Female).tone(Tone::MediumDark)); // üôáüèæ‚Äç‚ôÄÔ∏è (`U+1F647 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOWING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üôáüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BOWING.gender(Gender::Female).tone(Tone::Dark)); // üôáüèø‚Äç‚ôÄÔ∏è (`U+1F647 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOWING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üôáüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_BOWING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person bowing", Version(0, 6),"üôá"), 
	&[
		Emoji::new("person bowing: light skin tone", Version(1, 0),"üôáüèª"),
	Emoji::new("person bowing: medium-light skin tone", Version(1, 0),"üôáüèº"),
	Emoji::new("person bowing: medium skin tone", Version(1, 0),"üôáüèΩ"),
	Emoji::new("person bowing: medium-dark skin tone", Version(1, 0),"üôáüèæ"),
	Emoji::new("person bowing: dark skin tone", Version(1, 0),"üôáüèø"),
	]), 
	&[
		With::new(Emoji::new("man bowing", Version(4, 0),"üôá‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man bowing: light skin tone", Version(4, 0),"üôáüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man bowing: medium-light skin tone", Version(4, 0),"üôáüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man bowing: medium skin tone", Version(4, 0),"üôáüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man bowing: medium-dark skin tone", Version(4, 0),"üôáüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man bowing: dark skin tone", Version(4, 0),"üôáüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman bowing", Version(4, 0),"üôá‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman bowing: light skin tone", Version(4, 0),"üôáüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman bowing: medium-light skin tone", Version(4, 0),"üôáüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman bowing: medium skin tone", Version(4, 0),"üôáüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman bowing: medium-dark skin tone", Version(4, 0),"üôáüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman bowing: dark skin tone", Version(4, 0),"üôáüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person facepalming ü§¶"]#[doc=""]#[doc="Since E3.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_FACEPALMING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_FACEPALMING); // ü§¶ (`U+1F926`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.to_string().as_str(), \"ü§¶\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.tone(Tone::Light)); // ü§¶üèª (`U+1F926 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.tone(Tone::Light).to_string().as_str(), \"ü§¶üèª\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.tone(Tone::MediumLight)); // ü§¶üèº (`U+1F926 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.tone(Tone::MediumLight).to_string().as_str(), \"ü§¶üèº\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.tone(Tone::Medium)); // ü§¶üèΩ (`U+1F926 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.tone(Tone::Medium).to_string().as_str(), \"ü§¶üèΩ\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.tone(Tone::MediumDark)); // ü§¶üèæ (`U+1F926 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.tone(Tone::MediumDark).to_string().as_str(), \"ü§¶üèæ\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.tone(Tone::Dark)); // ü§¶üèø (`U+1F926 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.tone(Tone::Dark).to_string().as_str(), \"ü§¶üèø\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.gender(Gender::Male)); // ü§¶‚Äç‚ôÇÔ∏è (`U+1F926 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.gender(Gender::Male).to_string().as_str(), \"ü§¶‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::Light)); // ü§¶üèª‚Äç‚ôÇÔ∏è (`U+1F926 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"ü§¶üèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::MediumLight)); // ü§¶üèº‚Äç‚ôÇÔ∏è (`U+1F926 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"ü§¶üèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::Medium)); // ü§¶üèΩ‚Äç‚ôÇÔ∏è (`U+1F926 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"ü§¶üèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::MediumDark)); // ü§¶üèæ‚Äç‚ôÇÔ∏è (`U+1F926 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"ü§¶üèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::Dark)); // ü§¶üèø‚Äç‚ôÇÔ∏è (`U+1F926 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"ü§¶üèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.gender(Gender::Female)); // ü§¶‚Äç‚ôÄÔ∏è (`U+1F926 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.gender(Gender::Female).to_string().as_str(), \"ü§¶‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::Light)); // ü§¶üèª‚Äç‚ôÄÔ∏è (`U+1F926 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"ü§¶üèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::MediumLight)); // ü§¶üèº‚Äç‚ôÄÔ∏è (`U+1F926 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"ü§¶üèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::Medium)); // ü§¶üèΩ‚Äç‚ôÄÔ∏è (`U+1F926 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"ü§¶üèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::MediumDark)); // ü§¶üèæ‚Äç‚ôÄÔ∏è (`U+1F926 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"ü§¶üèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::Dark)); // ü§¶üèø‚Äç‚ôÄÔ∏è (`U+1F926 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"ü§¶üèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_FACEPALMING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person facepalming", Version(3, 0),"ü§¶"), 
	&[
		Emoji::new("person facepalming: light skin tone", Version(3, 0),"ü§¶üèª"),
	Emoji::new("person facepalming: medium-light skin tone", Version(3, 0),"ü§¶üèº"),
	Emoji::new("person facepalming: medium skin tone", Version(3, 0),"ü§¶üèΩ"),
	Emoji::new("person facepalming: medium-dark skin tone", Version(3, 0),"ü§¶üèæ"),
	Emoji::new("person facepalming: dark skin tone", Version(3, 0),"ü§¶üèø"),
	]), 
	&[
		With::new(Emoji::new("man facepalming", Version(4, 0),"ü§¶‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man facepalming: light skin tone", Version(4, 0),"ü§¶üèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man facepalming: medium-light skin tone", Version(4, 0),"ü§¶üèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man facepalming: medium skin tone", Version(4, 0),"ü§¶üèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man facepalming: medium-dark skin tone", Version(4, 0),"ü§¶üèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man facepalming: dark skin tone", Version(4, 0),"ü§¶üèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman facepalming", Version(4, 0),"ü§¶‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman facepalming: light skin tone", Version(4, 0),"ü§¶üèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman facepalming: medium-light skin tone", Version(4, 0),"ü§¶üèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman facepalming: medium skin tone", Version(4, 0),"ü§¶üèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman facepalming: medium-dark skin tone", Version(4, 0),"ü§¶üèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman facepalming: dark skin tone", Version(4, 0),"ü§¶üèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person frowning üôç"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_FROWNING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_FROWNING); // üôç (`U+1F64D`)"] #[doc="# assert_eq!(PERSON_FROWNING.to_string().as_str(), \"üôç\");"]#[doc="println!(\"{}\", PERSON_FROWNING.tone(Tone::Light)); // üôçüèª (`U+1F64D U+1F3FB`)"] #[doc="# assert_eq!(PERSON_FROWNING.tone(Tone::Light).to_string().as_str(), \"üôçüèª\");"]#[doc="println!(\"{}\", PERSON_FROWNING.tone(Tone::MediumLight)); // üôçüèº (`U+1F64D U+1F3FC`)"] #[doc="# assert_eq!(PERSON_FROWNING.tone(Tone::MediumLight).to_string().as_str(), \"üôçüèº\");"]#[doc="println!(\"{}\", PERSON_FROWNING.tone(Tone::Medium)); // üôçüèΩ (`U+1F64D U+1F3FD`)"] #[doc="# assert_eq!(PERSON_FROWNING.tone(Tone::Medium).to_string().as_str(), \"üôçüèΩ\");"]#[doc="println!(\"{}\", PERSON_FROWNING.tone(Tone::MediumDark)); // üôçüèæ (`U+1F64D U+1F3FE`)"] #[doc="# assert_eq!(PERSON_FROWNING.tone(Tone::MediumDark).to_string().as_str(), \"üôçüèæ\");"]#[doc="println!(\"{}\", PERSON_FROWNING.tone(Tone::Dark)); // üôçüèø (`U+1F64D U+1F3FF`)"] #[doc="# assert_eq!(PERSON_FROWNING.tone(Tone::Dark).to_string().as_str(), \"üôçüèø\");"]#[doc="println!(\"{}\", PERSON_FROWNING.gender(Gender::Male)); // üôç‚Äç‚ôÇÔ∏è (`U+1F64D U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FROWNING.gender(Gender::Male).to_string().as_str(), \"üôç‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_FROWNING.gender(Gender::Male).tone(Tone::Light)); // üôçüèª‚Äç‚ôÇÔ∏è (`U+1F64D U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FROWNING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üôçüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_FROWNING.gender(Gender::Male).tone(Tone::MediumLight)); // üôçüèº‚Äç‚ôÇÔ∏è (`U+1F64D U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FROWNING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üôçüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_FROWNING.gender(Gender::Male).tone(Tone::Medium)); // üôçüèΩ‚Äç‚ôÇÔ∏è (`U+1F64D U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FROWNING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üôçüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_FROWNING.gender(Gender::Male).tone(Tone::MediumDark)); // üôçüèæ‚Äç‚ôÇÔ∏è (`U+1F64D U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FROWNING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üôçüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_FROWNING.gender(Gender::Male).tone(Tone::Dark)); // üôçüèø‚Äç‚ôÇÔ∏è (`U+1F64D U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FROWNING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üôçüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_FROWNING.gender(Gender::Female)); // üôç‚Äç‚ôÄÔ∏è (`U+1F64D U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FROWNING.gender(Gender::Female).to_string().as_str(), \"üôç‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_FROWNING.gender(Gender::Female).tone(Tone::Light)); // üôçüèª‚Äç‚ôÄÔ∏è (`U+1F64D U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FROWNING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üôçüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_FROWNING.gender(Gender::Female).tone(Tone::MediumLight)); // üôçüèº‚Äç‚ôÄÔ∏è (`U+1F64D U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FROWNING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üôçüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_FROWNING.gender(Gender::Female).tone(Tone::Medium)); // üôçüèΩ‚Äç‚ôÄÔ∏è (`U+1F64D U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FROWNING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üôçüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_FROWNING.gender(Gender::Female).tone(Tone::MediumDark)); // üôçüèæ‚Äç‚ôÄÔ∏è (`U+1F64D U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FROWNING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üôçüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_FROWNING.gender(Gender::Female).tone(Tone::Dark)); // üôçüèø‚Äç‚ôÄÔ∏è (`U+1F64D U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FROWNING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üôçüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_FROWNING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person frowning", Version(0, 6),"üôç"), 
	&[
		Emoji::new("person frowning: light skin tone", Version(1, 0),"üôçüèª"),
	Emoji::new("person frowning: medium-light skin tone", Version(1, 0),"üôçüèº"),
	Emoji::new("person frowning: medium skin tone", Version(1, 0),"üôçüèΩ"),
	Emoji::new("person frowning: medium-dark skin tone", Version(1, 0),"üôçüèæ"),
	Emoji::new("person frowning: dark skin tone", Version(1, 0),"üôçüèø"),
	]), 
	&[
		With::new(Emoji::new("man frowning", Version(4, 0),"üôç‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man frowning: light skin tone", Version(4, 0),"üôçüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man frowning: medium-light skin tone", Version(4, 0),"üôçüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man frowning: medium skin tone", Version(4, 0),"üôçüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man frowning: medium-dark skin tone", Version(4, 0),"üôçüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man frowning: dark skin tone", Version(4, 0),"üôçüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman frowning", Version(4, 0),"üôç‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman frowning: light skin tone", Version(4, 0),"üôçüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman frowning: medium-light skin tone", Version(4, 0),"üôçüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman frowning: medium skin tone", Version(4, 0),"üôçüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman frowning: medium-dark skin tone", Version(4, 0),"üôçüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman frowning: dark skin tone", Version(4, 0),"üôçüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person gesturing NO üôÖ"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_GESTURING_NO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_GESTURING_NO); // üôÖ (`U+1F645`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.to_string().as_str(), \"üôÖ\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.tone(Tone::Light)); // üôÖüèª (`U+1F645 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.tone(Tone::Light).to_string().as_str(), \"üôÖüèª\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.tone(Tone::MediumLight)); // üôÖüèº (`U+1F645 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.tone(Tone::MediumLight).to_string().as_str(), \"üôÖüèº\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.tone(Tone::Medium)); // üôÖüèΩ (`U+1F645 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.tone(Tone::Medium).to_string().as_str(), \"üôÖüèΩ\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.tone(Tone::MediumDark)); // üôÖüèæ (`U+1F645 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.tone(Tone::MediumDark).to_string().as_str(), \"üôÖüèæ\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.tone(Tone::Dark)); // üôÖüèø (`U+1F645 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.tone(Tone::Dark).to_string().as_str(), \"üôÖüèø\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.gender(Gender::Male)); // üôÖ‚Äç‚ôÇÔ∏è (`U+1F645 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.gender(Gender::Male).to_string().as_str(), \"üôÖ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::Light)); // üôÖüèª‚Äç‚ôÇÔ∏è (`U+1F645 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üôÖüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::MediumLight)); // üôÖüèº‚Äç‚ôÇÔ∏è (`U+1F645 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üôÖüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::Medium)); // üôÖüèΩ‚Äç‚ôÇÔ∏è (`U+1F645 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üôÖüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::MediumDark)); // üôÖüèæ‚Äç‚ôÇÔ∏è (`U+1F645 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üôÖüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::Dark)); // üôÖüèø‚Äç‚ôÇÔ∏è (`U+1F645 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üôÖüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.gender(Gender::Female)); // üôÖ‚Äç‚ôÄÔ∏è (`U+1F645 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.gender(Gender::Female).to_string().as_str(), \"üôÖ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::Light)); // üôÖüèª‚Äç‚ôÄÔ∏è (`U+1F645 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üôÖüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::MediumLight)); // üôÖüèº‚Äç‚ôÄÔ∏è (`U+1F645 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üôÖüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::Medium)); // üôÖüèΩ‚Äç‚ôÄÔ∏è (`U+1F645 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üôÖüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::MediumDark)); // üôÖüèæ‚Äç‚ôÄÔ∏è (`U+1F645 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üôÖüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::Dark)); // üôÖüèø‚Äç‚ôÄÔ∏è (`U+1F645 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üôÖüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_GESTURING_NO: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person gesturing NO", Version(0, 6),"üôÖ"), 
	&[
		Emoji::new("person gesturing NO: light skin tone", Version(1, 0),"üôÖüèª"),
	Emoji::new("person gesturing NO: medium-light skin tone", Version(1, 0),"üôÖüèº"),
	Emoji::new("person gesturing NO: medium skin tone", Version(1, 0),"üôÖüèΩ"),
	Emoji::new("person gesturing NO: medium-dark skin tone", Version(1, 0),"üôÖüèæ"),
	Emoji::new("person gesturing NO: dark skin tone", Version(1, 0),"üôÖüèø"),
	]), 
	&[
		With::new(Emoji::new("man gesturing NO", Version(4, 0),"üôÖ‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man gesturing NO: light skin tone", Version(4, 0),"üôÖüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man gesturing NO: medium-light skin tone", Version(4, 0),"üôÖüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man gesturing NO: medium skin tone", Version(4, 0),"üôÖüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man gesturing NO: medium-dark skin tone", Version(4, 0),"üôÖüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man gesturing NO: dark skin tone", Version(4, 0),"üôÖüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman gesturing NO", Version(4, 0),"üôÖ‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman gesturing NO: light skin tone", Version(4, 0),"üôÖüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman gesturing NO: medium-light skin tone", Version(4, 0),"üôÖüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman gesturing NO: medium skin tone", Version(4, 0),"üôÖüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman gesturing NO: medium-dark skin tone", Version(4, 0),"üôÖüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman gesturing NO: dark skin tone", Version(4, 0),"üôÖüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person gesturing OK üôÜ"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_GESTURING_OK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_GESTURING_OK); // üôÜ (`U+1F646`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.to_string().as_str(), \"üôÜ\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.tone(Tone::Light)); // üôÜüèª (`U+1F646 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.tone(Tone::Light).to_string().as_str(), \"üôÜüèª\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.tone(Tone::MediumLight)); // üôÜüèº (`U+1F646 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.tone(Tone::MediumLight).to_string().as_str(), \"üôÜüèº\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.tone(Tone::Medium)); // üôÜüèΩ (`U+1F646 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.tone(Tone::Medium).to_string().as_str(), \"üôÜüèΩ\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.tone(Tone::MediumDark)); // üôÜüèæ (`U+1F646 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.tone(Tone::MediumDark).to_string().as_str(), \"üôÜüèæ\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.tone(Tone::Dark)); // üôÜüèø (`U+1F646 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.tone(Tone::Dark).to_string().as_str(), \"üôÜüèø\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.gender(Gender::Male)); // üôÜ‚Äç‚ôÇÔ∏è (`U+1F646 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.gender(Gender::Male).to_string().as_str(), \"üôÜ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::Light)); // üôÜüèª‚Äç‚ôÇÔ∏è (`U+1F646 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üôÜüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::MediumLight)); // üôÜüèº‚Äç‚ôÇÔ∏è (`U+1F646 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üôÜüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::Medium)); // üôÜüèΩ‚Äç‚ôÇÔ∏è (`U+1F646 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üôÜüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::MediumDark)); // üôÜüèæ‚Äç‚ôÇÔ∏è (`U+1F646 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üôÜüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::Dark)); // üôÜüèø‚Äç‚ôÇÔ∏è (`U+1F646 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üôÜüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.gender(Gender::Female)); // üôÜ‚Äç‚ôÄÔ∏è (`U+1F646 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.gender(Gender::Female).to_string().as_str(), \"üôÜ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::Light)); // üôÜüèª‚Äç‚ôÄÔ∏è (`U+1F646 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üôÜüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::MediumLight)); // üôÜüèº‚Äç‚ôÄÔ∏è (`U+1F646 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üôÜüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::Medium)); // üôÜüèΩ‚Äç‚ôÄÔ∏è (`U+1F646 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üôÜüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::MediumDark)); // üôÜüèæ‚Äç‚ôÄÔ∏è (`U+1F646 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üôÜüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::Dark)); // üôÜüèø‚Äç‚ôÄÔ∏è (`U+1F646 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üôÜüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_GESTURING_OK: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person gesturing OK", Version(0, 6),"üôÜ"), 
	&[
		Emoji::new("person gesturing OK: light skin tone", Version(1, 0),"üôÜüèª"),
	Emoji::new("person gesturing OK: medium-light skin tone", Version(1, 0),"üôÜüèº"),
	Emoji::new("person gesturing OK: medium skin tone", Version(1, 0),"üôÜüèΩ"),
	Emoji::new("person gesturing OK: medium-dark skin tone", Version(1, 0),"üôÜüèæ"),
	Emoji::new("person gesturing OK: dark skin tone", Version(1, 0),"üôÜüèø"),
	]), 
	&[
		With::new(Emoji::new("man gesturing OK", Version(4, 0),"üôÜ‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man gesturing OK: light skin tone", Version(4, 0),"üôÜüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man gesturing OK: medium-light skin tone", Version(4, 0),"üôÜüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man gesturing OK: medium skin tone", Version(4, 0),"üôÜüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man gesturing OK: medium-dark skin tone", Version(4, 0),"üôÜüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man gesturing OK: dark skin tone", Version(4, 0),"üôÜüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman gesturing OK", Version(4, 0),"üôÜ‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman gesturing OK: light skin tone", Version(4, 0),"üôÜüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman gesturing OK: medium-light skin tone", Version(4, 0),"üôÜüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman gesturing OK: medium skin tone", Version(4, 0),"üôÜüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman gesturing OK: medium-dark skin tone", Version(4, 0),"üôÜüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman gesturing OK: dark skin tone", Version(4, 0),"üôÜüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person pouting üôé"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_POUTING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_POUTING); // üôé (`U+1F64E`)"] #[doc="# assert_eq!(PERSON_POUTING.to_string().as_str(), \"üôé\");"]#[doc="println!(\"{}\", PERSON_POUTING.tone(Tone::Light)); // üôéüèª (`U+1F64E U+1F3FB`)"] #[doc="# assert_eq!(PERSON_POUTING.tone(Tone::Light).to_string().as_str(), \"üôéüèª\");"]#[doc="println!(\"{}\", PERSON_POUTING.tone(Tone::MediumLight)); // üôéüèº (`U+1F64E U+1F3FC`)"] #[doc="# assert_eq!(PERSON_POUTING.tone(Tone::MediumLight).to_string().as_str(), \"üôéüèº\");"]#[doc="println!(\"{}\", PERSON_POUTING.tone(Tone::Medium)); // üôéüèΩ (`U+1F64E U+1F3FD`)"] #[doc="# assert_eq!(PERSON_POUTING.tone(Tone::Medium).to_string().as_str(), \"üôéüèΩ\");"]#[doc="println!(\"{}\", PERSON_POUTING.tone(Tone::MediumDark)); // üôéüèæ (`U+1F64E U+1F3FE`)"] #[doc="# assert_eq!(PERSON_POUTING.tone(Tone::MediumDark).to_string().as_str(), \"üôéüèæ\");"]#[doc="println!(\"{}\", PERSON_POUTING.tone(Tone::Dark)); // üôéüèø (`U+1F64E U+1F3FF`)"] #[doc="# assert_eq!(PERSON_POUTING.tone(Tone::Dark).to_string().as_str(), \"üôéüèø\");"]#[doc="println!(\"{}\", PERSON_POUTING.gender(Gender::Male)); // üôé‚Äç‚ôÇÔ∏è (`U+1F64E U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_POUTING.gender(Gender::Male).to_string().as_str(), \"üôé‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_POUTING.gender(Gender::Male).tone(Tone::Light)); // üôéüèª‚Äç‚ôÇÔ∏è (`U+1F64E U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_POUTING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üôéüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_POUTING.gender(Gender::Male).tone(Tone::MediumLight)); // üôéüèº‚Äç‚ôÇÔ∏è (`U+1F64E U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_POUTING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üôéüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_POUTING.gender(Gender::Male).tone(Tone::Medium)); // üôéüèΩ‚Äç‚ôÇÔ∏è (`U+1F64E U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_POUTING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üôéüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_POUTING.gender(Gender::Male).tone(Tone::MediumDark)); // üôéüèæ‚Äç‚ôÇÔ∏è (`U+1F64E U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_POUTING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üôéüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_POUTING.gender(Gender::Male).tone(Tone::Dark)); // üôéüèø‚Äç‚ôÇÔ∏è (`U+1F64E U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_POUTING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üôéüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_POUTING.gender(Gender::Female)); // üôé‚Äç‚ôÄÔ∏è (`U+1F64E U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_POUTING.gender(Gender::Female).to_string().as_str(), \"üôé‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_POUTING.gender(Gender::Female).tone(Tone::Light)); // üôéüèª‚Äç‚ôÄÔ∏è (`U+1F64E U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_POUTING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üôéüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_POUTING.gender(Gender::Female).tone(Tone::MediumLight)); // üôéüèº‚Äç‚ôÄÔ∏è (`U+1F64E U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_POUTING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üôéüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_POUTING.gender(Gender::Female).tone(Tone::Medium)); // üôéüèΩ‚Äç‚ôÄÔ∏è (`U+1F64E U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_POUTING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üôéüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_POUTING.gender(Gender::Female).tone(Tone::MediumDark)); // üôéüèæ‚Äç‚ôÄÔ∏è (`U+1F64E U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_POUTING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üôéüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_POUTING.gender(Gender::Female).tone(Tone::Dark)); // üôéüèø‚Äç‚ôÄÔ∏è (`U+1F64E U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_POUTING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üôéüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_POUTING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person pouting", Version(0, 6),"üôé"), 
	&[
		Emoji::new("person pouting: light skin tone", Version(1, 0),"üôéüèª"),
	Emoji::new("person pouting: medium-light skin tone", Version(1, 0),"üôéüèº"),
	Emoji::new("person pouting: medium skin tone", Version(1, 0),"üôéüèΩ"),
	Emoji::new("person pouting: medium-dark skin tone", Version(1, 0),"üôéüèæ"),
	Emoji::new("person pouting: dark skin tone", Version(1, 0),"üôéüèø"),
	]), 
	&[
		With::new(Emoji::new("man pouting", Version(4, 0),"üôé‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man pouting: light skin tone", Version(4, 0),"üôéüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man pouting: medium-light skin tone", Version(4, 0),"üôéüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man pouting: medium skin tone", Version(4, 0),"üôéüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man pouting: medium-dark skin tone", Version(4, 0),"üôéüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man pouting: dark skin tone", Version(4, 0),"üôéüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman pouting", Version(4, 0),"üôé‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman pouting: light skin tone", Version(4, 0),"üôéüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman pouting: medium-light skin tone", Version(4, 0),"üôéüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman pouting: medium skin tone", Version(4, 0),"üôéüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman pouting: medium-dark skin tone", Version(4, 0),"üôéüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman pouting: dark skin tone", Version(4, 0),"üôéüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person raising hand üôã"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_RAISING_HAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_RAISING_HAND); // üôã (`U+1F64B`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.to_string().as_str(), \"üôã\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.tone(Tone::Light)); // üôãüèª (`U+1F64B U+1F3FB`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.tone(Tone::Light).to_string().as_str(), \"üôãüèª\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.tone(Tone::MediumLight)); // üôãüèº (`U+1F64B U+1F3FC`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.tone(Tone::MediumLight).to_string().as_str(), \"üôãüèº\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.tone(Tone::Medium)); // üôãüèΩ (`U+1F64B U+1F3FD`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.tone(Tone::Medium).to_string().as_str(), \"üôãüèΩ\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.tone(Tone::MediumDark)); // üôãüèæ (`U+1F64B U+1F3FE`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.tone(Tone::MediumDark).to_string().as_str(), \"üôãüèæ\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.tone(Tone::Dark)); // üôãüèø (`U+1F64B U+1F3FF`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.tone(Tone::Dark).to_string().as_str(), \"üôãüèø\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.gender(Gender::Male)); // üôã‚Äç‚ôÇÔ∏è (`U+1F64B U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.gender(Gender::Male).to_string().as_str(), \"üôã‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::Light)); // üôãüèª‚Äç‚ôÇÔ∏è (`U+1F64B U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üôãüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::MediumLight)); // üôãüèº‚Äç‚ôÇÔ∏è (`U+1F64B U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üôãüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::Medium)); // üôãüèΩ‚Äç‚ôÇÔ∏è (`U+1F64B U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üôãüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::MediumDark)); // üôãüèæ‚Äç‚ôÇÔ∏è (`U+1F64B U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üôãüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::Dark)); // üôãüèø‚Äç‚ôÇÔ∏è (`U+1F64B U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üôãüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.gender(Gender::Female)); // üôã‚Äç‚ôÄÔ∏è (`U+1F64B U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.gender(Gender::Female).to_string().as_str(), \"üôã‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::Light)); // üôãüèª‚Äç‚ôÄÔ∏è (`U+1F64B U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üôãüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::MediumLight)); // üôãüèº‚Äç‚ôÄÔ∏è (`U+1F64B U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üôãüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::Medium)); // üôãüèΩ‚Äç‚ôÄÔ∏è (`U+1F64B U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üôãüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::MediumDark)); // üôãüèæ‚Äç‚ôÄÔ∏è (`U+1F64B U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üôãüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::Dark)); // üôãüèø‚Äç‚ôÄÔ∏è (`U+1F64B U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üôãüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_RAISING_HAND: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person raising hand", Version(0, 6),"üôã"), 
	&[
		Emoji::new("person raising hand: light skin tone", Version(1, 0),"üôãüèª"),
	Emoji::new("person raising hand: medium-light skin tone", Version(1, 0),"üôãüèº"),
	Emoji::new("person raising hand: medium skin tone", Version(1, 0),"üôãüèΩ"),
	Emoji::new("person raising hand: medium-dark skin tone", Version(1, 0),"üôãüèæ"),
	Emoji::new("person raising hand: dark skin tone", Version(1, 0),"üôãüèø"),
	]), 
	&[
		With::new(Emoji::new("man raising hand", Version(4, 0),"üôã‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man raising hand: light skin tone", Version(4, 0),"üôãüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man raising hand: medium-light skin tone", Version(4, 0),"üôãüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man raising hand: medium skin tone", Version(4, 0),"üôãüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man raising hand: medium-dark skin tone", Version(4, 0),"üôãüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man raising hand: dark skin tone", Version(4, 0),"üôãüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman raising hand", Version(4, 0),"üôã‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman raising hand: light skin tone", Version(4, 0),"üôãüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman raising hand: medium-light skin tone", Version(4, 0),"üôãüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman raising hand: medium skin tone", Version(4, 0),"üôãüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman raising hand: medium-dark skin tone", Version(4, 0),"üôãüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman raising hand: dark skin tone", Version(4, 0),"üôãüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person shrugging ü§∑"]#[doc=""]#[doc="Since E3.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_SHRUGGING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_SHRUGGING); // ü§∑ (`U+1F937`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.to_string().as_str(), \"ü§∑\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.tone(Tone::Light)); // ü§∑üèª (`U+1F937 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.tone(Tone::Light).to_string().as_str(), \"ü§∑üèª\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.tone(Tone::MediumLight)); // ü§∑üèº (`U+1F937 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.tone(Tone::MediumLight).to_string().as_str(), \"ü§∑üèº\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.tone(Tone::Medium)); // ü§∑üèΩ (`U+1F937 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.tone(Tone::Medium).to_string().as_str(), \"ü§∑üèΩ\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.tone(Tone::MediumDark)); // ü§∑üèæ (`U+1F937 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.tone(Tone::MediumDark).to_string().as_str(), \"ü§∑üèæ\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.tone(Tone::Dark)); // ü§∑üèø (`U+1F937 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.tone(Tone::Dark).to_string().as_str(), \"ü§∑üèø\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.gender(Gender::Male)); // ü§∑‚Äç‚ôÇÔ∏è (`U+1F937 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.gender(Gender::Male).to_string().as_str(), \"ü§∑‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::Light)); // ü§∑üèª‚Äç‚ôÇÔ∏è (`U+1F937 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"ü§∑üèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::MediumLight)); // ü§∑üèº‚Äç‚ôÇÔ∏è (`U+1F937 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"ü§∑üèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::Medium)); // ü§∑üèΩ‚Äç‚ôÇÔ∏è (`U+1F937 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"ü§∑üèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::MediumDark)); // ü§∑üèæ‚Äç‚ôÇÔ∏è (`U+1F937 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"ü§∑üèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::Dark)); // ü§∑üèø‚Äç‚ôÇÔ∏è (`U+1F937 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"ü§∑üèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.gender(Gender::Female)); // ü§∑‚Äç‚ôÄÔ∏è (`U+1F937 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.gender(Gender::Female).to_string().as_str(), \"ü§∑‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::Light)); // ü§∑üèª‚Äç‚ôÄÔ∏è (`U+1F937 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"ü§∑üèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::MediumLight)); // ü§∑üèº‚Äç‚ôÄÔ∏è (`U+1F937 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"ü§∑üèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::Medium)); // ü§∑üèΩ‚Äç‚ôÄÔ∏è (`U+1F937 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"ü§∑üèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::MediumDark)); // ü§∑üèæ‚Äç‚ôÄÔ∏è (`U+1F937 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"ü§∑üèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::Dark)); // ü§∑üèø‚Äç‚ôÄÔ∏è (`U+1F937 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"ü§∑üèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_SHRUGGING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person shrugging", Version(3, 0),"ü§∑"), 
	&[
		Emoji::new("person shrugging: light skin tone", Version(3, 0),"ü§∑üèª"),
	Emoji::new("person shrugging: medium-light skin tone", Version(3, 0),"ü§∑üèº"),
	Emoji::new("person shrugging: medium skin tone", Version(3, 0),"ü§∑üèΩ"),
	Emoji::new("person shrugging: medium-dark skin tone", Version(3, 0),"ü§∑üèæ"),
	Emoji::new("person shrugging: dark skin tone", Version(3, 0),"ü§∑üèø"),
	]), 
	&[
		With::new(Emoji::new("man shrugging", Version(4, 0),"ü§∑‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man shrugging: light skin tone", Version(4, 0),"ü§∑üèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man shrugging: medium-light skin tone", Version(4, 0),"ü§∑üèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man shrugging: medium skin tone", Version(4, 0),"ü§∑üèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man shrugging: medium-dark skin tone", Version(4, 0),"ü§∑üèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man shrugging: dark skin tone", Version(4, 0),"ü§∑üèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman shrugging", Version(4, 0),"ü§∑‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman shrugging: light skin tone", Version(4, 0),"ü§∑üèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman shrugging: medium-light skin tone", Version(4, 0),"ü§∑üèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman shrugging: medium skin tone", Version(4, 0),"ü§∑üèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman shrugging: medium-dark skin tone", Version(4, 0),"ü§∑üèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman shrugging: dark skin tone", Version(4, 0),"ü§∑üèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person tipping hand üíÅ"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_TIPPING_HAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_TIPPING_HAND); // üíÅ (`U+1F481`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.to_string().as_str(), \"üíÅ\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.tone(Tone::Light)); // üíÅüèª (`U+1F481 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.tone(Tone::Light).to_string().as_str(), \"üíÅüèª\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.tone(Tone::MediumLight)); // üíÅüèº (`U+1F481 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.tone(Tone::MediumLight).to_string().as_str(), \"üíÅüèº\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.tone(Tone::Medium)); // üíÅüèΩ (`U+1F481 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.tone(Tone::Medium).to_string().as_str(), \"üíÅüèΩ\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.tone(Tone::MediumDark)); // üíÅüèæ (`U+1F481 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.tone(Tone::MediumDark).to_string().as_str(), \"üíÅüèæ\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.tone(Tone::Dark)); // üíÅüèø (`U+1F481 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.tone(Tone::Dark).to_string().as_str(), \"üíÅüèø\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.gender(Gender::Male)); // üíÅ‚Äç‚ôÇÔ∏è (`U+1F481 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.gender(Gender::Male).to_string().as_str(), \"üíÅ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::Light)); // üíÅüèª‚Äç‚ôÇÔ∏è (`U+1F481 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üíÅüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::MediumLight)); // üíÅüèº‚Äç‚ôÇÔ∏è (`U+1F481 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üíÅüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::Medium)); // üíÅüèΩ‚Äç‚ôÇÔ∏è (`U+1F481 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üíÅüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::MediumDark)); // üíÅüèæ‚Äç‚ôÇÔ∏è (`U+1F481 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üíÅüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::Dark)); // üíÅüèø‚Äç‚ôÇÔ∏è (`U+1F481 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üíÅüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.gender(Gender::Female)); // üíÅ‚Äç‚ôÄÔ∏è (`U+1F481 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.gender(Gender::Female).to_string().as_str(), \"üíÅ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::Light)); // üíÅüèª‚Äç‚ôÄÔ∏è (`U+1F481 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üíÅüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::MediumLight)); // üíÅüèº‚Äç‚ôÄÔ∏è (`U+1F481 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üíÅüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::Medium)); // üíÅüèΩ‚Äç‚ôÄÔ∏è (`U+1F481 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üíÅüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::MediumDark)); // üíÅüèæ‚Äç‚ôÄÔ∏è (`U+1F481 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üíÅüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::Dark)); // üíÅüèø‚Äç‚ôÄÔ∏è (`U+1F481 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üíÅüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_TIPPING_HAND: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person tipping hand", Version(0, 6),"üíÅ"), 
	&[
		Emoji::new("person tipping hand: light skin tone", Version(1, 0),"üíÅüèª"),
	Emoji::new("person tipping hand: medium-light skin tone", Version(1, 0),"üíÅüèº"),
	Emoji::new("person tipping hand: medium skin tone", Version(1, 0),"üíÅüèΩ"),
	Emoji::new("person tipping hand: medium-dark skin tone", Version(1, 0),"üíÅüèæ"),
	Emoji::new("person tipping hand: dark skin tone", Version(1, 0),"üíÅüèø"),
	]), 
	&[
		With::new(Emoji::new("man tipping hand", Version(4, 0),"üíÅ‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man tipping hand: light skin tone", Version(4, 0),"üíÅüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man tipping hand: medium-light skin tone", Version(4, 0),"üíÅüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man tipping hand: medium skin tone", Version(4, 0),"üíÅüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man tipping hand: medium-dark skin tone", Version(4, 0),"üíÅüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man tipping hand: dark skin tone", Version(4, 0),"üíÅüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman tipping hand", Version(4, 0),"üíÅ‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman tipping hand: light skin tone", Version(4, 0),"üíÅüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman tipping hand: medium-light skin tone", Version(4, 0),"üíÅüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman tipping hand: medium skin tone", Version(4, 0),"üíÅüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman tipping hand: medium-dark skin tone", Version(4, 0),"üíÅüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman tipping hand: dark skin tone", Version(4, 0),"üíÅüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // DEAF_PERSON
				
				&DEAF_PERSON.default.default,
				
				&DEAF_PERSON.default.tone(Tone::Light),
				
				&DEAF_PERSON.default.tone(Tone::MediumLight),
				
				&DEAF_PERSON.default.tone(Tone::Medium),
				
				&DEAF_PERSON.default.tone(Tone::MediumDark),
				
				&DEAF_PERSON.default.tone(Tone::Dark),
				
				&DEAF_PERSON.gender(Gender::Male).default,
				
				&DEAF_PERSON.gender(Gender::Male).tone(Tone::Light),
				
				&DEAF_PERSON.gender(Gender::Male).tone(Tone::MediumLight),
				
				&DEAF_PERSON.gender(Gender::Male).tone(Tone::Medium),
				
				&DEAF_PERSON.gender(Gender::Male).tone(Tone::MediumDark),
				
				&DEAF_PERSON.gender(Gender::Male).tone(Tone::Dark),
				
				&DEAF_PERSON.gender(Gender::Female).default,
				
				&DEAF_PERSON.gender(Gender::Female).tone(Tone::Light),
				
				&DEAF_PERSON.gender(Gender::Female).tone(Tone::MediumLight),
				
				&DEAF_PERSON.gender(Gender::Female).tone(Tone::Medium),
				
				&DEAF_PERSON.gender(Gender::Female).tone(Tone::MediumDark),
				
				&DEAF_PERSON.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_BOWING
				
				&PERSON_BOWING.default.default,
				
				&PERSON_BOWING.default.tone(Tone::Light),
				
				&PERSON_BOWING.default.tone(Tone::MediumLight),
				
				&PERSON_BOWING.default.tone(Tone::Medium),
				
				&PERSON_BOWING.default.tone(Tone::MediumDark),
				
				&PERSON_BOWING.default.tone(Tone::Dark),
				
				&PERSON_BOWING.gender(Gender::Male).default,
				
				&PERSON_BOWING.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_BOWING.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_BOWING.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_BOWING.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_BOWING.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_BOWING.gender(Gender::Female).default,
				
				&PERSON_BOWING.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_BOWING.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_BOWING.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_BOWING.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_BOWING.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_FACEPALMING
				
				&PERSON_FACEPALMING.default.default,
				
				&PERSON_FACEPALMING.default.tone(Tone::Light),
				
				&PERSON_FACEPALMING.default.tone(Tone::MediumLight),
				
				&PERSON_FACEPALMING.default.tone(Tone::Medium),
				
				&PERSON_FACEPALMING.default.tone(Tone::MediumDark),
				
				&PERSON_FACEPALMING.default.tone(Tone::Dark),
				
				&PERSON_FACEPALMING.gender(Gender::Male).default,
				
				&PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_FACEPALMING.gender(Gender::Female).default,
				
				&PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_FROWNING
				
				&PERSON_FROWNING.default.default,
				
				&PERSON_FROWNING.default.tone(Tone::Light),
				
				&PERSON_FROWNING.default.tone(Tone::MediumLight),
				
				&PERSON_FROWNING.default.tone(Tone::Medium),
				
				&PERSON_FROWNING.default.tone(Tone::MediumDark),
				
				&PERSON_FROWNING.default.tone(Tone::Dark),
				
				&PERSON_FROWNING.gender(Gender::Male).default,
				
				&PERSON_FROWNING.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_FROWNING.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_FROWNING.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_FROWNING.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_FROWNING.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_FROWNING.gender(Gender::Female).default,
				
				&PERSON_FROWNING.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_FROWNING.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_FROWNING.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_FROWNING.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_FROWNING.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_GESTURING_NO
				
				&PERSON_GESTURING_NO.default.default,
				
				&PERSON_GESTURING_NO.default.tone(Tone::Light),
				
				&PERSON_GESTURING_NO.default.tone(Tone::MediumLight),
				
				&PERSON_GESTURING_NO.default.tone(Tone::Medium),
				
				&PERSON_GESTURING_NO.default.tone(Tone::MediumDark),
				
				&PERSON_GESTURING_NO.default.tone(Tone::Dark),
				
				&PERSON_GESTURING_NO.gender(Gender::Male).default,
				
				&PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_GESTURING_NO.gender(Gender::Female).default,
				
				&PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_GESTURING_OK
				
				&PERSON_GESTURING_OK.default.default,
				
				&PERSON_GESTURING_OK.default.tone(Tone::Light),
				
				&PERSON_GESTURING_OK.default.tone(Tone::MediumLight),
				
				&PERSON_GESTURING_OK.default.tone(Tone::Medium),
				
				&PERSON_GESTURING_OK.default.tone(Tone::MediumDark),
				
				&PERSON_GESTURING_OK.default.tone(Tone::Dark),
				
				&PERSON_GESTURING_OK.gender(Gender::Male).default,
				
				&PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_GESTURING_OK.gender(Gender::Female).default,
				
				&PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_POUTING
				
				&PERSON_POUTING.default.default,
				
				&PERSON_POUTING.default.tone(Tone::Light),
				
				&PERSON_POUTING.default.tone(Tone::MediumLight),
				
				&PERSON_POUTING.default.tone(Tone::Medium),
				
				&PERSON_POUTING.default.tone(Tone::MediumDark),
				
				&PERSON_POUTING.default.tone(Tone::Dark),
				
				&PERSON_POUTING.gender(Gender::Male).default,
				
				&PERSON_POUTING.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_POUTING.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_POUTING.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_POUTING.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_POUTING.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_POUTING.gender(Gender::Female).default,
				
				&PERSON_POUTING.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_POUTING.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_POUTING.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_POUTING.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_POUTING.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_RAISING_HAND
				
				&PERSON_RAISING_HAND.default.default,
				
				&PERSON_RAISING_HAND.default.tone(Tone::Light),
				
				&PERSON_RAISING_HAND.default.tone(Tone::MediumLight),
				
				&PERSON_RAISING_HAND.default.tone(Tone::Medium),
				
				&PERSON_RAISING_HAND.default.tone(Tone::MediumDark),
				
				&PERSON_RAISING_HAND.default.tone(Tone::Dark),
				
				&PERSON_RAISING_HAND.gender(Gender::Male).default,
				
				&PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_RAISING_HAND.gender(Gender::Female).default,
				
				&PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_SHRUGGING
				
				&PERSON_SHRUGGING.default.default,
				
				&PERSON_SHRUGGING.default.tone(Tone::Light),
				
				&PERSON_SHRUGGING.default.tone(Tone::MediumLight),
				
				&PERSON_SHRUGGING.default.tone(Tone::Medium),
				
				&PERSON_SHRUGGING.default.tone(Tone::MediumDark),
				
				&PERSON_SHRUGGING.default.tone(Tone::Dark),
				
				&PERSON_SHRUGGING.gender(Gender::Male).default,
				
				&PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_SHRUGGING.gender(Gender::Female).default,
				
				&PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_TIPPING_HAND
				
				&PERSON_TIPPING_HAND.default.default,
				
				&PERSON_TIPPING_HAND.default.tone(Tone::Light),
				
				&PERSON_TIPPING_HAND.default.tone(Tone::MediumLight),
				
				&PERSON_TIPPING_HAND.default.tone(Tone::Medium),
				
				&PERSON_TIPPING_HAND.default.tone(Tone::MediumDark),
				
				&PERSON_TIPPING_HAND.default.tone(Tone::Dark),
				
				&PERSON_TIPPING_HAND.gender(Gender::Male).default,
				
				&PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_TIPPING_HAND.gender(Gender::Female).default,
				
				&PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&DEAF_PERSON.default.default, // DEAF_PERSON
				
			
				
				&PERSON_BOWING.default.default, // PERSON_BOWING
				
			
				
				&PERSON_FACEPALMING.default.default, // PERSON_FACEPALMING
				
			
				
				&PERSON_FROWNING.default.default, // PERSON_FROWNING
				
			
				
				&PERSON_GESTURING_NO.default.default, // PERSON_GESTURING_NO
				
			
				
				&PERSON_GESTURING_OK.default.default, // PERSON_GESTURING_OK
				
			
				
				&PERSON_POUTING.default.default, // PERSON_POUTING
				
			
				
				&PERSON_RAISING_HAND.default.default, // PERSON_RAISING_HAND
				
			
				
				&PERSON_SHRUGGING.default.default, // PERSON_SHRUGGING
				
			
				
				&PERSON_TIPPING_HAND.default.default, // PERSON_TIPPING_HAND
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // person_gesture
	
	/// person_resting üõåüßòüõÄ
	pub mod person_resting {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="person in bed üõå"]#[doc=""]#[doc="Since E1.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_IN_BED;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_IN_BED); // üõå (`U+1F6CC`)"] #[doc="# assert_eq!(PERSON_IN_BED.to_string().as_str(), \"üõå\");"]#[doc="println!(\"{}\", PERSON_IN_BED.tone(Tone::Light)); // üõåüèª (`U+1F6CC U+1F3FB`)"] #[doc="# assert_eq!(PERSON_IN_BED.tone(Tone::Light).to_string().as_str(), \"üõåüèª\");"]#[doc="println!(\"{}\", PERSON_IN_BED.tone(Tone::MediumLight)); // üõåüèº (`U+1F6CC U+1F3FC`)"] #[doc="# assert_eq!(PERSON_IN_BED.tone(Tone::MediumLight).to_string().as_str(), \"üõåüèº\");"]#[doc="println!(\"{}\", PERSON_IN_BED.tone(Tone::Medium)); // üõåüèΩ (`U+1F6CC U+1F3FD`)"] #[doc="# assert_eq!(PERSON_IN_BED.tone(Tone::Medium).to_string().as_str(), \"üõåüèΩ\");"]#[doc="println!(\"{}\", PERSON_IN_BED.tone(Tone::MediumDark)); // üõåüèæ (`U+1F6CC U+1F3FE`)"] #[doc="# assert_eq!(PERSON_IN_BED.tone(Tone::MediumDark).to_string().as_str(), \"üõåüèæ\");"]#[doc="println!(\"{}\", PERSON_IN_BED.tone(Tone::Dark)); // üõåüèø (`U+1F6CC U+1F3FF`)"] #[doc="# assert_eq!(PERSON_IN_BED.tone(Tone::Dark).to_string().as_str(), \"üõåüèø\");"]
#[doc="```"]
pub static PERSON_IN_BED: With<Tone,Emoji> = With::new(Emoji::new("person in bed", Version(1, 0),"üõå"), 
	&[
		Emoji::new("person in bed: light skin tone", Version(4, 0),"üõåüèª"),
	Emoji::new("person in bed: medium-light skin tone", Version(4, 0),"üõåüèº"),
	Emoji::new("person in bed: medium skin tone", Version(4, 0),"üõåüèΩ"),
	Emoji::new("person in bed: medium-dark skin tone", Version(4, 0),"üõåüèæ"),
	Emoji::new("person in bed: dark skin tone", Version(4, 0),"üõåüèø"),
	]);

		
		#[doc="person in lotus position üßò"]#[doc=""]#[doc="Since E5.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_IN_LOTUS_POSITION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION); // üßò (`U+1F9D8`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.to_string().as_str(), \"üßò\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.tone(Tone::Light)); // üßòüèª (`U+1F9D8 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.tone(Tone::Light).to_string().as_str(), \"üßòüèª\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.tone(Tone::MediumLight)); // üßòüèº (`U+1F9D8 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.tone(Tone::MediumLight).to_string().as_str(), \"üßòüèº\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.tone(Tone::Medium)); // üßòüèΩ (`U+1F9D8 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.tone(Tone::Medium).to_string().as_str(), \"üßòüèΩ\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.tone(Tone::MediumDark)); // üßòüèæ (`U+1F9D8 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.tone(Tone::MediumDark).to_string().as_str(), \"üßòüèæ\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.tone(Tone::Dark)); // üßòüèø (`U+1F9D8 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.tone(Tone::Dark).to_string().as_str(), \"üßòüèø\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.gender(Gender::Male)); // üßò‚Äç‚ôÇÔ∏è (`U+1F9D8 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.gender(Gender::Male).to_string().as_str(), \"üßò‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::Light)); // üßòüèª‚Äç‚ôÇÔ∏è (`U+1F9D8 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üßòüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::MediumLight)); // üßòüèº‚Äç‚ôÇÔ∏è (`U+1F9D8 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üßòüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::Medium)); // üßòüèΩ‚Äç‚ôÇÔ∏è (`U+1F9D8 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üßòüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::MediumDark)); // üßòüèæ‚Äç‚ôÇÔ∏è (`U+1F9D8 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üßòüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::Dark)); // üßòüèø‚Äç‚ôÇÔ∏è (`U+1F9D8 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üßòüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.gender(Gender::Female)); // üßò‚Äç‚ôÄÔ∏è (`U+1F9D8 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.gender(Gender::Female).to_string().as_str(), \"üßò‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::Light)); // üßòüèª‚Äç‚ôÄÔ∏è (`U+1F9D8 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üßòüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::MediumLight)); // üßòüèº‚Äç‚ôÄÔ∏è (`U+1F9D8 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üßòüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::Medium)); // üßòüèΩ‚Äç‚ôÄÔ∏è (`U+1F9D8 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üßòüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::MediumDark)); // üßòüèæ‚Äç‚ôÄÔ∏è (`U+1F9D8 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üßòüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::Dark)); // üßòüèø‚Äç‚ôÄÔ∏è (`U+1F9D8 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üßòüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_IN_LOTUS_POSITION: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person in lotus position", Version(5, 0),"üßò"), 
	&[
		Emoji::new("person in lotus position: light skin tone", Version(5, 0),"üßòüèª"),
	Emoji::new("person in lotus position: medium-light skin tone", Version(5, 0),"üßòüèº"),
	Emoji::new("person in lotus position: medium skin tone", Version(5, 0),"üßòüèΩ"),
	Emoji::new("person in lotus position: medium-dark skin tone", Version(5, 0),"üßòüèæ"),
	Emoji::new("person in lotus position: dark skin tone", Version(5, 0),"üßòüèø"),
	]), 
	&[
		With::new(Emoji::new("man in lotus position", Version(5, 0),"üßò‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man in lotus position: light skin tone", Version(5, 0),"üßòüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man in lotus position: medium-light skin tone", Version(5, 0),"üßòüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man in lotus position: medium skin tone", Version(5, 0),"üßòüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man in lotus position: medium-dark skin tone", Version(5, 0),"üßòüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man in lotus position: dark skin tone", Version(5, 0),"üßòüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman in lotus position", Version(5, 0),"üßò‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman in lotus position: light skin tone", Version(5, 0),"üßòüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman in lotus position: medium-light skin tone", Version(5, 0),"üßòüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman in lotus position: medium skin tone", Version(5, 0),"üßòüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman in lotus position: medium-dark skin tone", Version(5, 0),"üßòüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman in lotus position: dark skin tone", Version(5, 0),"üßòüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person taking bath üõÄ"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_TAKING_BATH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_TAKING_BATH); // üõÄ (`U+1F6C0`)"] #[doc="# assert_eq!(PERSON_TAKING_BATH.to_string().as_str(), \"üõÄ\");"]#[doc="println!(\"{}\", PERSON_TAKING_BATH.tone(Tone::Light)); // üõÄüèª (`U+1F6C0 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_TAKING_BATH.tone(Tone::Light).to_string().as_str(), \"üõÄüèª\");"]#[doc="println!(\"{}\", PERSON_TAKING_BATH.tone(Tone::MediumLight)); // üõÄüèº (`U+1F6C0 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_TAKING_BATH.tone(Tone::MediumLight).to_string().as_str(), \"üõÄüèº\");"]#[doc="println!(\"{}\", PERSON_TAKING_BATH.tone(Tone::Medium)); // üõÄüèΩ (`U+1F6C0 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_TAKING_BATH.tone(Tone::Medium).to_string().as_str(), \"üõÄüèΩ\");"]#[doc="println!(\"{}\", PERSON_TAKING_BATH.tone(Tone::MediumDark)); // üõÄüèæ (`U+1F6C0 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_TAKING_BATH.tone(Tone::MediumDark).to_string().as_str(), \"üõÄüèæ\");"]#[doc="println!(\"{}\", PERSON_TAKING_BATH.tone(Tone::Dark)); // üõÄüèø (`U+1F6C0 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_TAKING_BATH.tone(Tone::Dark).to_string().as_str(), \"üõÄüèø\");"]
#[doc="```"]
pub static PERSON_TAKING_BATH: With<Tone,Emoji> = With::new(Emoji::new("person taking bath", Version(0, 6),"üõÄ"), 
	&[
		Emoji::new("person taking bath: light skin tone", Version(1, 0),"üõÄüèª"),
	Emoji::new("person taking bath: medium-light skin tone", Version(1, 0),"üõÄüèº"),
	Emoji::new("person taking bath: medium skin tone", Version(1, 0),"üõÄüèΩ"),
	Emoji::new("person taking bath: medium-dark skin tone", Version(1, 0),"üõÄüèæ"),
	Emoji::new("person taking bath: dark skin tone", Version(1, 0),"üõÄüèø"),
	]);

		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // PERSON_IN_BED
				
				&PERSON_IN_BED.default,
				
				&PERSON_IN_BED.tone(Tone::Light),
				
				&PERSON_IN_BED.tone(Tone::MediumLight),
				
				&PERSON_IN_BED.tone(Tone::Medium),
				
				&PERSON_IN_BED.tone(Tone::MediumDark),
				
				&PERSON_IN_BED.tone(Tone::Dark),
				
			],
			
			&[ // PERSON_IN_LOTUS_POSITION
				
				&PERSON_IN_LOTUS_POSITION.default.default,
				
				&PERSON_IN_LOTUS_POSITION.default.tone(Tone::Light),
				
				&PERSON_IN_LOTUS_POSITION.default.tone(Tone::MediumLight),
				
				&PERSON_IN_LOTUS_POSITION.default.tone(Tone::Medium),
				
				&PERSON_IN_LOTUS_POSITION.default.tone(Tone::MediumDark),
				
				&PERSON_IN_LOTUS_POSITION.default.tone(Tone::Dark),
				
				&PERSON_IN_LOTUS_POSITION.gender(Gender::Male).default,
				
				&PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_IN_LOTUS_POSITION.gender(Gender::Female).default,
				
				&PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_TAKING_BATH
				
				&PERSON_TAKING_BATH.default,
				
				&PERSON_TAKING_BATH.tone(Tone::Light),
				
				&PERSON_TAKING_BATH.tone(Tone::MediumLight),
				
				&PERSON_TAKING_BATH.tone(Tone::Medium),
				
				&PERSON_TAKING_BATH.tone(Tone::MediumDark),
				
				&PERSON_TAKING_BATH.tone(Tone::Dark),
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&PERSON_IN_BED.default, // PERSON_IN_BED
				
			
				
				&PERSON_IN_LOTUS_POSITION.default.default, // PERSON_IN_LOTUS_POSITION
				
			
				
				&PERSON_TAKING_BATH.default, // PERSON_TAKING_BATH
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // person_resting
	
	/// person_role üßë‚Äçüé®üßë‚ÄçüöÄü§±
	pub mod person_role {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="artist üßë‚Äçüé®"]#[doc=""]#[doc="Since E4.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ARTIST;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ARTIST); // üßë‚Äçüé® (`U+1F9D1 U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.to_string().as_str(), \"üßë‚Äçüé®\");"]#[doc="println!(\"{}\", ARTIST.tone(Tone::Light)); // üßëüèª‚Äçüé® (`U+1F9D1 U+1F3FB U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.tone(Tone::Light).to_string().as_str(), \"üßëüèª‚Äçüé®\");"]#[doc="println!(\"{}\", ARTIST.tone(Tone::MediumLight)); // üßëüèº‚Äçüé® (`U+1F9D1 U+1F3FC U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº‚Äçüé®\");"]#[doc="println!(\"{}\", ARTIST.tone(Tone::Medium)); // üßëüèΩ‚Äçüé® (`U+1F9D1 U+1F3FD U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ‚Äçüé®\");"]#[doc="println!(\"{}\", ARTIST.tone(Tone::MediumDark)); // üßëüèæ‚Äçüé® (`U+1F9D1 U+1F3FE U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ‚Äçüé®\");"]#[doc="println!(\"{}\", ARTIST.tone(Tone::Dark)); // üßëüèø‚Äçüé® (`U+1F9D1 U+1F3FF U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.tone(Tone::Dark).to_string().as_str(), \"üßëüèø‚Äçüé®\");"]#[doc="println!(\"{}\", ARTIST.gender(Gender::Male)); // üë®‚Äçüé® (`U+1F468 U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.gender(Gender::Male).to_string().as_str(), \"üë®‚Äçüé®\");"]#[doc="println!(\"{}\", ARTIST.gender(Gender::Male).tone(Tone::Light)); // üë®üèª‚Äçüé® (`U+1F468 U+1F3FB U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë®üèª‚Äçüé®\");"]#[doc="println!(\"{}\", ARTIST.gender(Gender::Male).tone(Tone::MediumLight)); // üë®üèº‚Äçüé® (`U+1F468 U+1F3FC U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº‚Äçüé®\");"]#[doc="println!(\"{}\", ARTIST.gender(Gender::Male).tone(Tone::Medium)); // üë®üèΩ‚Äçüé® (`U+1F468 U+1F3FD U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ‚Äçüé®\");"]#[doc="println!(\"{}\", ARTIST.gender(Gender::Male).tone(Tone::MediumDark)); // üë®üèæ‚Äçüé® (`U+1F468 U+1F3FE U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ‚Äçüé®\");"]#[doc="println!(\"{}\", ARTIST.gender(Gender::Male).tone(Tone::Dark)); // üë®üèø‚Äçüé® (`U+1F468 U+1F3FF U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë®üèø‚Äçüé®\");"]#[doc="println!(\"{}\", ARTIST.gender(Gender::Female)); // üë©‚Äçüé® (`U+1F469 U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.gender(Gender::Female).to_string().as_str(), \"üë©‚Äçüé®\");"]#[doc="println!(\"{}\", ARTIST.gender(Gender::Female).tone(Tone::Light)); // üë©üèª‚Äçüé® (`U+1F469 U+1F3FB U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äçüé®\");"]#[doc="println!(\"{}\", ARTIST.gender(Gender::Female).tone(Tone::MediumLight)); // üë©üèº‚Äçüé® (`U+1F469 U+1F3FC U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äçüé®\");"]#[doc="println!(\"{}\", ARTIST.gender(Gender::Female).tone(Tone::Medium)); // üë©üèΩ‚Äçüé® (`U+1F469 U+1F3FD U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äçüé®\");"]#[doc="println!(\"{}\", ARTIST.gender(Gender::Female).tone(Tone::MediumDark)); // üë©üèæ‚Äçüé® (`U+1F469 U+1F3FE U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äçüé®\");"]#[doc="println!(\"{}\", ARTIST.gender(Gender::Female).tone(Tone::Dark)); // üë©üèø‚Äçüé® (`U+1F469 U+1F3FF U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äçüé®\");"]
#[doc="```"]
pub static ARTIST: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("artist", Version(12, 1),"üßë‚Äçüé®"), 
	&[
		Emoji::new("artist: light skin tone", Version(12, 1),"üßëüèª‚Äçüé®"),
	Emoji::new("artist: medium-light skin tone", Version(12, 1),"üßëüèº‚Äçüé®"),
	Emoji::new("artist: medium skin tone", Version(12, 1),"üßëüèΩ‚Äçüé®"),
	Emoji::new("artist: medium-dark skin tone", Version(12, 1),"üßëüèæ‚Äçüé®"),
	Emoji::new("artist: dark skin tone", Version(12, 1),"üßëüèø‚Äçüé®"),
	]), 
	&[
		With::new(Emoji::new("man artist", Version(4, 0),"üë®‚Äçüé®"), 
	&[
		Emoji::new("man artist: light skin tone", Version(4, 0),"üë®üèª‚Äçüé®"),
	Emoji::new("man artist: medium-light skin tone", Version(4, 0),"üë®üèº‚Äçüé®"),
	Emoji::new("man artist: medium skin tone", Version(4, 0),"üë®üèΩ‚Äçüé®"),
	Emoji::new("man artist: medium-dark skin tone", Version(4, 0),"üë®üèæ‚Äçüé®"),
	Emoji::new("man artist: dark skin tone", Version(4, 0),"üë®üèø‚Äçüé®"),
	]),
	With::new(Emoji::new("woman artist", Version(4, 0),"üë©‚Äçüé®"), 
	&[
		Emoji::new("woman artist: light skin tone", Version(4, 0),"üë©üèª‚Äçüé®"),
	Emoji::new("woman artist: medium-light skin tone", Version(4, 0),"üë©üèº‚Äçüé®"),
	Emoji::new("woman artist: medium skin tone", Version(4, 0),"üë©üèΩ‚Äçüé®"),
	Emoji::new("woman artist: medium-dark skin tone", Version(4, 0),"üë©üèæ‚Äçüé®"),
	Emoji::new("woman artist: dark skin tone", Version(4, 0),"üë©üèø‚Äçüé®"),
	]),
	]);

		
		#[doc="astronaut üßë‚ÄçüöÄ"]#[doc=""]#[doc="Since E4.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ASTRONAUT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ASTRONAUT); // üßë‚ÄçüöÄ (`U+1F9D1 U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.to_string().as_str(), \"üßë‚ÄçüöÄ\");"]#[doc="println!(\"{}\", ASTRONAUT.tone(Tone::Light)); // üßëüèª‚ÄçüöÄ (`U+1F9D1 U+1F3FB U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.tone(Tone::Light).to_string().as_str(), \"üßëüèª‚ÄçüöÄ\");"]#[doc="println!(\"{}\", ASTRONAUT.tone(Tone::MediumLight)); // üßëüèº‚ÄçüöÄ (`U+1F9D1 U+1F3FC U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº‚ÄçüöÄ\");"]#[doc="println!(\"{}\", ASTRONAUT.tone(Tone::Medium)); // üßëüèΩ‚ÄçüöÄ (`U+1F9D1 U+1F3FD U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ‚ÄçüöÄ\");"]#[doc="println!(\"{}\", ASTRONAUT.tone(Tone::MediumDark)); // üßëüèæ‚ÄçüöÄ (`U+1F9D1 U+1F3FE U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ‚ÄçüöÄ\");"]#[doc="println!(\"{}\", ASTRONAUT.tone(Tone::Dark)); // üßëüèø‚ÄçüöÄ (`U+1F9D1 U+1F3FF U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.tone(Tone::Dark).to_string().as_str(), \"üßëüèø‚ÄçüöÄ\");"]#[doc="println!(\"{}\", ASTRONAUT.gender(Gender::Male)); // üë®‚ÄçüöÄ (`U+1F468 U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.gender(Gender::Male).to_string().as_str(), \"üë®‚ÄçüöÄ\");"]#[doc="println!(\"{}\", ASTRONAUT.gender(Gender::Male).tone(Tone::Light)); // üë®üèª‚ÄçüöÄ (`U+1F468 U+1F3FB U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë®üèª‚ÄçüöÄ\");"]#[doc="println!(\"{}\", ASTRONAUT.gender(Gender::Male).tone(Tone::MediumLight)); // üë®üèº‚ÄçüöÄ (`U+1F468 U+1F3FC U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº‚ÄçüöÄ\");"]#[doc="println!(\"{}\", ASTRONAUT.gender(Gender::Male).tone(Tone::Medium)); // üë®üèΩ‚ÄçüöÄ (`U+1F468 U+1F3FD U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ‚ÄçüöÄ\");"]#[doc="println!(\"{}\", ASTRONAUT.gender(Gender::Male).tone(Tone::MediumDark)); // üë®üèæ‚ÄçüöÄ (`U+1F468 U+1F3FE U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ‚ÄçüöÄ\");"]#[doc="println!(\"{}\", ASTRONAUT.gender(Gender::Male).tone(Tone::Dark)); // üë®üèø‚ÄçüöÄ (`U+1F468 U+1F3FF U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë®üèø‚ÄçüöÄ\");"]#[doc="println!(\"{}\", ASTRONAUT.gender(Gender::Female)); // üë©‚ÄçüöÄ (`U+1F469 U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.gender(Gender::Female).to_string().as_str(), \"üë©‚ÄçüöÄ\");"]#[doc="println!(\"{}\", ASTRONAUT.gender(Gender::Female).tone(Tone::Light)); // üë©üèª‚ÄçüöÄ (`U+1F469 U+1F3FB U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚ÄçüöÄ\");"]#[doc="println!(\"{}\", ASTRONAUT.gender(Gender::Female).tone(Tone::MediumLight)); // üë©üèº‚ÄçüöÄ (`U+1F469 U+1F3FC U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚ÄçüöÄ\");"]#[doc="println!(\"{}\", ASTRONAUT.gender(Gender::Female).tone(Tone::Medium)); // üë©üèΩ‚ÄçüöÄ (`U+1F469 U+1F3FD U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚ÄçüöÄ\");"]#[doc="println!(\"{}\", ASTRONAUT.gender(Gender::Female).tone(Tone::MediumDark)); // üë©üèæ‚ÄçüöÄ (`U+1F469 U+1F3FE U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚ÄçüöÄ\");"]#[doc="println!(\"{}\", ASTRONAUT.gender(Gender::Female).tone(Tone::Dark)); // üë©üèø‚ÄçüöÄ (`U+1F469 U+1F3FF U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚ÄçüöÄ\");"]
#[doc="```"]
pub static ASTRONAUT: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("astronaut", Version(12, 1),"üßë‚ÄçüöÄ"), 
	&[
		Emoji::new("astronaut: light skin tone", Version(12, 1),"üßëüèª‚ÄçüöÄ"),
	Emoji::new("astronaut: medium-light skin tone", Version(12, 1),"üßëüèº‚ÄçüöÄ"),
	Emoji::new("astronaut: medium skin tone", Version(12, 1),"üßëüèΩ‚ÄçüöÄ"),
	Emoji::new("astronaut: medium-dark skin tone", Version(12, 1),"üßëüèæ‚ÄçüöÄ"),
	Emoji::new("astronaut: dark skin tone", Version(12, 1),"üßëüèø‚ÄçüöÄ"),
	]), 
	&[
		With::new(Emoji::new("man astronaut", Version(4, 0),"üë®‚ÄçüöÄ"), 
	&[
		Emoji::new("man astronaut: light skin tone", Version(4, 0),"üë®üèª‚ÄçüöÄ"),
	Emoji::new("man astronaut: medium-light skin tone", Version(4, 0),"üë®üèº‚ÄçüöÄ"),
	Emoji::new("man astronaut: medium skin tone", Version(4, 0),"üë®üèΩ‚ÄçüöÄ"),
	Emoji::new("man astronaut: medium-dark skin tone", Version(4, 0),"üë®üèæ‚ÄçüöÄ"),
	Emoji::new("man astronaut: dark skin tone", Version(4, 0),"üë®üèø‚ÄçüöÄ"),
	]),
	With::new(Emoji::new("woman astronaut", Version(4, 0),"üë©‚ÄçüöÄ"), 
	&[
		Emoji::new("woman astronaut: light skin tone", Version(4, 0),"üë©üèª‚ÄçüöÄ"),
	Emoji::new("woman astronaut: medium-light skin tone", Version(4, 0),"üë©üèº‚ÄçüöÄ"),
	Emoji::new("woman astronaut: medium skin tone", Version(4, 0),"üë©üèΩ‚ÄçüöÄ"),
	Emoji::new("woman astronaut: medium-dark skin tone", Version(4, 0),"üë©üèæ‚ÄçüöÄ"),
	Emoji::new("woman astronaut: dark skin tone", Version(4, 0),"üë©üèø‚ÄçüöÄ"),
	]),
	]);

		
		#[doc="breast-feeding ü§±"]#[doc=""]#[doc="Since E5.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BREAST_FEEDING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BREAST_FEEDING); // ü§± (`U+1F931`)"] #[doc="# assert_eq!(BREAST_FEEDING.to_string().as_str(), \"ü§±\");"]#[doc="println!(\"{}\", BREAST_FEEDING.tone(Tone::Light)); // ü§±üèª (`U+1F931 U+1F3FB`)"] #[doc="# assert_eq!(BREAST_FEEDING.tone(Tone::Light).to_string().as_str(), \"ü§±üèª\");"]#[doc="println!(\"{}\", BREAST_FEEDING.tone(Tone::MediumLight)); // ü§±üèº (`U+1F931 U+1F3FC`)"] #[doc="# assert_eq!(BREAST_FEEDING.tone(Tone::MediumLight).to_string().as_str(), \"ü§±üèº\");"]#[doc="println!(\"{}\", BREAST_FEEDING.tone(Tone::Medium)); // ü§±üèΩ (`U+1F931 U+1F3FD`)"] #[doc="# assert_eq!(BREAST_FEEDING.tone(Tone::Medium).to_string().as_str(), \"ü§±üèΩ\");"]#[doc="println!(\"{}\", BREAST_FEEDING.tone(Tone::MediumDark)); // ü§±üèæ (`U+1F931 U+1F3FE`)"] #[doc="# assert_eq!(BREAST_FEEDING.tone(Tone::MediumDark).to_string().as_str(), \"ü§±üèæ\");"]#[doc="println!(\"{}\", BREAST_FEEDING.tone(Tone::Dark)); // ü§±üèø (`U+1F931 U+1F3FF`)"] #[doc="# assert_eq!(BREAST_FEEDING.tone(Tone::Dark).to_string().as_str(), \"ü§±üèø\");"]
#[doc="```"]
pub static BREAST_FEEDING: With<Tone,Emoji> = With::new(Emoji::new("breast-feeding", Version(5, 0),"ü§±"), 
	&[
		Emoji::new("breast-feeding: light skin tone", Version(5, 0),"ü§±üèª"),
	Emoji::new("breast-feeding: medium-light skin tone", Version(5, 0),"ü§±üèº"),
	Emoji::new("breast-feeding: medium skin tone", Version(5, 0),"ü§±üèΩ"),
	Emoji::new("breast-feeding: medium-dark skin tone", Version(5, 0),"ü§±üèæ"),
	Emoji::new("breast-feeding: dark skin tone", Version(5, 0),"ü§±üèø"),
	]);

		
		#[doc="construction worker üë∑"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CONSTRUCTION_WORKER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CONSTRUCTION_WORKER); // üë∑ (`U+1F477`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.to_string().as_str(), \"üë∑\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.tone(Tone::Light)); // üë∑üèª (`U+1F477 U+1F3FB`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.tone(Tone::Light).to_string().as_str(), \"üë∑üèª\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.tone(Tone::MediumLight)); // üë∑üèº (`U+1F477 U+1F3FC`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.tone(Tone::MediumLight).to_string().as_str(), \"üë∑üèº\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.tone(Tone::Medium)); // üë∑üèΩ (`U+1F477 U+1F3FD`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.tone(Tone::Medium).to_string().as_str(), \"üë∑üèΩ\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.tone(Tone::MediumDark)); // üë∑üèæ (`U+1F477 U+1F3FE`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.tone(Tone::MediumDark).to_string().as_str(), \"üë∑üèæ\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.tone(Tone::Dark)); // üë∑üèø (`U+1F477 U+1F3FF`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.tone(Tone::Dark).to_string().as_str(), \"üë∑üèø\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.gender(Gender::Male)); // üë∑‚Äç‚ôÇÔ∏è (`U+1F477 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.gender(Gender::Male).to_string().as_str(), \"üë∑‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::Light)); // üë∑üèª‚Äç‚ôÇÔ∏è (`U+1F477 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë∑üèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::MediumLight)); // üë∑üèº‚Äç‚ôÇÔ∏è (`U+1F477 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë∑üèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::Medium)); // üë∑üèΩ‚Äç‚ôÇÔ∏è (`U+1F477 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë∑üèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::MediumDark)); // üë∑üèæ‚Äç‚ôÇÔ∏è (`U+1F477 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë∑üèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::Dark)); // üë∑üèø‚Äç‚ôÇÔ∏è (`U+1F477 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë∑üèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.gender(Gender::Female)); // üë∑‚Äç‚ôÄÔ∏è (`U+1F477 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.gender(Gender::Female).to_string().as_str(), \"üë∑‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::Light)); // üë∑üèª‚Äç‚ôÄÔ∏è (`U+1F477 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë∑üèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::MediumLight)); // üë∑üèº‚Äç‚ôÄÔ∏è (`U+1F477 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë∑üèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::Medium)); // üë∑üèΩ‚Äç‚ôÄÔ∏è (`U+1F477 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë∑üèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::MediumDark)); // üë∑üèæ‚Äç‚ôÄÔ∏è (`U+1F477 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë∑üèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::Dark)); // üë∑üèø‚Äç‚ôÄÔ∏è (`U+1F477 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë∑üèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static CONSTRUCTION_WORKER: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("construction worker", Version(0, 6),"üë∑"), 
	&[
		Emoji::new("construction worker: light skin tone", Version(1, 0),"üë∑üèª"),
	Emoji::new("construction worker: medium-light skin tone", Version(1, 0),"üë∑üèº"),
	Emoji::new("construction worker: medium skin tone", Version(1, 0),"üë∑üèΩ"),
	Emoji::new("construction worker: medium-dark skin tone", Version(1, 0),"üë∑üèæ"),
	Emoji::new("construction worker: dark skin tone", Version(1, 0),"üë∑üèø"),
	]), 
	&[
		With::new(Emoji::new("man construction worker", Version(4, 0),"üë∑‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man construction worker: light skin tone", Version(4, 0),"üë∑üèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man construction worker: medium-light skin tone", Version(4, 0),"üë∑üèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man construction worker: medium skin tone", Version(4, 0),"üë∑üèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man construction worker: medium-dark skin tone", Version(4, 0),"üë∑üèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man construction worker: dark skin tone", Version(4, 0),"üë∑üèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman construction worker", Version(4, 0),"üë∑‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman construction worker: light skin tone", Version(4, 0),"üë∑üèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman construction worker: medium-light skin tone", Version(4, 0),"üë∑üèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman construction worker: medium skin tone", Version(4, 0),"üë∑üèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman construction worker: medium-dark skin tone", Version(4, 0),"üë∑üèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman construction worker: dark skin tone", Version(4, 0),"üë∑üèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="cook üßë‚Äçüç≥"]#[doc=""]#[doc="Since E4.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COOK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COOK); // üßë‚Äçüç≥ (`U+1F9D1 U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.to_string().as_str(), \"üßë‚Äçüç≥\");"]#[doc="println!(\"{}\", COOK.tone(Tone::Light)); // üßëüèª‚Äçüç≥ (`U+1F9D1 U+1F3FB U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.tone(Tone::Light).to_string().as_str(), \"üßëüèª‚Äçüç≥\");"]#[doc="println!(\"{}\", COOK.tone(Tone::MediumLight)); // üßëüèº‚Äçüç≥ (`U+1F9D1 U+1F3FC U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº‚Äçüç≥\");"]#[doc="println!(\"{}\", COOK.tone(Tone::Medium)); // üßëüèΩ‚Äçüç≥ (`U+1F9D1 U+1F3FD U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ‚Äçüç≥\");"]#[doc="println!(\"{}\", COOK.tone(Tone::MediumDark)); // üßëüèæ‚Äçüç≥ (`U+1F9D1 U+1F3FE U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ‚Äçüç≥\");"]#[doc="println!(\"{}\", COOK.tone(Tone::Dark)); // üßëüèø‚Äçüç≥ (`U+1F9D1 U+1F3FF U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.tone(Tone::Dark).to_string().as_str(), \"üßëüèø‚Äçüç≥\");"]#[doc="println!(\"{}\", COOK.gender(Gender::Male)); // üë®‚Äçüç≥ (`U+1F468 U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.gender(Gender::Male).to_string().as_str(), \"üë®‚Äçüç≥\");"]#[doc="println!(\"{}\", COOK.gender(Gender::Male).tone(Tone::Light)); // üë®üèª‚Äçüç≥ (`U+1F468 U+1F3FB U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë®üèª‚Äçüç≥\");"]#[doc="println!(\"{}\", COOK.gender(Gender::Male).tone(Tone::MediumLight)); // üë®üèº‚Äçüç≥ (`U+1F468 U+1F3FC U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº‚Äçüç≥\");"]#[doc="println!(\"{}\", COOK.gender(Gender::Male).tone(Tone::Medium)); // üë®üèΩ‚Äçüç≥ (`U+1F468 U+1F3FD U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ‚Äçüç≥\");"]#[doc="println!(\"{}\", COOK.gender(Gender::Male).tone(Tone::MediumDark)); // üë®üèæ‚Äçüç≥ (`U+1F468 U+1F3FE U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ‚Äçüç≥\");"]#[doc="println!(\"{}\", COOK.gender(Gender::Male).tone(Tone::Dark)); // üë®üèø‚Äçüç≥ (`U+1F468 U+1F3FF U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë®üèø‚Äçüç≥\");"]#[doc="println!(\"{}\", COOK.gender(Gender::Female)); // üë©‚Äçüç≥ (`U+1F469 U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.gender(Gender::Female).to_string().as_str(), \"üë©‚Äçüç≥\");"]#[doc="println!(\"{}\", COOK.gender(Gender::Female).tone(Tone::Light)); // üë©üèª‚Äçüç≥ (`U+1F469 U+1F3FB U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äçüç≥\");"]#[doc="println!(\"{}\", COOK.gender(Gender::Female).tone(Tone::MediumLight)); // üë©üèº‚Äçüç≥ (`U+1F469 U+1F3FC U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äçüç≥\");"]#[doc="println!(\"{}\", COOK.gender(Gender::Female).tone(Tone::Medium)); // üë©üèΩ‚Äçüç≥ (`U+1F469 U+1F3FD U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äçüç≥\");"]#[doc="println!(\"{}\", COOK.gender(Gender::Female).tone(Tone::MediumDark)); // üë©üèæ‚Äçüç≥ (`U+1F469 U+1F3FE U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äçüç≥\");"]#[doc="println!(\"{}\", COOK.gender(Gender::Female).tone(Tone::Dark)); // üë©üèø‚Äçüç≥ (`U+1F469 U+1F3FF U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äçüç≥\");"]
#[doc="```"]
pub static COOK: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("cook", Version(12, 1),"üßë‚Äçüç≥"), 
	&[
		Emoji::new("cook: light skin tone", Version(12, 1),"üßëüèª‚Äçüç≥"),
	Emoji::new("cook: medium-light skin tone", Version(12, 1),"üßëüèº‚Äçüç≥"),
	Emoji::new("cook: medium skin tone", Version(12, 1),"üßëüèΩ‚Äçüç≥"),
	Emoji::new("cook: medium-dark skin tone", Version(12, 1),"üßëüèæ‚Äçüç≥"),
	Emoji::new("cook: dark skin tone", Version(12, 1),"üßëüèø‚Äçüç≥"),
	]), 
	&[
		With::new(Emoji::new("man cook", Version(4, 0),"üë®‚Äçüç≥"), 
	&[
		Emoji::new("man cook: light skin tone", Version(4, 0),"üë®üèª‚Äçüç≥"),
	Emoji::new("man cook: medium-light skin tone", Version(4, 0),"üë®üèº‚Äçüç≥"),
	Emoji::new("man cook: medium skin tone", Version(4, 0),"üë®üèΩ‚Äçüç≥"),
	Emoji::new("man cook: medium-dark skin tone", Version(4, 0),"üë®üèæ‚Äçüç≥"),
	Emoji::new("man cook: dark skin tone", Version(4, 0),"üë®üèø‚Äçüç≥"),
	]),
	With::new(Emoji::new("woman cook", Version(4, 0),"üë©‚Äçüç≥"), 
	&[
		Emoji::new("woman cook: light skin tone", Version(4, 0),"üë©üèª‚Äçüç≥"),
	Emoji::new("woman cook: medium-light skin tone", Version(4, 0),"üë©üèº‚Äçüç≥"),
	Emoji::new("woman cook: medium skin tone", Version(4, 0),"üë©üèΩ‚Äçüç≥"),
	Emoji::new("woman cook: medium-dark skin tone", Version(4, 0),"üë©üèæ‚Äçüç≥"),
	Emoji::new("woman cook: dark skin tone", Version(4, 0),"üë©üèø‚Äçüç≥"),
	]),
	]);

		
		#[doc="detective üïµÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DETECTIVE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DETECTIVE); // üïµÔ∏è (`U+1F575 U+FE0F`)"] #[doc="# assert_eq!(DETECTIVE.to_string().as_str(), \"üïµÔ∏è\");"]#[doc="println!(\"{}\", DETECTIVE.tone(Tone::Light)); // üïµüèª (`U+1F575 U+1F3FB`)"] #[doc="# assert_eq!(DETECTIVE.tone(Tone::Light).to_string().as_str(), \"üïµüèª\");"]#[doc="println!(\"{}\", DETECTIVE.tone(Tone::MediumLight)); // üïµüèº (`U+1F575 U+1F3FC`)"] #[doc="# assert_eq!(DETECTIVE.tone(Tone::MediumLight).to_string().as_str(), \"üïµüèº\");"]#[doc="println!(\"{}\", DETECTIVE.tone(Tone::Medium)); // üïµüèΩ (`U+1F575 U+1F3FD`)"] #[doc="# assert_eq!(DETECTIVE.tone(Tone::Medium).to_string().as_str(), \"üïµüèΩ\");"]#[doc="println!(\"{}\", DETECTIVE.tone(Tone::MediumDark)); // üïµüèæ (`U+1F575 U+1F3FE`)"] #[doc="# assert_eq!(DETECTIVE.tone(Tone::MediumDark).to_string().as_str(), \"üïµüèæ\");"]#[doc="println!(\"{}\", DETECTIVE.tone(Tone::Dark)); // üïµüèø (`U+1F575 U+1F3FF`)"] #[doc="# assert_eq!(DETECTIVE.tone(Tone::Dark).to_string().as_str(), \"üïµüèø\");"]#[doc="println!(\"{}\", DETECTIVE.gender(Gender::Male)); // üïµÔ∏è‚Äç‚ôÇÔ∏è (`U+1F575 U+FE0F U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(DETECTIVE.gender(Gender::Male).to_string().as_str(), \"üïµÔ∏è‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", DETECTIVE.gender(Gender::Male).tone(Tone::Light)); // üïµüèª‚Äç‚ôÇÔ∏è (`U+1F575 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(DETECTIVE.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üïµüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", DETECTIVE.gender(Gender::Male).tone(Tone::MediumLight)); // üïµüèº‚Äç‚ôÇÔ∏è (`U+1F575 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(DETECTIVE.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üïµüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", DETECTIVE.gender(Gender::Male).tone(Tone::Medium)); // üïµüèΩ‚Äç‚ôÇÔ∏è (`U+1F575 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(DETECTIVE.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üïµüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", DETECTIVE.gender(Gender::Male).tone(Tone::MediumDark)); // üïµüèæ‚Äç‚ôÇÔ∏è (`U+1F575 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(DETECTIVE.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üïµüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", DETECTIVE.gender(Gender::Male).tone(Tone::Dark)); // üïµüèø‚Äç‚ôÇÔ∏è (`U+1F575 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(DETECTIVE.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üïµüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", DETECTIVE.gender(Gender::Female)); // üïµÔ∏è‚Äç‚ôÄÔ∏è (`U+1F575 U+FE0F U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(DETECTIVE.gender(Gender::Female).to_string().as_str(), \"üïµÔ∏è‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", DETECTIVE.gender(Gender::Female).tone(Tone::Light)); // üïµüèª‚Äç‚ôÄÔ∏è (`U+1F575 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(DETECTIVE.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üïµüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", DETECTIVE.gender(Gender::Female).tone(Tone::MediumLight)); // üïµüèº‚Äç‚ôÄÔ∏è (`U+1F575 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(DETECTIVE.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üïµüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", DETECTIVE.gender(Gender::Female).tone(Tone::Medium)); // üïµüèΩ‚Äç‚ôÄÔ∏è (`U+1F575 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(DETECTIVE.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üïµüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", DETECTIVE.gender(Gender::Female).tone(Tone::MediumDark)); // üïµüèæ‚Äç‚ôÄÔ∏è (`U+1F575 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(DETECTIVE.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üïµüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", DETECTIVE.gender(Gender::Female).tone(Tone::Dark)); // üïµüèø‚Äç‚ôÄÔ∏è (`U+1F575 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(DETECTIVE.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üïµüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static DETECTIVE: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("detective", Version(0, 7),"üïµÔ∏è"), 
	&[
		Emoji::new("detective: light skin tone", Version(2, 0),"üïµüèª"),
	Emoji::new("detective: medium-light skin tone", Version(2, 0),"üïµüèº"),
	Emoji::new("detective: medium skin tone", Version(2, 0),"üïµüèΩ"),
	Emoji::new("detective: medium-dark skin tone", Version(2, 0),"üïµüèæ"),
	Emoji::new("detective: dark skin tone", Version(2, 0),"üïµüèø"),
	]), 
	&[
		With::new(Emoji::new("man detective", Version(4, 0),"üïµÔ∏è‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man detective: light skin tone", Version(4, 0),"üïµüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man detective: medium-light skin tone", Version(4, 0),"üïµüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man detective: medium skin tone", Version(4, 0),"üïµüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man detective: medium-dark skin tone", Version(4, 0),"üïµüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man detective: dark skin tone", Version(4, 0),"üïµüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman detective", Version(4, 0),"üïµÔ∏è‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman detective: light skin tone", Version(4, 0),"üïµüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman detective: medium-light skin tone", Version(4, 0),"üïµüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman detective: medium skin tone", Version(4, 0),"üïµüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman detective: medium-dark skin tone", Version(4, 0),"üïµüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman detective: dark skin tone", Version(4, 0),"üïµüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="factory worker üßë‚Äçüè≠"]#[doc=""]#[doc="Since E4.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACTORY_WORKER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACTORY_WORKER); // üßë‚Äçüè≠ (`U+1F9D1 U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.to_string().as_str(), \"üßë‚Äçüè≠\");"]#[doc="println!(\"{}\", FACTORY_WORKER.tone(Tone::Light)); // üßëüèª‚Äçüè≠ (`U+1F9D1 U+1F3FB U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.tone(Tone::Light).to_string().as_str(), \"üßëüèª‚Äçüè≠\");"]#[doc="println!(\"{}\", FACTORY_WORKER.tone(Tone::MediumLight)); // üßëüèº‚Äçüè≠ (`U+1F9D1 U+1F3FC U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº‚Äçüè≠\");"]#[doc="println!(\"{}\", FACTORY_WORKER.tone(Tone::Medium)); // üßëüèΩ‚Äçüè≠ (`U+1F9D1 U+1F3FD U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ‚Äçüè≠\");"]#[doc="println!(\"{}\", FACTORY_WORKER.tone(Tone::MediumDark)); // üßëüèæ‚Äçüè≠ (`U+1F9D1 U+1F3FE U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ‚Äçüè≠\");"]#[doc="println!(\"{}\", FACTORY_WORKER.tone(Tone::Dark)); // üßëüèø‚Äçüè≠ (`U+1F9D1 U+1F3FF U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.tone(Tone::Dark).to_string().as_str(), \"üßëüèø‚Äçüè≠\");"]#[doc="println!(\"{}\", FACTORY_WORKER.gender(Gender::Male)); // üë®‚Äçüè≠ (`U+1F468 U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.gender(Gender::Male).to_string().as_str(), \"üë®‚Äçüè≠\");"]#[doc="println!(\"{}\", FACTORY_WORKER.gender(Gender::Male).tone(Tone::Light)); // üë®üèª‚Äçüè≠ (`U+1F468 U+1F3FB U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë®üèª‚Äçüè≠\");"]#[doc="println!(\"{}\", FACTORY_WORKER.gender(Gender::Male).tone(Tone::MediumLight)); // üë®üèº‚Äçüè≠ (`U+1F468 U+1F3FC U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº‚Äçüè≠\");"]#[doc="println!(\"{}\", FACTORY_WORKER.gender(Gender::Male).tone(Tone::Medium)); // üë®üèΩ‚Äçüè≠ (`U+1F468 U+1F3FD U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ‚Äçüè≠\");"]#[doc="println!(\"{}\", FACTORY_WORKER.gender(Gender::Male).tone(Tone::MediumDark)); // üë®üèæ‚Äçüè≠ (`U+1F468 U+1F3FE U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ‚Äçüè≠\");"]#[doc="println!(\"{}\", FACTORY_WORKER.gender(Gender::Male).tone(Tone::Dark)); // üë®üèø‚Äçüè≠ (`U+1F468 U+1F3FF U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë®üèø‚Äçüè≠\");"]#[doc="println!(\"{}\", FACTORY_WORKER.gender(Gender::Female)); // üë©‚Äçüè≠ (`U+1F469 U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.gender(Gender::Female).to_string().as_str(), \"üë©‚Äçüè≠\");"]#[doc="println!(\"{}\", FACTORY_WORKER.gender(Gender::Female).tone(Tone::Light)); // üë©üèª‚Äçüè≠ (`U+1F469 U+1F3FB U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äçüè≠\");"]#[doc="println!(\"{}\", FACTORY_WORKER.gender(Gender::Female).tone(Tone::MediumLight)); // üë©üèº‚Äçüè≠ (`U+1F469 U+1F3FC U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äçüè≠\");"]#[doc="println!(\"{}\", FACTORY_WORKER.gender(Gender::Female).tone(Tone::Medium)); // üë©üèΩ‚Äçüè≠ (`U+1F469 U+1F3FD U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äçüè≠\");"]#[doc="println!(\"{}\", FACTORY_WORKER.gender(Gender::Female).tone(Tone::MediumDark)); // üë©üèæ‚Äçüè≠ (`U+1F469 U+1F3FE U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äçüè≠\");"]#[doc="println!(\"{}\", FACTORY_WORKER.gender(Gender::Female).tone(Tone::Dark)); // üë©üèø‚Äçüè≠ (`U+1F469 U+1F3FF U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äçüè≠\");"]
#[doc="```"]
pub static FACTORY_WORKER: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("factory worker", Version(12, 1),"üßë‚Äçüè≠"), 
	&[
		Emoji::new("factory worker: light skin tone", Version(12, 1),"üßëüèª‚Äçüè≠"),
	Emoji::new("factory worker: medium-light skin tone", Version(12, 1),"üßëüèº‚Äçüè≠"),
	Emoji::new("factory worker: medium skin tone", Version(12, 1),"üßëüèΩ‚Äçüè≠"),
	Emoji::new("factory worker: medium-dark skin tone", Version(12, 1),"üßëüèæ‚Äçüè≠"),
	Emoji::new("factory worker: dark skin tone", Version(12, 1),"üßëüèø‚Äçüè≠"),
	]), 
	&[
		With::new(Emoji::new("man factory worker", Version(4, 0),"üë®‚Äçüè≠"), 
	&[
		Emoji::new("man factory worker: light skin tone", Version(4, 0),"üë®üèª‚Äçüè≠"),
	Emoji::new("man factory worker: medium-light skin tone", Version(4, 0),"üë®üèº‚Äçüè≠"),
	Emoji::new("man factory worker: medium skin tone", Version(4, 0),"üë®üèΩ‚Äçüè≠"),
	Emoji::new("man factory worker: medium-dark skin tone", Version(4, 0),"üë®üèæ‚Äçüè≠"),
	Emoji::new("man factory worker: dark skin tone", Version(4, 0),"üë®üèø‚Äçüè≠"),
	]),
	With::new(Emoji::new("woman factory worker", Version(4, 0),"üë©‚Äçüè≠"), 
	&[
		Emoji::new("woman factory worker: light skin tone", Version(4, 0),"üë©üèª‚Äçüè≠"),
	Emoji::new("woman factory worker: medium-light skin tone", Version(4, 0),"üë©üèº‚Äçüè≠"),
	Emoji::new("woman factory worker: medium skin tone", Version(4, 0),"üë©üèΩ‚Äçüè≠"),
	Emoji::new("woman factory worker: medium-dark skin tone", Version(4, 0),"üë©üèæ‚Äçüè≠"),
	Emoji::new("woman factory worker: dark skin tone", Version(4, 0),"üë©üèø‚Äçüè≠"),
	]),
	]);

		
		#[doc="farmer üßë‚Äçüåæ"]#[doc=""]#[doc="Since E4.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FARMER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FARMER); // üßë‚Äçüåæ (`U+1F9D1 U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.to_string().as_str(), \"üßë‚Äçüåæ\");"]#[doc="println!(\"{}\", FARMER.tone(Tone::Light)); // üßëüèª‚Äçüåæ (`U+1F9D1 U+1F3FB U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.tone(Tone::Light).to_string().as_str(), \"üßëüèª‚Äçüåæ\");"]#[doc="println!(\"{}\", FARMER.tone(Tone::MediumLight)); // üßëüèº‚Äçüåæ (`U+1F9D1 U+1F3FC U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº‚Äçüåæ\");"]#[doc="println!(\"{}\", FARMER.tone(Tone::Medium)); // üßëüèΩ‚Äçüåæ (`U+1F9D1 U+1F3FD U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ‚Äçüåæ\");"]#[doc="println!(\"{}\", FARMER.tone(Tone::MediumDark)); // üßëüèæ‚Äçüåæ (`U+1F9D1 U+1F3FE U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ‚Äçüåæ\");"]#[doc="println!(\"{}\", FARMER.tone(Tone::Dark)); // üßëüèø‚Äçüåæ (`U+1F9D1 U+1F3FF U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.tone(Tone::Dark).to_string().as_str(), \"üßëüèø‚Äçüåæ\");"]#[doc="println!(\"{}\", FARMER.gender(Gender::Male)); // üë®‚Äçüåæ (`U+1F468 U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.gender(Gender::Male).to_string().as_str(), \"üë®‚Äçüåæ\");"]#[doc="println!(\"{}\", FARMER.gender(Gender::Male).tone(Tone::Light)); // üë®üèª‚Äçüåæ (`U+1F468 U+1F3FB U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë®üèª‚Äçüåæ\");"]#[doc="println!(\"{}\", FARMER.gender(Gender::Male).tone(Tone::MediumLight)); // üë®üèº‚Äçüåæ (`U+1F468 U+1F3FC U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº‚Äçüåæ\");"]#[doc="println!(\"{}\", FARMER.gender(Gender::Male).tone(Tone::Medium)); // üë®üèΩ‚Äçüåæ (`U+1F468 U+1F3FD U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ‚Äçüåæ\");"]#[doc="println!(\"{}\", FARMER.gender(Gender::Male).tone(Tone::MediumDark)); // üë®üèæ‚Äçüåæ (`U+1F468 U+1F3FE U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ‚Äçüåæ\");"]#[doc="println!(\"{}\", FARMER.gender(Gender::Male).tone(Tone::Dark)); // üë®üèø‚Äçüåæ (`U+1F468 U+1F3FF U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë®üèø‚Äçüåæ\");"]#[doc="println!(\"{}\", FARMER.gender(Gender::Female)); // üë©‚Äçüåæ (`U+1F469 U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.gender(Gender::Female).to_string().as_str(), \"üë©‚Äçüåæ\");"]#[doc="println!(\"{}\", FARMER.gender(Gender::Female).tone(Tone::Light)); // üë©üèª‚Äçüåæ (`U+1F469 U+1F3FB U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äçüåæ\");"]#[doc="println!(\"{}\", FARMER.gender(Gender::Female).tone(Tone::MediumLight)); // üë©üèº‚Äçüåæ (`U+1F469 U+1F3FC U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äçüåæ\");"]#[doc="println!(\"{}\", FARMER.gender(Gender::Female).tone(Tone::Medium)); // üë©üèΩ‚Äçüåæ (`U+1F469 U+1F3FD U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äçüåæ\");"]#[doc="println!(\"{}\", FARMER.gender(Gender::Female).tone(Tone::MediumDark)); // üë©üèæ‚Äçüåæ (`U+1F469 U+1F3FE U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äçüåæ\");"]#[doc="println!(\"{}\", FARMER.gender(Gender::Female).tone(Tone::Dark)); // üë©üèø‚Äçüåæ (`U+1F469 U+1F3FF U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äçüåæ\");"]
#[doc="```"]
pub static FARMER: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("farmer", Version(12, 1),"üßë‚Äçüåæ"), 
	&[
		Emoji::new("farmer: light skin tone", Version(12, 1),"üßëüèª‚Äçüåæ"),
	Emoji::new("farmer: medium-light skin tone", Version(12, 1),"üßëüèº‚Äçüåæ"),
	Emoji::new("farmer: medium skin tone", Version(12, 1),"üßëüèΩ‚Äçüåæ"),
	Emoji::new("farmer: medium-dark skin tone", Version(12, 1),"üßëüèæ‚Äçüåæ"),
	Emoji::new("farmer: dark skin tone", Version(12, 1),"üßëüèø‚Äçüåæ"),
	]), 
	&[
		With::new(Emoji::new("man farmer", Version(4, 0),"üë®‚Äçüåæ"), 
	&[
		Emoji::new("man farmer: light skin tone", Version(4, 0),"üë®üèª‚Äçüåæ"),
	Emoji::new("man farmer: medium-light skin tone", Version(4, 0),"üë®üèº‚Äçüåæ"),
	Emoji::new("man farmer: medium skin tone", Version(4, 0),"üë®üèΩ‚Äçüåæ"),
	Emoji::new("man farmer: medium-dark skin tone", Version(4, 0),"üë®üèæ‚Äçüåæ"),
	Emoji::new("man farmer: dark skin tone", Version(4, 0),"üë®üèø‚Äçüåæ"),
	]),
	With::new(Emoji::new("woman farmer", Version(4, 0),"üë©‚Äçüåæ"), 
	&[
		Emoji::new("woman farmer: light skin tone", Version(4, 0),"üë©üèª‚Äçüåæ"),
	Emoji::new("woman farmer: medium-light skin tone", Version(4, 0),"üë©üèº‚Äçüåæ"),
	Emoji::new("woman farmer: medium skin tone", Version(4, 0),"üë©üèΩ‚Äçüåæ"),
	Emoji::new("woman farmer: medium-dark skin tone", Version(4, 0),"üë©üèæ‚Äçüåæ"),
	Emoji::new("woman farmer: dark skin tone", Version(4, 0),"üë©üèø‚Äçüåæ"),
	]),
	]);

		
		#[doc="firefighter üßë‚Äçüöí"]#[doc=""]#[doc="Since E4.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FIREFIGHTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FIREFIGHTER); // üßë‚Äçüöí (`U+1F9D1 U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.to_string().as_str(), \"üßë‚Äçüöí\");"]#[doc="println!(\"{}\", FIREFIGHTER.tone(Tone::Light)); // üßëüèª‚Äçüöí (`U+1F9D1 U+1F3FB U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.tone(Tone::Light).to_string().as_str(), \"üßëüèª‚Äçüöí\");"]#[doc="println!(\"{}\", FIREFIGHTER.tone(Tone::MediumLight)); // üßëüèº‚Äçüöí (`U+1F9D1 U+1F3FC U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº‚Äçüöí\");"]#[doc="println!(\"{}\", FIREFIGHTER.tone(Tone::Medium)); // üßëüèΩ‚Äçüöí (`U+1F9D1 U+1F3FD U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ‚Äçüöí\");"]#[doc="println!(\"{}\", FIREFIGHTER.tone(Tone::MediumDark)); // üßëüèæ‚Äçüöí (`U+1F9D1 U+1F3FE U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ‚Äçüöí\");"]#[doc="println!(\"{}\", FIREFIGHTER.tone(Tone::Dark)); // üßëüèø‚Äçüöí (`U+1F9D1 U+1F3FF U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.tone(Tone::Dark).to_string().as_str(), \"üßëüèø‚Äçüöí\");"]#[doc="println!(\"{}\", FIREFIGHTER.gender(Gender::Male)); // üë®‚Äçüöí (`U+1F468 U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.gender(Gender::Male).to_string().as_str(), \"üë®‚Äçüöí\");"]#[doc="println!(\"{}\", FIREFIGHTER.gender(Gender::Male).tone(Tone::Light)); // üë®üèª‚Äçüöí (`U+1F468 U+1F3FB U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë®üèª‚Äçüöí\");"]#[doc="println!(\"{}\", FIREFIGHTER.gender(Gender::Male).tone(Tone::MediumLight)); // üë®üèº‚Äçüöí (`U+1F468 U+1F3FC U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº‚Äçüöí\");"]#[doc="println!(\"{}\", FIREFIGHTER.gender(Gender::Male).tone(Tone::Medium)); // üë®üèΩ‚Äçüöí (`U+1F468 U+1F3FD U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ‚Äçüöí\");"]#[doc="println!(\"{}\", FIREFIGHTER.gender(Gender::Male).tone(Tone::MediumDark)); // üë®üèæ‚Äçüöí (`U+1F468 U+1F3FE U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ‚Äçüöí\");"]#[doc="println!(\"{}\", FIREFIGHTER.gender(Gender::Male).tone(Tone::Dark)); // üë®üèø‚Äçüöí (`U+1F468 U+1F3FF U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë®üèø‚Äçüöí\");"]#[doc="println!(\"{}\", FIREFIGHTER.gender(Gender::Female)); // üë©‚Äçüöí (`U+1F469 U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.gender(Gender::Female).to_string().as_str(), \"üë©‚Äçüöí\");"]#[doc="println!(\"{}\", FIREFIGHTER.gender(Gender::Female).tone(Tone::Light)); // üë©üèª‚Äçüöí (`U+1F469 U+1F3FB U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äçüöí\");"]#[doc="println!(\"{}\", FIREFIGHTER.gender(Gender::Female).tone(Tone::MediumLight)); // üë©üèº‚Äçüöí (`U+1F469 U+1F3FC U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äçüöí\");"]#[doc="println!(\"{}\", FIREFIGHTER.gender(Gender::Female).tone(Tone::Medium)); // üë©üèΩ‚Äçüöí (`U+1F469 U+1F3FD U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äçüöí\");"]#[doc="println!(\"{}\", FIREFIGHTER.gender(Gender::Female).tone(Tone::MediumDark)); // üë©üèæ‚Äçüöí (`U+1F469 U+1F3FE U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äçüöí\");"]#[doc="println!(\"{}\", FIREFIGHTER.gender(Gender::Female).tone(Tone::Dark)); // üë©üèø‚Äçüöí (`U+1F469 U+1F3FF U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äçüöí\");"]
#[doc="```"]
pub static FIREFIGHTER: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("firefighter", Version(12, 1),"üßë‚Äçüöí"), 
	&[
		Emoji::new("firefighter: light skin tone", Version(12, 1),"üßëüèª‚Äçüöí"),
	Emoji::new("firefighter: medium-light skin tone", Version(12, 1),"üßëüèº‚Äçüöí"),
	Emoji::new("firefighter: medium skin tone", Version(12, 1),"üßëüèΩ‚Äçüöí"),
	Emoji::new("firefighter: medium-dark skin tone", Version(12, 1),"üßëüèæ‚Äçüöí"),
	Emoji::new("firefighter: dark skin tone", Version(12, 1),"üßëüèø‚Äçüöí"),
	]), 
	&[
		With::new(Emoji::new("man firefighter", Version(4, 0),"üë®‚Äçüöí"), 
	&[
		Emoji::new("man firefighter: light skin tone", Version(4, 0),"üë®üèª‚Äçüöí"),
	Emoji::new("man firefighter: medium-light skin tone", Version(4, 0),"üë®üèº‚Äçüöí"),
	Emoji::new("man firefighter: medium skin tone", Version(4, 0),"üë®üèΩ‚Äçüöí"),
	Emoji::new("man firefighter: medium-dark skin tone", Version(4, 0),"üë®üèæ‚Äçüöí"),
	Emoji::new("man firefighter: dark skin tone", Version(4, 0),"üë®üèø‚Äçüöí"),
	]),
	With::new(Emoji::new("woman firefighter", Version(4, 0),"üë©‚Äçüöí"), 
	&[
		Emoji::new("woman firefighter: light skin tone", Version(4, 0),"üë©üèª‚Äçüöí"),
	Emoji::new("woman firefighter: medium-light skin tone", Version(4, 0),"üë©üèº‚Äçüöí"),
	Emoji::new("woman firefighter: medium skin tone", Version(4, 0),"üë©üèΩ‚Äçüöí"),
	Emoji::new("woman firefighter: medium-dark skin tone", Version(4, 0),"üë©üèæ‚Äçüöí"),
	Emoji::new("woman firefighter: dark skin tone", Version(4, 0),"üë©üèø‚Äçüöí"),
	]),
	]);

		
		#[doc="guard üíÇ"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GUARD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GUARD); // üíÇ (`U+1F482`)"] #[doc="# assert_eq!(GUARD.to_string().as_str(), \"üíÇ\");"]#[doc="println!(\"{}\", GUARD.tone(Tone::Light)); // üíÇüèª (`U+1F482 U+1F3FB`)"] #[doc="# assert_eq!(GUARD.tone(Tone::Light).to_string().as_str(), \"üíÇüèª\");"]#[doc="println!(\"{}\", GUARD.tone(Tone::MediumLight)); // üíÇüèº (`U+1F482 U+1F3FC`)"] #[doc="# assert_eq!(GUARD.tone(Tone::MediumLight).to_string().as_str(), \"üíÇüèº\");"]#[doc="println!(\"{}\", GUARD.tone(Tone::Medium)); // üíÇüèΩ (`U+1F482 U+1F3FD`)"] #[doc="# assert_eq!(GUARD.tone(Tone::Medium).to_string().as_str(), \"üíÇüèΩ\");"]#[doc="println!(\"{}\", GUARD.tone(Tone::MediumDark)); // üíÇüèæ (`U+1F482 U+1F3FE`)"] #[doc="# assert_eq!(GUARD.tone(Tone::MediumDark).to_string().as_str(), \"üíÇüèæ\");"]#[doc="println!(\"{}\", GUARD.tone(Tone::Dark)); // üíÇüèø (`U+1F482 U+1F3FF`)"] #[doc="# assert_eq!(GUARD.tone(Tone::Dark).to_string().as_str(), \"üíÇüèø\");"]#[doc="println!(\"{}\", GUARD.gender(Gender::Male)); // üíÇ‚Äç‚ôÇÔ∏è (`U+1F482 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(GUARD.gender(Gender::Male).to_string().as_str(), \"üíÇ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", GUARD.gender(Gender::Male).tone(Tone::Light)); // üíÇüèª‚Äç‚ôÇÔ∏è (`U+1F482 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(GUARD.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üíÇüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", GUARD.gender(Gender::Male).tone(Tone::MediumLight)); // üíÇüèº‚Äç‚ôÇÔ∏è (`U+1F482 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(GUARD.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üíÇüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", GUARD.gender(Gender::Male).tone(Tone::Medium)); // üíÇüèΩ‚Äç‚ôÇÔ∏è (`U+1F482 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(GUARD.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üíÇüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", GUARD.gender(Gender::Male).tone(Tone::MediumDark)); // üíÇüèæ‚Äç‚ôÇÔ∏è (`U+1F482 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(GUARD.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üíÇüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", GUARD.gender(Gender::Male).tone(Tone::Dark)); // üíÇüèø‚Äç‚ôÇÔ∏è (`U+1F482 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(GUARD.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üíÇüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", GUARD.gender(Gender::Female)); // üíÇ‚Äç‚ôÄÔ∏è (`U+1F482 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(GUARD.gender(Gender::Female).to_string().as_str(), \"üíÇ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", GUARD.gender(Gender::Female).tone(Tone::Light)); // üíÇüèª‚Äç‚ôÄÔ∏è (`U+1F482 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(GUARD.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üíÇüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", GUARD.gender(Gender::Female).tone(Tone::MediumLight)); // üíÇüèº‚Äç‚ôÄÔ∏è (`U+1F482 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(GUARD.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üíÇüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", GUARD.gender(Gender::Female).tone(Tone::Medium)); // üíÇüèΩ‚Äç‚ôÄÔ∏è (`U+1F482 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(GUARD.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üíÇüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", GUARD.gender(Gender::Female).tone(Tone::MediumDark)); // üíÇüèæ‚Äç‚ôÄÔ∏è (`U+1F482 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(GUARD.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üíÇüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", GUARD.gender(Gender::Female).tone(Tone::Dark)); // üíÇüèø‚Äç‚ôÄÔ∏è (`U+1F482 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(GUARD.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üíÇüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static GUARD: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("guard", Version(0, 6),"üíÇ"), 
	&[
		Emoji::new("guard: light skin tone", Version(1, 0),"üíÇüèª"),
	Emoji::new("guard: medium-light skin tone", Version(1, 0),"üíÇüèº"),
	Emoji::new("guard: medium skin tone", Version(1, 0),"üíÇüèΩ"),
	Emoji::new("guard: medium-dark skin tone", Version(1, 0),"üíÇüèæ"),
	Emoji::new("guard: dark skin tone", Version(1, 0),"üíÇüèø"),
	]), 
	&[
		With::new(Emoji::new("man guard", Version(4, 0),"üíÇ‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man guard: light skin tone", Version(4, 0),"üíÇüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man guard: medium-light skin tone", Version(4, 0),"üíÇüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man guard: medium skin tone", Version(4, 0),"üíÇüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man guard: medium-dark skin tone", Version(4, 0),"üíÇüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man guard: dark skin tone", Version(4, 0),"üíÇüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman guard", Version(4, 0),"üíÇ‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman guard: light skin tone", Version(4, 0),"üíÇüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman guard: medium-light skin tone", Version(4, 0),"üíÇüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman guard: medium skin tone", Version(4, 0),"üíÇüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman guard: medium-dark skin tone", Version(4, 0),"üíÇüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman guard: dark skin tone", Version(4, 0),"üíÇüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="health worker üßë‚Äç‚öïÔ∏è"]#[doc=""]#[doc="Since E4.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HEALTH_WORKER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HEALTH_WORKER); // üßë‚Äç‚öïÔ∏è (`U+1F9D1 U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.to_string().as_str(), \"üßë‚Äç‚öïÔ∏è\");"]#[doc="println!(\"{}\", HEALTH_WORKER.tone(Tone::Light)); // üßëüèª‚Äç‚öïÔ∏è (`U+1F9D1 U+1F3FB U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.tone(Tone::Light).to_string().as_str(), \"üßëüèª‚Äç‚öïÔ∏è\");"]#[doc="println!(\"{}\", HEALTH_WORKER.tone(Tone::MediumLight)); // üßëüèº‚Äç‚öïÔ∏è (`U+1F9D1 U+1F3FC U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº‚Äç‚öïÔ∏è\");"]#[doc="println!(\"{}\", HEALTH_WORKER.tone(Tone::Medium)); // üßëüèΩ‚Äç‚öïÔ∏è (`U+1F9D1 U+1F3FD U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ‚Äç‚öïÔ∏è\");"]#[doc="println!(\"{}\", HEALTH_WORKER.tone(Tone::MediumDark)); // üßëüèæ‚Äç‚öïÔ∏è (`U+1F9D1 U+1F3FE U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ‚Äç‚öïÔ∏è\");"]#[doc="println!(\"{}\", HEALTH_WORKER.tone(Tone::Dark)); // üßëüèø‚Äç‚öïÔ∏è (`U+1F9D1 U+1F3FF U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.tone(Tone::Dark).to_string().as_str(), \"üßëüèø‚Äç‚öïÔ∏è\");"]#[doc="println!(\"{}\", HEALTH_WORKER.gender(Gender::Male)); // üë®‚Äç‚öïÔ∏è (`U+1F468 U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.gender(Gender::Male).to_string().as_str(), \"üë®‚Äç‚öïÔ∏è\");"]#[doc="println!(\"{}\", HEALTH_WORKER.gender(Gender::Male).tone(Tone::Light)); // üë®üèª‚Äç‚öïÔ∏è (`U+1F468 U+1F3FB U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë®üèª‚Äç‚öïÔ∏è\");"]#[doc="println!(\"{}\", HEALTH_WORKER.gender(Gender::Male).tone(Tone::MediumLight)); // üë®üèº‚Äç‚öïÔ∏è (`U+1F468 U+1F3FC U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº‚Äç‚öïÔ∏è\");"]#[doc="println!(\"{}\", HEALTH_WORKER.gender(Gender::Male).tone(Tone::Medium)); // üë®üèΩ‚Äç‚öïÔ∏è (`U+1F468 U+1F3FD U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ‚Äç‚öïÔ∏è\");"]#[doc="println!(\"{}\", HEALTH_WORKER.gender(Gender::Male).tone(Tone::MediumDark)); // üë®üèæ‚Äç‚öïÔ∏è (`U+1F468 U+1F3FE U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ‚Äç‚öïÔ∏è\");"]#[doc="println!(\"{}\", HEALTH_WORKER.gender(Gender::Male).tone(Tone::Dark)); // üë®üèø‚Äç‚öïÔ∏è (`U+1F468 U+1F3FF U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë®üèø‚Äç‚öïÔ∏è\");"]#[doc="println!(\"{}\", HEALTH_WORKER.gender(Gender::Female)); // üë©‚Äç‚öïÔ∏è (`U+1F469 U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.gender(Gender::Female).to_string().as_str(), \"üë©‚Äç‚öïÔ∏è\");"]#[doc="println!(\"{}\", HEALTH_WORKER.gender(Gender::Female).tone(Tone::Light)); // üë©üèª‚Äç‚öïÔ∏è (`U+1F469 U+1F3FB U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äç‚öïÔ∏è\");"]#[doc="println!(\"{}\", HEALTH_WORKER.gender(Gender::Female).tone(Tone::MediumLight)); // üë©üèº‚Äç‚öïÔ∏è (`U+1F469 U+1F3FC U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äç‚öïÔ∏è\");"]#[doc="println!(\"{}\", HEALTH_WORKER.gender(Gender::Female).tone(Tone::Medium)); // üë©üèΩ‚Äç‚öïÔ∏è (`U+1F469 U+1F3FD U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äç‚öïÔ∏è\");"]#[doc="println!(\"{}\", HEALTH_WORKER.gender(Gender::Female).tone(Tone::MediumDark)); // üë©üèæ‚Äç‚öïÔ∏è (`U+1F469 U+1F3FE U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äç‚öïÔ∏è\");"]#[doc="println!(\"{}\", HEALTH_WORKER.gender(Gender::Female).tone(Tone::Dark)); // üë©üèø‚Äç‚öïÔ∏è (`U+1F469 U+1F3FF U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äç‚öïÔ∏è\");"]
#[doc="```"]
pub static HEALTH_WORKER: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("health worker", Version(12, 1),"üßë‚Äç‚öïÔ∏è"), 
	&[
		Emoji::new("health worker: light skin tone", Version(12, 1),"üßëüèª‚Äç‚öïÔ∏è"),
	Emoji::new("health worker: medium-light skin tone", Version(12, 1),"üßëüèº‚Äç‚öïÔ∏è"),
	Emoji::new("health worker: medium skin tone", Version(12, 1),"üßëüèΩ‚Äç‚öïÔ∏è"),
	Emoji::new("health worker: medium-dark skin tone", Version(12, 1),"üßëüèæ‚Äç‚öïÔ∏è"),
	Emoji::new("health worker: dark skin tone", Version(12, 1),"üßëüèø‚Äç‚öïÔ∏è"),
	]), 
	&[
		With::new(Emoji::new("man health worker", Version(4, 0),"üë®‚Äç‚öïÔ∏è"), 
	&[
		Emoji::new("man health worker: light skin tone", Version(4, 0),"üë®üèª‚Äç‚öïÔ∏è"),
	Emoji::new("man health worker: medium-light skin tone", Version(4, 0),"üë®üèº‚Äç‚öïÔ∏è"),
	Emoji::new("man health worker: medium skin tone", Version(4, 0),"üë®üèΩ‚Äç‚öïÔ∏è"),
	Emoji::new("man health worker: medium-dark skin tone", Version(4, 0),"üë®üèæ‚Äç‚öïÔ∏è"),
	Emoji::new("man health worker: dark skin tone", Version(4, 0),"üë®üèø‚Äç‚öïÔ∏è"),
	]),
	With::new(Emoji::new("woman health worker", Version(4, 0),"üë©‚Äç‚öïÔ∏è"), 
	&[
		Emoji::new("woman health worker: light skin tone", Version(4, 0),"üë©üèª‚Äç‚öïÔ∏è"),
	Emoji::new("woman health worker: medium-light skin tone", Version(4, 0),"üë©üèº‚Äç‚öïÔ∏è"),
	Emoji::new("woman health worker: medium skin tone", Version(4, 0),"üë©üèΩ‚Äç‚öïÔ∏è"),
	Emoji::new("woman health worker: medium-dark skin tone", Version(4, 0),"üë©üèæ‚Äç‚öïÔ∏è"),
	Emoji::new("woman health worker: dark skin tone", Version(4, 0),"üë©üèø‚Äç‚öïÔ∏è"),
	]),
	]);

		
		#[doc="judge üßë‚Äç‚öñÔ∏è"]#[doc=""]#[doc="Since E4.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JUDGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JUDGE); // üßë‚Äç‚öñÔ∏è (`U+1F9D1 U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.to_string().as_str(), \"üßë‚Äç‚öñÔ∏è\");"]#[doc="println!(\"{}\", JUDGE.tone(Tone::Light)); // üßëüèª‚Äç‚öñÔ∏è (`U+1F9D1 U+1F3FB U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.tone(Tone::Light).to_string().as_str(), \"üßëüèª‚Äç‚öñÔ∏è\");"]#[doc="println!(\"{}\", JUDGE.tone(Tone::MediumLight)); // üßëüèº‚Äç‚öñÔ∏è (`U+1F9D1 U+1F3FC U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº‚Äç‚öñÔ∏è\");"]#[doc="println!(\"{}\", JUDGE.tone(Tone::Medium)); // üßëüèΩ‚Äç‚öñÔ∏è (`U+1F9D1 U+1F3FD U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ‚Äç‚öñÔ∏è\");"]#[doc="println!(\"{}\", JUDGE.tone(Tone::MediumDark)); // üßëüèæ‚Äç‚öñÔ∏è (`U+1F9D1 U+1F3FE U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ‚Äç‚öñÔ∏è\");"]#[doc="println!(\"{}\", JUDGE.tone(Tone::Dark)); // üßëüèø‚Äç‚öñÔ∏è (`U+1F9D1 U+1F3FF U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.tone(Tone::Dark).to_string().as_str(), \"üßëüèø‚Äç‚öñÔ∏è\");"]#[doc="println!(\"{}\", JUDGE.gender(Gender::Male)); // üë®‚Äç‚öñÔ∏è (`U+1F468 U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.gender(Gender::Male).to_string().as_str(), \"üë®‚Äç‚öñÔ∏è\");"]#[doc="println!(\"{}\", JUDGE.gender(Gender::Male).tone(Tone::Light)); // üë®üèª‚Äç‚öñÔ∏è (`U+1F468 U+1F3FB U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë®üèª‚Äç‚öñÔ∏è\");"]#[doc="println!(\"{}\", JUDGE.gender(Gender::Male).tone(Tone::MediumLight)); // üë®üèº‚Äç‚öñÔ∏è (`U+1F468 U+1F3FC U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº‚Äç‚öñÔ∏è\");"]#[doc="println!(\"{}\", JUDGE.gender(Gender::Male).tone(Tone::Medium)); // üë®üèΩ‚Äç‚öñÔ∏è (`U+1F468 U+1F3FD U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ‚Äç‚öñÔ∏è\");"]#[doc="println!(\"{}\", JUDGE.gender(Gender::Male).tone(Tone::MediumDark)); // üë®üèæ‚Äç‚öñÔ∏è (`U+1F468 U+1F3FE U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ‚Äç‚öñÔ∏è\");"]#[doc="println!(\"{}\", JUDGE.gender(Gender::Male).tone(Tone::Dark)); // üë®üèø‚Äç‚öñÔ∏è (`U+1F468 U+1F3FF U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë®üèø‚Äç‚öñÔ∏è\");"]#[doc="println!(\"{}\", JUDGE.gender(Gender::Female)); // üë©‚Äç‚öñÔ∏è (`U+1F469 U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.gender(Gender::Female).to_string().as_str(), \"üë©‚Äç‚öñÔ∏è\");"]#[doc="println!(\"{}\", JUDGE.gender(Gender::Female).tone(Tone::Light)); // üë©üèª‚Äç‚öñÔ∏è (`U+1F469 U+1F3FB U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äç‚öñÔ∏è\");"]#[doc="println!(\"{}\", JUDGE.gender(Gender::Female).tone(Tone::MediumLight)); // üë©üèº‚Äç‚öñÔ∏è (`U+1F469 U+1F3FC U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äç‚öñÔ∏è\");"]#[doc="println!(\"{}\", JUDGE.gender(Gender::Female).tone(Tone::Medium)); // üë©üèΩ‚Äç‚öñÔ∏è (`U+1F469 U+1F3FD U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äç‚öñÔ∏è\");"]#[doc="println!(\"{}\", JUDGE.gender(Gender::Female).tone(Tone::MediumDark)); // üë©üèæ‚Äç‚öñÔ∏è (`U+1F469 U+1F3FE U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äç‚öñÔ∏è\");"]#[doc="println!(\"{}\", JUDGE.gender(Gender::Female).tone(Tone::Dark)); // üë©üèø‚Äç‚öñÔ∏è (`U+1F469 U+1F3FF U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äç‚öñÔ∏è\");"]
#[doc="```"]
pub static JUDGE: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("judge", Version(12, 1),"üßë‚Äç‚öñÔ∏è"), 
	&[
		Emoji::new("judge: light skin tone", Version(12, 1),"üßëüèª‚Äç‚öñÔ∏è"),
	Emoji::new("judge: medium-light skin tone", Version(12, 1),"üßëüèº‚Äç‚öñÔ∏è"),
	Emoji::new("judge: medium skin tone", Version(12, 1),"üßëüèΩ‚Äç‚öñÔ∏è"),
	Emoji::new("judge: medium-dark skin tone", Version(12, 1),"üßëüèæ‚Äç‚öñÔ∏è"),
	Emoji::new("judge: dark skin tone", Version(12, 1),"üßëüèø‚Äç‚öñÔ∏è"),
	]), 
	&[
		With::new(Emoji::new("man judge", Version(4, 0),"üë®‚Äç‚öñÔ∏è"), 
	&[
		Emoji::new("man judge: light skin tone", Version(4, 0),"üë®üèª‚Äç‚öñÔ∏è"),
	Emoji::new("man judge: medium-light skin tone", Version(4, 0),"üë®üèº‚Äç‚öñÔ∏è"),
	Emoji::new("man judge: medium skin tone", Version(4, 0),"üë®üèΩ‚Äç‚öñÔ∏è"),
	Emoji::new("man judge: medium-dark skin tone", Version(4, 0),"üë®üèæ‚Äç‚öñÔ∏è"),
	Emoji::new("man judge: dark skin tone", Version(4, 0),"üë®üèø‚Äç‚öñÔ∏è"),
	]),
	With::new(Emoji::new("woman judge", Version(4, 0),"üë©‚Äç‚öñÔ∏è"), 
	&[
		Emoji::new("woman judge: light skin tone", Version(4, 0),"üë©üèª‚Äç‚öñÔ∏è"),
	Emoji::new("woman judge: medium-light skin tone", Version(4, 0),"üë©üèº‚Äç‚öñÔ∏è"),
	Emoji::new("woman judge: medium skin tone", Version(4, 0),"üë©üèΩ‚Äç‚öñÔ∏è"),
	Emoji::new("woman judge: medium-dark skin tone", Version(4, 0),"üë©üèæ‚Äç‚öñÔ∏è"),
	Emoji::new("woman judge: dark skin tone", Version(4, 0),"üë©üèø‚Äç‚öñÔ∏è"),
	]),
	]);

		
		#[doc="mechanic üßë‚Äçüîß"]#[doc=""]#[doc="Since E4.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MECHANIC;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MECHANIC); // üßë‚Äçüîß (`U+1F9D1 U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.to_string().as_str(), \"üßë‚Äçüîß\");"]#[doc="println!(\"{}\", MECHANIC.tone(Tone::Light)); // üßëüèª‚Äçüîß (`U+1F9D1 U+1F3FB U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.tone(Tone::Light).to_string().as_str(), \"üßëüèª‚Äçüîß\");"]#[doc="println!(\"{}\", MECHANIC.tone(Tone::MediumLight)); // üßëüèº‚Äçüîß (`U+1F9D1 U+1F3FC U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº‚Äçüîß\");"]#[doc="println!(\"{}\", MECHANIC.tone(Tone::Medium)); // üßëüèΩ‚Äçüîß (`U+1F9D1 U+1F3FD U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ‚Äçüîß\");"]#[doc="println!(\"{}\", MECHANIC.tone(Tone::MediumDark)); // üßëüèæ‚Äçüîß (`U+1F9D1 U+1F3FE U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ‚Äçüîß\");"]#[doc="println!(\"{}\", MECHANIC.tone(Tone::Dark)); // üßëüèø‚Äçüîß (`U+1F9D1 U+1F3FF U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.tone(Tone::Dark).to_string().as_str(), \"üßëüèø‚Äçüîß\");"]#[doc="println!(\"{}\", MECHANIC.gender(Gender::Male)); // üë®‚Äçüîß (`U+1F468 U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.gender(Gender::Male).to_string().as_str(), \"üë®‚Äçüîß\");"]#[doc="println!(\"{}\", MECHANIC.gender(Gender::Male).tone(Tone::Light)); // üë®üèª‚Äçüîß (`U+1F468 U+1F3FB U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë®üèª‚Äçüîß\");"]#[doc="println!(\"{}\", MECHANIC.gender(Gender::Male).tone(Tone::MediumLight)); // üë®üèº‚Äçüîß (`U+1F468 U+1F3FC U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº‚Äçüîß\");"]#[doc="println!(\"{}\", MECHANIC.gender(Gender::Male).tone(Tone::Medium)); // üë®üèΩ‚Äçüîß (`U+1F468 U+1F3FD U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ‚Äçüîß\");"]#[doc="println!(\"{}\", MECHANIC.gender(Gender::Male).tone(Tone::MediumDark)); // üë®üèæ‚Äçüîß (`U+1F468 U+1F3FE U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ‚Äçüîß\");"]#[doc="println!(\"{}\", MECHANIC.gender(Gender::Male).tone(Tone::Dark)); // üë®üèø‚Äçüîß (`U+1F468 U+1F3FF U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë®üèø‚Äçüîß\");"]#[doc="println!(\"{}\", MECHANIC.gender(Gender::Female)); // üë©‚Äçüîß (`U+1F469 U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.gender(Gender::Female).to_string().as_str(), \"üë©‚Äçüîß\");"]#[doc="println!(\"{}\", MECHANIC.gender(Gender::Female).tone(Tone::Light)); // üë©üèª‚Äçüîß (`U+1F469 U+1F3FB U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äçüîß\");"]#[doc="println!(\"{}\", MECHANIC.gender(Gender::Female).tone(Tone::MediumLight)); // üë©üèº‚Äçüîß (`U+1F469 U+1F3FC U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äçüîß\");"]#[doc="println!(\"{}\", MECHANIC.gender(Gender::Female).tone(Tone::Medium)); // üë©üèΩ‚Äçüîß (`U+1F469 U+1F3FD U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äçüîß\");"]#[doc="println!(\"{}\", MECHANIC.gender(Gender::Female).tone(Tone::MediumDark)); // üë©üèæ‚Äçüîß (`U+1F469 U+1F3FE U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äçüîß\");"]#[doc="println!(\"{}\", MECHANIC.gender(Gender::Female).tone(Tone::Dark)); // üë©üèø‚Äçüîß (`U+1F469 U+1F3FF U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äçüîß\");"]
#[doc="```"]
pub static MECHANIC: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("mechanic", Version(12, 1),"üßë‚Äçüîß"), 
	&[
		Emoji::new("mechanic: light skin tone", Version(12, 1),"üßëüèª‚Äçüîß"),
	Emoji::new("mechanic: medium-light skin tone", Version(12, 1),"üßëüèº‚Äçüîß"),
	Emoji::new("mechanic: medium skin tone", Version(12, 1),"üßëüèΩ‚Äçüîß"),
	Emoji::new("mechanic: medium-dark skin tone", Version(12, 1),"üßëüèæ‚Äçüîß"),
	Emoji::new("mechanic: dark skin tone", Version(12, 1),"üßëüèø‚Äçüîß"),
	]), 
	&[
		With::new(Emoji::new("man mechanic", Version(4, 0),"üë®‚Äçüîß"), 
	&[
		Emoji::new("man mechanic: light skin tone", Version(4, 0),"üë®üèª‚Äçüîß"),
	Emoji::new("man mechanic: medium-light skin tone", Version(4, 0),"üë®üèº‚Äçüîß"),
	Emoji::new("man mechanic: medium skin tone", Version(4, 0),"üë®üèΩ‚Äçüîß"),
	Emoji::new("man mechanic: medium-dark skin tone", Version(4, 0),"üë®üèæ‚Äçüîß"),
	Emoji::new("man mechanic: dark skin tone", Version(4, 0),"üë®üèø‚Äçüîß"),
	]),
	With::new(Emoji::new("woman mechanic", Version(4, 0),"üë©‚Äçüîß"), 
	&[
		Emoji::new("woman mechanic: light skin tone", Version(4, 0),"üë©üèª‚Äçüîß"),
	Emoji::new("woman mechanic: medium-light skin tone", Version(4, 0),"üë©üèº‚Äçüîß"),
	Emoji::new("woman mechanic: medium skin tone", Version(4, 0),"üë©üèΩ‚Äçüîß"),
	Emoji::new("woman mechanic: medium-dark skin tone", Version(4, 0),"üë©üèæ‚Äçüîß"),
	Emoji::new("woman mechanic: dark skin tone", Version(4, 0),"üë©üèø‚Äçüîß"),
	]),
	]);

		
		#[doc="ninja ü•∑"]#[doc=""]#[doc="Since E13.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NINJA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NINJA); // ü•∑ (`U+1F977`)"] #[doc="# assert_eq!(NINJA.to_string().as_str(), \"ü•∑\");"]#[doc="println!(\"{}\", NINJA.tone(Tone::Light)); // ü•∑üèª (`U+1F977 U+1F3FB`)"] #[doc="# assert_eq!(NINJA.tone(Tone::Light).to_string().as_str(), \"ü•∑üèª\");"]#[doc="println!(\"{}\", NINJA.tone(Tone::MediumLight)); // ü•∑üèº (`U+1F977 U+1F3FC`)"] #[doc="# assert_eq!(NINJA.tone(Tone::MediumLight).to_string().as_str(), \"ü•∑üèº\");"]#[doc="println!(\"{}\", NINJA.tone(Tone::Medium)); // ü•∑üèΩ (`U+1F977 U+1F3FD`)"] #[doc="# assert_eq!(NINJA.tone(Tone::Medium).to_string().as_str(), \"ü•∑üèΩ\");"]#[doc="println!(\"{}\", NINJA.tone(Tone::MediumDark)); // ü•∑üèæ (`U+1F977 U+1F3FE`)"] #[doc="# assert_eq!(NINJA.tone(Tone::MediumDark).to_string().as_str(), \"ü•∑üèæ\");"]#[doc="println!(\"{}\", NINJA.tone(Tone::Dark)); // ü•∑üèø (`U+1F977 U+1F3FF`)"] #[doc="# assert_eq!(NINJA.tone(Tone::Dark).to_string().as_str(), \"ü•∑üèø\");"]
#[doc="```"]
pub static NINJA: With<Tone,Emoji> = With::new(Emoji::new("ninja", Version(13, 0),"ü•∑"), 
	&[
		Emoji::new("ninja: light skin tone", Version(13, 0),"ü•∑üèª"),
	Emoji::new("ninja: medium-light skin tone", Version(13, 0),"ü•∑üèº"),
	Emoji::new("ninja: medium skin tone", Version(13, 0),"ü•∑üèΩ"),
	Emoji::new("ninja: medium-dark skin tone", Version(13, 0),"ü•∑üèæ"),
	Emoji::new("ninja: dark skin tone", Version(13, 0),"ü•∑üèø"),
	]);

		
		#[doc="office worker üßë‚Äçüíº"]#[doc=""]#[doc="Since E4.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OFFICE_WORKER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OFFICE_WORKER); // üßë‚Äçüíº (`U+1F9D1 U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.to_string().as_str(), \"üßë‚Äçüíº\");"]#[doc="println!(\"{}\", OFFICE_WORKER.tone(Tone::Light)); // üßëüèª‚Äçüíº (`U+1F9D1 U+1F3FB U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.tone(Tone::Light).to_string().as_str(), \"üßëüèª‚Äçüíº\");"]#[doc="println!(\"{}\", OFFICE_WORKER.tone(Tone::MediumLight)); // üßëüèº‚Äçüíº (`U+1F9D1 U+1F3FC U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº‚Äçüíº\");"]#[doc="println!(\"{}\", OFFICE_WORKER.tone(Tone::Medium)); // üßëüèΩ‚Äçüíº (`U+1F9D1 U+1F3FD U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ‚Äçüíº\");"]#[doc="println!(\"{}\", OFFICE_WORKER.tone(Tone::MediumDark)); // üßëüèæ‚Äçüíº (`U+1F9D1 U+1F3FE U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ‚Äçüíº\");"]#[doc="println!(\"{}\", OFFICE_WORKER.tone(Tone::Dark)); // üßëüèø‚Äçüíº (`U+1F9D1 U+1F3FF U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.tone(Tone::Dark).to_string().as_str(), \"üßëüèø‚Äçüíº\");"]#[doc="println!(\"{}\", OFFICE_WORKER.gender(Gender::Male)); // üë®‚Äçüíº (`U+1F468 U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.gender(Gender::Male).to_string().as_str(), \"üë®‚Äçüíº\");"]#[doc="println!(\"{}\", OFFICE_WORKER.gender(Gender::Male).tone(Tone::Light)); // üë®üèª‚Äçüíº (`U+1F468 U+1F3FB U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë®üèª‚Äçüíº\");"]#[doc="println!(\"{}\", OFFICE_WORKER.gender(Gender::Male).tone(Tone::MediumLight)); // üë®üèº‚Äçüíº (`U+1F468 U+1F3FC U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº‚Äçüíº\");"]#[doc="println!(\"{}\", OFFICE_WORKER.gender(Gender::Male).tone(Tone::Medium)); // üë®üèΩ‚Äçüíº (`U+1F468 U+1F3FD U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ‚Äçüíº\");"]#[doc="println!(\"{}\", OFFICE_WORKER.gender(Gender::Male).tone(Tone::MediumDark)); // üë®üèæ‚Äçüíº (`U+1F468 U+1F3FE U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ‚Äçüíº\");"]#[doc="println!(\"{}\", OFFICE_WORKER.gender(Gender::Male).tone(Tone::Dark)); // üë®üèø‚Äçüíº (`U+1F468 U+1F3FF U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë®üèø‚Äçüíº\");"]#[doc="println!(\"{}\", OFFICE_WORKER.gender(Gender::Female)); // üë©‚Äçüíº (`U+1F469 U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.gender(Gender::Female).to_string().as_str(), \"üë©‚Äçüíº\");"]#[doc="println!(\"{}\", OFFICE_WORKER.gender(Gender::Female).tone(Tone::Light)); // üë©üèª‚Äçüíº (`U+1F469 U+1F3FB U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äçüíº\");"]#[doc="println!(\"{}\", OFFICE_WORKER.gender(Gender::Female).tone(Tone::MediumLight)); // üë©üèº‚Äçüíº (`U+1F469 U+1F3FC U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äçüíº\");"]#[doc="println!(\"{}\", OFFICE_WORKER.gender(Gender::Female).tone(Tone::Medium)); // üë©üèΩ‚Äçüíº (`U+1F469 U+1F3FD U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äçüíº\");"]#[doc="println!(\"{}\", OFFICE_WORKER.gender(Gender::Female).tone(Tone::MediumDark)); // üë©üèæ‚Äçüíº (`U+1F469 U+1F3FE U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äçüíº\");"]#[doc="println!(\"{}\", OFFICE_WORKER.gender(Gender::Female).tone(Tone::Dark)); // üë©üèø‚Äçüíº (`U+1F469 U+1F3FF U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äçüíº\");"]
#[doc="```"]
pub static OFFICE_WORKER: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("office worker", Version(12, 1),"üßë‚Äçüíº"), 
	&[
		Emoji::new("office worker: light skin tone", Version(12, 1),"üßëüèª‚Äçüíº"),
	Emoji::new("office worker: medium-light skin tone", Version(12, 1),"üßëüèº‚Äçüíº"),
	Emoji::new("office worker: medium skin tone", Version(12, 1),"üßëüèΩ‚Äçüíº"),
	Emoji::new("office worker: medium-dark skin tone", Version(12, 1),"üßëüèæ‚Äçüíº"),
	Emoji::new("office worker: dark skin tone", Version(12, 1),"üßëüèø‚Äçüíº"),
	]), 
	&[
		With::new(Emoji::new("man office worker", Version(4, 0),"üë®‚Äçüíº"), 
	&[
		Emoji::new("man office worker: light skin tone", Version(4, 0),"üë®üèª‚Äçüíº"),
	Emoji::new("man office worker: medium-light skin tone", Version(4, 0),"üë®üèº‚Äçüíº"),
	Emoji::new("man office worker: medium skin tone", Version(4, 0),"üë®üèΩ‚Äçüíº"),
	Emoji::new("man office worker: medium-dark skin tone", Version(4, 0),"üë®üèæ‚Äçüíº"),
	Emoji::new("man office worker: dark skin tone", Version(4, 0),"üë®üèø‚Äçüíº"),
	]),
	With::new(Emoji::new("woman office worker", Version(4, 0),"üë©‚Äçüíº"), 
	&[
		Emoji::new("woman office worker: light skin tone", Version(4, 0),"üë©üèª‚Äçüíº"),
	Emoji::new("woman office worker: medium-light skin tone", Version(4, 0),"üë©üèº‚Äçüíº"),
	Emoji::new("woman office worker: medium skin tone", Version(4, 0),"üë©üèΩ‚Äçüíº"),
	Emoji::new("woman office worker: medium-dark skin tone", Version(4, 0),"üë©üèæ‚Äçüíº"),
	Emoji::new("woman office worker: dark skin tone", Version(4, 0),"üë©üèø‚Äçüíº"),
	]),
	]);

		
		#[doc="person feeding baby üßë‚Äçüçº"]#[doc=""]#[doc="Since E13.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_FEEDING_BABY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_FEEDING_BABY); // üßë‚Äçüçº (`U+1F9D1 U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.to_string().as_str(), \"üßë‚Äçüçº\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.tone(Tone::Light)); // üßëüèª‚Äçüçº (`U+1F9D1 U+1F3FB U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.tone(Tone::Light).to_string().as_str(), \"üßëüèª‚Äçüçº\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.tone(Tone::MediumLight)); // üßëüèº‚Äçüçº (`U+1F9D1 U+1F3FC U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº‚Äçüçº\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.tone(Tone::Medium)); // üßëüèΩ‚Äçüçº (`U+1F9D1 U+1F3FD U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ‚Äçüçº\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.tone(Tone::MediumDark)); // üßëüèæ‚Äçüçº (`U+1F9D1 U+1F3FE U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ‚Äçüçº\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.tone(Tone::Dark)); // üßëüèø‚Äçüçº (`U+1F9D1 U+1F3FF U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.tone(Tone::Dark).to_string().as_str(), \"üßëüèø‚Äçüçº\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.gender(Gender::Male)); // üë®‚Äçüçº (`U+1F468 U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.gender(Gender::Male).to_string().as_str(), \"üë®‚Äçüçº\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::Light)); // üë®üèª‚Äçüçº (`U+1F468 U+1F3FB U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë®üèª‚Äçüçº\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::MediumLight)); // üë®üèº‚Äçüçº (`U+1F468 U+1F3FC U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº‚Äçüçº\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::Medium)); // üë®üèΩ‚Äçüçº (`U+1F468 U+1F3FD U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ‚Äçüçº\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::MediumDark)); // üë®üèæ‚Äçüçº (`U+1F468 U+1F3FE U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ‚Äçüçº\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::Dark)); // üë®üèø‚Äçüçº (`U+1F468 U+1F3FF U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë®üèø‚Äçüçº\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.gender(Gender::Female)); // üë©‚Äçüçº (`U+1F469 U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.gender(Gender::Female).to_string().as_str(), \"üë©‚Äçüçº\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::Light)); // üë©üèª‚Äçüçº (`U+1F469 U+1F3FB U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äçüçº\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::MediumLight)); // üë©üèº‚Äçüçº (`U+1F469 U+1F3FC U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äçüçº\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::Medium)); // üë©üèΩ‚Äçüçº (`U+1F469 U+1F3FD U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äçüçº\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::MediumDark)); // üë©üèæ‚Äçüçº (`U+1F469 U+1F3FE U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äçüçº\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::Dark)); // üë©üèø‚Äçüçº (`U+1F469 U+1F3FF U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äçüçº\");"]
#[doc="```"]
pub static PERSON_FEEDING_BABY: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person feeding baby", Version(13, 0),"üßë‚Äçüçº"), 
	&[
		Emoji::new("person feeding baby: light skin tone", Version(13, 0),"üßëüèª‚Äçüçº"),
	Emoji::new("person feeding baby: medium-light skin tone", Version(13, 0),"üßëüèº‚Äçüçº"),
	Emoji::new("person feeding baby: medium skin tone", Version(13, 0),"üßëüèΩ‚Äçüçº"),
	Emoji::new("person feeding baby: medium-dark skin tone", Version(13, 0),"üßëüèæ‚Äçüçº"),
	Emoji::new("person feeding baby: dark skin tone", Version(13, 0),"üßëüèø‚Äçüçº"),
	]), 
	&[
		With::new(Emoji::new("man feeding baby", Version(13, 0),"üë®‚Äçüçº"), 
	&[
		Emoji::new("man feeding baby: light skin tone", Version(13, 0),"üë®üèª‚Äçüçº"),
	Emoji::new("man feeding baby: medium-light skin tone", Version(13, 0),"üë®üèº‚Äçüçº"),
	Emoji::new("man feeding baby: medium skin tone", Version(13, 0),"üë®üèΩ‚Äçüçº"),
	Emoji::new("man feeding baby: medium-dark skin tone", Version(13, 0),"üë®üèæ‚Äçüçº"),
	Emoji::new("man feeding baby: dark skin tone", Version(13, 0),"üë®üèø‚Äçüçº"),
	]),
	With::new(Emoji::new("woman feeding baby", Version(13, 0),"üë©‚Äçüçº"), 
	&[
		Emoji::new("woman feeding baby: light skin tone", Version(13, 0),"üë©üèª‚Äçüçº"),
	Emoji::new("woman feeding baby: medium-light skin tone", Version(13, 0),"üë©üèº‚Äçüçº"),
	Emoji::new("woman feeding baby: medium skin tone", Version(13, 0),"üë©üèΩ‚Äçüçº"),
	Emoji::new("woman feeding baby: medium-dark skin tone", Version(13, 0),"üë©üèæ‚Äçüçº"),
	Emoji::new("woman feeding baby: dark skin tone", Version(13, 0),"üë©üèø‚Äçüçº"),
	]),
	]);

		
		#[doc="person in tuxedo ü§µ"]#[doc=""]#[doc="Since E3.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_IN_TUXEDO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_IN_TUXEDO); // ü§µ (`U+1F935`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.to_string().as_str(), \"ü§µ\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.tone(Tone::Light)); // ü§µüèª (`U+1F935 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.tone(Tone::Light).to_string().as_str(), \"ü§µüèª\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.tone(Tone::MediumLight)); // ü§µüèº (`U+1F935 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.tone(Tone::MediumLight).to_string().as_str(), \"ü§µüèº\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.tone(Tone::Medium)); // ü§µüèΩ (`U+1F935 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.tone(Tone::Medium).to_string().as_str(), \"ü§µüèΩ\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.tone(Tone::MediumDark)); // ü§µüèæ (`U+1F935 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.tone(Tone::MediumDark).to_string().as_str(), \"ü§µüèæ\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.tone(Tone::Dark)); // ü§µüèø (`U+1F935 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.tone(Tone::Dark).to_string().as_str(), \"ü§µüèø\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.gender(Gender::Male)); // ü§µ‚Äç‚ôÇÔ∏è (`U+1F935 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.gender(Gender::Male).to_string().as_str(), \"ü§µ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::Light)); // ü§µüèª‚Äç‚ôÇÔ∏è (`U+1F935 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"ü§µüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::MediumLight)); // ü§µüèº‚Äç‚ôÇÔ∏è (`U+1F935 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"ü§µüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::Medium)); // ü§µüèΩ‚Äç‚ôÇÔ∏è (`U+1F935 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"ü§µüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::MediumDark)); // ü§µüèæ‚Äç‚ôÇÔ∏è (`U+1F935 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"ü§µüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::Dark)); // ü§µüèø‚Äç‚ôÇÔ∏è (`U+1F935 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"ü§µüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.gender(Gender::Female)); // ü§µ‚Äç‚ôÄÔ∏è (`U+1F935 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.gender(Gender::Female).to_string().as_str(), \"ü§µ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::Light)); // ü§µüèª‚Äç‚ôÄÔ∏è (`U+1F935 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"ü§µüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::MediumLight)); // ü§µüèº‚Äç‚ôÄÔ∏è (`U+1F935 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"ü§µüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::Medium)); // ü§µüèΩ‚Äç‚ôÄÔ∏è (`U+1F935 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"ü§µüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::MediumDark)); // ü§µüèæ‚Äç‚ôÄÔ∏è (`U+1F935 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"ü§µüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::Dark)); // ü§µüèø‚Äç‚ôÄÔ∏è (`U+1F935 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"ü§µüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_IN_TUXEDO: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person in tuxedo", Version(3, 0),"ü§µ"), 
	&[
		Emoji::new("person in tuxedo: light skin tone", Version(3, 0),"ü§µüèª"),
	Emoji::new("person in tuxedo: medium-light skin tone", Version(3, 0),"ü§µüèº"),
	Emoji::new("person in tuxedo: medium skin tone", Version(3, 0),"ü§µüèΩ"),
	Emoji::new("person in tuxedo: medium-dark skin tone", Version(3, 0),"ü§µüèæ"),
	Emoji::new("person in tuxedo: dark skin tone", Version(3, 0),"ü§µüèø"),
	]), 
	&[
		With::new(Emoji::new("man in tuxedo", Version(13, 0),"ü§µ‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man in tuxedo: light skin tone", Version(13, 0),"ü§µüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man in tuxedo: medium-light skin tone", Version(13, 0),"ü§µüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man in tuxedo: medium skin tone", Version(13, 0),"ü§µüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man in tuxedo: medium-dark skin tone", Version(13, 0),"ü§µüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man in tuxedo: dark skin tone", Version(13, 0),"ü§µüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman in tuxedo", Version(13, 0),"ü§µ‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman in tuxedo: light skin tone", Version(13, 0),"ü§µüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman in tuxedo: medium-light skin tone", Version(13, 0),"ü§µüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman in tuxedo: medium skin tone", Version(13, 0),"ü§µüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman in tuxedo: medium-dark skin tone", Version(13, 0),"ü§µüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman in tuxedo: dark skin tone", Version(13, 0),"ü§µüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person wearing turban üë≥"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_WEARING_TURBAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_WEARING_TURBAN); // üë≥ (`U+1F473`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.to_string().as_str(), \"üë≥\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.tone(Tone::Light)); // üë≥üèª (`U+1F473 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.tone(Tone::Light).to_string().as_str(), \"üë≥üèª\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.tone(Tone::MediumLight)); // üë≥üèº (`U+1F473 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.tone(Tone::MediumLight).to_string().as_str(), \"üë≥üèº\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.tone(Tone::Medium)); // üë≥üèΩ (`U+1F473 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.tone(Tone::Medium).to_string().as_str(), \"üë≥üèΩ\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.tone(Tone::MediumDark)); // üë≥üèæ (`U+1F473 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.tone(Tone::MediumDark).to_string().as_str(), \"üë≥üèæ\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.tone(Tone::Dark)); // üë≥üèø (`U+1F473 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.tone(Tone::Dark).to_string().as_str(), \"üë≥üèø\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.gender(Gender::Male)); // üë≥‚Äç‚ôÇÔ∏è (`U+1F473 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.gender(Gender::Male).to_string().as_str(), \"üë≥‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::Light)); // üë≥üèª‚Äç‚ôÇÔ∏è (`U+1F473 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë≥üèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::MediumLight)); // üë≥üèº‚Äç‚ôÇÔ∏è (`U+1F473 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë≥üèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::Medium)); // üë≥üèΩ‚Äç‚ôÇÔ∏è (`U+1F473 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë≥üèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::MediumDark)); // üë≥üèæ‚Äç‚ôÇÔ∏è (`U+1F473 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë≥üèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::Dark)); // üë≥üèø‚Äç‚ôÇÔ∏è (`U+1F473 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë≥üèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.gender(Gender::Female)); // üë≥‚Äç‚ôÄÔ∏è (`U+1F473 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.gender(Gender::Female).to_string().as_str(), \"üë≥‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::Light)); // üë≥üèª‚Äç‚ôÄÔ∏è (`U+1F473 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë≥üèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::MediumLight)); // üë≥üèº‚Äç‚ôÄÔ∏è (`U+1F473 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë≥üèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::Medium)); // üë≥üèΩ‚Äç‚ôÄÔ∏è (`U+1F473 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë≥üèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::MediumDark)); // üë≥üèæ‚Äç‚ôÄÔ∏è (`U+1F473 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë≥üèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::Dark)); // üë≥üèø‚Äç‚ôÄÔ∏è (`U+1F473 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë≥üèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_WEARING_TURBAN: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person wearing turban", Version(0, 6),"üë≥"), 
	&[
		Emoji::new("person wearing turban: light skin tone", Version(1, 0),"üë≥üèª"),
	Emoji::new("person wearing turban: medium-light skin tone", Version(1, 0),"üë≥üèº"),
	Emoji::new("person wearing turban: medium skin tone", Version(1, 0),"üë≥üèΩ"),
	Emoji::new("person wearing turban: medium-dark skin tone", Version(1, 0),"üë≥üèæ"),
	Emoji::new("person wearing turban: dark skin tone", Version(1, 0),"üë≥üèø"),
	]), 
	&[
		With::new(Emoji::new("man wearing turban", Version(4, 0),"üë≥‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man wearing turban: light skin tone", Version(4, 0),"üë≥üèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man wearing turban: medium-light skin tone", Version(4, 0),"üë≥üèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man wearing turban: medium skin tone", Version(4, 0),"üë≥üèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man wearing turban: medium-dark skin tone", Version(4, 0),"üë≥üèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man wearing turban: dark skin tone", Version(4, 0),"üë≥üèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman wearing turban", Version(4, 0),"üë≥‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman wearing turban: light skin tone", Version(4, 0),"üë≥üèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman wearing turban: medium-light skin tone", Version(4, 0),"üë≥üèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman wearing turban: medium skin tone", Version(4, 0),"üë≥üèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman wearing turban: medium-dark skin tone", Version(4, 0),"üë≥üèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman wearing turban: dark skin tone", Version(4, 0),"üë≥üèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person with skullcap üë≤"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_WITH_SKULLCAP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_WITH_SKULLCAP); // üë≤ (`U+1F472`)"] #[doc="# assert_eq!(PERSON_WITH_SKULLCAP.to_string().as_str(), \"üë≤\");"]#[doc="println!(\"{}\", PERSON_WITH_SKULLCAP.tone(Tone::Light)); // üë≤üèª (`U+1F472 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_WITH_SKULLCAP.tone(Tone::Light).to_string().as_str(), \"üë≤üèª\");"]#[doc="println!(\"{}\", PERSON_WITH_SKULLCAP.tone(Tone::MediumLight)); // üë≤üèº (`U+1F472 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_WITH_SKULLCAP.tone(Tone::MediumLight).to_string().as_str(), \"üë≤üèº\");"]#[doc="println!(\"{}\", PERSON_WITH_SKULLCAP.tone(Tone::Medium)); // üë≤üèΩ (`U+1F472 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_WITH_SKULLCAP.tone(Tone::Medium).to_string().as_str(), \"üë≤üèΩ\");"]#[doc="println!(\"{}\", PERSON_WITH_SKULLCAP.tone(Tone::MediumDark)); // üë≤üèæ (`U+1F472 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_WITH_SKULLCAP.tone(Tone::MediumDark).to_string().as_str(), \"üë≤üèæ\");"]#[doc="println!(\"{}\", PERSON_WITH_SKULLCAP.tone(Tone::Dark)); // üë≤üèø (`U+1F472 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_WITH_SKULLCAP.tone(Tone::Dark).to_string().as_str(), \"üë≤üèø\");"]
#[doc="```"]
pub static PERSON_WITH_SKULLCAP: With<Tone,Emoji> = With::new(Emoji::new("person with skullcap", Version(0, 6),"üë≤"), 
	&[
		Emoji::new("person with skullcap: light skin tone", Version(1, 0),"üë≤üèª"),
	Emoji::new("person with skullcap: medium-light skin tone", Version(1, 0),"üë≤üèº"),
	Emoji::new("person with skullcap: medium skin tone", Version(1, 0),"üë≤üèΩ"),
	Emoji::new("person with skullcap: medium-dark skin tone", Version(1, 0),"üë≤üèæ"),
	Emoji::new("person with skullcap: dark skin tone", Version(1, 0),"üë≤üèø"),
	]);

		
		#[doc="person with veil üë∞"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_WITH_VEIL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_WITH_VEIL); // üë∞ (`U+1F470`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.to_string().as_str(), \"üë∞\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.tone(Tone::Light)); // üë∞üèª (`U+1F470 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.tone(Tone::Light).to_string().as_str(), \"üë∞üèª\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.tone(Tone::MediumLight)); // üë∞üèº (`U+1F470 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.tone(Tone::MediumLight).to_string().as_str(), \"üë∞üèº\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.tone(Tone::Medium)); // üë∞üèΩ (`U+1F470 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.tone(Tone::Medium).to_string().as_str(), \"üë∞üèΩ\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.tone(Tone::MediumDark)); // üë∞üèæ (`U+1F470 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.tone(Tone::MediumDark).to_string().as_str(), \"üë∞üèæ\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.tone(Tone::Dark)); // üë∞üèø (`U+1F470 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.tone(Tone::Dark).to_string().as_str(), \"üë∞üèø\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.gender(Gender::Male)); // üë∞‚Äç‚ôÇÔ∏è (`U+1F470 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.gender(Gender::Male).to_string().as_str(), \"üë∞‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::Light)); // üë∞üèª‚Äç‚ôÇÔ∏è (`U+1F470 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë∞üèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::MediumLight)); // üë∞üèº‚Äç‚ôÇÔ∏è (`U+1F470 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë∞üèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::Medium)); // üë∞üèΩ‚Äç‚ôÇÔ∏è (`U+1F470 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë∞üèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::MediumDark)); // üë∞üèæ‚Äç‚ôÇÔ∏è (`U+1F470 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë∞üèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::Dark)); // üë∞üèø‚Äç‚ôÇÔ∏è (`U+1F470 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë∞üèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.gender(Gender::Female)); // üë∞‚Äç‚ôÄÔ∏è (`U+1F470 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.gender(Gender::Female).to_string().as_str(), \"üë∞‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::Light)); // üë∞üèª‚Äç‚ôÄÔ∏è (`U+1F470 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë∞üèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::MediumLight)); // üë∞üèº‚Äç‚ôÄÔ∏è (`U+1F470 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë∞üèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::Medium)); // üë∞üèΩ‚Äç‚ôÄÔ∏è (`U+1F470 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë∞üèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::MediumDark)); // üë∞üèæ‚Äç‚ôÄÔ∏è (`U+1F470 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë∞üèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::Dark)); // üë∞üèø‚Äç‚ôÄÔ∏è (`U+1F470 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë∞üèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_WITH_VEIL: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person with veil", Version(0, 6),"üë∞"), 
	&[
		Emoji::new("person with veil: light skin tone", Version(1, 0),"üë∞üèª"),
	Emoji::new("person with veil: medium-light skin tone", Version(1, 0),"üë∞üèº"),
	Emoji::new("person with veil: medium skin tone", Version(1, 0),"üë∞üèΩ"),
	Emoji::new("person with veil: medium-dark skin tone", Version(1, 0),"üë∞üèæ"),
	Emoji::new("person with veil: dark skin tone", Version(1, 0),"üë∞üèø"),
	]), 
	&[
		With::new(Emoji::new("man with veil", Version(13, 0),"üë∞‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man with veil: light skin tone", Version(13, 0),"üë∞üèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man with veil: medium-light skin tone", Version(13, 0),"üë∞üèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man with veil: medium skin tone", Version(13, 0),"üë∞üèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man with veil: medium-dark skin tone", Version(13, 0),"üë∞üèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man with veil: dark skin tone", Version(13, 0),"üë∞üèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman with veil", Version(13, 0),"üë∞‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman with veil: light skin tone", Version(13, 0),"üë∞üèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman with veil: medium-light skin tone", Version(13, 0),"üë∞üèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman with veil: medium skin tone", Version(13, 0),"üë∞üèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman with veil: medium-dark skin tone", Version(13, 0),"üë∞üèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman with veil: dark skin tone", Version(13, 0),"üë∞üèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="pilot üßë‚Äç‚úàÔ∏è"]#[doc=""]#[doc="Since E4.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PILOT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PILOT); // üßë‚Äç‚úàÔ∏è (`U+1F9D1 U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.to_string().as_str(), \"üßë‚Äç‚úàÔ∏è\");"]#[doc="println!(\"{}\", PILOT.tone(Tone::Light)); // üßëüèª‚Äç‚úàÔ∏è (`U+1F9D1 U+1F3FB U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.tone(Tone::Light).to_string().as_str(), \"üßëüèª‚Äç‚úàÔ∏è\");"]#[doc="println!(\"{}\", PILOT.tone(Tone::MediumLight)); // üßëüèº‚Äç‚úàÔ∏è (`U+1F9D1 U+1F3FC U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº‚Äç‚úàÔ∏è\");"]#[doc="println!(\"{}\", PILOT.tone(Tone::Medium)); // üßëüèΩ‚Äç‚úàÔ∏è (`U+1F9D1 U+1F3FD U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ‚Äç‚úàÔ∏è\");"]#[doc="println!(\"{}\", PILOT.tone(Tone::MediumDark)); // üßëüèæ‚Äç‚úàÔ∏è (`U+1F9D1 U+1F3FE U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ‚Äç‚úàÔ∏è\");"]#[doc="println!(\"{}\", PILOT.tone(Tone::Dark)); // üßëüèø‚Äç‚úàÔ∏è (`U+1F9D1 U+1F3FF U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.tone(Tone::Dark).to_string().as_str(), \"üßëüèø‚Äç‚úàÔ∏è\");"]#[doc="println!(\"{}\", PILOT.gender(Gender::Male)); // üë®‚Äç‚úàÔ∏è (`U+1F468 U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.gender(Gender::Male).to_string().as_str(), \"üë®‚Äç‚úàÔ∏è\");"]#[doc="println!(\"{}\", PILOT.gender(Gender::Male).tone(Tone::Light)); // üë®üèª‚Äç‚úàÔ∏è (`U+1F468 U+1F3FB U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë®üèª‚Äç‚úàÔ∏è\");"]#[doc="println!(\"{}\", PILOT.gender(Gender::Male).tone(Tone::MediumLight)); // üë®üèº‚Äç‚úàÔ∏è (`U+1F468 U+1F3FC U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº‚Äç‚úàÔ∏è\");"]#[doc="println!(\"{}\", PILOT.gender(Gender::Male).tone(Tone::Medium)); // üë®üèΩ‚Äç‚úàÔ∏è (`U+1F468 U+1F3FD U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ‚Äç‚úàÔ∏è\");"]#[doc="println!(\"{}\", PILOT.gender(Gender::Male).tone(Tone::MediumDark)); // üë®üèæ‚Äç‚úàÔ∏è (`U+1F468 U+1F3FE U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ‚Äç‚úàÔ∏è\");"]#[doc="println!(\"{}\", PILOT.gender(Gender::Male).tone(Tone::Dark)); // üë®üèø‚Äç‚úàÔ∏è (`U+1F468 U+1F3FF U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë®üèø‚Äç‚úàÔ∏è\");"]#[doc="println!(\"{}\", PILOT.gender(Gender::Female)); // üë©‚Äç‚úàÔ∏è (`U+1F469 U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.gender(Gender::Female).to_string().as_str(), \"üë©‚Äç‚úàÔ∏è\");"]#[doc="println!(\"{}\", PILOT.gender(Gender::Female).tone(Tone::Light)); // üë©üèª‚Äç‚úàÔ∏è (`U+1F469 U+1F3FB U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äç‚úàÔ∏è\");"]#[doc="println!(\"{}\", PILOT.gender(Gender::Female).tone(Tone::MediumLight)); // üë©üèº‚Äç‚úàÔ∏è (`U+1F469 U+1F3FC U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äç‚úàÔ∏è\");"]#[doc="println!(\"{}\", PILOT.gender(Gender::Female).tone(Tone::Medium)); // üë©üèΩ‚Äç‚úàÔ∏è (`U+1F469 U+1F3FD U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äç‚úàÔ∏è\");"]#[doc="println!(\"{}\", PILOT.gender(Gender::Female).tone(Tone::MediumDark)); // üë©üèæ‚Äç‚úàÔ∏è (`U+1F469 U+1F3FE U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äç‚úàÔ∏è\");"]#[doc="println!(\"{}\", PILOT.gender(Gender::Female).tone(Tone::Dark)); // üë©üèø‚Äç‚úàÔ∏è (`U+1F469 U+1F3FF U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äç‚úàÔ∏è\");"]
#[doc="```"]
pub static PILOT: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("pilot", Version(12, 1),"üßë‚Äç‚úàÔ∏è"), 
	&[
		Emoji::new("pilot: light skin tone", Version(12, 1),"üßëüèª‚Äç‚úàÔ∏è"),
	Emoji::new("pilot: medium-light skin tone", Version(12, 1),"üßëüèº‚Äç‚úàÔ∏è"),
	Emoji::new("pilot: medium skin tone", Version(12, 1),"üßëüèΩ‚Äç‚úàÔ∏è"),
	Emoji::new("pilot: medium-dark skin tone", Version(12, 1),"üßëüèæ‚Äç‚úàÔ∏è"),
	Emoji::new("pilot: dark skin tone", Version(12, 1),"üßëüèø‚Äç‚úàÔ∏è"),
	]), 
	&[
		With::new(Emoji::new("man pilot", Version(4, 0),"üë®‚Äç‚úàÔ∏è"), 
	&[
		Emoji::new("man pilot: light skin tone", Version(4, 0),"üë®üèª‚Äç‚úàÔ∏è"),
	Emoji::new("man pilot: medium-light skin tone", Version(4, 0),"üë®üèº‚Äç‚úàÔ∏è"),
	Emoji::new("man pilot: medium skin tone", Version(4, 0),"üë®üèΩ‚Äç‚úàÔ∏è"),
	Emoji::new("man pilot: medium-dark skin tone", Version(4, 0),"üë®üèæ‚Äç‚úàÔ∏è"),
	Emoji::new("man pilot: dark skin tone", Version(4, 0),"üë®üèø‚Äç‚úàÔ∏è"),
	]),
	With::new(Emoji::new("woman pilot", Version(4, 0),"üë©‚Äç‚úàÔ∏è"), 
	&[
		Emoji::new("woman pilot: light skin tone", Version(4, 0),"üë©üèª‚Äç‚úàÔ∏è"),
	Emoji::new("woman pilot: medium-light skin tone", Version(4, 0),"üë©üèº‚Äç‚úàÔ∏è"),
	Emoji::new("woman pilot: medium skin tone", Version(4, 0),"üë©üèΩ‚Äç‚úàÔ∏è"),
	Emoji::new("woman pilot: medium-dark skin tone", Version(4, 0),"üë©üèæ‚Äç‚úàÔ∏è"),
	Emoji::new("woman pilot: dark skin tone", Version(4, 0),"üë©üèø‚Äç‚úàÔ∏è"),
	]),
	]);

		
		#[doc="police officer üëÆ"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POLICE_OFFICER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POLICE_OFFICER); // üëÆ (`U+1F46E`)"] #[doc="# assert_eq!(POLICE_OFFICER.to_string().as_str(), \"üëÆ\");"]#[doc="println!(\"{}\", POLICE_OFFICER.tone(Tone::Light)); // üëÆüèª (`U+1F46E U+1F3FB`)"] #[doc="# assert_eq!(POLICE_OFFICER.tone(Tone::Light).to_string().as_str(), \"üëÆüèª\");"]#[doc="println!(\"{}\", POLICE_OFFICER.tone(Tone::MediumLight)); // üëÆüèº (`U+1F46E U+1F3FC`)"] #[doc="# assert_eq!(POLICE_OFFICER.tone(Tone::MediumLight).to_string().as_str(), \"üëÆüèº\");"]#[doc="println!(\"{}\", POLICE_OFFICER.tone(Tone::Medium)); // üëÆüèΩ (`U+1F46E U+1F3FD`)"] #[doc="# assert_eq!(POLICE_OFFICER.tone(Tone::Medium).to_string().as_str(), \"üëÆüèΩ\");"]#[doc="println!(\"{}\", POLICE_OFFICER.tone(Tone::MediumDark)); // üëÆüèæ (`U+1F46E U+1F3FE`)"] #[doc="# assert_eq!(POLICE_OFFICER.tone(Tone::MediumDark).to_string().as_str(), \"üëÆüèæ\");"]#[doc="println!(\"{}\", POLICE_OFFICER.tone(Tone::Dark)); // üëÆüèø (`U+1F46E U+1F3FF`)"] #[doc="# assert_eq!(POLICE_OFFICER.tone(Tone::Dark).to_string().as_str(), \"üëÆüèø\");"]#[doc="println!(\"{}\", POLICE_OFFICER.gender(Gender::Male)); // üëÆ‚Äç‚ôÇÔ∏è (`U+1F46E U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(POLICE_OFFICER.gender(Gender::Male).to_string().as_str(), \"üëÆ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", POLICE_OFFICER.gender(Gender::Male).tone(Tone::Light)); // üëÆüèª‚Äç‚ôÇÔ∏è (`U+1F46E U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(POLICE_OFFICER.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üëÆüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", POLICE_OFFICER.gender(Gender::Male).tone(Tone::MediumLight)); // üëÆüèº‚Äç‚ôÇÔ∏è (`U+1F46E U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(POLICE_OFFICER.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üëÆüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", POLICE_OFFICER.gender(Gender::Male).tone(Tone::Medium)); // üëÆüèΩ‚Äç‚ôÇÔ∏è (`U+1F46E U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(POLICE_OFFICER.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üëÆüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", POLICE_OFFICER.gender(Gender::Male).tone(Tone::MediumDark)); // üëÆüèæ‚Äç‚ôÇÔ∏è (`U+1F46E U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(POLICE_OFFICER.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üëÆüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", POLICE_OFFICER.gender(Gender::Male).tone(Tone::Dark)); // üëÆüèø‚Äç‚ôÇÔ∏è (`U+1F46E U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(POLICE_OFFICER.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üëÆüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", POLICE_OFFICER.gender(Gender::Female)); // üëÆ‚Äç‚ôÄÔ∏è (`U+1F46E U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(POLICE_OFFICER.gender(Gender::Female).to_string().as_str(), \"üëÆ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", POLICE_OFFICER.gender(Gender::Female).tone(Tone::Light)); // üëÆüèª‚Äç‚ôÄÔ∏è (`U+1F46E U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(POLICE_OFFICER.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üëÆüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", POLICE_OFFICER.gender(Gender::Female).tone(Tone::MediumLight)); // üëÆüèº‚Äç‚ôÄÔ∏è (`U+1F46E U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(POLICE_OFFICER.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üëÆüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", POLICE_OFFICER.gender(Gender::Female).tone(Tone::Medium)); // üëÆüèΩ‚Äç‚ôÄÔ∏è (`U+1F46E U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(POLICE_OFFICER.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üëÆüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", POLICE_OFFICER.gender(Gender::Female).tone(Tone::MediumDark)); // üëÆüèæ‚Äç‚ôÄÔ∏è (`U+1F46E U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(POLICE_OFFICER.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üëÆüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", POLICE_OFFICER.gender(Gender::Female).tone(Tone::Dark)); // üëÆüèø‚Äç‚ôÄÔ∏è (`U+1F46E U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(POLICE_OFFICER.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üëÆüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static POLICE_OFFICER: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("police officer", Version(0, 6),"üëÆ"), 
	&[
		Emoji::new("police officer: light skin tone", Version(1, 0),"üëÆüèª"),
	Emoji::new("police officer: medium-light skin tone", Version(1, 0),"üëÆüèº"),
	Emoji::new("police officer: medium skin tone", Version(1, 0),"üëÆüèΩ"),
	Emoji::new("police officer: medium-dark skin tone", Version(1, 0),"üëÆüèæ"),
	Emoji::new("police officer: dark skin tone", Version(1, 0),"üëÆüèø"),
	]), 
	&[
		With::new(Emoji::new("man police officer", Version(4, 0),"üëÆ‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man police officer: light skin tone", Version(4, 0),"üëÆüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man police officer: medium-light skin tone", Version(4, 0),"üëÆüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man police officer: medium skin tone", Version(4, 0),"üëÆüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man police officer: medium-dark skin tone", Version(4, 0),"üëÆüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man police officer: dark skin tone", Version(4, 0),"üëÆüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman police officer", Version(4, 0),"üëÆ‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman police officer: light skin tone", Version(4, 0),"üëÆüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman police officer: medium-light skin tone", Version(4, 0),"üëÆüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman police officer: medium skin tone", Version(4, 0),"üëÆüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman police officer: medium-dark skin tone", Version(4, 0),"üëÆüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman police officer: dark skin tone", Version(4, 0),"üëÆüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="pregnant person ü§∞"]#[doc=""]#[doc="Since E3.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PREGNANT_WOMAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PREGNANT_WOMAN); // ü§∞ (`U+1F930`)"] #[doc="# assert_eq!(PREGNANT_WOMAN.to_string().as_str(), \"ü§∞\");"]#[doc="println!(\"{}\", PREGNANT_WOMAN.tone(Tone::Light)); // ü§∞üèª (`U+1F930 U+1F3FB`)"] #[doc="# assert_eq!(PREGNANT_WOMAN.tone(Tone::Light).to_string().as_str(), \"ü§∞üèª\");"]#[doc="println!(\"{}\", PREGNANT_WOMAN.tone(Tone::MediumLight)); // ü§∞üèº (`U+1F930 U+1F3FC`)"] #[doc="# assert_eq!(PREGNANT_WOMAN.tone(Tone::MediumLight).to_string().as_str(), \"ü§∞üèº\");"]#[doc="println!(\"{}\", PREGNANT_WOMAN.tone(Tone::Medium)); // ü§∞üèΩ (`U+1F930 U+1F3FD`)"] #[doc="# assert_eq!(PREGNANT_WOMAN.tone(Tone::Medium).to_string().as_str(), \"ü§∞üèΩ\");"]#[doc="println!(\"{}\", PREGNANT_WOMAN.tone(Tone::MediumDark)); // ü§∞üèæ (`U+1F930 U+1F3FE`)"] #[doc="# assert_eq!(PREGNANT_WOMAN.tone(Tone::MediumDark).to_string().as_str(), \"ü§∞üèæ\");"]#[doc="println!(\"{}\", PREGNANT_WOMAN.tone(Tone::Dark)); // ü§∞üèø (`U+1F930 U+1F3FF`)"] #[doc="# assert_eq!(PREGNANT_WOMAN.tone(Tone::Dark).to_string().as_str(), \"ü§∞üèø\");"]
#[doc="```"]
pub static PREGNANT_WOMAN: With<Tone,Emoji> = With::new(Emoji::new("pregnant woman", Version(3, 0),"ü§∞"), 
	&[
		Emoji::new("pregnant woman: light skin tone", Version(3, 0),"ü§∞üèª"),
	Emoji::new("pregnant woman: medium-light skin tone", Version(3, 0),"ü§∞üèº"),
	Emoji::new("pregnant woman: medium skin tone", Version(3, 0),"ü§∞üèΩ"),
	Emoji::new("pregnant woman: medium-dark skin tone", Version(3, 0),"ü§∞üèæ"),
	Emoji::new("pregnant woman: dark skin tone", Version(3, 0),"ü§∞üèø"),
	]);

		
		#[doc="prince ü§¥"]#[doc=""]#[doc="Since E3.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PRINCE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PRINCE); // ü§¥ (`U+1F934`)"] #[doc="# assert_eq!(PRINCE.to_string().as_str(), \"ü§¥\");"]#[doc="println!(\"{}\", PRINCE.tone(Tone::Light)); // ü§¥üèª (`U+1F934 U+1F3FB`)"] #[doc="# assert_eq!(PRINCE.tone(Tone::Light).to_string().as_str(), \"ü§¥üèª\");"]#[doc="println!(\"{}\", PRINCE.tone(Tone::MediumLight)); // ü§¥üèº (`U+1F934 U+1F3FC`)"] #[doc="# assert_eq!(PRINCE.tone(Tone::MediumLight).to_string().as_str(), \"ü§¥üèº\");"]#[doc="println!(\"{}\", PRINCE.tone(Tone::Medium)); // ü§¥üèΩ (`U+1F934 U+1F3FD`)"] #[doc="# assert_eq!(PRINCE.tone(Tone::Medium).to_string().as_str(), \"ü§¥üèΩ\");"]#[doc="println!(\"{}\", PRINCE.tone(Tone::MediumDark)); // ü§¥üèæ (`U+1F934 U+1F3FE`)"] #[doc="# assert_eq!(PRINCE.tone(Tone::MediumDark).to_string().as_str(), \"ü§¥üèæ\");"]#[doc="println!(\"{}\", PRINCE.tone(Tone::Dark)); // ü§¥üèø (`U+1F934 U+1F3FF`)"] #[doc="# assert_eq!(PRINCE.tone(Tone::Dark).to_string().as_str(), \"ü§¥üèø\");"]
#[doc="```"]
pub static PRINCE: With<Tone,Emoji> = With::new(Emoji::new("prince", Version(3, 0),"ü§¥"), 
	&[
		Emoji::new("prince: light skin tone", Version(3, 0),"ü§¥üèª"),
	Emoji::new("prince: medium-light skin tone", Version(3, 0),"ü§¥üèº"),
	Emoji::new("prince: medium skin tone", Version(3, 0),"ü§¥üèΩ"),
	Emoji::new("prince: medium-dark skin tone", Version(3, 0),"ü§¥üèæ"),
	Emoji::new("prince: dark skin tone", Version(3, 0),"ü§¥üèø"),
	]);

		
		#[doc="princess üë∏"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PRINCESS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PRINCESS); // üë∏ (`U+1F478`)"] #[doc="# assert_eq!(PRINCESS.to_string().as_str(), \"üë∏\");"]#[doc="println!(\"{}\", PRINCESS.tone(Tone::Light)); // üë∏üèª (`U+1F478 U+1F3FB`)"] #[doc="# assert_eq!(PRINCESS.tone(Tone::Light).to_string().as_str(), \"üë∏üèª\");"]#[doc="println!(\"{}\", PRINCESS.tone(Tone::MediumLight)); // üë∏üèº (`U+1F478 U+1F3FC`)"] #[doc="# assert_eq!(PRINCESS.tone(Tone::MediumLight).to_string().as_str(), \"üë∏üèº\");"]#[doc="println!(\"{}\", PRINCESS.tone(Tone::Medium)); // üë∏üèΩ (`U+1F478 U+1F3FD`)"] #[doc="# assert_eq!(PRINCESS.tone(Tone::Medium).to_string().as_str(), \"üë∏üèΩ\");"]#[doc="println!(\"{}\", PRINCESS.tone(Tone::MediumDark)); // üë∏üèæ (`U+1F478 U+1F3FE`)"] #[doc="# assert_eq!(PRINCESS.tone(Tone::MediumDark).to_string().as_str(), \"üë∏üèæ\");"]#[doc="println!(\"{}\", PRINCESS.tone(Tone::Dark)); // üë∏üèø (`U+1F478 U+1F3FF`)"] #[doc="# assert_eq!(PRINCESS.tone(Tone::Dark).to_string().as_str(), \"üë∏üèø\");"]
#[doc="```"]
pub static PRINCESS: With<Tone,Emoji> = With::new(Emoji::new("princess", Version(0, 6),"üë∏"), 
	&[
		Emoji::new("princess: light skin tone", Version(1, 0),"üë∏üèª"),
	Emoji::new("princess: medium-light skin tone", Version(1, 0),"üë∏üèº"),
	Emoji::new("princess: medium skin tone", Version(1, 0),"üë∏üèΩ"),
	Emoji::new("princess: medium-dark skin tone", Version(1, 0),"üë∏üèæ"),
	Emoji::new("princess: dark skin tone", Version(1, 0),"üë∏üèø"),
	]);

		
		#[doc="scientist üßë‚Äçüî¨"]#[doc=""]#[doc="Since E4.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SCIENTIST;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SCIENTIST); // üßë‚Äçüî¨ (`U+1F9D1 U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.to_string().as_str(), \"üßë‚Äçüî¨\");"]#[doc="println!(\"{}\", SCIENTIST.tone(Tone::Light)); // üßëüèª‚Äçüî¨ (`U+1F9D1 U+1F3FB U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.tone(Tone::Light).to_string().as_str(), \"üßëüèª‚Äçüî¨\");"]#[doc="println!(\"{}\", SCIENTIST.tone(Tone::MediumLight)); // üßëüèº‚Äçüî¨ (`U+1F9D1 U+1F3FC U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº‚Äçüî¨\");"]#[doc="println!(\"{}\", SCIENTIST.tone(Tone::Medium)); // üßëüèΩ‚Äçüî¨ (`U+1F9D1 U+1F3FD U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ‚Äçüî¨\");"]#[doc="println!(\"{}\", SCIENTIST.tone(Tone::MediumDark)); // üßëüèæ‚Äçüî¨ (`U+1F9D1 U+1F3FE U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ‚Äçüî¨\");"]#[doc="println!(\"{}\", SCIENTIST.tone(Tone::Dark)); // üßëüèø‚Äçüî¨ (`U+1F9D1 U+1F3FF U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.tone(Tone::Dark).to_string().as_str(), \"üßëüèø‚Äçüî¨\");"]#[doc="println!(\"{}\", SCIENTIST.gender(Gender::Male)); // üë®‚Äçüî¨ (`U+1F468 U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.gender(Gender::Male).to_string().as_str(), \"üë®‚Äçüî¨\");"]#[doc="println!(\"{}\", SCIENTIST.gender(Gender::Male).tone(Tone::Light)); // üë®üèª‚Äçüî¨ (`U+1F468 U+1F3FB U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë®üèª‚Äçüî¨\");"]#[doc="println!(\"{}\", SCIENTIST.gender(Gender::Male).tone(Tone::MediumLight)); // üë®üèº‚Äçüî¨ (`U+1F468 U+1F3FC U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº‚Äçüî¨\");"]#[doc="println!(\"{}\", SCIENTIST.gender(Gender::Male).tone(Tone::Medium)); // üë®üèΩ‚Äçüî¨ (`U+1F468 U+1F3FD U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ‚Äçüî¨\");"]#[doc="println!(\"{}\", SCIENTIST.gender(Gender::Male).tone(Tone::MediumDark)); // üë®üèæ‚Äçüî¨ (`U+1F468 U+1F3FE U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ‚Äçüî¨\");"]#[doc="println!(\"{}\", SCIENTIST.gender(Gender::Male).tone(Tone::Dark)); // üë®üèø‚Äçüî¨ (`U+1F468 U+1F3FF U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë®üèø‚Äçüî¨\");"]#[doc="println!(\"{}\", SCIENTIST.gender(Gender::Female)); // üë©‚Äçüî¨ (`U+1F469 U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.gender(Gender::Female).to_string().as_str(), \"üë©‚Äçüî¨\");"]#[doc="println!(\"{}\", SCIENTIST.gender(Gender::Female).tone(Tone::Light)); // üë©üèª‚Äçüî¨ (`U+1F469 U+1F3FB U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äçüî¨\");"]#[doc="println!(\"{}\", SCIENTIST.gender(Gender::Female).tone(Tone::MediumLight)); // üë©üèº‚Äçüî¨ (`U+1F469 U+1F3FC U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äçüî¨\");"]#[doc="println!(\"{}\", SCIENTIST.gender(Gender::Female).tone(Tone::Medium)); // üë©üèΩ‚Äçüî¨ (`U+1F469 U+1F3FD U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äçüî¨\");"]#[doc="println!(\"{}\", SCIENTIST.gender(Gender::Female).tone(Tone::MediumDark)); // üë©üèæ‚Äçüî¨ (`U+1F469 U+1F3FE U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äçüî¨\");"]#[doc="println!(\"{}\", SCIENTIST.gender(Gender::Female).tone(Tone::Dark)); // üë©üèø‚Äçüî¨ (`U+1F469 U+1F3FF U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äçüî¨\");"]
#[doc="```"]
pub static SCIENTIST: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("scientist", Version(12, 1),"üßë‚Äçüî¨"), 
	&[
		Emoji::new("scientist: light skin tone", Version(12, 1),"üßëüèª‚Äçüî¨"),
	Emoji::new("scientist: medium-light skin tone", Version(12, 1),"üßëüèº‚Äçüî¨"),
	Emoji::new("scientist: medium skin tone", Version(12, 1),"üßëüèΩ‚Äçüî¨"),
	Emoji::new("scientist: medium-dark skin tone", Version(12, 1),"üßëüèæ‚Äçüî¨"),
	Emoji::new("scientist: dark skin tone", Version(12, 1),"üßëüèø‚Äçüî¨"),
	]), 
	&[
		With::new(Emoji::new("man scientist", Version(4, 0),"üë®‚Äçüî¨"), 
	&[
		Emoji::new("man scientist: light skin tone", Version(4, 0),"üë®üèª‚Äçüî¨"),
	Emoji::new("man scientist: medium-light skin tone", Version(4, 0),"üë®üèº‚Äçüî¨"),
	Emoji::new("man scientist: medium skin tone", Version(4, 0),"üë®üèΩ‚Äçüî¨"),
	Emoji::new("man scientist: medium-dark skin tone", Version(4, 0),"üë®üèæ‚Äçüî¨"),
	Emoji::new("man scientist: dark skin tone", Version(4, 0),"üë®üèø‚Äçüî¨"),
	]),
	With::new(Emoji::new("woman scientist", Version(4, 0),"üë©‚Äçüî¨"), 
	&[
		Emoji::new("woman scientist: light skin tone", Version(4, 0),"üë©üèª‚Äçüî¨"),
	Emoji::new("woman scientist: medium-light skin tone", Version(4, 0),"üë©üèº‚Äçüî¨"),
	Emoji::new("woman scientist: medium skin tone", Version(4, 0),"üë©üèΩ‚Äçüî¨"),
	Emoji::new("woman scientist: medium-dark skin tone", Version(4, 0),"üë©üèæ‚Äçüî¨"),
	Emoji::new("woman scientist: dark skin tone", Version(4, 0),"üë©üèø‚Äçüî¨"),
	]),
	]);

		
		#[doc="singer üßë‚Äçüé§"]#[doc=""]#[doc="Since E4.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SINGER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SINGER); // üßë‚Äçüé§ (`U+1F9D1 U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.to_string().as_str(), \"üßë‚Äçüé§\");"]#[doc="println!(\"{}\", SINGER.tone(Tone::Light)); // üßëüèª‚Äçüé§ (`U+1F9D1 U+1F3FB U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.tone(Tone::Light).to_string().as_str(), \"üßëüèª‚Äçüé§\");"]#[doc="println!(\"{}\", SINGER.tone(Tone::MediumLight)); // üßëüèº‚Äçüé§ (`U+1F9D1 U+1F3FC U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº‚Äçüé§\");"]#[doc="println!(\"{}\", SINGER.tone(Tone::Medium)); // üßëüèΩ‚Äçüé§ (`U+1F9D1 U+1F3FD U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ‚Äçüé§\");"]#[doc="println!(\"{}\", SINGER.tone(Tone::MediumDark)); // üßëüèæ‚Äçüé§ (`U+1F9D1 U+1F3FE U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ‚Äçüé§\");"]#[doc="println!(\"{}\", SINGER.tone(Tone::Dark)); // üßëüèø‚Äçüé§ (`U+1F9D1 U+1F3FF U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.tone(Tone::Dark).to_string().as_str(), \"üßëüèø‚Äçüé§\");"]#[doc="println!(\"{}\", SINGER.gender(Gender::Male)); // üë®‚Äçüé§ (`U+1F468 U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.gender(Gender::Male).to_string().as_str(), \"üë®‚Äçüé§\");"]#[doc="println!(\"{}\", SINGER.gender(Gender::Male).tone(Tone::Light)); // üë®üèª‚Äçüé§ (`U+1F468 U+1F3FB U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë®üèª‚Äçüé§\");"]#[doc="println!(\"{}\", SINGER.gender(Gender::Male).tone(Tone::MediumLight)); // üë®üèº‚Äçüé§ (`U+1F468 U+1F3FC U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº‚Äçüé§\");"]#[doc="println!(\"{}\", SINGER.gender(Gender::Male).tone(Tone::Medium)); // üë®üèΩ‚Äçüé§ (`U+1F468 U+1F3FD U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ‚Äçüé§\");"]#[doc="println!(\"{}\", SINGER.gender(Gender::Male).tone(Tone::MediumDark)); // üë®üèæ‚Äçüé§ (`U+1F468 U+1F3FE U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ‚Äçüé§\");"]#[doc="println!(\"{}\", SINGER.gender(Gender::Male).tone(Tone::Dark)); // üë®üèø‚Äçüé§ (`U+1F468 U+1F3FF U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë®üèø‚Äçüé§\");"]#[doc="println!(\"{}\", SINGER.gender(Gender::Female)); // üë©‚Äçüé§ (`U+1F469 U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.gender(Gender::Female).to_string().as_str(), \"üë©‚Äçüé§\");"]#[doc="println!(\"{}\", SINGER.gender(Gender::Female).tone(Tone::Light)); // üë©üèª‚Äçüé§ (`U+1F469 U+1F3FB U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äçüé§\");"]#[doc="println!(\"{}\", SINGER.gender(Gender::Female).tone(Tone::MediumLight)); // üë©üèº‚Äçüé§ (`U+1F469 U+1F3FC U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äçüé§\");"]#[doc="println!(\"{}\", SINGER.gender(Gender::Female).tone(Tone::Medium)); // üë©üèΩ‚Äçüé§ (`U+1F469 U+1F3FD U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äçüé§\");"]#[doc="println!(\"{}\", SINGER.gender(Gender::Female).tone(Tone::MediumDark)); // üë©üèæ‚Äçüé§ (`U+1F469 U+1F3FE U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äçüé§\");"]#[doc="println!(\"{}\", SINGER.gender(Gender::Female).tone(Tone::Dark)); // üë©üèø‚Äçüé§ (`U+1F469 U+1F3FF U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äçüé§\");"]
#[doc="```"]
pub static SINGER: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("singer", Version(12, 1),"üßë‚Äçüé§"), 
	&[
		Emoji::new("singer: light skin tone", Version(12, 1),"üßëüèª‚Äçüé§"),
	Emoji::new("singer: medium-light skin tone", Version(12, 1),"üßëüèº‚Äçüé§"),
	Emoji::new("singer: medium skin tone", Version(12, 1),"üßëüèΩ‚Äçüé§"),
	Emoji::new("singer: medium-dark skin tone", Version(12, 1),"üßëüèæ‚Äçüé§"),
	Emoji::new("singer: dark skin tone", Version(12, 1),"üßëüèø‚Äçüé§"),
	]), 
	&[
		With::new(Emoji::new("man singer", Version(4, 0),"üë®‚Äçüé§"), 
	&[
		Emoji::new("man singer: light skin tone", Version(4, 0),"üë®üèª‚Äçüé§"),
	Emoji::new("man singer: medium-light skin tone", Version(4, 0),"üë®üèº‚Äçüé§"),
	Emoji::new("man singer: medium skin tone", Version(4, 0),"üë®üèΩ‚Äçüé§"),
	Emoji::new("man singer: medium-dark skin tone", Version(4, 0),"üë®üèæ‚Äçüé§"),
	Emoji::new("man singer: dark skin tone", Version(4, 0),"üë®üèø‚Äçüé§"),
	]),
	With::new(Emoji::new("woman singer", Version(4, 0),"üë©‚Äçüé§"), 
	&[
		Emoji::new("woman singer: light skin tone", Version(4, 0),"üë©üèª‚Äçüé§"),
	Emoji::new("woman singer: medium-light skin tone", Version(4, 0),"üë©üèº‚Äçüé§"),
	Emoji::new("woman singer: medium skin tone", Version(4, 0),"üë©üèΩ‚Äçüé§"),
	Emoji::new("woman singer: medium-dark skin tone", Version(4, 0),"üë©üèæ‚Äçüé§"),
	Emoji::new("woman singer: dark skin tone", Version(4, 0),"üë©üèø‚Äçüé§"),
	]),
	]);

		
		#[doc="student üßë‚Äçüéì"]#[doc=""]#[doc="Since E4.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STUDENT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STUDENT); // üßë‚Äçüéì (`U+1F9D1 U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.to_string().as_str(), \"üßë‚Äçüéì\");"]#[doc="println!(\"{}\", STUDENT.tone(Tone::Light)); // üßëüèª‚Äçüéì (`U+1F9D1 U+1F3FB U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.tone(Tone::Light).to_string().as_str(), \"üßëüèª‚Äçüéì\");"]#[doc="println!(\"{}\", STUDENT.tone(Tone::MediumLight)); // üßëüèº‚Äçüéì (`U+1F9D1 U+1F3FC U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº‚Äçüéì\");"]#[doc="println!(\"{}\", STUDENT.tone(Tone::Medium)); // üßëüèΩ‚Äçüéì (`U+1F9D1 U+1F3FD U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ‚Äçüéì\");"]#[doc="println!(\"{}\", STUDENT.tone(Tone::MediumDark)); // üßëüèæ‚Äçüéì (`U+1F9D1 U+1F3FE U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ‚Äçüéì\");"]#[doc="println!(\"{}\", STUDENT.tone(Tone::Dark)); // üßëüèø‚Äçüéì (`U+1F9D1 U+1F3FF U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.tone(Tone::Dark).to_string().as_str(), \"üßëüèø‚Äçüéì\");"]#[doc="println!(\"{}\", STUDENT.gender(Gender::Male)); // üë®‚Äçüéì (`U+1F468 U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.gender(Gender::Male).to_string().as_str(), \"üë®‚Äçüéì\");"]#[doc="println!(\"{}\", STUDENT.gender(Gender::Male).tone(Tone::Light)); // üë®üèª‚Äçüéì (`U+1F468 U+1F3FB U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë®üèª‚Äçüéì\");"]#[doc="println!(\"{}\", STUDENT.gender(Gender::Male).tone(Tone::MediumLight)); // üë®üèº‚Äçüéì (`U+1F468 U+1F3FC U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº‚Äçüéì\");"]#[doc="println!(\"{}\", STUDENT.gender(Gender::Male).tone(Tone::Medium)); // üë®üèΩ‚Äçüéì (`U+1F468 U+1F3FD U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ‚Äçüéì\");"]#[doc="println!(\"{}\", STUDENT.gender(Gender::Male).tone(Tone::MediumDark)); // üë®üèæ‚Äçüéì (`U+1F468 U+1F3FE U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ‚Äçüéì\");"]#[doc="println!(\"{}\", STUDENT.gender(Gender::Male).tone(Tone::Dark)); // üë®üèø‚Äçüéì (`U+1F468 U+1F3FF U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë®üèø‚Äçüéì\");"]#[doc="println!(\"{}\", STUDENT.gender(Gender::Female)); // üë©‚Äçüéì (`U+1F469 U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.gender(Gender::Female).to_string().as_str(), \"üë©‚Äçüéì\");"]#[doc="println!(\"{}\", STUDENT.gender(Gender::Female).tone(Tone::Light)); // üë©üèª‚Äçüéì (`U+1F469 U+1F3FB U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äçüéì\");"]#[doc="println!(\"{}\", STUDENT.gender(Gender::Female).tone(Tone::MediumLight)); // üë©üèº‚Äçüéì (`U+1F469 U+1F3FC U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äçüéì\");"]#[doc="println!(\"{}\", STUDENT.gender(Gender::Female).tone(Tone::Medium)); // üë©üèΩ‚Äçüéì (`U+1F469 U+1F3FD U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äçüéì\");"]#[doc="println!(\"{}\", STUDENT.gender(Gender::Female).tone(Tone::MediumDark)); // üë©üèæ‚Äçüéì (`U+1F469 U+1F3FE U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äçüéì\");"]#[doc="println!(\"{}\", STUDENT.gender(Gender::Female).tone(Tone::Dark)); // üë©üèø‚Äçüéì (`U+1F469 U+1F3FF U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äçüéì\");"]
#[doc="```"]
pub static STUDENT: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("student", Version(12, 1),"üßë‚Äçüéì"), 
	&[
		Emoji::new("student: light skin tone", Version(12, 1),"üßëüèª‚Äçüéì"),
	Emoji::new("student: medium-light skin tone", Version(12, 1),"üßëüèº‚Äçüéì"),
	Emoji::new("student: medium skin tone", Version(12, 1),"üßëüèΩ‚Äçüéì"),
	Emoji::new("student: medium-dark skin tone", Version(12, 1),"üßëüèæ‚Äçüéì"),
	Emoji::new("student: dark skin tone", Version(12, 1),"üßëüèø‚Äçüéì"),
	]), 
	&[
		With::new(Emoji::new("man student", Version(4, 0),"üë®‚Äçüéì"), 
	&[
		Emoji::new("man student: light skin tone", Version(4, 0),"üë®üèª‚Äçüéì"),
	Emoji::new("man student: medium-light skin tone", Version(4, 0),"üë®üèº‚Äçüéì"),
	Emoji::new("man student: medium skin tone", Version(4, 0),"üë®üèΩ‚Äçüéì"),
	Emoji::new("man student: medium-dark skin tone", Version(4, 0),"üë®üèæ‚Äçüéì"),
	Emoji::new("man student: dark skin tone", Version(4, 0),"üë®üèø‚Äçüéì"),
	]),
	With::new(Emoji::new("woman student", Version(4, 0),"üë©‚Äçüéì"), 
	&[
		Emoji::new("woman student: light skin tone", Version(4, 0),"üë©üèª‚Äçüéì"),
	Emoji::new("woman student: medium-light skin tone", Version(4, 0),"üë©üèº‚Äçüéì"),
	Emoji::new("woman student: medium skin tone", Version(4, 0),"üë©üèΩ‚Äçüéì"),
	Emoji::new("woman student: medium-dark skin tone", Version(4, 0),"üë©üèæ‚Äçüéì"),
	Emoji::new("woman student: dark skin tone", Version(4, 0),"üë©üèø‚Äçüéì"),
	]),
	]);

		
		#[doc="teacher üßë‚Äçüè´"]#[doc=""]#[doc="Since E4.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TEACHER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TEACHER); // üßë‚Äçüè´ (`U+1F9D1 U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.to_string().as_str(), \"üßë‚Äçüè´\");"]#[doc="println!(\"{}\", TEACHER.tone(Tone::Light)); // üßëüèª‚Äçüè´ (`U+1F9D1 U+1F3FB U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.tone(Tone::Light).to_string().as_str(), \"üßëüèª‚Äçüè´\");"]#[doc="println!(\"{}\", TEACHER.tone(Tone::MediumLight)); // üßëüèº‚Äçüè´ (`U+1F9D1 U+1F3FC U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº‚Äçüè´\");"]#[doc="println!(\"{}\", TEACHER.tone(Tone::Medium)); // üßëüèΩ‚Äçüè´ (`U+1F9D1 U+1F3FD U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ‚Äçüè´\");"]#[doc="println!(\"{}\", TEACHER.tone(Tone::MediumDark)); // üßëüèæ‚Äçüè´ (`U+1F9D1 U+1F3FE U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ‚Äçüè´\");"]#[doc="println!(\"{}\", TEACHER.tone(Tone::Dark)); // üßëüèø‚Äçüè´ (`U+1F9D1 U+1F3FF U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.tone(Tone::Dark).to_string().as_str(), \"üßëüèø‚Äçüè´\");"]#[doc="println!(\"{}\", TEACHER.gender(Gender::Male)); // üë®‚Äçüè´ (`U+1F468 U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.gender(Gender::Male).to_string().as_str(), \"üë®‚Äçüè´\");"]#[doc="println!(\"{}\", TEACHER.gender(Gender::Male).tone(Tone::Light)); // üë®üèª‚Äçüè´ (`U+1F468 U+1F3FB U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë®üèª‚Äçüè´\");"]#[doc="println!(\"{}\", TEACHER.gender(Gender::Male).tone(Tone::MediumLight)); // üë®üèº‚Äçüè´ (`U+1F468 U+1F3FC U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº‚Äçüè´\");"]#[doc="println!(\"{}\", TEACHER.gender(Gender::Male).tone(Tone::Medium)); // üë®üèΩ‚Äçüè´ (`U+1F468 U+1F3FD U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ‚Äçüè´\");"]#[doc="println!(\"{}\", TEACHER.gender(Gender::Male).tone(Tone::MediumDark)); // üë®üèæ‚Äçüè´ (`U+1F468 U+1F3FE U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ‚Äçüè´\");"]#[doc="println!(\"{}\", TEACHER.gender(Gender::Male).tone(Tone::Dark)); // üë®üèø‚Äçüè´ (`U+1F468 U+1F3FF U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë®üèø‚Äçüè´\");"]#[doc="println!(\"{}\", TEACHER.gender(Gender::Female)); // üë©‚Äçüè´ (`U+1F469 U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.gender(Gender::Female).to_string().as_str(), \"üë©‚Äçüè´\");"]#[doc="println!(\"{}\", TEACHER.gender(Gender::Female).tone(Tone::Light)); // üë©üèª‚Äçüè´ (`U+1F469 U+1F3FB U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äçüè´\");"]#[doc="println!(\"{}\", TEACHER.gender(Gender::Female).tone(Tone::MediumLight)); // üë©üèº‚Äçüè´ (`U+1F469 U+1F3FC U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äçüè´\");"]#[doc="println!(\"{}\", TEACHER.gender(Gender::Female).tone(Tone::Medium)); // üë©üèΩ‚Äçüè´ (`U+1F469 U+1F3FD U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äçüè´\");"]#[doc="println!(\"{}\", TEACHER.gender(Gender::Female).tone(Tone::MediumDark)); // üë©üèæ‚Äçüè´ (`U+1F469 U+1F3FE U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äçüè´\");"]#[doc="println!(\"{}\", TEACHER.gender(Gender::Female).tone(Tone::Dark)); // üë©üèø‚Äçüè´ (`U+1F469 U+1F3FF U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äçüè´\");"]
#[doc="```"]
pub static TEACHER: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("teacher", Version(12, 1),"üßë‚Äçüè´"), 
	&[
		Emoji::new("teacher: light skin tone", Version(12, 1),"üßëüèª‚Äçüè´"),
	Emoji::new("teacher: medium-light skin tone", Version(12, 1),"üßëüèº‚Äçüè´"),
	Emoji::new("teacher: medium skin tone", Version(12, 1),"üßëüèΩ‚Äçüè´"),
	Emoji::new("teacher: medium-dark skin tone", Version(12, 1),"üßëüèæ‚Äçüè´"),
	Emoji::new("teacher: dark skin tone", Version(12, 1),"üßëüèø‚Äçüè´"),
	]), 
	&[
		With::new(Emoji::new("man teacher", Version(4, 0),"üë®‚Äçüè´"), 
	&[
		Emoji::new("man teacher: light skin tone", Version(4, 0),"üë®üèª‚Äçüè´"),
	Emoji::new("man teacher: medium-light skin tone", Version(4, 0),"üë®üèº‚Äçüè´"),
	Emoji::new("man teacher: medium skin tone", Version(4, 0),"üë®üèΩ‚Äçüè´"),
	Emoji::new("man teacher: medium-dark skin tone", Version(4, 0),"üë®üèæ‚Äçüè´"),
	Emoji::new("man teacher: dark skin tone", Version(4, 0),"üë®üèø‚Äçüè´"),
	]),
	With::new(Emoji::new("woman teacher", Version(4, 0),"üë©‚Äçüè´"), 
	&[
		Emoji::new("woman teacher: light skin tone", Version(4, 0),"üë©üèª‚Äçüè´"),
	Emoji::new("woman teacher: medium-light skin tone", Version(4, 0),"üë©üèº‚Äçüè´"),
	Emoji::new("woman teacher: medium skin tone", Version(4, 0),"üë©üèΩ‚Äçüè´"),
	Emoji::new("woman teacher: medium-dark skin tone", Version(4, 0),"üë©üèæ‚Äçüè´"),
	Emoji::new("woman teacher: dark skin tone", Version(4, 0),"üë©üèø‚Äçüè´"),
	]),
	]);

		
		#[doc="technologist üßë‚Äçüíª"]#[doc=""]#[doc="Since E4.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TECHNOLOGIST;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TECHNOLOGIST); // üßë‚Äçüíª (`U+1F9D1 U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.to_string().as_str(), \"üßë‚Äçüíª\");"]#[doc="println!(\"{}\", TECHNOLOGIST.tone(Tone::Light)); // üßëüèª‚Äçüíª (`U+1F9D1 U+1F3FB U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.tone(Tone::Light).to_string().as_str(), \"üßëüèª‚Äçüíª\");"]#[doc="println!(\"{}\", TECHNOLOGIST.tone(Tone::MediumLight)); // üßëüèº‚Äçüíª (`U+1F9D1 U+1F3FC U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.tone(Tone::MediumLight).to_string().as_str(), \"üßëüèº‚Äçüíª\");"]#[doc="println!(\"{}\", TECHNOLOGIST.tone(Tone::Medium)); // üßëüèΩ‚Äçüíª (`U+1F9D1 U+1F3FD U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.tone(Tone::Medium).to_string().as_str(), \"üßëüèΩ‚Äçüíª\");"]#[doc="println!(\"{}\", TECHNOLOGIST.tone(Tone::MediumDark)); // üßëüèæ‚Äçüíª (`U+1F9D1 U+1F3FE U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.tone(Tone::MediumDark).to_string().as_str(), \"üßëüèæ‚Äçüíª\");"]#[doc="println!(\"{}\", TECHNOLOGIST.tone(Tone::Dark)); // üßëüèø‚Äçüíª (`U+1F9D1 U+1F3FF U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.tone(Tone::Dark).to_string().as_str(), \"üßëüèø‚Äçüíª\");"]#[doc="println!(\"{}\", TECHNOLOGIST.gender(Gender::Male)); // üë®‚Äçüíª (`U+1F468 U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.gender(Gender::Male).to_string().as_str(), \"üë®‚Äçüíª\");"]#[doc="println!(\"{}\", TECHNOLOGIST.gender(Gender::Male).tone(Tone::Light)); // üë®üèª‚Äçüíª (`U+1F468 U+1F3FB U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üë®üèª‚Äçüíª\");"]#[doc="println!(\"{}\", TECHNOLOGIST.gender(Gender::Male).tone(Tone::MediumLight)); // üë®üèº‚Äçüíª (`U+1F468 U+1F3FC U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üë®üèº‚Äçüíª\");"]#[doc="println!(\"{}\", TECHNOLOGIST.gender(Gender::Male).tone(Tone::Medium)); // üë®üèΩ‚Äçüíª (`U+1F468 U+1F3FD U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üë®üèΩ‚Äçüíª\");"]#[doc="println!(\"{}\", TECHNOLOGIST.gender(Gender::Male).tone(Tone::MediumDark)); // üë®üèæ‚Äçüíª (`U+1F468 U+1F3FE U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üë®üèæ‚Äçüíª\");"]#[doc="println!(\"{}\", TECHNOLOGIST.gender(Gender::Male).tone(Tone::Dark)); // üë®üèø‚Äçüíª (`U+1F468 U+1F3FF U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üë®üèø‚Äçüíª\");"]#[doc="println!(\"{}\", TECHNOLOGIST.gender(Gender::Female)); // üë©‚Äçüíª (`U+1F469 U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.gender(Gender::Female).to_string().as_str(), \"üë©‚Äçüíª\");"]#[doc="println!(\"{}\", TECHNOLOGIST.gender(Gender::Female).tone(Tone::Light)); // üë©üèª‚Äçüíª (`U+1F469 U+1F3FB U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üë©üèª‚Äçüíª\");"]#[doc="println!(\"{}\", TECHNOLOGIST.gender(Gender::Female).tone(Tone::MediumLight)); // üë©üèº‚Äçüíª (`U+1F469 U+1F3FC U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üë©üèº‚Äçüíª\");"]#[doc="println!(\"{}\", TECHNOLOGIST.gender(Gender::Female).tone(Tone::Medium)); // üë©üèΩ‚Äçüíª (`U+1F469 U+1F3FD U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üë©üèΩ‚Äçüíª\");"]#[doc="println!(\"{}\", TECHNOLOGIST.gender(Gender::Female).tone(Tone::MediumDark)); // üë©üèæ‚Äçüíª (`U+1F469 U+1F3FE U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üë©üèæ‚Äçüíª\");"]#[doc="println!(\"{}\", TECHNOLOGIST.gender(Gender::Female).tone(Tone::Dark)); // üë©üèø‚Äçüíª (`U+1F469 U+1F3FF U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üë©üèø‚Äçüíª\");"]
#[doc="```"]
pub static TECHNOLOGIST: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("technologist", Version(12, 1),"üßë‚Äçüíª"), 
	&[
		Emoji::new("technologist: light skin tone", Version(12, 1),"üßëüèª‚Äçüíª"),
	Emoji::new("technologist: medium-light skin tone", Version(12, 1),"üßëüèº‚Äçüíª"),
	Emoji::new("technologist: medium skin tone", Version(12, 1),"üßëüèΩ‚Äçüíª"),
	Emoji::new("technologist: medium-dark skin tone", Version(12, 1),"üßëüèæ‚Äçüíª"),
	Emoji::new("technologist: dark skin tone", Version(12, 1),"üßëüèø‚Äçüíª"),
	]), 
	&[
		With::new(Emoji::new("man technologist", Version(4, 0),"üë®‚Äçüíª"), 
	&[
		Emoji::new("man technologist: light skin tone", Version(4, 0),"üë®üèª‚Äçüíª"),
	Emoji::new("man technologist: medium-light skin tone", Version(4, 0),"üë®üèº‚Äçüíª"),
	Emoji::new("man technologist: medium skin tone", Version(4, 0),"üë®üèΩ‚Äçüíª"),
	Emoji::new("man technologist: medium-dark skin tone", Version(4, 0),"üë®üèæ‚Äçüíª"),
	Emoji::new("man technologist: dark skin tone", Version(4, 0),"üë®üèø‚Äçüíª"),
	]),
	With::new(Emoji::new("woman technologist", Version(4, 0),"üë©‚Äçüíª"), 
	&[
		Emoji::new("woman technologist: light skin tone", Version(4, 0),"üë©üèª‚Äçüíª"),
	Emoji::new("woman technologist: medium-light skin tone", Version(4, 0),"üë©üèº‚Äçüíª"),
	Emoji::new("woman technologist: medium skin tone", Version(4, 0),"üë©üèΩ‚Äçüíª"),
	Emoji::new("woman technologist: medium-dark skin tone", Version(4, 0),"üë©üèæ‚Äçüíª"),
	Emoji::new("woman technologist: dark skin tone", Version(4, 0),"üë©üèø‚Äçüíª"),
	]),
	]);

		
		#[doc="person with headscarf üßï"]#[doc=""]#[doc="Since E5.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WOMAN_WITH_HEADSCARF;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WOMAN_WITH_HEADSCARF); // üßï (`U+1F9D5`)"] #[doc="# assert_eq!(WOMAN_WITH_HEADSCARF.to_string().as_str(), \"üßï\");"]#[doc="println!(\"{}\", WOMAN_WITH_HEADSCARF.tone(Tone::Light)); // üßïüèª (`U+1F9D5 U+1F3FB`)"] #[doc="# assert_eq!(WOMAN_WITH_HEADSCARF.tone(Tone::Light).to_string().as_str(), \"üßïüèª\");"]#[doc="println!(\"{}\", WOMAN_WITH_HEADSCARF.tone(Tone::MediumLight)); // üßïüèº (`U+1F9D5 U+1F3FC`)"] #[doc="# assert_eq!(WOMAN_WITH_HEADSCARF.tone(Tone::MediumLight).to_string().as_str(), \"üßïüèº\");"]#[doc="println!(\"{}\", WOMAN_WITH_HEADSCARF.tone(Tone::Medium)); // üßïüèΩ (`U+1F9D5 U+1F3FD`)"] #[doc="# assert_eq!(WOMAN_WITH_HEADSCARF.tone(Tone::Medium).to_string().as_str(), \"üßïüèΩ\");"]#[doc="println!(\"{}\", WOMAN_WITH_HEADSCARF.tone(Tone::MediumDark)); // üßïüèæ (`U+1F9D5 U+1F3FE`)"] #[doc="# assert_eq!(WOMAN_WITH_HEADSCARF.tone(Tone::MediumDark).to_string().as_str(), \"üßïüèæ\");"]#[doc="println!(\"{}\", WOMAN_WITH_HEADSCARF.tone(Tone::Dark)); // üßïüèø (`U+1F9D5 U+1F3FF`)"] #[doc="# assert_eq!(WOMAN_WITH_HEADSCARF.tone(Tone::Dark).to_string().as_str(), \"üßïüèø\");"]
#[doc="```"]
pub static WOMAN_WITH_HEADSCARF: With<Tone,Emoji> = With::new(Emoji::new("woman with headscarf", Version(5, 0),"üßï"), 
	&[
		Emoji::new("woman with headscarf: light skin tone", Version(5, 0),"üßïüèª"),
	Emoji::new("woman with headscarf: medium-light skin tone", Version(5, 0),"üßïüèº"),
	Emoji::new("woman with headscarf: medium skin tone", Version(5, 0),"üßïüèΩ"),
	Emoji::new("woman with headscarf: medium-dark skin tone", Version(5, 0),"üßïüèæ"),
	Emoji::new("woman with headscarf: dark skin tone", Version(5, 0),"üßïüèø"),
	]);

		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // ARTIST
				
				&ARTIST.default.default,
				
				&ARTIST.default.tone(Tone::Light),
				
				&ARTIST.default.tone(Tone::MediumLight),
				
				&ARTIST.default.tone(Tone::Medium),
				
				&ARTIST.default.tone(Tone::MediumDark),
				
				&ARTIST.default.tone(Tone::Dark),
				
				&ARTIST.gender(Gender::Male).default,
				
				&ARTIST.gender(Gender::Male).tone(Tone::Light),
				
				&ARTIST.gender(Gender::Male).tone(Tone::MediumLight),
				
				&ARTIST.gender(Gender::Male).tone(Tone::Medium),
				
				&ARTIST.gender(Gender::Male).tone(Tone::MediumDark),
				
				&ARTIST.gender(Gender::Male).tone(Tone::Dark),
				
				&ARTIST.gender(Gender::Female).default,
				
				&ARTIST.gender(Gender::Female).tone(Tone::Light),
				
				&ARTIST.gender(Gender::Female).tone(Tone::MediumLight),
				
				&ARTIST.gender(Gender::Female).tone(Tone::Medium),
				
				&ARTIST.gender(Gender::Female).tone(Tone::MediumDark),
				
				&ARTIST.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // ASTRONAUT
				
				&ASTRONAUT.default.default,
				
				&ASTRONAUT.default.tone(Tone::Light),
				
				&ASTRONAUT.default.tone(Tone::MediumLight),
				
				&ASTRONAUT.default.tone(Tone::Medium),
				
				&ASTRONAUT.default.tone(Tone::MediumDark),
				
				&ASTRONAUT.default.tone(Tone::Dark),
				
				&ASTRONAUT.gender(Gender::Male).default,
				
				&ASTRONAUT.gender(Gender::Male).tone(Tone::Light),
				
				&ASTRONAUT.gender(Gender::Male).tone(Tone::MediumLight),
				
				&ASTRONAUT.gender(Gender::Male).tone(Tone::Medium),
				
				&ASTRONAUT.gender(Gender::Male).tone(Tone::MediumDark),
				
				&ASTRONAUT.gender(Gender::Male).tone(Tone::Dark),
				
				&ASTRONAUT.gender(Gender::Female).default,
				
				&ASTRONAUT.gender(Gender::Female).tone(Tone::Light),
				
				&ASTRONAUT.gender(Gender::Female).tone(Tone::MediumLight),
				
				&ASTRONAUT.gender(Gender::Female).tone(Tone::Medium),
				
				&ASTRONAUT.gender(Gender::Female).tone(Tone::MediumDark),
				
				&ASTRONAUT.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // BREAST_FEEDING
				
				&BREAST_FEEDING.default,
				
				&BREAST_FEEDING.tone(Tone::Light),
				
				&BREAST_FEEDING.tone(Tone::MediumLight),
				
				&BREAST_FEEDING.tone(Tone::Medium),
				
				&BREAST_FEEDING.tone(Tone::MediumDark),
				
				&BREAST_FEEDING.tone(Tone::Dark),
				
			],
			
			&[ // CONSTRUCTION_WORKER
				
				&CONSTRUCTION_WORKER.default.default,
				
				&CONSTRUCTION_WORKER.default.tone(Tone::Light),
				
				&CONSTRUCTION_WORKER.default.tone(Tone::MediumLight),
				
				&CONSTRUCTION_WORKER.default.tone(Tone::Medium),
				
				&CONSTRUCTION_WORKER.default.tone(Tone::MediumDark),
				
				&CONSTRUCTION_WORKER.default.tone(Tone::Dark),
				
				&CONSTRUCTION_WORKER.gender(Gender::Male).default,
				
				&CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::Light),
				
				&CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::MediumLight),
				
				&CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::Medium),
				
				&CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::MediumDark),
				
				&CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::Dark),
				
				&CONSTRUCTION_WORKER.gender(Gender::Female).default,
				
				&CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::Light),
				
				&CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::MediumLight),
				
				&CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::Medium),
				
				&CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::MediumDark),
				
				&CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // COOK
				
				&COOK.default.default,
				
				&COOK.default.tone(Tone::Light),
				
				&COOK.default.tone(Tone::MediumLight),
				
				&COOK.default.tone(Tone::Medium),
				
				&COOK.default.tone(Tone::MediumDark),
				
				&COOK.default.tone(Tone::Dark),
				
				&COOK.gender(Gender::Male).default,
				
				&COOK.gender(Gender::Male).tone(Tone::Light),
				
				&COOK.gender(Gender::Male).tone(Tone::MediumLight),
				
				&COOK.gender(Gender::Male).tone(Tone::Medium),
				
				&COOK.gender(Gender::Male).tone(Tone::MediumDark),
				
				&COOK.gender(Gender::Male).tone(Tone::Dark),
				
				&COOK.gender(Gender::Female).default,
				
				&COOK.gender(Gender::Female).tone(Tone::Light),
				
				&COOK.gender(Gender::Female).tone(Tone::MediumLight),
				
				&COOK.gender(Gender::Female).tone(Tone::Medium),
				
				&COOK.gender(Gender::Female).tone(Tone::MediumDark),
				
				&COOK.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // DETECTIVE
				
				&DETECTIVE.default.default,
				
				&DETECTIVE.default.tone(Tone::Light),
				
				&DETECTIVE.default.tone(Tone::MediumLight),
				
				&DETECTIVE.default.tone(Tone::Medium),
				
				&DETECTIVE.default.tone(Tone::MediumDark),
				
				&DETECTIVE.default.tone(Tone::Dark),
				
				&DETECTIVE.gender(Gender::Male).default,
				
				&DETECTIVE.gender(Gender::Male).tone(Tone::Light),
				
				&DETECTIVE.gender(Gender::Male).tone(Tone::MediumLight),
				
				&DETECTIVE.gender(Gender::Male).tone(Tone::Medium),
				
				&DETECTIVE.gender(Gender::Male).tone(Tone::MediumDark),
				
				&DETECTIVE.gender(Gender::Male).tone(Tone::Dark),
				
				&DETECTIVE.gender(Gender::Female).default,
				
				&DETECTIVE.gender(Gender::Female).tone(Tone::Light),
				
				&DETECTIVE.gender(Gender::Female).tone(Tone::MediumLight),
				
				&DETECTIVE.gender(Gender::Female).tone(Tone::Medium),
				
				&DETECTIVE.gender(Gender::Female).tone(Tone::MediumDark),
				
				&DETECTIVE.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // FACTORY_WORKER
				
				&FACTORY_WORKER.default.default,
				
				&FACTORY_WORKER.default.tone(Tone::Light),
				
				&FACTORY_WORKER.default.tone(Tone::MediumLight),
				
				&FACTORY_WORKER.default.tone(Tone::Medium),
				
				&FACTORY_WORKER.default.tone(Tone::MediumDark),
				
				&FACTORY_WORKER.default.tone(Tone::Dark),
				
				&FACTORY_WORKER.gender(Gender::Male).default,
				
				&FACTORY_WORKER.gender(Gender::Male).tone(Tone::Light),
				
				&FACTORY_WORKER.gender(Gender::Male).tone(Tone::MediumLight),
				
				&FACTORY_WORKER.gender(Gender::Male).tone(Tone::Medium),
				
				&FACTORY_WORKER.gender(Gender::Male).tone(Tone::MediumDark),
				
				&FACTORY_WORKER.gender(Gender::Male).tone(Tone::Dark),
				
				&FACTORY_WORKER.gender(Gender::Female).default,
				
				&FACTORY_WORKER.gender(Gender::Female).tone(Tone::Light),
				
				&FACTORY_WORKER.gender(Gender::Female).tone(Tone::MediumLight),
				
				&FACTORY_WORKER.gender(Gender::Female).tone(Tone::Medium),
				
				&FACTORY_WORKER.gender(Gender::Female).tone(Tone::MediumDark),
				
				&FACTORY_WORKER.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // FARMER
				
				&FARMER.default.default,
				
				&FARMER.default.tone(Tone::Light),
				
				&FARMER.default.tone(Tone::MediumLight),
				
				&FARMER.default.tone(Tone::Medium),
				
				&FARMER.default.tone(Tone::MediumDark),
				
				&FARMER.default.tone(Tone::Dark),
				
				&FARMER.gender(Gender::Male).default,
				
				&FARMER.gender(Gender::Male).tone(Tone::Light),
				
				&FARMER.gender(Gender::Male).tone(Tone::MediumLight),
				
				&FARMER.gender(Gender::Male).tone(Tone::Medium),
				
				&FARMER.gender(Gender::Male).tone(Tone::MediumDark),
				
				&FARMER.gender(Gender::Male).tone(Tone::Dark),
				
				&FARMER.gender(Gender::Female).default,
				
				&FARMER.gender(Gender::Female).tone(Tone::Light),
				
				&FARMER.gender(Gender::Female).tone(Tone::MediumLight),
				
				&FARMER.gender(Gender::Female).tone(Tone::Medium),
				
				&FARMER.gender(Gender::Female).tone(Tone::MediumDark),
				
				&FARMER.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // FIREFIGHTER
				
				&FIREFIGHTER.default.default,
				
				&FIREFIGHTER.default.tone(Tone::Light),
				
				&FIREFIGHTER.default.tone(Tone::MediumLight),
				
				&FIREFIGHTER.default.tone(Tone::Medium),
				
				&FIREFIGHTER.default.tone(Tone::MediumDark),
				
				&FIREFIGHTER.default.tone(Tone::Dark),
				
				&FIREFIGHTER.gender(Gender::Male).default,
				
				&FIREFIGHTER.gender(Gender::Male).tone(Tone::Light),
				
				&FIREFIGHTER.gender(Gender::Male).tone(Tone::MediumLight),
				
				&FIREFIGHTER.gender(Gender::Male).tone(Tone::Medium),
				
				&FIREFIGHTER.gender(Gender::Male).tone(Tone::MediumDark),
				
				&FIREFIGHTER.gender(Gender::Male).tone(Tone::Dark),
				
				&FIREFIGHTER.gender(Gender::Female).default,
				
				&FIREFIGHTER.gender(Gender::Female).tone(Tone::Light),
				
				&FIREFIGHTER.gender(Gender::Female).tone(Tone::MediumLight),
				
				&FIREFIGHTER.gender(Gender::Female).tone(Tone::Medium),
				
				&FIREFIGHTER.gender(Gender::Female).tone(Tone::MediumDark),
				
				&FIREFIGHTER.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // GUARD
				
				&GUARD.default.default,
				
				&GUARD.default.tone(Tone::Light),
				
				&GUARD.default.tone(Tone::MediumLight),
				
				&GUARD.default.tone(Tone::Medium),
				
				&GUARD.default.tone(Tone::MediumDark),
				
				&GUARD.default.tone(Tone::Dark),
				
				&GUARD.gender(Gender::Male).default,
				
				&GUARD.gender(Gender::Male).tone(Tone::Light),
				
				&GUARD.gender(Gender::Male).tone(Tone::MediumLight),
				
				&GUARD.gender(Gender::Male).tone(Tone::Medium),
				
				&GUARD.gender(Gender::Male).tone(Tone::MediumDark),
				
				&GUARD.gender(Gender::Male).tone(Tone::Dark),
				
				&GUARD.gender(Gender::Female).default,
				
				&GUARD.gender(Gender::Female).tone(Tone::Light),
				
				&GUARD.gender(Gender::Female).tone(Tone::MediumLight),
				
				&GUARD.gender(Gender::Female).tone(Tone::Medium),
				
				&GUARD.gender(Gender::Female).tone(Tone::MediumDark),
				
				&GUARD.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // HEALTH_WORKER
				
				&HEALTH_WORKER.default.default,
				
				&HEALTH_WORKER.default.tone(Tone::Light),
				
				&HEALTH_WORKER.default.tone(Tone::MediumLight),
				
				&HEALTH_WORKER.default.tone(Tone::Medium),
				
				&HEALTH_WORKER.default.tone(Tone::MediumDark),
				
				&HEALTH_WORKER.default.tone(Tone::Dark),
				
				&HEALTH_WORKER.gender(Gender::Male).default,
				
				&HEALTH_WORKER.gender(Gender::Male).tone(Tone::Light),
				
				&HEALTH_WORKER.gender(Gender::Male).tone(Tone::MediumLight),
				
				&HEALTH_WORKER.gender(Gender::Male).tone(Tone::Medium),
				
				&HEALTH_WORKER.gender(Gender::Male).tone(Tone::MediumDark),
				
				&HEALTH_WORKER.gender(Gender::Male).tone(Tone::Dark),
				
				&HEALTH_WORKER.gender(Gender::Female).default,
				
				&HEALTH_WORKER.gender(Gender::Female).tone(Tone::Light),
				
				&HEALTH_WORKER.gender(Gender::Female).tone(Tone::MediumLight),
				
				&HEALTH_WORKER.gender(Gender::Female).tone(Tone::Medium),
				
				&HEALTH_WORKER.gender(Gender::Female).tone(Tone::MediumDark),
				
				&HEALTH_WORKER.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // JUDGE
				
				&JUDGE.default.default,
				
				&JUDGE.default.tone(Tone::Light),
				
				&JUDGE.default.tone(Tone::MediumLight),
				
				&JUDGE.default.tone(Tone::Medium),
				
				&JUDGE.default.tone(Tone::MediumDark),
				
				&JUDGE.default.tone(Tone::Dark),
				
				&JUDGE.gender(Gender::Male).default,
				
				&JUDGE.gender(Gender::Male).tone(Tone::Light),
				
				&JUDGE.gender(Gender::Male).tone(Tone::MediumLight),
				
				&JUDGE.gender(Gender::Male).tone(Tone::Medium),
				
				&JUDGE.gender(Gender::Male).tone(Tone::MediumDark),
				
				&JUDGE.gender(Gender::Male).tone(Tone::Dark),
				
				&JUDGE.gender(Gender::Female).default,
				
				&JUDGE.gender(Gender::Female).tone(Tone::Light),
				
				&JUDGE.gender(Gender::Female).tone(Tone::MediumLight),
				
				&JUDGE.gender(Gender::Female).tone(Tone::Medium),
				
				&JUDGE.gender(Gender::Female).tone(Tone::MediumDark),
				
				&JUDGE.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // MECHANIC
				
				&MECHANIC.default.default,
				
				&MECHANIC.default.tone(Tone::Light),
				
				&MECHANIC.default.tone(Tone::MediumLight),
				
				&MECHANIC.default.tone(Tone::Medium),
				
				&MECHANIC.default.tone(Tone::MediumDark),
				
				&MECHANIC.default.tone(Tone::Dark),
				
				&MECHANIC.gender(Gender::Male).default,
				
				&MECHANIC.gender(Gender::Male).tone(Tone::Light),
				
				&MECHANIC.gender(Gender::Male).tone(Tone::MediumLight),
				
				&MECHANIC.gender(Gender::Male).tone(Tone::Medium),
				
				&MECHANIC.gender(Gender::Male).tone(Tone::MediumDark),
				
				&MECHANIC.gender(Gender::Male).tone(Tone::Dark),
				
				&MECHANIC.gender(Gender::Female).default,
				
				&MECHANIC.gender(Gender::Female).tone(Tone::Light),
				
				&MECHANIC.gender(Gender::Female).tone(Tone::MediumLight),
				
				&MECHANIC.gender(Gender::Female).tone(Tone::Medium),
				
				&MECHANIC.gender(Gender::Female).tone(Tone::MediumDark),
				
				&MECHANIC.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // NINJA
				
				&NINJA.default,
				
				&NINJA.tone(Tone::Light),
				
				&NINJA.tone(Tone::MediumLight),
				
				&NINJA.tone(Tone::Medium),
				
				&NINJA.tone(Tone::MediumDark),
				
				&NINJA.tone(Tone::Dark),
				
			],
			
			&[ // OFFICE_WORKER
				
				&OFFICE_WORKER.default.default,
				
				&OFFICE_WORKER.default.tone(Tone::Light),
				
				&OFFICE_WORKER.default.tone(Tone::MediumLight),
				
				&OFFICE_WORKER.default.tone(Tone::Medium),
				
				&OFFICE_WORKER.default.tone(Tone::MediumDark),
				
				&OFFICE_WORKER.default.tone(Tone::Dark),
				
				&OFFICE_WORKER.gender(Gender::Male).default,
				
				&OFFICE_WORKER.gender(Gender::Male).tone(Tone::Light),
				
				&OFFICE_WORKER.gender(Gender::Male).tone(Tone::MediumLight),
				
				&OFFICE_WORKER.gender(Gender::Male).tone(Tone::Medium),
				
				&OFFICE_WORKER.gender(Gender::Male).tone(Tone::MediumDark),
				
				&OFFICE_WORKER.gender(Gender::Male).tone(Tone::Dark),
				
				&OFFICE_WORKER.gender(Gender::Female).default,
				
				&OFFICE_WORKER.gender(Gender::Female).tone(Tone::Light),
				
				&OFFICE_WORKER.gender(Gender::Female).tone(Tone::MediumLight),
				
				&OFFICE_WORKER.gender(Gender::Female).tone(Tone::Medium),
				
				&OFFICE_WORKER.gender(Gender::Female).tone(Tone::MediumDark),
				
				&OFFICE_WORKER.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_FEEDING_BABY
				
				&PERSON_FEEDING_BABY.default.default,
				
				&PERSON_FEEDING_BABY.default.tone(Tone::Light),
				
				&PERSON_FEEDING_BABY.default.tone(Tone::MediumLight),
				
				&PERSON_FEEDING_BABY.default.tone(Tone::Medium),
				
				&PERSON_FEEDING_BABY.default.tone(Tone::MediumDark),
				
				&PERSON_FEEDING_BABY.default.tone(Tone::Dark),
				
				&PERSON_FEEDING_BABY.gender(Gender::Male).default,
				
				&PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_FEEDING_BABY.gender(Gender::Female).default,
				
				&PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_IN_TUXEDO
				
				&PERSON_IN_TUXEDO.default.default,
				
				&PERSON_IN_TUXEDO.default.tone(Tone::Light),
				
				&PERSON_IN_TUXEDO.default.tone(Tone::MediumLight),
				
				&PERSON_IN_TUXEDO.default.tone(Tone::Medium),
				
				&PERSON_IN_TUXEDO.default.tone(Tone::MediumDark),
				
				&PERSON_IN_TUXEDO.default.tone(Tone::Dark),
				
				&PERSON_IN_TUXEDO.gender(Gender::Male).default,
				
				&PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_IN_TUXEDO.gender(Gender::Female).default,
				
				&PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_WEARING_TURBAN
				
				&PERSON_WEARING_TURBAN.default.default,
				
				&PERSON_WEARING_TURBAN.default.tone(Tone::Light),
				
				&PERSON_WEARING_TURBAN.default.tone(Tone::MediumLight),
				
				&PERSON_WEARING_TURBAN.default.tone(Tone::Medium),
				
				&PERSON_WEARING_TURBAN.default.tone(Tone::MediumDark),
				
				&PERSON_WEARING_TURBAN.default.tone(Tone::Dark),
				
				&PERSON_WEARING_TURBAN.gender(Gender::Male).default,
				
				&PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_WEARING_TURBAN.gender(Gender::Female).default,
				
				&PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_WITH_SKULLCAP
				
				&PERSON_WITH_SKULLCAP.default,
				
				&PERSON_WITH_SKULLCAP.tone(Tone::Light),
				
				&PERSON_WITH_SKULLCAP.tone(Tone::MediumLight),
				
				&PERSON_WITH_SKULLCAP.tone(Tone::Medium),
				
				&PERSON_WITH_SKULLCAP.tone(Tone::MediumDark),
				
				&PERSON_WITH_SKULLCAP.tone(Tone::Dark),
				
			],
			
			&[ // PERSON_WITH_VEIL
				
				&PERSON_WITH_VEIL.default.default,
				
				&PERSON_WITH_VEIL.default.tone(Tone::Light),
				
				&PERSON_WITH_VEIL.default.tone(Tone::MediumLight),
				
				&PERSON_WITH_VEIL.default.tone(Tone::Medium),
				
				&PERSON_WITH_VEIL.default.tone(Tone::MediumDark),
				
				&PERSON_WITH_VEIL.default.tone(Tone::Dark),
				
				&PERSON_WITH_VEIL.gender(Gender::Male).default,
				
				&PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_WITH_VEIL.gender(Gender::Female).default,
				
				&PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PILOT
				
				&PILOT.default.default,
				
				&PILOT.default.tone(Tone::Light),
				
				&PILOT.default.tone(Tone::MediumLight),
				
				&PILOT.default.tone(Tone::Medium),
				
				&PILOT.default.tone(Tone::MediumDark),
				
				&PILOT.default.tone(Tone::Dark),
				
				&PILOT.gender(Gender::Male).default,
				
				&PILOT.gender(Gender::Male).tone(Tone::Light),
				
				&PILOT.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PILOT.gender(Gender::Male).tone(Tone::Medium),
				
				&PILOT.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PILOT.gender(Gender::Male).tone(Tone::Dark),
				
				&PILOT.gender(Gender::Female).default,
				
				&PILOT.gender(Gender::Female).tone(Tone::Light),
				
				&PILOT.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PILOT.gender(Gender::Female).tone(Tone::Medium),
				
				&PILOT.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PILOT.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // POLICE_OFFICER
				
				&POLICE_OFFICER.default.default,
				
				&POLICE_OFFICER.default.tone(Tone::Light),
				
				&POLICE_OFFICER.default.tone(Tone::MediumLight),
				
				&POLICE_OFFICER.default.tone(Tone::Medium),
				
				&POLICE_OFFICER.default.tone(Tone::MediumDark),
				
				&POLICE_OFFICER.default.tone(Tone::Dark),
				
				&POLICE_OFFICER.gender(Gender::Male).default,
				
				&POLICE_OFFICER.gender(Gender::Male).tone(Tone::Light),
				
				&POLICE_OFFICER.gender(Gender::Male).tone(Tone::MediumLight),
				
				&POLICE_OFFICER.gender(Gender::Male).tone(Tone::Medium),
				
				&POLICE_OFFICER.gender(Gender::Male).tone(Tone::MediumDark),
				
				&POLICE_OFFICER.gender(Gender::Male).tone(Tone::Dark),
				
				&POLICE_OFFICER.gender(Gender::Female).default,
				
				&POLICE_OFFICER.gender(Gender::Female).tone(Tone::Light),
				
				&POLICE_OFFICER.gender(Gender::Female).tone(Tone::MediumLight),
				
				&POLICE_OFFICER.gender(Gender::Female).tone(Tone::Medium),
				
				&POLICE_OFFICER.gender(Gender::Female).tone(Tone::MediumDark),
				
				&POLICE_OFFICER.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PREGNANT_WOMAN
				
				&PREGNANT_WOMAN.default,
				
				&PREGNANT_WOMAN.tone(Tone::Light),
				
				&PREGNANT_WOMAN.tone(Tone::MediumLight),
				
				&PREGNANT_WOMAN.tone(Tone::Medium),
				
				&PREGNANT_WOMAN.tone(Tone::MediumDark),
				
				&PREGNANT_WOMAN.tone(Tone::Dark),
				
			],
			
			&[ // PRINCE
				
				&PRINCE.default,
				
				&PRINCE.tone(Tone::Light),
				
				&PRINCE.tone(Tone::MediumLight),
				
				&PRINCE.tone(Tone::Medium),
				
				&PRINCE.tone(Tone::MediumDark),
				
				&PRINCE.tone(Tone::Dark),
				
			],
			
			&[ // PRINCESS
				
				&PRINCESS.default,
				
				&PRINCESS.tone(Tone::Light),
				
				&PRINCESS.tone(Tone::MediumLight),
				
				&PRINCESS.tone(Tone::Medium),
				
				&PRINCESS.tone(Tone::MediumDark),
				
				&PRINCESS.tone(Tone::Dark),
				
			],
			
			&[ // SCIENTIST
				
				&SCIENTIST.default.default,
				
				&SCIENTIST.default.tone(Tone::Light),
				
				&SCIENTIST.default.tone(Tone::MediumLight),
				
				&SCIENTIST.default.tone(Tone::Medium),
				
				&SCIENTIST.default.tone(Tone::MediumDark),
				
				&SCIENTIST.default.tone(Tone::Dark),
				
				&SCIENTIST.gender(Gender::Male).default,
				
				&SCIENTIST.gender(Gender::Male).tone(Tone::Light),
				
				&SCIENTIST.gender(Gender::Male).tone(Tone::MediumLight),
				
				&SCIENTIST.gender(Gender::Male).tone(Tone::Medium),
				
				&SCIENTIST.gender(Gender::Male).tone(Tone::MediumDark),
				
				&SCIENTIST.gender(Gender::Male).tone(Tone::Dark),
				
				&SCIENTIST.gender(Gender::Female).default,
				
				&SCIENTIST.gender(Gender::Female).tone(Tone::Light),
				
				&SCIENTIST.gender(Gender::Female).tone(Tone::MediumLight),
				
				&SCIENTIST.gender(Gender::Female).tone(Tone::Medium),
				
				&SCIENTIST.gender(Gender::Female).tone(Tone::MediumDark),
				
				&SCIENTIST.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // SINGER
				
				&SINGER.default.default,
				
				&SINGER.default.tone(Tone::Light),
				
				&SINGER.default.tone(Tone::MediumLight),
				
				&SINGER.default.tone(Tone::Medium),
				
				&SINGER.default.tone(Tone::MediumDark),
				
				&SINGER.default.tone(Tone::Dark),
				
				&SINGER.gender(Gender::Male).default,
				
				&SINGER.gender(Gender::Male).tone(Tone::Light),
				
				&SINGER.gender(Gender::Male).tone(Tone::MediumLight),
				
				&SINGER.gender(Gender::Male).tone(Tone::Medium),
				
				&SINGER.gender(Gender::Male).tone(Tone::MediumDark),
				
				&SINGER.gender(Gender::Male).tone(Tone::Dark),
				
				&SINGER.gender(Gender::Female).default,
				
				&SINGER.gender(Gender::Female).tone(Tone::Light),
				
				&SINGER.gender(Gender::Female).tone(Tone::MediumLight),
				
				&SINGER.gender(Gender::Female).tone(Tone::Medium),
				
				&SINGER.gender(Gender::Female).tone(Tone::MediumDark),
				
				&SINGER.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // STUDENT
				
				&STUDENT.default.default,
				
				&STUDENT.default.tone(Tone::Light),
				
				&STUDENT.default.tone(Tone::MediumLight),
				
				&STUDENT.default.tone(Tone::Medium),
				
				&STUDENT.default.tone(Tone::MediumDark),
				
				&STUDENT.default.tone(Tone::Dark),
				
				&STUDENT.gender(Gender::Male).default,
				
				&STUDENT.gender(Gender::Male).tone(Tone::Light),
				
				&STUDENT.gender(Gender::Male).tone(Tone::MediumLight),
				
				&STUDENT.gender(Gender::Male).tone(Tone::Medium),
				
				&STUDENT.gender(Gender::Male).tone(Tone::MediumDark),
				
				&STUDENT.gender(Gender::Male).tone(Tone::Dark),
				
				&STUDENT.gender(Gender::Female).default,
				
				&STUDENT.gender(Gender::Female).tone(Tone::Light),
				
				&STUDENT.gender(Gender::Female).tone(Tone::MediumLight),
				
				&STUDENT.gender(Gender::Female).tone(Tone::Medium),
				
				&STUDENT.gender(Gender::Female).tone(Tone::MediumDark),
				
				&STUDENT.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // TEACHER
				
				&TEACHER.default.default,
				
				&TEACHER.default.tone(Tone::Light),
				
				&TEACHER.default.tone(Tone::MediumLight),
				
				&TEACHER.default.tone(Tone::Medium),
				
				&TEACHER.default.tone(Tone::MediumDark),
				
				&TEACHER.default.tone(Tone::Dark),
				
				&TEACHER.gender(Gender::Male).default,
				
				&TEACHER.gender(Gender::Male).tone(Tone::Light),
				
				&TEACHER.gender(Gender::Male).tone(Tone::MediumLight),
				
				&TEACHER.gender(Gender::Male).tone(Tone::Medium),
				
				&TEACHER.gender(Gender::Male).tone(Tone::MediumDark),
				
				&TEACHER.gender(Gender::Male).tone(Tone::Dark),
				
				&TEACHER.gender(Gender::Female).default,
				
				&TEACHER.gender(Gender::Female).tone(Tone::Light),
				
				&TEACHER.gender(Gender::Female).tone(Tone::MediumLight),
				
				&TEACHER.gender(Gender::Female).tone(Tone::Medium),
				
				&TEACHER.gender(Gender::Female).tone(Tone::MediumDark),
				
				&TEACHER.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // TECHNOLOGIST
				
				&TECHNOLOGIST.default.default,
				
				&TECHNOLOGIST.default.tone(Tone::Light),
				
				&TECHNOLOGIST.default.tone(Tone::MediumLight),
				
				&TECHNOLOGIST.default.tone(Tone::Medium),
				
				&TECHNOLOGIST.default.tone(Tone::MediumDark),
				
				&TECHNOLOGIST.default.tone(Tone::Dark),
				
				&TECHNOLOGIST.gender(Gender::Male).default,
				
				&TECHNOLOGIST.gender(Gender::Male).tone(Tone::Light),
				
				&TECHNOLOGIST.gender(Gender::Male).tone(Tone::MediumLight),
				
				&TECHNOLOGIST.gender(Gender::Male).tone(Tone::Medium),
				
				&TECHNOLOGIST.gender(Gender::Male).tone(Tone::MediumDark),
				
				&TECHNOLOGIST.gender(Gender::Male).tone(Tone::Dark),
				
				&TECHNOLOGIST.gender(Gender::Female).default,
				
				&TECHNOLOGIST.gender(Gender::Female).tone(Tone::Light),
				
				&TECHNOLOGIST.gender(Gender::Female).tone(Tone::MediumLight),
				
				&TECHNOLOGIST.gender(Gender::Female).tone(Tone::Medium),
				
				&TECHNOLOGIST.gender(Gender::Female).tone(Tone::MediumDark),
				
				&TECHNOLOGIST.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // WOMAN_WITH_HEADSCARF
				
				&WOMAN_WITH_HEADSCARF.default,
				
				&WOMAN_WITH_HEADSCARF.tone(Tone::Light),
				
				&WOMAN_WITH_HEADSCARF.tone(Tone::MediumLight),
				
				&WOMAN_WITH_HEADSCARF.tone(Tone::Medium),
				
				&WOMAN_WITH_HEADSCARF.tone(Tone::MediumDark),
				
				&WOMAN_WITH_HEADSCARF.tone(Tone::Dark),
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&ARTIST.default.default, // ARTIST
				
			
				
				&ASTRONAUT.default.default, // ASTRONAUT
				
			
				
				&BREAST_FEEDING.default, // BREAST_FEEDING
				
			
				
				&CONSTRUCTION_WORKER.default.default, // CONSTRUCTION_WORKER
				
			
				
				&COOK.default.default, // COOK
				
			
				
				&DETECTIVE.default.default, // DETECTIVE
				
			
				
				&FACTORY_WORKER.default.default, // FACTORY_WORKER
				
			
				
				&FARMER.default.default, // FARMER
				
			
				
				&FIREFIGHTER.default.default, // FIREFIGHTER
				
			
				
				&GUARD.default.default, // GUARD
				
			
				
				&HEALTH_WORKER.default.default, // HEALTH_WORKER
				
			
				
				&JUDGE.default.default, // JUDGE
				
			
				
				&MECHANIC.default.default, // MECHANIC
				
			
				
				&NINJA.default, // NINJA
				
			
				
				&OFFICE_WORKER.default.default, // OFFICE_WORKER
				
			
				
				&PERSON_FEEDING_BABY.default.default, // PERSON_FEEDING_BABY
				
			
				
				&PERSON_IN_TUXEDO.default.default, // PERSON_IN_TUXEDO
				
			
				
				&PERSON_WEARING_TURBAN.default.default, // PERSON_WEARING_TURBAN
				
			
				
				&PERSON_WITH_SKULLCAP.default, // PERSON_WITH_SKULLCAP
				
			
				
				&PERSON_WITH_VEIL.default.default, // PERSON_WITH_VEIL
				
			
				
				&PILOT.default.default, // PILOT
				
			
				
				&POLICE_OFFICER.default.default, // POLICE_OFFICER
				
			
				
				&PREGNANT_WOMAN.default, // PREGNANT_WOMAN
				
			
				
				&PRINCE.default, // PRINCE
				
			
				
				&PRINCESS.default, // PRINCESS
				
			
				
				&SCIENTIST.default.default, // SCIENTIST
				
			
				
				&SINGER.default.default, // SINGER
				
			
				
				&STUDENT.default.default, // STUDENT
				
			
				
				&TEACHER.default.default, // TEACHER
				
			
				
				&TECHNOLOGIST.default.default, // TECHNOLOGIST
				
			
				
				&WOMAN_WITH_HEADSCARF.default, // WOMAN_WITH_HEADSCARF
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // person_role
	
	/// person_sport üèáüö¥‚õπÔ∏è
	pub mod person_sport {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="horse racing üèá"]#[doc=""]#[doc="Since E1.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HORSE_RACING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HORSE_RACING); // üèá (`U+1F3C7`)"] #[doc="# assert_eq!(HORSE_RACING.to_string().as_str(), \"üèá\");"]#[doc="println!(\"{}\", HORSE_RACING.tone(Tone::Light)); // üèáüèª (`U+1F3C7 U+1F3FB`)"] #[doc="# assert_eq!(HORSE_RACING.tone(Tone::Light).to_string().as_str(), \"üèáüèª\");"]#[doc="println!(\"{}\", HORSE_RACING.tone(Tone::MediumLight)); // üèáüèº (`U+1F3C7 U+1F3FC`)"] #[doc="# assert_eq!(HORSE_RACING.tone(Tone::MediumLight).to_string().as_str(), \"üèáüèº\");"]#[doc="println!(\"{}\", HORSE_RACING.tone(Tone::Medium)); // üèáüèΩ (`U+1F3C7 U+1F3FD`)"] #[doc="# assert_eq!(HORSE_RACING.tone(Tone::Medium).to_string().as_str(), \"üèáüèΩ\");"]#[doc="println!(\"{}\", HORSE_RACING.tone(Tone::MediumDark)); // üèáüèæ (`U+1F3C7 U+1F3FE`)"] #[doc="# assert_eq!(HORSE_RACING.tone(Tone::MediumDark).to_string().as_str(), \"üèáüèæ\");"]#[doc="println!(\"{}\", HORSE_RACING.tone(Tone::Dark)); // üèáüèø (`U+1F3C7 U+1F3FF`)"] #[doc="# assert_eq!(HORSE_RACING.tone(Tone::Dark).to_string().as_str(), \"üèáüèø\");"]
#[doc="```"]
pub static HORSE_RACING: With<Tone,Emoji> = With::new(Emoji::new("horse racing", Version(1, 0),"üèá"), 
	&[
		Emoji::new("horse racing: light skin tone", Version(1, 0),"üèáüèª"),
	Emoji::new("horse racing: medium-light skin tone", Version(1, 0),"üèáüèº"),
	Emoji::new("horse racing: medium skin tone", Version(1, 0),"üèáüèΩ"),
	Emoji::new("horse racing: medium-dark skin tone", Version(1, 0),"üèáüèæ"),
	Emoji::new("horse racing: dark skin tone", Version(1, 0),"üèáüèø"),
	]);

		
		#[doc="person biking üö¥"]#[doc=""]#[doc="Since E1.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_BIKING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_BIKING); // üö¥ (`U+1F6B4`)"] #[doc="# assert_eq!(PERSON_BIKING.to_string().as_str(), \"üö¥\");"]#[doc="println!(\"{}\", PERSON_BIKING.tone(Tone::Light)); // üö¥üèª (`U+1F6B4 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_BIKING.tone(Tone::Light).to_string().as_str(), \"üö¥üèª\");"]#[doc="println!(\"{}\", PERSON_BIKING.tone(Tone::MediumLight)); // üö¥üèº (`U+1F6B4 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_BIKING.tone(Tone::MediumLight).to_string().as_str(), \"üö¥üèº\");"]#[doc="println!(\"{}\", PERSON_BIKING.tone(Tone::Medium)); // üö¥üèΩ (`U+1F6B4 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_BIKING.tone(Tone::Medium).to_string().as_str(), \"üö¥üèΩ\");"]#[doc="println!(\"{}\", PERSON_BIKING.tone(Tone::MediumDark)); // üö¥üèæ (`U+1F6B4 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_BIKING.tone(Tone::MediumDark).to_string().as_str(), \"üö¥üèæ\");"]#[doc="println!(\"{}\", PERSON_BIKING.tone(Tone::Dark)); // üö¥üèø (`U+1F6B4 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_BIKING.tone(Tone::Dark).to_string().as_str(), \"üö¥üèø\");"]#[doc="println!(\"{}\", PERSON_BIKING.gender(Gender::Male)); // üö¥‚Äç‚ôÇÔ∏è (`U+1F6B4 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BIKING.gender(Gender::Male).to_string().as_str(), \"üö¥‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BIKING.gender(Gender::Male).tone(Tone::Light)); // üö¥üèª‚Äç‚ôÇÔ∏è (`U+1F6B4 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BIKING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üö¥üèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BIKING.gender(Gender::Male).tone(Tone::MediumLight)); // üö¥üèº‚Äç‚ôÇÔ∏è (`U+1F6B4 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BIKING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üö¥üèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BIKING.gender(Gender::Male).tone(Tone::Medium)); // üö¥üèΩ‚Äç‚ôÇÔ∏è (`U+1F6B4 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BIKING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üö¥üèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BIKING.gender(Gender::Male).tone(Tone::MediumDark)); // üö¥üèæ‚Äç‚ôÇÔ∏è (`U+1F6B4 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BIKING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üö¥üèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BIKING.gender(Gender::Male).tone(Tone::Dark)); // üö¥üèø‚Äç‚ôÇÔ∏è (`U+1F6B4 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BIKING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üö¥üèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BIKING.gender(Gender::Female)); // üö¥‚Äç‚ôÄÔ∏è (`U+1F6B4 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BIKING.gender(Gender::Female).to_string().as_str(), \"üö¥‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BIKING.gender(Gender::Female).tone(Tone::Light)); // üö¥üèª‚Äç‚ôÄÔ∏è (`U+1F6B4 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BIKING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üö¥üèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BIKING.gender(Gender::Female).tone(Tone::MediumLight)); // üö¥üèº‚Äç‚ôÄÔ∏è (`U+1F6B4 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BIKING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üö¥üèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BIKING.gender(Gender::Female).tone(Tone::Medium)); // üö¥üèΩ‚Äç‚ôÄÔ∏è (`U+1F6B4 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BIKING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üö¥üèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BIKING.gender(Gender::Female).tone(Tone::MediumDark)); // üö¥üèæ‚Äç‚ôÄÔ∏è (`U+1F6B4 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BIKING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üö¥üèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BIKING.gender(Gender::Female).tone(Tone::Dark)); // üö¥üèø‚Äç‚ôÄÔ∏è (`U+1F6B4 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BIKING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üö¥üèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_BIKING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person biking", Version(1, 0),"üö¥"), 
	&[
		Emoji::new("person biking: light skin tone", Version(1, 0),"üö¥üèª"),
	Emoji::new("person biking: medium-light skin tone", Version(1, 0),"üö¥üèº"),
	Emoji::new("person biking: medium skin tone", Version(1, 0),"üö¥üèΩ"),
	Emoji::new("person biking: medium-dark skin tone", Version(1, 0),"üö¥üèæ"),
	Emoji::new("person biking: dark skin tone", Version(1, 0),"üö¥üèø"),
	]), 
	&[
		With::new(Emoji::new("man biking", Version(4, 0),"üö¥‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man biking: light skin tone", Version(4, 0),"üö¥üèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man biking: medium-light skin tone", Version(4, 0),"üö¥üèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man biking: medium skin tone", Version(4, 0),"üö¥üèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man biking: medium-dark skin tone", Version(4, 0),"üö¥üèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man biking: dark skin tone", Version(4, 0),"üö¥üèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman biking", Version(4, 0),"üö¥‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman biking: light skin tone", Version(4, 0),"üö¥üèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman biking: medium-light skin tone", Version(4, 0),"üö¥üèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman biking: medium skin tone", Version(4, 0),"üö¥üèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman biking: medium-dark skin tone", Version(4, 0),"üö¥üèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman biking: dark skin tone", Version(4, 0),"üö¥üèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person bouncing ball ‚õπÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_BOUNCING_BALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_BOUNCING_BALL); // ‚õπÔ∏è (`U+26F9 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.to_string().as_str(), \"‚õπÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.tone(Tone::Light)); // ‚õπüèª (`U+26F9 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.tone(Tone::Light).to_string().as_str(), \"‚õπüèª\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.tone(Tone::MediumLight)); // ‚õπüèº (`U+26F9 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.tone(Tone::MediumLight).to_string().as_str(), \"‚õπüèº\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.tone(Tone::Medium)); // ‚õπüèΩ (`U+26F9 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.tone(Tone::Medium).to_string().as_str(), \"‚õπüèΩ\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.tone(Tone::MediumDark)); // ‚õπüèæ (`U+26F9 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.tone(Tone::MediumDark).to_string().as_str(), \"‚õπüèæ\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.tone(Tone::Dark)); // ‚õπüèø (`U+26F9 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.tone(Tone::Dark).to_string().as_str(), \"‚õπüèø\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.gender(Gender::Male)); // ‚õπÔ∏è‚Äç‚ôÇÔ∏è (`U+26F9 U+FE0F U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.gender(Gender::Male).to_string().as_str(), \"‚õπÔ∏è‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::Light)); // ‚õπüèª‚Äç‚ôÇÔ∏è (`U+26F9 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"‚õπüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::MediumLight)); // ‚õπüèº‚Äç‚ôÇÔ∏è (`U+26F9 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"‚õπüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::Medium)); // ‚õπüèΩ‚Äç‚ôÇÔ∏è (`U+26F9 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"‚õπüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::MediumDark)); // ‚õπüèæ‚Äç‚ôÇÔ∏è (`U+26F9 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"‚õπüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::Dark)); // ‚õπüèø‚Äç‚ôÇÔ∏è (`U+26F9 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"‚õπüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.gender(Gender::Female)); // ‚õπÔ∏è‚Äç‚ôÄÔ∏è (`U+26F9 U+FE0F U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.gender(Gender::Female).to_string().as_str(), \"‚õπÔ∏è‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::Light)); // ‚õπüèª‚Äç‚ôÄÔ∏è (`U+26F9 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"‚õπüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::MediumLight)); // ‚õπüèº‚Äç‚ôÄÔ∏è (`U+26F9 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"‚õπüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::Medium)); // ‚õπüèΩ‚Äç‚ôÄÔ∏è (`U+26F9 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"‚õπüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::MediumDark)); // ‚õπüèæ‚Äç‚ôÄÔ∏è (`U+26F9 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"‚õπüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::Dark)); // ‚õπüèø‚Äç‚ôÄÔ∏è (`U+26F9 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"‚õπüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_BOUNCING_BALL: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person bouncing ball", Version(0, 7),"‚õπÔ∏è"), 
	&[
		Emoji::new("person bouncing ball: light skin tone", Version(2, 0),"‚õπüèª"),
	Emoji::new("person bouncing ball: medium-light skin tone", Version(2, 0),"‚õπüèº"),
	Emoji::new("person bouncing ball: medium skin tone", Version(2, 0),"‚õπüèΩ"),
	Emoji::new("person bouncing ball: medium-dark skin tone", Version(2, 0),"‚õπüèæ"),
	Emoji::new("person bouncing ball: dark skin tone", Version(2, 0),"‚õπüèø"),
	]), 
	&[
		With::new(Emoji::new("man bouncing ball", Version(4, 0),"‚õπÔ∏è‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man bouncing ball: light skin tone", Version(4, 0),"‚õπüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man bouncing ball: medium-light skin tone", Version(4, 0),"‚õπüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man bouncing ball: medium skin tone", Version(4, 0),"‚õπüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man bouncing ball: medium-dark skin tone", Version(4, 0),"‚õπüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man bouncing ball: dark skin tone", Version(4, 0),"‚õπüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman bouncing ball", Version(4, 0),"‚õπÔ∏è‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman bouncing ball: light skin tone", Version(4, 0),"‚õπüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman bouncing ball: medium-light skin tone", Version(4, 0),"‚õπüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman bouncing ball: medium skin tone", Version(4, 0),"‚õπüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman bouncing ball: medium-dark skin tone", Version(4, 0),"‚õπüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman bouncing ball: dark skin tone", Version(4, 0),"‚õπüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person cartwheeling ü§∏"]#[doc=""]#[doc="Since E3.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_CARTWHEELING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_CARTWHEELING); // ü§∏ (`U+1F938`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.to_string().as_str(), \"ü§∏\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.tone(Tone::Light)); // ü§∏üèª (`U+1F938 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.tone(Tone::Light).to_string().as_str(), \"ü§∏üèª\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.tone(Tone::MediumLight)); // ü§∏üèº (`U+1F938 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.tone(Tone::MediumLight).to_string().as_str(), \"ü§∏üèº\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.tone(Tone::Medium)); // ü§∏üèΩ (`U+1F938 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.tone(Tone::Medium).to_string().as_str(), \"ü§∏üèΩ\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.tone(Tone::MediumDark)); // ü§∏üèæ (`U+1F938 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.tone(Tone::MediumDark).to_string().as_str(), \"ü§∏üèæ\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.tone(Tone::Dark)); // ü§∏üèø (`U+1F938 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.tone(Tone::Dark).to_string().as_str(), \"ü§∏üèø\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.gender(Gender::Male)); // ü§∏‚Äç‚ôÇÔ∏è (`U+1F938 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.gender(Gender::Male).to_string().as_str(), \"ü§∏‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::Light)); // ü§∏üèª‚Äç‚ôÇÔ∏è (`U+1F938 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"ü§∏üèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::MediumLight)); // ü§∏üèº‚Äç‚ôÇÔ∏è (`U+1F938 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"ü§∏üèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::Medium)); // ü§∏üèΩ‚Äç‚ôÇÔ∏è (`U+1F938 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"ü§∏üèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::MediumDark)); // ü§∏üèæ‚Äç‚ôÇÔ∏è (`U+1F938 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"ü§∏üèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::Dark)); // ü§∏üèø‚Äç‚ôÇÔ∏è (`U+1F938 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"ü§∏üèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.gender(Gender::Female)); // ü§∏‚Äç‚ôÄÔ∏è (`U+1F938 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.gender(Gender::Female).to_string().as_str(), \"ü§∏‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::Light)); // ü§∏üèª‚Äç‚ôÄÔ∏è (`U+1F938 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"ü§∏üèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::MediumLight)); // ü§∏üèº‚Äç‚ôÄÔ∏è (`U+1F938 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"ü§∏üèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::Medium)); // ü§∏üèΩ‚Äç‚ôÄÔ∏è (`U+1F938 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"ü§∏üèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::MediumDark)); // ü§∏üèæ‚Äç‚ôÄÔ∏è (`U+1F938 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"ü§∏üèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::Dark)); // ü§∏üèø‚Äç‚ôÄÔ∏è (`U+1F938 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"ü§∏üèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_CARTWHEELING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person cartwheeling", Version(3, 0),"ü§∏"), 
	&[
		Emoji::new("person cartwheeling: light skin tone", Version(3, 0),"ü§∏üèª"),
	Emoji::new("person cartwheeling: medium-light skin tone", Version(3, 0),"ü§∏üèº"),
	Emoji::new("person cartwheeling: medium skin tone", Version(3, 0),"ü§∏üèΩ"),
	Emoji::new("person cartwheeling: medium-dark skin tone", Version(3, 0),"ü§∏üèæ"),
	Emoji::new("person cartwheeling: dark skin tone", Version(3, 0),"ü§∏üèø"),
	]), 
	&[
		With::new(Emoji::new("man cartwheeling", Version(4, 0),"ü§∏‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man cartwheeling: light skin tone", Version(4, 0),"ü§∏üèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man cartwheeling: medium-light skin tone", Version(4, 0),"ü§∏üèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man cartwheeling: medium skin tone", Version(4, 0),"ü§∏üèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man cartwheeling: medium-dark skin tone", Version(4, 0),"ü§∏üèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man cartwheeling: dark skin tone", Version(4, 0),"ü§∏üèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman cartwheeling", Version(4, 0),"ü§∏‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman cartwheeling: light skin tone", Version(4, 0),"ü§∏üèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman cartwheeling: medium-light skin tone", Version(4, 0),"ü§∏üèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman cartwheeling: medium skin tone", Version(4, 0),"ü§∏üèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman cartwheeling: medium-dark skin tone", Version(4, 0),"ü§∏üèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman cartwheeling: dark skin tone", Version(4, 0),"ü§∏üèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person fencing ü§∫"]#[doc=""]#[doc="Since E3.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_FENCING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_FENCING); // ü§∫ (`U+1F93A`)"] #[doc="# assert_eq!(PERSON_FENCING.to_string().as_str(), \"ü§∫\");"]
#[doc="```"]
pub static PERSON_FENCING: Emoji = Emoji::new("person fencing", Version(3, 0),"ü§∫");

		
		#[doc="person golfing üèåÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_GOLFING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_GOLFING); // üèåÔ∏è (`U+1F3CC U+FE0F`)"] #[doc="# assert_eq!(PERSON_GOLFING.to_string().as_str(), \"üèåÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GOLFING.tone(Tone::Light)); // üèåüèª (`U+1F3CC U+1F3FB`)"] #[doc="# assert_eq!(PERSON_GOLFING.tone(Tone::Light).to_string().as_str(), \"üèåüèª\");"]#[doc="println!(\"{}\", PERSON_GOLFING.tone(Tone::MediumLight)); // üèåüèº (`U+1F3CC U+1F3FC`)"] #[doc="# assert_eq!(PERSON_GOLFING.tone(Tone::MediumLight).to_string().as_str(), \"üèåüèº\");"]#[doc="println!(\"{}\", PERSON_GOLFING.tone(Tone::Medium)); // üèåüèΩ (`U+1F3CC U+1F3FD`)"] #[doc="# assert_eq!(PERSON_GOLFING.tone(Tone::Medium).to_string().as_str(), \"üèåüèΩ\");"]#[doc="println!(\"{}\", PERSON_GOLFING.tone(Tone::MediumDark)); // üèåüèæ (`U+1F3CC U+1F3FE`)"] #[doc="# assert_eq!(PERSON_GOLFING.tone(Tone::MediumDark).to_string().as_str(), \"üèåüèæ\");"]#[doc="println!(\"{}\", PERSON_GOLFING.tone(Tone::Dark)); // üèåüèø (`U+1F3CC U+1F3FF`)"] #[doc="# assert_eq!(PERSON_GOLFING.tone(Tone::Dark).to_string().as_str(), \"üèåüèø\");"]#[doc="println!(\"{}\", PERSON_GOLFING.gender(Gender::Male)); // üèåÔ∏è‚Äç‚ôÇÔ∏è (`U+1F3CC U+FE0F U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GOLFING.gender(Gender::Male).to_string().as_str(), \"üèåÔ∏è‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GOLFING.gender(Gender::Male).tone(Tone::Light)); // üèåüèª‚Äç‚ôÇÔ∏è (`U+1F3CC U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GOLFING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üèåüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GOLFING.gender(Gender::Male).tone(Tone::MediumLight)); // üèåüèº‚Äç‚ôÇÔ∏è (`U+1F3CC U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GOLFING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üèåüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GOLFING.gender(Gender::Male).tone(Tone::Medium)); // üèåüèΩ‚Äç‚ôÇÔ∏è (`U+1F3CC U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GOLFING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üèåüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GOLFING.gender(Gender::Male).tone(Tone::MediumDark)); // üèåüèæ‚Äç‚ôÇÔ∏è (`U+1F3CC U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GOLFING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üèåüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GOLFING.gender(Gender::Male).tone(Tone::Dark)); // üèåüèø‚Äç‚ôÇÔ∏è (`U+1F3CC U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GOLFING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üèåüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GOLFING.gender(Gender::Female)); // üèåÔ∏è‚Äç‚ôÄÔ∏è (`U+1F3CC U+FE0F U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GOLFING.gender(Gender::Female).to_string().as_str(), \"üèåÔ∏è‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GOLFING.gender(Gender::Female).tone(Tone::Light)); // üèåüèª‚Äç‚ôÄÔ∏è (`U+1F3CC U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GOLFING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üèåüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GOLFING.gender(Gender::Female).tone(Tone::MediumLight)); // üèåüèº‚Äç‚ôÄÔ∏è (`U+1F3CC U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GOLFING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üèåüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GOLFING.gender(Gender::Female).tone(Tone::Medium)); // üèåüèΩ‚Äç‚ôÄÔ∏è (`U+1F3CC U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GOLFING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üèåüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GOLFING.gender(Gender::Female).tone(Tone::MediumDark)); // üèåüèæ‚Äç‚ôÄÔ∏è (`U+1F3CC U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GOLFING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üèåüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_GOLFING.gender(Gender::Female).tone(Tone::Dark)); // üèåüèø‚Äç‚ôÄÔ∏è (`U+1F3CC U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GOLFING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üèåüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_GOLFING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person golfing", Version(0, 7),"üèåÔ∏è"), 
	&[
		Emoji::new("person golfing: light skin tone", Version(4, 0),"üèåüèª"),
	Emoji::new("person golfing: medium-light skin tone", Version(4, 0),"üèåüèº"),
	Emoji::new("person golfing: medium skin tone", Version(4, 0),"üèåüèΩ"),
	Emoji::new("person golfing: medium-dark skin tone", Version(4, 0),"üèåüèæ"),
	Emoji::new("person golfing: dark skin tone", Version(4, 0),"üèåüèø"),
	]), 
	&[
		With::new(Emoji::new("man golfing", Version(4, 0),"üèåÔ∏è‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man golfing: light skin tone", Version(4, 0),"üèåüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man golfing: medium-light skin tone", Version(4, 0),"üèåüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man golfing: medium skin tone", Version(4, 0),"üèåüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man golfing: medium-dark skin tone", Version(4, 0),"üèåüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man golfing: dark skin tone", Version(4, 0),"üèåüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman golfing", Version(4, 0),"üèåÔ∏è‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman golfing: light skin tone", Version(4, 0),"üèåüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman golfing: medium-light skin tone", Version(4, 0),"üèåüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman golfing: medium skin tone", Version(4, 0),"üèåüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman golfing: medium-dark skin tone", Version(4, 0),"üèåüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman golfing: dark skin tone", Version(4, 0),"üèåüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person juggling ü§π"]#[doc=""]#[doc="Since E3.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_JUGGLING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_JUGGLING); // ü§π (`U+1F939`)"] #[doc="# assert_eq!(PERSON_JUGGLING.to_string().as_str(), \"ü§π\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.tone(Tone::Light)); // ü§πüèª (`U+1F939 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_JUGGLING.tone(Tone::Light).to_string().as_str(), \"ü§πüèª\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.tone(Tone::MediumLight)); // ü§πüèº (`U+1F939 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_JUGGLING.tone(Tone::MediumLight).to_string().as_str(), \"ü§πüèº\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.tone(Tone::Medium)); // ü§πüèΩ (`U+1F939 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_JUGGLING.tone(Tone::Medium).to_string().as_str(), \"ü§πüèΩ\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.tone(Tone::MediumDark)); // ü§πüèæ (`U+1F939 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_JUGGLING.tone(Tone::MediumDark).to_string().as_str(), \"ü§πüèæ\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.tone(Tone::Dark)); // ü§πüèø (`U+1F939 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_JUGGLING.tone(Tone::Dark).to_string().as_str(), \"ü§πüèø\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.gender(Gender::Male)); // ü§π‚Äç‚ôÇÔ∏è (`U+1F939 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_JUGGLING.gender(Gender::Male).to_string().as_str(), \"ü§π‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.gender(Gender::Male).tone(Tone::Light)); // ü§πüèª‚Äç‚ôÇÔ∏è (`U+1F939 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_JUGGLING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"ü§πüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.gender(Gender::Male).tone(Tone::MediumLight)); // ü§πüèº‚Äç‚ôÇÔ∏è (`U+1F939 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_JUGGLING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"ü§πüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.gender(Gender::Male).tone(Tone::Medium)); // ü§πüèΩ‚Äç‚ôÇÔ∏è (`U+1F939 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_JUGGLING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"ü§πüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.gender(Gender::Male).tone(Tone::MediumDark)); // ü§πüèæ‚Äç‚ôÇÔ∏è (`U+1F939 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_JUGGLING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"ü§πüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.gender(Gender::Male).tone(Tone::Dark)); // ü§πüèø‚Äç‚ôÇÔ∏è (`U+1F939 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_JUGGLING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"ü§πüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.gender(Gender::Female)); // ü§π‚Äç‚ôÄÔ∏è (`U+1F939 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_JUGGLING.gender(Gender::Female).to_string().as_str(), \"ü§π‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.gender(Gender::Female).tone(Tone::Light)); // ü§πüèª‚Äç‚ôÄÔ∏è (`U+1F939 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_JUGGLING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"ü§πüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.gender(Gender::Female).tone(Tone::MediumLight)); // ü§πüèº‚Äç‚ôÄÔ∏è (`U+1F939 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_JUGGLING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"ü§πüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.gender(Gender::Female).tone(Tone::Medium)); // ü§πüèΩ‚Äç‚ôÄÔ∏è (`U+1F939 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_JUGGLING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"ü§πüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.gender(Gender::Female).tone(Tone::MediumDark)); // ü§πüèæ‚Äç‚ôÄÔ∏è (`U+1F939 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_JUGGLING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"ü§πüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.gender(Gender::Female).tone(Tone::Dark)); // ü§πüèø‚Äç‚ôÄÔ∏è (`U+1F939 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_JUGGLING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"ü§πüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_JUGGLING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person juggling", Version(3, 0),"ü§π"), 
	&[
		Emoji::new("person juggling: light skin tone", Version(3, 0),"ü§πüèª"),
	Emoji::new("person juggling: medium-light skin tone", Version(3, 0),"ü§πüèº"),
	Emoji::new("person juggling: medium skin tone", Version(3, 0),"ü§πüèΩ"),
	Emoji::new("person juggling: medium-dark skin tone", Version(3, 0),"ü§πüèæ"),
	Emoji::new("person juggling: dark skin tone", Version(3, 0),"ü§πüèø"),
	]), 
	&[
		With::new(Emoji::new("man juggling", Version(4, 0),"ü§π‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man juggling: light skin tone", Version(4, 0),"ü§πüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man juggling: medium-light skin tone", Version(4, 0),"ü§πüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man juggling: medium skin tone", Version(4, 0),"ü§πüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man juggling: medium-dark skin tone", Version(4, 0),"ü§πüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man juggling: dark skin tone", Version(4, 0),"ü§πüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman juggling", Version(4, 0),"ü§π‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman juggling: light skin tone", Version(4, 0),"ü§πüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman juggling: medium-light skin tone", Version(4, 0),"ü§πüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman juggling: medium skin tone", Version(4, 0),"ü§πüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman juggling: medium-dark skin tone", Version(4, 0),"ü§πüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman juggling: dark skin tone", Version(4, 0),"ü§πüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person lifting weights üèãÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_LIFTING_WEIGHTS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS); // üèãÔ∏è (`U+1F3CB U+FE0F`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.to_string().as_str(), \"üèãÔ∏è\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.tone(Tone::Light)); // üèãüèª (`U+1F3CB U+1F3FB`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.tone(Tone::Light).to_string().as_str(), \"üèãüèª\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.tone(Tone::MediumLight)); // üèãüèº (`U+1F3CB U+1F3FC`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.tone(Tone::MediumLight).to_string().as_str(), \"üèãüèº\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.tone(Tone::Medium)); // üèãüèΩ (`U+1F3CB U+1F3FD`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.tone(Tone::Medium).to_string().as_str(), \"üèãüèΩ\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.tone(Tone::MediumDark)); // üèãüèæ (`U+1F3CB U+1F3FE`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.tone(Tone::MediumDark).to_string().as_str(), \"üèãüèæ\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.tone(Tone::Dark)); // üèãüèø (`U+1F3CB U+1F3FF`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.tone(Tone::Dark).to_string().as_str(), \"üèãüèø\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.gender(Gender::Male)); // üèãÔ∏è‚Äç‚ôÇÔ∏è (`U+1F3CB U+FE0F U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.gender(Gender::Male).to_string().as_str(), \"üèãÔ∏è‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::Light)); // üèãüèª‚Äç‚ôÇÔ∏è (`U+1F3CB U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üèãüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::MediumLight)); // üèãüèº‚Äç‚ôÇÔ∏è (`U+1F3CB U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üèãüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::Medium)); // üèãüèΩ‚Äç‚ôÇÔ∏è (`U+1F3CB U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üèãüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::MediumDark)); // üèãüèæ‚Äç‚ôÇÔ∏è (`U+1F3CB U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üèãüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::Dark)); // üèãüèø‚Äç‚ôÇÔ∏è (`U+1F3CB U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üèãüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.gender(Gender::Female)); // üèãÔ∏è‚Äç‚ôÄÔ∏è (`U+1F3CB U+FE0F U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.gender(Gender::Female).to_string().as_str(), \"üèãÔ∏è‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::Light)); // üèãüèª‚Äç‚ôÄÔ∏è (`U+1F3CB U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üèãüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::MediumLight)); // üèãüèº‚Äç‚ôÄÔ∏è (`U+1F3CB U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üèãüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::Medium)); // üèãüèΩ‚Äç‚ôÄÔ∏è (`U+1F3CB U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üèãüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::MediumDark)); // üèãüèæ‚Äç‚ôÄÔ∏è (`U+1F3CB U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üèãüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::Dark)); // üèãüèø‚Äç‚ôÄÔ∏è (`U+1F3CB U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üèãüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_LIFTING_WEIGHTS: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person lifting weights", Version(0, 7),"üèãÔ∏è"), 
	&[
		Emoji::new("person lifting weights: light skin tone", Version(2, 0),"üèãüèª"),
	Emoji::new("person lifting weights: medium-light skin tone", Version(2, 0),"üèãüèº"),
	Emoji::new("person lifting weights: medium skin tone", Version(2, 0),"üèãüèΩ"),
	Emoji::new("person lifting weights: medium-dark skin tone", Version(2, 0),"üèãüèæ"),
	Emoji::new("person lifting weights: dark skin tone", Version(2, 0),"üèãüèø"),
	]), 
	&[
		With::new(Emoji::new("man lifting weights", Version(4, 0),"üèãÔ∏è‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man lifting weights: light skin tone", Version(4, 0),"üèãüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man lifting weights: medium-light skin tone", Version(4, 0),"üèãüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man lifting weights: medium skin tone", Version(4, 0),"üèãüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man lifting weights: medium-dark skin tone", Version(4, 0),"üèãüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man lifting weights: dark skin tone", Version(4, 0),"üèãüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman lifting weights", Version(4, 0),"üèãÔ∏è‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman lifting weights: light skin tone", Version(4, 0),"üèãüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman lifting weights: medium-light skin tone", Version(4, 0),"üèãüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman lifting weights: medium skin tone", Version(4, 0),"üèãüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman lifting weights: medium-dark skin tone", Version(4, 0),"üèãüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman lifting weights: dark skin tone", Version(4, 0),"üèãüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person mountain biking üöµ"]#[doc=""]#[doc="Since E1.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_MOUNTAIN_BIKING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING); // üöµ (`U+1F6B5`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.to_string().as_str(), \"üöµ\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.tone(Tone::Light)); // üöµüèª (`U+1F6B5 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.tone(Tone::Light).to_string().as_str(), \"üöµüèª\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.tone(Tone::MediumLight)); // üöµüèº (`U+1F6B5 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.tone(Tone::MediumLight).to_string().as_str(), \"üöµüèº\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.tone(Tone::Medium)); // üöµüèΩ (`U+1F6B5 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.tone(Tone::Medium).to_string().as_str(), \"üöµüèΩ\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.tone(Tone::MediumDark)); // üöµüèæ (`U+1F6B5 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.tone(Tone::MediumDark).to_string().as_str(), \"üöµüèæ\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.tone(Tone::Dark)); // üöµüèø (`U+1F6B5 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.tone(Tone::Dark).to_string().as_str(), \"üöµüèø\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.gender(Gender::Male)); // üöµ‚Äç‚ôÇÔ∏è (`U+1F6B5 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.gender(Gender::Male).to_string().as_str(), \"üöµ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::Light)); // üöµüèª‚Äç‚ôÇÔ∏è (`U+1F6B5 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üöµüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::MediumLight)); // üöµüèº‚Äç‚ôÇÔ∏è (`U+1F6B5 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üöµüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::Medium)); // üöµüèΩ‚Äç‚ôÇÔ∏è (`U+1F6B5 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üöµüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::MediumDark)); // üöµüèæ‚Äç‚ôÇÔ∏è (`U+1F6B5 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üöµüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::Dark)); // üöµüèø‚Äç‚ôÇÔ∏è (`U+1F6B5 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üöµüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.gender(Gender::Female)); // üöµ‚Äç‚ôÄÔ∏è (`U+1F6B5 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.gender(Gender::Female).to_string().as_str(), \"üöµ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::Light)); // üöµüèª‚Äç‚ôÄÔ∏è (`U+1F6B5 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üöµüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::MediumLight)); // üöµüèº‚Äç‚ôÄÔ∏è (`U+1F6B5 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üöµüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::Medium)); // üöµüèΩ‚Äç‚ôÄÔ∏è (`U+1F6B5 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üöµüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::MediumDark)); // üöµüèæ‚Äç‚ôÄÔ∏è (`U+1F6B5 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üöµüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::Dark)); // üöµüèø‚Äç‚ôÄÔ∏è (`U+1F6B5 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üöµüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_MOUNTAIN_BIKING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person mountain biking", Version(1, 0),"üöµ"), 
	&[
		Emoji::new("person mountain biking: light skin tone", Version(1, 0),"üöµüèª"),
	Emoji::new("person mountain biking: medium-light skin tone", Version(1, 0),"üöµüèº"),
	Emoji::new("person mountain biking: medium skin tone", Version(1, 0),"üöµüèΩ"),
	Emoji::new("person mountain biking: medium-dark skin tone", Version(1, 0),"üöµüèæ"),
	Emoji::new("person mountain biking: dark skin tone", Version(1, 0),"üöµüèø"),
	]), 
	&[
		With::new(Emoji::new("man mountain biking", Version(4, 0),"üöµ‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man mountain biking: light skin tone", Version(4, 0),"üöµüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man mountain biking: medium-light skin tone", Version(4, 0),"üöµüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man mountain biking: medium skin tone", Version(4, 0),"üöµüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man mountain biking: medium-dark skin tone", Version(4, 0),"üöµüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man mountain biking: dark skin tone", Version(4, 0),"üöµüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman mountain biking", Version(4, 0),"üöµ‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman mountain biking: light skin tone", Version(4, 0),"üöµüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman mountain biking: medium-light skin tone", Version(4, 0),"üöµüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman mountain biking: medium skin tone", Version(4, 0),"üöµüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman mountain biking: medium-dark skin tone", Version(4, 0),"üöµüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman mountain biking: dark skin tone", Version(4, 0),"üöµüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person playing handball ü§æ"]#[doc=""]#[doc="Since E3.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_PLAYING_HANDBALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL); // ü§æ (`U+1F93E`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.to_string().as_str(), \"ü§æ\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.tone(Tone::Light)); // ü§æüèª (`U+1F93E U+1F3FB`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.tone(Tone::Light).to_string().as_str(), \"ü§æüèª\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.tone(Tone::MediumLight)); // ü§æüèº (`U+1F93E U+1F3FC`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.tone(Tone::MediumLight).to_string().as_str(), \"ü§æüèº\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.tone(Tone::Medium)); // ü§æüèΩ (`U+1F93E U+1F3FD`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.tone(Tone::Medium).to_string().as_str(), \"ü§æüèΩ\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.tone(Tone::MediumDark)); // ü§æüèæ (`U+1F93E U+1F3FE`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.tone(Tone::MediumDark).to_string().as_str(), \"ü§æüèæ\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.tone(Tone::Dark)); // ü§æüèø (`U+1F93E U+1F3FF`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.tone(Tone::Dark).to_string().as_str(), \"ü§æüèø\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.gender(Gender::Male)); // ü§æ‚Äç‚ôÇÔ∏è (`U+1F93E U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.gender(Gender::Male).to_string().as_str(), \"ü§æ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::Light)); // ü§æüèª‚Äç‚ôÇÔ∏è (`U+1F93E U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"ü§æüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::MediumLight)); // ü§æüèº‚Äç‚ôÇÔ∏è (`U+1F93E U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"ü§æüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::Medium)); // ü§æüèΩ‚Äç‚ôÇÔ∏è (`U+1F93E U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"ü§æüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::MediumDark)); // ü§æüèæ‚Äç‚ôÇÔ∏è (`U+1F93E U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"ü§æüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::Dark)); // ü§æüèø‚Äç‚ôÇÔ∏è (`U+1F93E U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"ü§æüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.gender(Gender::Female)); // ü§æ‚Äç‚ôÄÔ∏è (`U+1F93E U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.gender(Gender::Female).to_string().as_str(), \"ü§æ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::Light)); // ü§æüèª‚Äç‚ôÄÔ∏è (`U+1F93E U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"ü§æüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::MediumLight)); // ü§æüèº‚Äç‚ôÄÔ∏è (`U+1F93E U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"ü§æüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::Medium)); // ü§æüèΩ‚Äç‚ôÄÔ∏è (`U+1F93E U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"ü§æüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::MediumDark)); // ü§æüèæ‚Äç‚ôÄÔ∏è (`U+1F93E U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"ü§æüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::Dark)); // ü§æüèø‚Äç‚ôÄÔ∏è (`U+1F93E U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"ü§æüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_PLAYING_HANDBALL: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person playing handball", Version(3, 0),"ü§æ"), 
	&[
		Emoji::new("person playing handball: light skin tone", Version(3, 0),"ü§æüèª"),
	Emoji::new("person playing handball: medium-light skin tone", Version(3, 0),"ü§æüèº"),
	Emoji::new("person playing handball: medium skin tone", Version(3, 0),"ü§æüèΩ"),
	Emoji::new("person playing handball: medium-dark skin tone", Version(3, 0),"ü§æüèæ"),
	Emoji::new("person playing handball: dark skin tone", Version(3, 0),"ü§æüèø"),
	]), 
	&[
		With::new(Emoji::new("man playing handball", Version(4, 0),"ü§æ‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man playing handball: light skin tone", Version(4, 0),"ü§æüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man playing handball: medium-light skin tone", Version(4, 0),"ü§æüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man playing handball: medium skin tone", Version(4, 0),"ü§æüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man playing handball: medium-dark skin tone", Version(4, 0),"ü§æüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man playing handball: dark skin tone", Version(4, 0),"ü§æüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman playing handball", Version(4, 0),"ü§æ‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman playing handball: light skin tone", Version(4, 0),"ü§æüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman playing handball: medium-light skin tone", Version(4, 0),"ü§æüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman playing handball: medium skin tone", Version(4, 0),"ü§æüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman playing handball: medium-dark skin tone", Version(4, 0),"ü§æüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman playing handball: dark skin tone", Version(4, 0),"ü§æüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person playing water polo ü§Ω"]#[doc=""]#[doc="Since E3.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_PLAYING_WATER_POLO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO); // ü§Ω (`U+1F93D`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.to_string().as_str(), \"ü§Ω\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.tone(Tone::Light)); // ü§Ωüèª (`U+1F93D U+1F3FB`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.tone(Tone::Light).to_string().as_str(), \"ü§Ωüèª\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.tone(Tone::MediumLight)); // ü§Ωüèº (`U+1F93D U+1F3FC`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.tone(Tone::MediumLight).to_string().as_str(), \"ü§Ωüèº\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.tone(Tone::Medium)); // ü§ΩüèΩ (`U+1F93D U+1F3FD`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.tone(Tone::Medium).to_string().as_str(), \"ü§ΩüèΩ\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.tone(Tone::MediumDark)); // ü§Ωüèæ (`U+1F93D U+1F3FE`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.tone(Tone::MediumDark).to_string().as_str(), \"ü§Ωüèæ\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.tone(Tone::Dark)); // ü§Ωüèø (`U+1F93D U+1F3FF`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.tone(Tone::Dark).to_string().as_str(), \"ü§Ωüèø\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.gender(Gender::Male)); // ü§Ω‚Äç‚ôÇÔ∏è (`U+1F93D U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.gender(Gender::Male).to_string().as_str(), \"ü§Ω‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::Light)); // ü§Ωüèª‚Äç‚ôÇÔ∏è (`U+1F93D U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"ü§Ωüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::MediumLight)); // ü§Ωüèº‚Äç‚ôÇÔ∏è (`U+1F93D U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"ü§Ωüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::Medium)); // ü§ΩüèΩ‚Äç‚ôÇÔ∏è (`U+1F93D U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"ü§ΩüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::MediumDark)); // ü§Ωüèæ‚Äç‚ôÇÔ∏è (`U+1F93D U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"ü§Ωüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::Dark)); // ü§Ωüèø‚Äç‚ôÇÔ∏è (`U+1F93D U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"ü§Ωüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.gender(Gender::Female)); // ü§Ω‚Äç‚ôÄÔ∏è (`U+1F93D U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.gender(Gender::Female).to_string().as_str(), \"ü§Ω‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::Light)); // ü§Ωüèª‚Äç‚ôÄÔ∏è (`U+1F93D U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"ü§Ωüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::MediumLight)); // ü§Ωüèº‚Äç‚ôÄÔ∏è (`U+1F93D U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"ü§Ωüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::Medium)); // ü§ΩüèΩ‚Äç‚ôÄÔ∏è (`U+1F93D U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"ü§ΩüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::MediumDark)); // ü§Ωüèæ‚Äç‚ôÄÔ∏è (`U+1F93D U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"ü§Ωüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::Dark)); // ü§Ωüèø‚Äç‚ôÄÔ∏è (`U+1F93D U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"ü§Ωüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_PLAYING_WATER_POLO: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person playing water polo", Version(3, 0),"ü§Ω"), 
	&[
		Emoji::new("person playing water polo: light skin tone", Version(3, 0),"ü§Ωüèª"),
	Emoji::new("person playing water polo: medium-light skin tone", Version(3, 0),"ü§Ωüèº"),
	Emoji::new("person playing water polo: medium skin tone", Version(3, 0),"ü§ΩüèΩ"),
	Emoji::new("person playing water polo: medium-dark skin tone", Version(3, 0),"ü§Ωüèæ"),
	Emoji::new("person playing water polo: dark skin tone", Version(3, 0),"ü§Ωüèø"),
	]), 
	&[
		With::new(Emoji::new("man playing water polo", Version(4, 0),"ü§Ω‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man playing water polo: light skin tone", Version(4, 0),"ü§Ωüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man playing water polo: medium-light skin tone", Version(4, 0),"ü§Ωüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man playing water polo: medium skin tone", Version(4, 0),"ü§ΩüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man playing water polo: medium-dark skin tone", Version(4, 0),"ü§Ωüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man playing water polo: dark skin tone", Version(4, 0),"ü§Ωüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman playing water polo", Version(4, 0),"ü§Ω‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman playing water polo: light skin tone", Version(4, 0),"ü§Ωüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman playing water polo: medium-light skin tone", Version(4, 0),"ü§Ωüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman playing water polo: medium skin tone", Version(4, 0),"ü§ΩüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman playing water polo: medium-dark skin tone", Version(4, 0),"ü§Ωüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman playing water polo: dark skin tone", Version(4, 0),"ü§Ωüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person rowing boat üö£"]#[doc=""]#[doc="Since E1.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_ROWING_BOAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_ROWING_BOAT); // üö£ (`U+1F6A3`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.to_string().as_str(), \"üö£\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.tone(Tone::Light)); // üö£üèª (`U+1F6A3 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.tone(Tone::Light).to_string().as_str(), \"üö£üèª\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.tone(Tone::MediumLight)); // üö£üèº (`U+1F6A3 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.tone(Tone::MediumLight).to_string().as_str(), \"üö£üèº\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.tone(Tone::Medium)); // üö£üèΩ (`U+1F6A3 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.tone(Tone::Medium).to_string().as_str(), \"üö£üèΩ\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.tone(Tone::MediumDark)); // üö£üèæ (`U+1F6A3 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.tone(Tone::MediumDark).to_string().as_str(), \"üö£üèæ\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.tone(Tone::Dark)); // üö£üèø (`U+1F6A3 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.tone(Tone::Dark).to_string().as_str(), \"üö£üèø\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.gender(Gender::Male)); // üö£‚Äç‚ôÇÔ∏è (`U+1F6A3 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.gender(Gender::Male).to_string().as_str(), \"üö£‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::Light)); // üö£üèª‚Äç‚ôÇÔ∏è (`U+1F6A3 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üö£üèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::MediumLight)); // üö£üèº‚Äç‚ôÇÔ∏è (`U+1F6A3 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üö£üèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::Medium)); // üö£üèΩ‚Äç‚ôÇÔ∏è (`U+1F6A3 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üö£üèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::MediumDark)); // üö£üèæ‚Äç‚ôÇÔ∏è (`U+1F6A3 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üö£üèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::Dark)); // üö£üèø‚Äç‚ôÇÔ∏è (`U+1F6A3 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üö£üèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.gender(Gender::Female)); // üö£‚Äç‚ôÄÔ∏è (`U+1F6A3 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.gender(Gender::Female).to_string().as_str(), \"üö£‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::Light)); // üö£üèª‚Äç‚ôÄÔ∏è (`U+1F6A3 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üö£üèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::MediumLight)); // üö£üèº‚Äç‚ôÄÔ∏è (`U+1F6A3 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üö£üèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::Medium)); // üö£üèΩ‚Äç‚ôÄÔ∏è (`U+1F6A3 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üö£üèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::MediumDark)); // üö£üèæ‚Äç‚ôÄÔ∏è (`U+1F6A3 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üö£üèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::Dark)); // üö£üèø‚Äç‚ôÄÔ∏è (`U+1F6A3 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üö£üèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_ROWING_BOAT: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person rowing boat", Version(1, 0),"üö£"), 
	&[
		Emoji::new("person rowing boat: light skin tone", Version(1, 0),"üö£üèª"),
	Emoji::new("person rowing boat: medium-light skin tone", Version(1, 0),"üö£üèº"),
	Emoji::new("person rowing boat: medium skin tone", Version(1, 0),"üö£üèΩ"),
	Emoji::new("person rowing boat: medium-dark skin tone", Version(1, 0),"üö£üèæ"),
	Emoji::new("person rowing boat: dark skin tone", Version(1, 0),"üö£üèø"),
	]), 
	&[
		With::new(Emoji::new("man rowing boat", Version(4, 0),"üö£‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man rowing boat: light skin tone", Version(4, 0),"üö£üèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man rowing boat: medium-light skin tone", Version(4, 0),"üö£üèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man rowing boat: medium skin tone", Version(4, 0),"üö£üèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man rowing boat: medium-dark skin tone", Version(4, 0),"üö£üèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man rowing boat: dark skin tone", Version(4, 0),"üö£üèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman rowing boat", Version(4, 0),"üö£‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman rowing boat: light skin tone", Version(4, 0),"üö£üèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman rowing boat: medium-light skin tone", Version(4, 0),"üö£üèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman rowing boat: medium skin tone", Version(4, 0),"üö£üèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman rowing boat: medium-dark skin tone", Version(4, 0),"üö£üèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman rowing boat: dark skin tone", Version(4, 0),"üö£üèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person surfing üèÑ"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_SURFING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_SURFING); // üèÑ (`U+1F3C4`)"] #[doc="# assert_eq!(PERSON_SURFING.to_string().as_str(), \"üèÑ\");"]#[doc="println!(\"{}\", PERSON_SURFING.tone(Tone::Light)); // üèÑüèª (`U+1F3C4 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_SURFING.tone(Tone::Light).to_string().as_str(), \"üèÑüèª\");"]#[doc="println!(\"{}\", PERSON_SURFING.tone(Tone::MediumLight)); // üèÑüèº (`U+1F3C4 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_SURFING.tone(Tone::MediumLight).to_string().as_str(), \"üèÑüèº\");"]#[doc="println!(\"{}\", PERSON_SURFING.tone(Tone::Medium)); // üèÑüèΩ (`U+1F3C4 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_SURFING.tone(Tone::Medium).to_string().as_str(), \"üèÑüèΩ\");"]#[doc="println!(\"{}\", PERSON_SURFING.tone(Tone::MediumDark)); // üèÑüèæ (`U+1F3C4 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_SURFING.tone(Tone::MediumDark).to_string().as_str(), \"üèÑüèæ\");"]#[doc="println!(\"{}\", PERSON_SURFING.tone(Tone::Dark)); // üèÑüèø (`U+1F3C4 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_SURFING.tone(Tone::Dark).to_string().as_str(), \"üèÑüèø\");"]#[doc="println!(\"{}\", PERSON_SURFING.gender(Gender::Male)); // üèÑ‚Äç‚ôÇÔ∏è (`U+1F3C4 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SURFING.gender(Gender::Male).to_string().as_str(), \"üèÑ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SURFING.gender(Gender::Male).tone(Tone::Light)); // üèÑüèª‚Äç‚ôÇÔ∏è (`U+1F3C4 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SURFING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üèÑüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SURFING.gender(Gender::Male).tone(Tone::MediumLight)); // üèÑüèº‚Äç‚ôÇÔ∏è (`U+1F3C4 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SURFING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üèÑüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SURFING.gender(Gender::Male).tone(Tone::Medium)); // üèÑüèΩ‚Äç‚ôÇÔ∏è (`U+1F3C4 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SURFING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üèÑüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SURFING.gender(Gender::Male).tone(Tone::MediumDark)); // üèÑüèæ‚Äç‚ôÇÔ∏è (`U+1F3C4 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SURFING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üèÑüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SURFING.gender(Gender::Male).tone(Tone::Dark)); // üèÑüèø‚Äç‚ôÇÔ∏è (`U+1F3C4 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SURFING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üèÑüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SURFING.gender(Gender::Female)); // üèÑ‚Äç‚ôÄÔ∏è (`U+1F3C4 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SURFING.gender(Gender::Female).to_string().as_str(), \"üèÑ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SURFING.gender(Gender::Female).tone(Tone::Light)); // üèÑüèª‚Äç‚ôÄÔ∏è (`U+1F3C4 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SURFING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üèÑüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SURFING.gender(Gender::Female).tone(Tone::MediumLight)); // üèÑüèº‚Äç‚ôÄÔ∏è (`U+1F3C4 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SURFING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üèÑüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SURFING.gender(Gender::Female).tone(Tone::Medium)); // üèÑüèΩ‚Äç‚ôÄÔ∏è (`U+1F3C4 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SURFING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üèÑüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SURFING.gender(Gender::Female).tone(Tone::MediumDark)); // üèÑüèæ‚Äç‚ôÄÔ∏è (`U+1F3C4 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SURFING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üèÑüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SURFING.gender(Gender::Female).tone(Tone::Dark)); // üèÑüèø‚Äç‚ôÄÔ∏è (`U+1F3C4 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SURFING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üèÑüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_SURFING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person surfing", Version(0, 6),"üèÑ"), 
	&[
		Emoji::new("person surfing: light skin tone", Version(1, 0),"üèÑüèª"),
	Emoji::new("person surfing: medium-light skin tone", Version(1, 0),"üèÑüèº"),
	Emoji::new("person surfing: medium skin tone", Version(1, 0),"üèÑüèΩ"),
	Emoji::new("person surfing: medium-dark skin tone", Version(1, 0),"üèÑüèæ"),
	Emoji::new("person surfing: dark skin tone", Version(1, 0),"üèÑüèø"),
	]), 
	&[
		With::new(Emoji::new("man surfing", Version(4, 0),"üèÑ‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man surfing: light skin tone", Version(4, 0),"üèÑüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man surfing: medium-light skin tone", Version(4, 0),"üèÑüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man surfing: medium skin tone", Version(4, 0),"üèÑüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man surfing: medium-dark skin tone", Version(4, 0),"üèÑüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man surfing: dark skin tone", Version(4, 0),"üèÑüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman surfing", Version(4, 0),"üèÑ‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman surfing: light skin tone", Version(4, 0),"üèÑüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman surfing: medium-light skin tone", Version(4, 0),"üèÑüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman surfing: medium skin tone", Version(4, 0),"üèÑüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman surfing: medium-dark skin tone", Version(4, 0),"üèÑüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman surfing: dark skin tone", Version(4, 0),"üèÑüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person swimming üèä"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_SWIMMING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_SWIMMING); // üèä (`U+1F3CA`)"] #[doc="# assert_eq!(PERSON_SWIMMING.to_string().as_str(), \"üèä\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.tone(Tone::Light)); // üèäüèª (`U+1F3CA U+1F3FB`)"] #[doc="# assert_eq!(PERSON_SWIMMING.tone(Tone::Light).to_string().as_str(), \"üèäüèª\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.tone(Tone::MediumLight)); // üèäüèº (`U+1F3CA U+1F3FC`)"] #[doc="# assert_eq!(PERSON_SWIMMING.tone(Tone::MediumLight).to_string().as_str(), \"üèäüèº\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.tone(Tone::Medium)); // üèäüèΩ (`U+1F3CA U+1F3FD`)"] #[doc="# assert_eq!(PERSON_SWIMMING.tone(Tone::Medium).to_string().as_str(), \"üèäüèΩ\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.tone(Tone::MediumDark)); // üèäüèæ (`U+1F3CA U+1F3FE`)"] #[doc="# assert_eq!(PERSON_SWIMMING.tone(Tone::MediumDark).to_string().as_str(), \"üèäüèæ\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.tone(Tone::Dark)); // üèäüèø (`U+1F3CA U+1F3FF`)"] #[doc="# assert_eq!(PERSON_SWIMMING.tone(Tone::Dark).to_string().as_str(), \"üèäüèø\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.gender(Gender::Male)); // üèä‚Äç‚ôÇÔ∏è (`U+1F3CA U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SWIMMING.gender(Gender::Male).to_string().as_str(), \"üèä‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.gender(Gender::Male).tone(Tone::Light)); // üèäüèª‚Äç‚ôÇÔ∏è (`U+1F3CA U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SWIMMING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"üèäüèª‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.gender(Gender::Male).tone(Tone::MediumLight)); // üèäüèº‚Äç‚ôÇÔ∏è (`U+1F3CA U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SWIMMING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"üèäüèº‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.gender(Gender::Male).tone(Tone::Medium)); // üèäüèΩ‚Äç‚ôÇÔ∏è (`U+1F3CA U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SWIMMING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"üèäüèΩ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.gender(Gender::Male).tone(Tone::MediumDark)); // üèäüèæ‚Äç‚ôÇÔ∏è (`U+1F3CA U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SWIMMING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"üèäüèæ‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.gender(Gender::Male).tone(Tone::Dark)); // üèäüèø‚Äç‚ôÇÔ∏è (`U+1F3CA U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SWIMMING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"üèäüèø‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.gender(Gender::Female)); // üèä‚Äç‚ôÄÔ∏è (`U+1F3CA U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SWIMMING.gender(Gender::Female).to_string().as_str(), \"üèä‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.gender(Gender::Female).tone(Tone::Light)); // üèäüèª‚Äç‚ôÄÔ∏è (`U+1F3CA U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SWIMMING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"üèäüèª‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.gender(Gender::Female).tone(Tone::MediumLight)); // üèäüèº‚Äç‚ôÄÔ∏è (`U+1F3CA U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SWIMMING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"üèäüèº‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.gender(Gender::Female).tone(Tone::Medium)); // üèäüèΩ‚Äç‚ôÄÔ∏è (`U+1F3CA U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SWIMMING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"üèäüèΩ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.gender(Gender::Female).tone(Tone::MediumDark)); // üèäüèæ‚Äç‚ôÄÔ∏è (`U+1F3CA U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SWIMMING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"üèäüèæ‚Äç‚ôÄÔ∏è\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.gender(Gender::Female).tone(Tone::Dark)); // üèäüèø‚Äç‚ôÄÔ∏è (`U+1F3CA U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SWIMMING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"üèäüèø‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_SWIMMING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person swimming", Version(0, 6),"üèä"), 
	&[
		Emoji::new("person swimming: light skin tone", Version(1, 0),"üèäüèª"),
	Emoji::new("person swimming: medium-light skin tone", Version(1, 0),"üèäüèº"),
	Emoji::new("person swimming: medium skin tone", Version(1, 0),"üèäüèΩ"),
	Emoji::new("person swimming: medium-dark skin tone", Version(1, 0),"üèäüèæ"),
	Emoji::new("person swimming: dark skin tone", Version(1, 0),"üèäüèø"),
	]), 
	&[
		With::new(Emoji::new("man swimming", Version(4, 0),"üèä‚Äç‚ôÇÔ∏è"), 
	&[
		Emoji::new("man swimming: light skin tone", Version(4, 0),"üèäüèª‚Äç‚ôÇÔ∏è"),
	Emoji::new("man swimming: medium-light skin tone", Version(4, 0),"üèäüèº‚Äç‚ôÇÔ∏è"),
	Emoji::new("man swimming: medium skin tone", Version(4, 0),"üèäüèΩ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man swimming: medium-dark skin tone", Version(4, 0),"üèäüèæ‚Äç‚ôÇÔ∏è"),
	Emoji::new("man swimming: dark skin tone", Version(4, 0),"üèäüèø‚Äç‚ôÇÔ∏è"),
	]),
	With::new(Emoji::new("woman swimming", Version(4, 0),"üèä‚Äç‚ôÄÔ∏è"), 
	&[
		Emoji::new("woman swimming: light skin tone", Version(4, 0),"üèäüèª‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman swimming: medium-light skin tone", Version(4, 0),"üèäüèº‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman swimming: medium skin tone", Version(4, 0),"üèäüèΩ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman swimming: medium-dark skin tone", Version(4, 0),"üèäüèæ‚Äç‚ôÄÔ∏è"),
	Emoji::new("woman swimming: dark skin tone", Version(4, 0),"üèäüèø‚Äç‚ôÄÔ∏è"),
	]),
	]);

		
		#[doc="person wrestling ü§º"]#[doc=""]#[doc="Since E3.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_WRESTLING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_WRESTLING); // ü§º (`U+1F93C`)"] #[doc="# assert_eq!(PERSON_WRESTLING.to_string().as_str(), \"ü§º\");"]#[doc="println!(\"{}\", PERSON_WRESTLING.gender(Gender::Male)); // ü§º‚Äç‚ôÇÔ∏è (`U+1F93C U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WRESTLING.gender(Gender::Male).to_string().as_str(), \"ü§º‚Äç‚ôÇÔ∏è\");"]#[doc="println!(\"{}\", PERSON_WRESTLING.gender(Gender::Female)); // ü§º‚Äç‚ôÄÔ∏è (`U+1F93C U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WRESTLING.gender(Gender::Female).to_string().as_str(), \"ü§º‚Äç‚ôÄÔ∏è\");"]
#[doc="```"]
pub static PERSON_WRESTLING: With<Gender,Emoji> = With::new(Emoji::new("people wrestling", Version(3, 0),"ü§º"), 
	&[
		Emoji::new("men wrestling", Version(4, 0),"ü§º‚Äç‚ôÇÔ∏è"),
	Emoji::new("women wrestling", Version(4, 0),"ü§º‚Äç‚ôÄÔ∏è"),
	]);

		
		#[doc="skier ‚õ∑Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SKIER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SKIER); // ‚õ∑Ô∏è (`U+26F7 U+FE0F`)"] #[doc="# assert_eq!(SKIER.to_string().as_str(), \"‚õ∑Ô∏è\");"]
#[doc="```"]
pub static SKIER :  Emoji = Emoji::new("skier", Version(0, 7), "‚õ∑Ô∏è"); // skier
		
		#[doc="snowboarder üèÇ"]#[doc=""]#[doc="Since E0.6"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SNOWBOARDER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SNOWBOARDER); // üèÇ (`U+1F3C2`)"] #[doc="# assert_eq!(SNOWBOARDER.to_string().as_str(), \"üèÇ\");"]#[doc="println!(\"{}\", SNOWBOARDER.tone(Tone::Light)); // üèÇüèª (`U+1F3C2 U+1F3FB`)"] #[doc="# assert_eq!(SNOWBOARDER.tone(Tone::Light).to_string().as_str(), \"üèÇüèª\");"]#[doc="println!(\"{}\", SNOWBOARDER.tone(Tone::MediumLight)); // üèÇüèº (`U+1F3C2 U+1F3FC`)"] #[doc="# assert_eq!(SNOWBOARDER.tone(Tone::MediumLight).to_string().as_str(), \"üèÇüèº\");"]#[doc="println!(\"{}\", SNOWBOARDER.tone(Tone::Medium)); // üèÇüèΩ (`U+1F3C2 U+1F3FD`)"] #[doc="# assert_eq!(SNOWBOARDER.tone(Tone::Medium).to_string().as_str(), \"üèÇüèΩ\");"]#[doc="println!(\"{}\", SNOWBOARDER.tone(Tone::MediumDark)); // üèÇüèæ (`U+1F3C2 U+1F3FE`)"] #[doc="# assert_eq!(SNOWBOARDER.tone(Tone::MediumDark).to_string().as_str(), \"üèÇüèæ\");"]#[doc="println!(\"{}\", SNOWBOARDER.tone(Tone::Dark)); // üèÇüèø (`U+1F3C2 U+1F3FF`)"] #[doc="# assert_eq!(SNOWBOARDER.tone(Tone::Dark).to_string().as_str(), \"üèÇüèø\");"]
#[doc="```"]
pub static SNOWBOARDER: With<Tone,Emoji> = With::new(Emoji::new("snowboarder", Version(0, 6),"üèÇ"), 
	&[
		Emoji::new("snowboarder: light skin tone", Version(1, 0),"üèÇüèª"),
	Emoji::new("snowboarder: medium-light skin tone", Version(1, 0),"üèÇüèº"),
	Emoji::new("snowboarder: medium skin tone", Version(1, 0),"üèÇüèΩ"),
	Emoji::new("snowboarder: medium-dark skin tone", Version(1, 0),"üèÇüèæ"),
	Emoji::new("snowboarder: dark skin tone", Version(1, 0),"üèÇüèø"),
	]);

		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // HORSE_RACING
				
				&HORSE_RACING.default,
				
				&HORSE_RACING.tone(Tone::Light),
				
				&HORSE_RACING.tone(Tone::MediumLight),
				
				&HORSE_RACING.tone(Tone::Medium),
				
				&HORSE_RACING.tone(Tone::MediumDark),
				
				&HORSE_RACING.tone(Tone::Dark),
				
			],
			
			&[ // PERSON_BIKING
				
				&PERSON_BIKING.default.default,
				
				&PERSON_BIKING.default.tone(Tone::Light),
				
				&PERSON_BIKING.default.tone(Tone::MediumLight),
				
				&PERSON_BIKING.default.tone(Tone::Medium),
				
				&PERSON_BIKING.default.tone(Tone::MediumDark),
				
				&PERSON_BIKING.default.tone(Tone::Dark),
				
				&PERSON_BIKING.gender(Gender::Male).default,
				
				&PERSON_BIKING.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_BIKING.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_BIKING.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_BIKING.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_BIKING.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_BIKING.gender(Gender::Female).default,
				
				&PERSON_BIKING.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_BIKING.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_BIKING.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_BIKING.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_BIKING.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_BOUNCING_BALL
				
				&PERSON_BOUNCING_BALL.default.default,
				
				&PERSON_BOUNCING_BALL.default.tone(Tone::Light),
				
				&PERSON_BOUNCING_BALL.default.tone(Tone::MediumLight),
				
				&PERSON_BOUNCING_BALL.default.tone(Tone::Medium),
				
				&PERSON_BOUNCING_BALL.default.tone(Tone::MediumDark),
				
				&PERSON_BOUNCING_BALL.default.tone(Tone::Dark),
				
				&PERSON_BOUNCING_BALL.gender(Gender::Male).default,
				
				&PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_BOUNCING_BALL.gender(Gender::Female).default,
				
				&PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_CARTWHEELING
				
				&PERSON_CARTWHEELING.default.default,
				
				&PERSON_CARTWHEELING.default.tone(Tone::Light),
				
				&PERSON_CARTWHEELING.default.tone(Tone::MediumLight),
				
				&PERSON_CARTWHEELING.default.tone(Tone::Medium),
				
				&PERSON_CARTWHEELING.default.tone(Tone::MediumDark),
				
				&PERSON_CARTWHEELING.default.tone(Tone::Dark),
				
				&PERSON_CARTWHEELING.gender(Gender::Male).default,
				
				&PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_CARTWHEELING.gender(Gender::Female).default,
				
				&PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_FENCING
				
				&PERSON_FENCING,
				
			],
			
			&[ // PERSON_GOLFING
				
				&PERSON_GOLFING.default.default,
				
				&PERSON_GOLFING.default.tone(Tone::Light),
				
				&PERSON_GOLFING.default.tone(Tone::MediumLight),
				
				&PERSON_GOLFING.default.tone(Tone::Medium),
				
				&PERSON_GOLFING.default.tone(Tone::MediumDark),
				
				&PERSON_GOLFING.default.tone(Tone::Dark),
				
				&PERSON_GOLFING.gender(Gender::Male).default,
				
				&PERSON_GOLFING.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_GOLFING.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_GOLFING.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_GOLFING.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_GOLFING.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_GOLFING.gender(Gender::Female).default,
				
				&PERSON_GOLFING.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_GOLFING.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_GOLFING.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_GOLFING.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_GOLFING.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_JUGGLING
				
				&PERSON_JUGGLING.default.default,
				
				&PERSON_JUGGLING.default.tone(Tone::Light),
				
				&PERSON_JUGGLING.default.tone(Tone::MediumLight),
				
				&PERSON_JUGGLING.default.tone(Tone::Medium),
				
				&PERSON_JUGGLING.default.tone(Tone::MediumDark),
				
				&PERSON_JUGGLING.default.tone(Tone::Dark),
				
				&PERSON_JUGGLING.gender(Gender::Male).default,
				
				&PERSON_JUGGLING.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_JUGGLING.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_JUGGLING.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_JUGGLING.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_JUGGLING.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_JUGGLING.gender(Gender::Female).default,
				
				&PERSON_JUGGLING.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_JUGGLING.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_JUGGLING.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_JUGGLING.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_JUGGLING.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_LIFTING_WEIGHTS
				
				&PERSON_LIFTING_WEIGHTS.default.default,
				
				&PERSON_LIFTING_WEIGHTS.default.tone(Tone::Light),
				
				&PERSON_LIFTING_WEIGHTS.default.tone(Tone::MediumLight),
				
				&PERSON_LIFTING_WEIGHTS.default.tone(Tone::Medium),
				
				&PERSON_LIFTING_WEIGHTS.default.tone(Tone::MediumDark),
				
				&PERSON_LIFTING_WEIGHTS.default.tone(Tone::Dark),
				
				&PERSON_LIFTING_WEIGHTS.gender(Gender::Male).default,
				
				&PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_LIFTING_WEIGHTS.gender(Gender::Female).default,
				
				&PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_MOUNTAIN_BIKING
				
				&PERSON_MOUNTAIN_BIKING.default.default,
				
				&PERSON_MOUNTAIN_BIKING.default.tone(Tone::Light),
				
				&PERSON_MOUNTAIN_BIKING.default.tone(Tone::MediumLight),
				
				&PERSON_MOUNTAIN_BIKING.default.tone(Tone::Medium),
				
				&PERSON_MOUNTAIN_BIKING.default.tone(Tone::MediumDark),
				
				&PERSON_MOUNTAIN_BIKING.default.tone(Tone::Dark),
				
				&PERSON_MOUNTAIN_BIKING.gender(Gender::Male).default,
				
				&PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_MOUNTAIN_BIKING.gender(Gender::Female).default,
				
				&PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_PLAYING_HANDBALL
				
				&PERSON_PLAYING_HANDBALL.default.default,
				
				&PERSON_PLAYING_HANDBALL.default.tone(Tone::Light),
				
				&PERSON_PLAYING_HANDBALL.default.tone(Tone::MediumLight),
				
				&PERSON_PLAYING_HANDBALL.default.tone(Tone::Medium),
				
				&PERSON_PLAYING_HANDBALL.default.tone(Tone::MediumDark),
				
				&PERSON_PLAYING_HANDBALL.default.tone(Tone::Dark),
				
				&PERSON_PLAYING_HANDBALL.gender(Gender::Male).default,
				
				&PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_PLAYING_HANDBALL.gender(Gender::Female).default,
				
				&PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_PLAYING_WATER_POLO
				
				&PERSON_PLAYING_WATER_POLO.default.default,
				
				&PERSON_PLAYING_WATER_POLO.default.tone(Tone::Light),
				
				&PERSON_PLAYING_WATER_POLO.default.tone(Tone::MediumLight),
				
				&PERSON_PLAYING_WATER_POLO.default.tone(Tone::Medium),
				
				&PERSON_PLAYING_WATER_POLO.default.tone(Tone::MediumDark),
				
				&PERSON_PLAYING_WATER_POLO.default.tone(Tone::Dark),
				
				&PERSON_PLAYING_WATER_POLO.gender(Gender::Male).default,
				
				&PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_PLAYING_WATER_POLO.gender(Gender::Female).default,
				
				&PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_ROWING_BOAT
				
				&PERSON_ROWING_BOAT.default.default,
				
				&PERSON_ROWING_BOAT.default.tone(Tone::Light),
				
				&PERSON_ROWING_BOAT.default.tone(Tone::MediumLight),
				
				&PERSON_ROWING_BOAT.default.tone(Tone::Medium),
				
				&PERSON_ROWING_BOAT.default.tone(Tone::MediumDark),
				
				&PERSON_ROWING_BOAT.default.tone(Tone::Dark),
				
				&PERSON_ROWING_BOAT.gender(Gender::Male).default,
				
				&PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_ROWING_BOAT.gender(Gender::Female).default,
				
				&PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_SURFING
				
				&PERSON_SURFING.default.default,
				
				&PERSON_SURFING.default.tone(Tone::Light),
				
				&PERSON_SURFING.default.tone(Tone::MediumLight),
				
				&PERSON_SURFING.default.tone(Tone::Medium),
				
				&PERSON_SURFING.default.tone(Tone::MediumDark),
				
				&PERSON_SURFING.default.tone(Tone::Dark),
				
				&PERSON_SURFING.gender(Gender::Male).default,
				
				&PERSON_SURFING.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_SURFING.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_SURFING.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_SURFING.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_SURFING.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_SURFING.gender(Gender::Female).default,
				
				&PERSON_SURFING.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_SURFING.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_SURFING.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_SURFING.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_SURFING.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_SWIMMING
				
				&PERSON_SWIMMING.default.default,
				
				&PERSON_SWIMMING.default.tone(Tone::Light),
				
				&PERSON_SWIMMING.default.tone(Tone::MediumLight),
				
				&PERSON_SWIMMING.default.tone(Tone::Medium),
				
				&PERSON_SWIMMING.default.tone(Tone::MediumDark),
				
				&PERSON_SWIMMING.default.tone(Tone::Dark),
				
				&PERSON_SWIMMING.gender(Gender::Male).default,
				
				&PERSON_SWIMMING.gender(Gender::Male).tone(Tone::Light),
				
				&PERSON_SWIMMING.gender(Gender::Male).tone(Tone::MediumLight),
				
				&PERSON_SWIMMING.gender(Gender::Male).tone(Tone::Medium),
				
				&PERSON_SWIMMING.gender(Gender::Male).tone(Tone::MediumDark),
				
				&PERSON_SWIMMING.gender(Gender::Male).tone(Tone::Dark),
				
				&PERSON_SWIMMING.gender(Gender::Female).default,
				
				&PERSON_SWIMMING.gender(Gender::Female).tone(Tone::Light),
				
				&PERSON_SWIMMING.gender(Gender::Female).tone(Tone::MediumLight),
				
				&PERSON_SWIMMING.gender(Gender::Female).tone(Tone::Medium),
				
				&PERSON_SWIMMING.gender(Gender::Female).tone(Tone::MediumDark),
				
				&PERSON_SWIMMING.gender(Gender::Female).tone(Tone::Dark),
				
			],
			
			&[ // PERSON_WRESTLING
				
				&PERSON_WRESTLING.default,
				
				&PERSON_WRESTLING.gender(Gender::Male),
				
				&PERSON_WRESTLING.gender(Gender::Female),
				
			],
			
			&[ // SKIER
				
				&SKIER,
				
			],
			
			&[ // SNOWBOARDER
				
				&SNOWBOARDER.default,
				
				&SNOWBOARDER.tone(Tone::Light),
				
				&SNOWBOARDER.tone(Tone::MediumLight),
				
				&SNOWBOARDER.tone(Tone::Medium),
				
				&SNOWBOARDER.tone(Tone::MediumDark),
				
				&SNOWBOARDER.tone(Tone::Dark),
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&HORSE_RACING.default, // HORSE_RACING
				
			
				
				&PERSON_BIKING.default.default, // PERSON_BIKING
				
			
				
				&PERSON_BOUNCING_BALL.default.default, // PERSON_BOUNCING_BALL
				
			
				
				&PERSON_CARTWHEELING.default.default, // PERSON_CARTWHEELING
				
			
				
				&PERSON_FENCING, // PERSON_FENCING
				
			
				
				&PERSON_GOLFING.default.default, // PERSON_GOLFING
				
			
				
				&PERSON_JUGGLING.default.default, // PERSON_JUGGLING
				
			
				
				&PERSON_LIFTING_WEIGHTS.default.default, // PERSON_LIFTING_WEIGHTS
				
			
				
				&PERSON_MOUNTAIN_BIKING.default.default, // PERSON_MOUNTAIN_BIKING
				
			
				
				&PERSON_PLAYING_HANDBALL.default.default, // PERSON_PLAYING_HANDBALL
				
			
				
				&PERSON_PLAYING_WATER_POLO.default.default, // PERSON_PLAYING_WATER_POLO
				
			
				
				&PERSON_ROWING_BOAT.default.default, // PERSON_ROWING_BOAT
				
			
				
				&PERSON_SURFING.default.default, // PERSON_SURFING
				
			
				
				&PERSON_SWIMMING.default.default, // PERSON_SWIMMING
				
			
				
				&PERSON_WRESTLING.default, // PERSON_WRESTLING
				
			
				
				&SKIER, // SKIER
				
			
				
				&SNOWBOARDER.default, // SNOWBOARDER
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // person_sport
	
	/// person_symbol üë•üë§üë£
	pub mod person_symbol {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="busts in silhouette üë•"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BUSTS_IN_SILHOUETTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BUSTS_IN_SILHOUETTE); // üë• (`U+1F465`)"] #[doc="# assert_eq!(BUSTS_IN_SILHOUETTE.to_string().as_str(), \"üë•\");"]
#[doc="```"]
pub static BUSTS_IN_SILHOUETTE :  Emoji = Emoji::new("busts in silhouette", Version(1, 0), "üë•"); // busts in silhouette
		
		#[doc="bust in silhouette üë§"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BUST_IN_SILHOUETTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BUST_IN_SILHOUETTE); // üë§ (`U+1F464`)"] #[doc="# assert_eq!(BUST_IN_SILHOUETTE.to_string().as_str(), \"üë§\");"]
#[doc="```"]
pub static BUST_IN_SILHOUETTE :  Emoji = Emoji::new("bust in silhouette", Version(0, 6), "üë§"); // bust in silhouette
		
		#[doc="footprints üë£"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FOOTPRINTS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FOOTPRINTS); // üë£ (`U+1F463`)"] #[doc="# assert_eq!(FOOTPRINTS.to_string().as_str(), \"üë£\");"]
#[doc="```"]
pub static FOOTPRINTS :  Emoji = Emoji::new("footprints", Version(0, 6), "üë£"); // footprints
		
		#[doc="person hugging ü´Ç"]#[doc=""]#[doc="Since E13.0"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_HUGGING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_HUGGING); // ü´Ç (`U+1FAC2`)"] #[doc="# assert_eq!(PERSON_HUGGING.to_string().as_str(), \"ü´Ç\");"]
#[doc="```"]
pub static PERSON_HUGGING: Emoji = Emoji::new("people hugging", Version(13, 0),"ü´Ç");

		
		#[doc="speaking head üó£Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPEAKING_HEAD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPEAKING_HEAD); // üó£Ô∏è (`U+1F5E3 U+FE0F`)"] #[doc="# assert_eq!(SPEAKING_HEAD.to_string().as_str(), \"üó£Ô∏è\");"]
#[doc="```"]
pub static SPEAKING_HEAD :  Emoji = Emoji::new("speaking head", Version(0, 7), "üó£Ô∏è"); // speaking head
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BUSTS_IN_SILHOUETTE
				
				&BUSTS_IN_SILHOUETTE,
				
			],
			
			&[ // BUST_IN_SILHOUETTE
				
				&BUST_IN_SILHOUETTE,
				
			],
			
			&[ // FOOTPRINTS
				
				&FOOTPRINTS,
				
			],
			
			&[ // PERSON_HUGGING
				
				&PERSON_HUGGING,
				
			],
			
			&[ // SPEAKING_HEAD
				
				&SPEAKING_HEAD,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BUSTS_IN_SILHOUETTE, // BUSTS_IN_SILHOUETTE
				
			
				
				&BUST_IN_SILHOUETTE, // BUST_IN_SILHOUETTE
				
			
				
				&FOOTPRINTS, // FOOTPRINTS
				
			
				
				&PERSON_HUGGING, // PERSON_HUGGING
				
			
				
				&SPEAKING_HEAD, // SPEAKING_HEAD
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // person_symbol
	


	// Emoji iterators

	/// Returns an iterator over all emoji variants of these subgroups grouped by base emojis
	pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
		core::iter::empty()
		
			.chain(body_parts::all_variants())
		
			.chain(family::all_variants())
		
			.chain(hand_fingers_closed::all_variants())
		
			.chain(hand_fingers_open::all_variants())
		
			.chain(hand_fingers_partial::all_variants())
		
			.chain(hand_prop::all_variants())
		
			.chain(hand_single_finger::all_variants())
		
			.chain(hands::all_variants())
		
			.chain(person::all_variants())
		
			.chain(person_activity::all_variants())
		
			.chain(person_fantasy::all_variants())
		
			.chain(person_gesture::all_variants())
		
			.chain(person_resting::all_variants())
		
			.chain(person_role::all_variants())
		
			.chain(person_sport::all_variants())
		
			.chain(person_symbol::all_variants())
		
	}

	/// Returns an iterator over all base emojis of these subgroups (i.e. one for each static)
	pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
		core::iter::empty()
		
			.chain(body_parts::base_emojis())
		
			.chain(family::base_emojis())
		
			.chain(hand_fingers_closed::base_emojis())
		
			.chain(hand_fingers_open::base_emojis())
		
			.chain(hand_fingers_partial::base_emojis())
		
			.chain(hand_prop::base_emojis())
		
			.chain(hand_single_finger::base_emojis())
		
			.chain(hands::base_emojis())
		
			.chain(person::base_emojis())
		
			.chain(person_activity::base_emojis())
		
			.chain(person_fantasy::base_emojis())
		
			.chain(person_gesture::base_emojis())
		
			.chain(person_resting::base_emojis())
		
			.chain(person_role::base_emojis())
		
			.chain(person_sport::base_emojis())
		
			.chain(person_symbol::base_emojis())
		
	}

} // people_and_body

/// smileys_and_emotion üòπüí¢üòò
pub mod smileys_and_emotion {
	use crate::emojis::Emoji;

	
	/// cat_face üòπüòºüòø
	pub mod cat_face {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="cat with tears of joy üòπ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CAT_WITH_TEARS_OF_JOY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CAT_WITH_TEARS_OF_JOY); // üòπ (`U+1F639`)"] #[doc="# assert_eq!(CAT_WITH_TEARS_OF_JOY.to_string().as_str(), \"üòπ\");"]
#[doc="```"]
pub static CAT_WITH_TEARS_OF_JOY :  Emoji = Emoji::new("cat with tears of joy", Version(0, 6), "üòπ"); // cat with tears of joy
		
		#[doc="cat with wry smile üòº"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CAT_WITH_WRY_SMILE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CAT_WITH_WRY_SMILE); // üòº (`U+1F63C`)"] #[doc="# assert_eq!(CAT_WITH_WRY_SMILE.to_string().as_str(), \"üòº\");"]
#[doc="```"]
pub static CAT_WITH_WRY_SMILE :  Emoji = Emoji::new("cat with wry smile", Version(0, 6), "üòº"); // cat with wry smile
		
		#[doc="crying cat üòø"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CRYING_CAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CRYING_CAT); // üòø (`U+1F63F`)"] #[doc="# assert_eq!(CRYING_CAT.to_string().as_str(), \"üòø\");"]
#[doc="```"]
pub static CRYING_CAT :  Emoji = Emoji::new("crying cat", Version(0, 6), "üòø"); // crying cat
		
		#[doc="grinning cat üò∫"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GRINNING_CAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GRINNING_CAT); // üò∫ (`U+1F63A`)"] #[doc="# assert_eq!(GRINNING_CAT.to_string().as_str(), \"üò∫\");"]
#[doc="```"]
pub static GRINNING_CAT :  Emoji = Emoji::new("grinning cat", Version(0, 6), "üò∫"); // grinning cat
		
		#[doc="grinning cat with smiling eyes üò∏"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GRINNING_CAT_WITH_SMILING_EYES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GRINNING_CAT_WITH_SMILING_EYES); // üò∏ (`U+1F638`)"] #[doc="# assert_eq!(GRINNING_CAT_WITH_SMILING_EYES.to_string().as_str(), \"üò∏\");"]
#[doc="```"]
pub static GRINNING_CAT_WITH_SMILING_EYES :  Emoji = Emoji::new("grinning cat with smiling eyes", Version(0, 6), "üò∏"); // grinning cat with smiling eyes
		
		#[doc="kissing cat üòΩ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KISSING_CAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KISSING_CAT); // üòΩ (`U+1F63D`)"] #[doc="# assert_eq!(KISSING_CAT.to_string().as_str(), \"üòΩ\");"]
#[doc="```"]
pub static KISSING_CAT :  Emoji = Emoji::new("kissing cat", Version(0, 6), "üòΩ"); // kissing cat
		
		#[doc="pouting cat üòæ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POUTING_CAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POUTING_CAT); // üòæ (`U+1F63E`)"] #[doc="# assert_eq!(POUTING_CAT.to_string().as_str(), \"üòæ\");"]
#[doc="```"]
pub static POUTING_CAT :  Emoji = Emoji::new("pouting cat", Version(0, 6), "üòæ"); // pouting cat
		
		#[doc="smiling cat with heart-eyes üòª"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SMILING_CAT_WITH_HEART_EYES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SMILING_CAT_WITH_HEART_EYES); // üòª (`U+1F63B`)"] #[doc="# assert_eq!(SMILING_CAT_WITH_HEART_EYES.to_string().as_str(), \"üòª\");"]
#[doc="```"]
pub static SMILING_CAT_WITH_HEART_EYES :  Emoji = Emoji::new("smiling cat with heart-eyes", Version(0, 6), "üòª"); // smiling cat with heart-eyes
		
		#[doc="weary cat üôÄ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WEARY_CAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WEARY_CAT); // üôÄ (`U+1F640`)"] #[doc="# assert_eq!(WEARY_CAT.to_string().as_str(), \"üôÄ\");"]
#[doc="```"]
pub static WEARY_CAT :  Emoji = Emoji::new("weary cat", Version(0, 6), "üôÄ"); // weary cat
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // CAT_WITH_TEARS_OF_JOY
				
				&CAT_WITH_TEARS_OF_JOY,
				
			],
			
			&[ // CAT_WITH_WRY_SMILE
				
				&CAT_WITH_WRY_SMILE,
				
			],
			
			&[ // CRYING_CAT
				
				&CRYING_CAT,
				
			],
			
			&[ // GRINNING_CAT
				
				&GRINNING_CAT,
				
			],
			
			&[ // GRINNING_CAT_WITH_SMILING_EYES
				
				&GRINNING_CAT_WITH_SMILING_EYES,
				
			],
			
			&[ // KISSING_CAT
				
				&KISSING_CAT,
				
			],
			
			&[ // POUTING_CAT
				
				&POUTING_CAT,
				
			],
			
			&[ // SMILING_CAT_WITH_HEART_EYES
				
				&SMILING_CAT_WITH_HEART_EYES,
				
			],
			
			&[ // WEARY_CAT
				
				&WEARY_CAT,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&CAT_WITH_TEARS_OF_JOY, // CAT_WITH_TEARS_OF_JOY
				
			
				
				&CAT_WITH_WRY_SMILE, // CAT_WITH_WRY_SMILE
				
			
				
				&CRYING_CAT, // CRYING_CAT
				
			
				
				&GRINNING_CAT, // GRINNING_CAT
				
			
				
				&GRINNING_CAT_WITH_SMILING_EYES, // GRINNING_CAT_WITH_SMILING_EYES
				
			
				
				&KISSING_CAT, // KISSING_CAT
				
			
				
				&POUTING_CAT, // POUTING_CAT
				
			
				
				&SMILING_CAT_WITH_HEART_EYES, // SMILING_CAT_WITH_HEART_EYES
				
			
				
				&WEARY_CAT, // WEARY_CAT
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // cat_face
	
	/// emotion üí¢üíìüñ§
	pub mod emotion {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="anger symbol üí¢"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ANGER_SYMBOL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ANGER_SYMBOL); // üí¢ (`U+1F4A2`)"] #[doc="# assert_eq!(ANGER_SYMBOL.to_string().as_str(), \"üí¢\");"]
#[doc="```"]
pub static ANGER_SYMBOL :  Emoji = Emoji::new("anger symbol", Version(0, 6), "üí¢"); // anger symbol
		
		#[doc="beating heart üíì"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BEATING_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BEATING_HEART); // üíì (`U+1F493`)"] #[doc="# assert_eq!(BEATING_HEART.to_string().as_str(), \"üíì\");"]
#[doc="```"]
pub static BEATING_HEART :  Emoji = Emoji::new("beating heart", Version(0, 6), "üíì"); // beating heart
		
		#[doc="black heart üñ§"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLACK_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLACK_HEART); // üñ§ (`U+1F5A4`)"] #[doc="# assert_eq!(BLACK_HEART.to_string().as_str(), \"üñ§\");"]
#[doc="```"]
pub static BLACK_HEART :  Emoji = Emoji::new("black heart", Version(3, 0), "üñ§"); // black heart
		
		#[doc="blue heart üíô"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLUE_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLUE_HEART); // üíô (`U+1F499`)"] #[doc="# assert_eq!(BLUE_HEART.to_string().as_str(), \"üíô\");"]
#[doc="```"]
pub static BLUE_HEART :  Emoji = Emoji::new("blue heart", Version(0, 6), "üíô"); // blue heart
		
		#[doc="bomb üí£"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BOMB;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BOMB); // üí£ (`U+1F4A3`)"] #[doc="# assert_eq!(BOMB.to_string().as_str(), \"üí£\");"]
#[doc="```"]
pub static BOMB :  Emoji = Emoji::new("bomb", Version(0, 6), "üí£"); // bomb
		
		#[doc="broken heart üíî"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BROKEN_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BROKEN_HEART); // üíî (`U+1F494`)"] #[doc="# assert_eq!(BROKEN_HEART.to_string().as_str(), \"üíî\");"]
#[doc="```"]
pub static BROKEN_HEART :  Emoji = Emoji::new("broken heart", Version(0, 6), "üíî"); // broken heart
		
		#[doc="brown heart ü§é"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BROWN_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BROWN_HEART); // ü§é (`U+1F90E`)"] #[doc="# assert_eq!(BROWN_HEART.to_string().as_str(), \"ü§é\");"]
#[doc="```"]
pub static BROWN_HEART :  Emoji = Emoji::new("brown heart", Version(12, 0), "ü§é"); // brown heart
		
		#[doc="collision üí•"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COLLISION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COLLISION); // üí• (`U+1F4A5`)"] #[doc="# assert_eq!(COLLISION.to_string().as_str(), \"üí•\");"]
#[doc="```"]
pub static COLLISION :  Emoji = Emoji::new("collision", Version(0, 6), "üí•"); // collision
		
		#[doc="dashing away üí®"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DASHING_AWAY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DASHING_AWAY); // üí® (`U+1F4A8`)"] #[doc="# assert_eq!(DASHING_AWAY.to_string().as_str(), \"üí®\");"]
#[doc="```"]
pub static DASHING_AWAY :  Emoji = Emoji::new("dashing away", Version(0, 6), "üí®"); // dashing away
		
		#[doc="dizzy üí´"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DIZZY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DIZZY); // üí´ (`U+1F4AB`)"] #[doc="# assert_eq!(DIZZY.to_string().as_str(), \"üí´\");"]
#[doc="```"]
pub static DIZZY :  Emoji = Emoji::new("dizzy", Version(0, 6), "üí´"); // dizzy
		
		#[doc="eye in speech bubble üëÅÔ∏è‚Äçüó®Ô∏è"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EYE_IN_SPEECH_BUBBLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EYE_IN_SPEECH_BUBBLE); // üëÅÔ∏è‚Äçüó®Ô∏è (`U+1F441 U+FE0F U+200D U+1F5E8 U+FE0F`)"] #[doc="# assert_eq!(EYE_IN_SPEECH_BUBBLE.to_string().as_str(), \"üëÅÔ∏è‚Äçüó®Ô∏è\");"]
#[doc="```"]
pub static EYE_IN_SPEECH_BUBBLE :  Emoji = Emoji::new("eye in speech bubble", Version(2, 0), "üëÅÔ∏è‚Äçüó®Ô∏è"); // eye in speech bubble
		
		#[doc="green heart üíö"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GREEN_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GREEN_HEART); // üíö (`U+1F49A`)"] #[doc="# assert_eq!(GREEN_HEART.to_string().as_str(), \"üíö\");"]
#[doc="```"]
pub static GREEN_HEART :  Emoji = Emoji::new("green heart", Version(0, 6), "üíö"); // green heart
		
		#[doc="growing heart üíó"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GROWING_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GROWING_HEART); // üíó (`U+1F497`)"] #[doc="# assert_eq!(GROWING_HEART.to_string().as_str(), \"üíó\");"]
#[doc="```"]
pub static GROWING_HEART :  Emoji = Emoji::new("growing heart", Version(0, 6), "üíó"); // growing heart
		
		#[doc="heart decoration üíü"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HEART_DECORATION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HEART_DECORATION); // üíü (`U+1F49F`)"] #[doc="# assert_eq!(HEART_DECORATION.to_string().as_str(), \"üíü\");"]
#[doc="```"]
pub static HEART_DECORATION :  Emoji = Emoji::new("heart decoration", Version(0, 6), "üíü"); // heart decoration
		
		#[doc="heart exclamation ‚ù£Ô∏è"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HEART_EXCLAMATION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HEART_EXCLAMATION); // ‚ù£Ô∏è (`U+2763 U+FE0F`)"] #[doc="# assert_eq!(HEART_EXCLAMATION.to_string().as_str(), \"‚ù£Ô∏è\");"]
#[doc="```"]
pub static HEART_EXCLAMATION :  Emoji = Emoji::new("heart exclamation", Version(1, 0), "‚ù£Ô∏è"); // heart exclamation
		
		#[doc="heart on fire ‚ù§Ô∏è‚Äçüî•"]#[doc=""]#[doc="Since E13.1"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HEART_ON_FIRE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HEART_ON_FIRE); // ‚ù§Ô∏è‚Äçüî• (`U+2764 U+FE0F U+200D U+1F525`)"] #[doc="# assert_eq!(HEART_ON_FIRE.to_string().as_str(), \"‚ù§Ô∏è‚Äçüî•\");"]
#[doc="```"]
pub static HEART_ON_FIRE :  Emoji = Emoji::new("heart on fire", Version(13, 1), "‚ù§Ô∏è‚Äçüî•"); // heart on fire
		
		#[doc="heart with arrow üíò"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HEART_WITH_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HEART_WITH_ARROW); // üíò (`U+1F498`)"] #[doc="# assert_eq!(HEART_WITH_ARROW.to_string().as_str(), \"üíò\");"]
#[doc="```"]
pub static HEART_WITH_ARROW :  Emoji = Emoji::new("heart with arrow", Version(0, 6), "üíò"); // heart with arrow
		
		#[doc="heart with ribbon üíù"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HEART_WITH_RIBBON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HEART_WITH_RIBBON); // üíù (`U+1F49D`)"] #[doc="# assert_eq!(HEART_WITH_RIBBON.to_string().as_str(), \"üíù\");"]
#[doc="```"]
pub static HEART_WITH_RIBBON :  Emoji = Emoji::new("heart with ribbon", Version(0, 6), "üíù"); // heart with ribbon
		
		#[doc="hole üï≥Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOLE); // üï≥Ô∏è (`U+1F573 U+FE0F`)"] #[doc="# assert_eq!(HOLE.to_string().as_str(), \"üï≥Ô∏è\");"]
#[doc="```"]
pub static HOLE :  Emoji = Emoji::new("hole", Version(0, 7), "üï≥Ô∏è"); // hole
		
		#[doc="hundred points üíØ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HUNDRED_POINTS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HUNDRED_POINTS); // üíØ (`U+1F4AF`)"] #[doc="# assert_eq!(HUNDRED_POINTS.to_string().as_str(), \"üíØ\");"]
#[doc="```"]
pub static HUNDRED_POINTS :  Emoji = Emoji::new("hundred points", Version(0, 6), "üíØ"); // hundred points
		
		#[doc="kiss mark üíã"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KISS_MARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KISS_MARK); // üíã (`U+1F48B`)"] #[doc="# assert_eq!(KISS_MARK.to_string().as_str(), \"üíã\");"]
#[doc="```"]
pub static KISS_MARK :  Emoji = Emoji::new("kiss mark", Version(0, 6), "üíã"); // kiss mark
		
		#[doc="left speech bubble üó®Ô∏è"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEFT_SPEECH_BUBBLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEFT_SPEECH_BUBBLE); // üó®Ô∏è (`U+1F5E8 U+FE0F`)"] #[doc="# assert_eq!(LEFT_SPEECH_BUBBLE.to_string().as_str(), \"üó®Ô∏è\");"]
#[doc="```"]
pub static LEFT_SPEECH_BUBBLE :  Emoji = Emoji::new("left speech bubble", Version(2, 0), "üó®Ô∏è"); // left speech bubble
		
		#[doc="love letter üíå"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LOVE_LETTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LOVE_LETTER); // üíå (`U+1F48C`)"] #[doc="# assert_eq!(LOVE_LETTER.to_string().as_str(), \"üíå\");"]
#[doc="```"]
pub static LOVE_LETTER :  Emoji = Emoji::new("love letter", Version(0, 6), "üíå"); // love letter
		
		#[doc="mending heart ‚ù§Ô∏è‚Äçü©π"]#[doc=""]#[doc="Since E13.1"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MENDING_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MENDING_HEART); // ‚ù§Ô∏è‚Äçü©π (`U+2764 U+FE0F U+200D U+1FA79`)"] #[doc="# assert_eq!(MENDING_HEART.to_string().as_str(), \"‚ù§Ô∏è‚Äçü©π\");"]
#[doc="```"]
pub static MENDING_HEART :  Emoji = Emoji::new("mending heart", Version(13, 1), "‚ù§Ô∏è‚Äçü©π"); // mending heart
		
		#[doc="orange heart üß°"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ORANGE_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ORANGE_HEART); // üß° (`U+1F9E1`)"] #[doc="# assert_eq!(ORANGE_HEART.to_string().as_str(), \"üß°\");"]
#[doc="```"]
pub static ORANGE_HEART :  Emoji = Emoji::new("orange heart", Version(5, 0), "üß°"); // orange heart
		
		#[doc="purple heart üíú"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PURPLE_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PURPLE_HEART); // üíú (`U+1F49C`)"] #[doc="# assert_eq!(PURPLE_HEART.to_string().as_str(), \"üíú\");"]
#[doc="```"]
pub static PURPLE_HEART :  Emoji = Emoji::new("purple heart", Version(0, 6), "üíú"); // purple heart
		
		#[doc="red heart ‚ù§Ô∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RED_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RED_HEART); // ‚ù§Ô∏è (`U+2764 U+FE0F`)"] #[doc="# assert_eq!(RED_HEART.to_string().as_str(), \"‚ù§Ô∏è\");"]
#[doc="```"]
pub static RED_HEART :  Emoji = Emoji::new("red heart", Version(0, 6), "‚ù§Ô∏è"); // red heart
		
		#[doc="revolving hearts üíû"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::REVOLVING_HEARTS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", REVOLVING_HEARTS); // üíû (`U+1F49E`)"] #[doc="# assert_eq!(REVOLVING_HEARTS.to_string().as_str(), \"üíû\");"]
#[doc="```"]
pub static REVOLVING_HEARTS :  Emoji = Emoji::new("revolving hearts", Version(0, 6), "üíû"); // revolving hearts
		
		#[doc="right anger bubble üóØÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RIGHT_ANGER_BUBBLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RIGHT_ANGER_BUBBLE); // üóØÔ∏è (`U+1F5EF U+FE0F`)"] #[doc="# assert_eq!(RIGHT_ANGER_BUBBLE.to_string().as_str(), \"üóØÔ∏è\");"]
#[doc="```"]
pub static RIGHT_ANGER_BUBBLE :  Emoji = Emoji::new("right anger bubble", Version(0, 7), "üóØÔ∏è"); // right anger bubble
		
		#[doc="sparkling heart üíñ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPARKLING_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPARKLING_HEART); // üíñ (`U+1F496`)"] #[doc="# assert_eq!(SPARKLING_HEART.to_string().as_str(), \"üíñ\");"]
#[doc="```"]
pub static SPARKLING_HEART :  Emoji = Emoji::new("sparkling heart", Version(0, 6), "üíñ"); // sparkling heart
		
		#[doc="speech balloon üí¨"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPEECH_BALLOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPEECH_BALLOON); // üí¨ (`U+1F4AC`)"] #[doc="# assert_eq!(SPEECH_BALLOON.to_string().as_str(), \"üí¨\");"]
#[doc="```"]
pub static SPEECH_BALLOON :  Emoji = Emoji::new("speech balloon", Version(0, 6), "üí¨"); // speech balloon
		
		#[doc="sweat droplets üí¶"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SWEAT_DROPLETS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SWEAT_DROPLETS); // üí¶ (`U+1F4A6`)"] #[doc="# assert_eq!(SWEAT_DROPLETS.to_string().as_str(), \"üí¶\");"]
#[doc="```"]
pub static SWEAT_DROPLETS :  Emoji = Emoji::new("sweat droplets", Version(0, 6), "üí¶"); // sweat droplets
		
		#[doc="thought balloon üí≠"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::THOUGHT_BALLOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", THOUGHT_BALLOON); // üí≠ (`U+1F4AD`)"] #[doc="# assert_eq!(THOUGHT_BALLOON.to_string().as_str(), \"üí≠\");"]
#[doc="```"]
pub static THOUGHT_BALLOON :  Emoji = Emoji::new("thought balloon", Version(1, 0), "üí≠"); // thought balloon
		
		#[doc="two hearts üíï"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TWO_HEARTS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TWO_HEARTS); // üíï (`U+1F495`)"] #[doc="# assert_eq!(TWO_HEARTS.to_string().as_str(), \"üíï\");"]
#[doc="```"]
pub static TWO_HEARTS :  Emoji = Emoji::new("two hearts", Version(0, 6), "üíï"); // two hearts
		
		#[doc="white heart ü§ç"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHITE_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHITE_HEART); // ü§ç (`U+1F90D`)"] #[doc="# assert_eq!(WHITE_HEART.to_string().as_str(), \"ü§ç\");"]
#[doc="```"]
pub static WHITE_HEART :  Emoji = Emoji::new("white heart", Version(12, 0), "ü§ç"); // white heart
		
		#[doc="yellow heart üíõ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::YELLOW_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", YELLOW_HEART); // üíõ (`U+1F49B`)"] #[doc="# assert_eq!(YELLOW_HEART.to_string().as_str(), \"üíõ\");"]
#[doc="```"]
pub static YELLOW_HEART :  Emoji = Emoji::new("yellow heart", Version(0, 6), "üíõ"); // yellow heart
		
		#[doc="zzz üí§"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ZZZ;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ZZZ); // üí§ (`U+1F4A4`)"] #[doc="# assert_eq!(ZZZ.to_string().as_str(), \"üí§\");"]
#[doc="```"]
pub static ZZZ :  Emoji = Emoji::new("zzz", Version(0, 6), "üí§"); // zzz
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // ANGER_SYMBOL
				
				&ANGER_SYMBOL,
				
			],
			
			&[ // BEATING_HEART
				
				&BEATING_HEART,
				
			],
			
			&[ // BLACK_HEART
				
				&BLACK_HEART,
				
			],
			
			&[ // BLUE_HEART
				
				&BLUE_HEART,
				
			],
			
			&[ // BOMB
				
				&BOMB,
				
			],
			
			&[ // BROKEN_HEART
				
				&BROKEN_HEART,
				
			],
			
			&[ // BROWN_HEART
				
				&BROWN_HEART,
				
			],
			
			&[ // COLLISION
				
				&COLLISION,
				
			],
			
			&[ // DASHING_AWAY
				
				&DASHING_AWAY,
				
			],
			
			&[ // DIZZY
				
				&DIZZY,
				
			],
			
			&[ // EYE_IN_SPEECH_BUBBLE
				
				&EYE_IN_SPEECH_BUBBLE,
				
			],
			
			&[ // GREEN_HEART
				
				&GREEN_HEART,
				
			],
			
			&[ // GROWING_HEART
				
				&GROWING_HEART,
				
			],
			
			&[ // HEART_DECORATION
				
				&HEART_DECORATION,
				
			],
			
			&[ // HEART_EXCLAMATION
				
				&HEART_EXCLAMATION,
				
			],
			
			&[ // HEART_ON_FIRE
				
				&HEART_ON_FIRE,
				
			],
			
			&[ // HEART_WITH_ARROW
				
				&HEART_WITH_ARROW,
				
			],
			
			&[ // HEART_WITH_RIBBON
				
				&HEART_WITH_RIBBON,
				
			],
			
			&[ // HOLE
				
				&HOLE,
				
			],
			
			&[ // HUNDRED_POINTS
				
				&HUNDRED_POINTS,
				
			],
			
			&[ // KISS_MARK
				
				&KISS_MARK,
				
			],
			
			&[ // LEFT_SPEECH_BUBBLE
				
				&LEFT_SPEECH_BUBBLE,
				
			],
			
			&[ // LOVE_LETTER
				
				&LOVE_LETTER,
				
			],
			
			&[ // MENDING_HEART
				
				&MENDING_HEART,
				
			],
			
			&[ // ORANGE_HEART
				
				&ORANGE_HEART,
				
			],
			
			&[ // PURPLE_HEART
				
				&PURPLE_HEART,
				
			],
			
			&[ // RED_HEART
				
				&RED_HEART,
				
			],
			
			&[ // REVOLVING_HEARTS
				
				&REVOLVING_HEARTS,
				
			],
			
			&[ // RIGHT_ANGER_BUBBLE
				
				&RIGHT_ANGER_BUBBLE,
				
			],
			
			&[ // SPARKLING_HEART
				
				&SPARKLING_HEART,
				
			],
			
			&[ // SPEECH_BALLOON
				
				&SPEECH_BALLOON,
				
			],
			
			&[ // SWEAT_DROPLETS
				
				&SWEAT_DROPLETS,
				
			],
			
			&[ // THOUGHT_BALLOON
				
				&THOUGHT_BALLOON,
				
			],
			
			&[ // TWO_HEARTS
				
				&TWO_HEARTS,
				
			],
			
			&[ // WHITE_HEART
				
				&WHITE_HEART,
				
			],
			
			&[ // YELLOW_HEART
				
				&YELLOW_HEART,
				
			],
			
			&[ // ZZZ
				
				&ZZZ,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&ANGER_SYMBOL, // ANGER_SYMBOL
				
			
				
				&BEATING_HEART, // BEATING_HEART
				
			
				
				&BLACK_HEART, // BLACK_HEART
				
			
				
				&BLUE_HEART, // BLUE_HEART
				
			
				
				&BOMB, // BOMB
				
			
				
				&BROKEN_HEART, // BROKEN_HEART
				
			
				
				&BROWN_HEART, // BROWN_HEART
				
			
				
				&COLLISION, // COLLISION
				
			
				
				&DASHING_AWAY, // DASHING_AWAY
				
			
				
				&DIZZY, // DIZZY
				
			
				
				&EYE_IN_SPEECH_BUBBLE, // EYE_IN_SPEECH_BUBBLE
				
			
				
				&GREEN_HEART, // GREEN_HEART
				
			
				
				&GROWING_HEART, // GROWING_HEART
				
			
				
				&HEART_DECORATION, // HEART_DECORATION
				
			
				
				&HEART_EXCLAMATION, // HEART_EXCLAMATION
				
			
				
				&HEART_ON_FIRE, // HEART_ON_FIRE
				
			
				
				&HEART_WITH_ARROW, // HEART_WITH_ARROW
				
			
				
				&HEART_WITH_RIBBON, // HEART_WITH_RIBBON
				
			
				
				&HOLE, // HOLE
				
			
				
				&HUNDRED_POINTS, // HUNDRED_POINTS
				
			
				
				&KISS_MARK, // KISS_MARK
				
			
				
				&LEFT_SPEECH_BUBBLE, // LEFT_SPEECH_BUBBLE
				
			
				
				&LOVE_LETTER, // LOVE_LETTER
				
			
				
				&MENDING_HEART, // MENDING_HEART
				
			
				
				&ORANGE_HEART, // ORANGE_HEART
				
			
				
				&PURPLE_HEART, // PURPLE_HEART
				
			
				
				&RED_HEART, // RED_HEART
				
			
				
				&REVOLVING_HEARTS, // REVOLVING_HEARTS
				
			
				
				&RIGHT_ANGER_BUBBLE, // RIGHT_ANGER_BUBBLE
				
			
				
				&SPARKLING_HEART, // SPARKLING_HEART
				
			
				
				&SPEECH_BALLOON, // SPEECH_BALLOON
				
			
				
				&SWEAT_DROPLETS, // SWEAT_DROPLETS
				
			
				
				&THOUGHT_BALLOON, // THOUGHT_BALLOON
				
			
				
				&TWO_HEARTS, // TWO_HEARTS
				
			
				
				&WHITE_HEART, // WHITE_HEART
				
			
				
				&YELLOW_HEART, // YELLOW_HEART
				
			
				
				&ZZZ, // ZZZ
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // emotion
	
	/// face_affection üòòüòóüòö
	pub mod face_affection {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="face blowing a kiss üòò"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_BLOWING_A_KISS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_BLOWING_A_KISS); // üòò (`U+1F618`)"] #[doc="# assert_eq!(FACE_BLOWING_A_KISS.to_string().as_str(), \"üòò\");"]
#[doc="```"]
pub static FACE_BLOWING_A_KISS :  Emoji = Emoji::new("face blowing a kiss", Version(0, 6), "üòò"); // face blowing a kiss
		
		#[doc="kissing face üòó"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KISSING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KISSING_FACE); // üòó (`U+1F617`)"] #[doc="# assert_eq!(KISSING_FACE.to_string().as_str(), \"üòó\");"]
#[doc="```"]
pub static KISSING_FACE :  Emoji = Emoji::new("kissing face", Version(1, 0), "üòó"); // kissing face
		
		#[doc="kissing face with closed eyes üòö"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KISSING_FACE_WITH_CLOSED_EYES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KISSING_FACE_WITH_CLOSED_EYES); // üòö (`U+1F61A`)"] #[doc="# assert_eq!(KISSING_FACE_WITH_CLOSED_EYES.to_string().as_str(), \"üòö\");"]
#[doc="```"]
pub static KISSING_FACE_WITH_CLOSED_EYES :  Emoji = Emoji::new("kissing face with closed eyes", Version(0, 6), "üòö"); // kissing face with closed eyes
		
		#[doc="kissing face with smiling eyes üòô"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KISSING_FACE_WITH_SMILING_EYES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KISSING_FACE_WITH_SMILING_EYES); // üòô (`U+1F619`)"] #[doc="# assert_eq!(KISSING_FACE_WITH_SMILING_EYES.to_string().as_str(), \"üòô\");"]
#[doc="```"]
pub static KISSING_FACE_WITH_SMILING_EYES :  Emoji = Emoji::new("kissing face with smiling eyes", Version(1, 0), "üòô"); // kissing face with smiling eyes
		
		#[doc="smiling face ‚ò∫Ô∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SMILING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SMILING_FACE); // ‚ò∫Ô∏è (`U+263A U+FE0F`)"] #[doc="# assert_eq!(SMILING_FACE.to_string().as_str(), \"‚ò∫Ô∏è\");"]
#[doc="```"]
pub static SMILING_FACE :  Emoji = Emoji::new("smiling face", Version(0, 6), "‚ò∫Ô∏è"); // smiling face
		
		#[doc="smiling face with hearts ü•∞"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SMILING_FACE_WITH_HEARTS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SMILING_FACE_WITH_HEARTS); // ü•∞ (`U+1F970`)"] #[doc="# assert_eq!(SMILING_FACE_WITH_HEARTS.to_string().as_str(), \"ü•∞\");"]
#[doc="```"]
pub static SMILING_FACE_WITH_HEARTS :  Emoji = Emoji::new("smiling face with hearts", Version(11, 0), "ü•∞"); // smiling face with hearts
		
		#[doc="smiling face with heart-eyes üòç"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SMILING_FACE_WITH_HEART_EYES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SMILING_FACE_WITH_HEART_EYES); // üòç (`U+1F60D`)"] #[doc="# assert_eq!(SMILING_FACE_WITH_HEART_EYES.to_string().as_str(), \"üòç\");"]
#[doc="```"]
pub static SMILING_FACE_WITH_HEART_EYES :  Emoji = Emoji::new("smiling face with heart-eyes", Version(0, 6), "üòç"); // smiling face with heart-eyes
		
		#[doc="smiling face with tear ü•≤"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SMILING_FACE_WITH_TEAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SMILING_FACE_WITH_TEAR); // ü•≤ (`U+1F972`)"] #[doc="# assert_eq!(SMILING_FACE_WITH_TEAR.to_string().as_str(), \"ü•≤\");"]
#[doc="```"]
pub static SMILING_FACE_WITH_TEAR :  Emoji = Emoji::new("smiling face with tear", Version(13, 0), "ü•≤"); // smiling face with tear
		
		#[doc="star-struck ü§©"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STAR_STRUCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STAR_STRUCK); // ü§© (`U+1F929`)"] #[doc="# assert_eq!(STAR_STRUCK.to_string().as_str(), \"ü§©\");"]
#[doc="```"]
pub static STAR_STRUCK :  Emoji = Emoji::new("star-struck", Version(5, 0), "ü§©"); // star-struck
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // FACE_BLOWING_A_KISS
				
				&FACE_BLOWING_A_KISS,
				
			],
			
			&[ // KISSING_FACE
				
				&KISSING_FACE,
				
			],
			
			&[ // KISSING_FACE_WITH_CLOSED_EYES
				
				&KISSING_FACE_WITH_CLOSED_EYES,
				
			],
			
			&[ // KISSING_FACE_WITH_SMILING_EYES
				
				&KISSING_FACE_WITH_SMILING_EYES,
				
			],
			
			&[ // SMILING_FACE
				
				&SMILING_FACE,
				
			],
			
			&[ // SMILING_FACE_WITH_HEARTS
				
				&SMILING_FACE_WITH_HEARTS,
				
			],
			
			&[ // SMILING_FACE_WITH_HEART_EYES
				
				&SMILING_FACE_WITH_HEART_EYES,
				
			],
			
			&[ // SMILING_FACE_WITH_TEAR
				
				&SMILING_FACE_WITH_TEAR,
				
			],
			
			&[ // STAR_STRUCK
				
				&STAR_STRUCK,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&FACE_BLOWING_A_KISS, // FACE_BLOWING_A_KISS
				
			
				
				&KISSING_FACE, // KISSING_FACE
				
			
				
				&KISSING_FACE_WITH_CLOSED_EYES, // KISSING_FACE_WITH_CLOSED_EYES
				
			
				
				&KISSING_FACE_WITH_SMILING_EYES, // KISSING_FACE_WITH_SMILING_EYES
				
			
				
				&SMILING_FACE, // SMILING_FACE
				
			
				
				&SMILING_FACE_WITH_HEARTS, // SMILING_FACE_WITH_HEARTS
				
			
				
				&SMILING_FACE_WITH_HEART_EYES, // SMILING_FACE_WITH_HEART_EYES
				
			
				
				&SMILING_FACE_WITH_TEAR, // SMILING_FACE_WITH_TEAR
				
			
				
				&STAR_STRUCK, // STAR_STRUCK
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // face_affection
	
	/// face_concerned üòßüò∞üò≤
	pub mod face_concerned {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="anguished face üòß"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ANGUISHED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ANGUISHED_FACE); // üòß (`U+1F627`)"] #[doc="# assert_eq!(ANGUISHED_FACE.to_string().as_str(), \"üòß\");"]
#[doc="```"]
pub static ANGUISHED_FACE :  Emoji = Emoji::new("anguished face", Version(1, 0), "üòß"); // anguished face
		
		#[doc="anxious face with sweat üò∞"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ANXIOUS_FACE_WITH_SWEAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ANXIOUS_FACE_WITH_SWEAT); // üò∞ (`U+1F630`)"] #[doc="# assert_eq!(ANXIOUS_FACE_WITH_SWEAT.to_string().as_str(), \"üò∞\");"]
#[doc="```"]
pub static ANXIOUS_FACE_WITH_SWEAT :  Emoji = Emoji::new("anxious face with sweat", Version(0, 6), "üò∞"); // anxious face with sweat
		
		#[doc="astonished face üò≤"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ASTONISHED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ASTONISHED_FACE); // üò≤ (`U+1F632`)"] #[doc="# assert_eq!(ASTONISHED_FACE.to_string().as_str(), \"üò≤\");"]
#[doc="```"]
pub static ASTONISHED_FACE :  Emoji = Emoji::new("astonished face", Version(0, 6), "üò≤"); // astonished face
		
		#[doc="confounded face üòñ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CONFOUNDED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CONFOUNDED_FACE); // üòñ (`U+1F616`)"] #[doc="# assert_eq!(CONFOUNDED_FACE.to_string().as_str(), \"üòñ\");"]
#[doc="```"]
pub static CONFOUNDED_FACE :  Emoji = Emoji::new("confounded face", Version(0, 6), "üòñ"); // confounded face
		
		#[doc="confused face üòï"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CONFUSED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CONFUSED_FACE); // üòï (`U+1F615`)"] #[doc="# assert_eq!(CONFUSED_FACE.to_string().as_str(), \"üòï\");"]
#[doc="```"]
pub static CONFUSED_FACE :  Emoji = Emoji::new("confused face", Version(1, 0), "üòï"); // confused face
		
		#[doc="crying face üò¢"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CRYING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CRYING_FACE); // üò¢ (`U+1F622`)"] #[doc="# assert_eq!(CRYING_FACE.to_string().as_str(), \"üò¢\");"]
#[doc="```"]
pub static CRYING_FACE :  Emoji = Emoji::new("crying face", Version(0, 6), "üò¢"); // crying face
		
		#[doc="disappointed face üòû"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DISAPPOINTED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DISAPPOINTED_FACE); // üòû (`U+1F61E`)"] #[doc="# assert_eq!(DISAPPOINTED_FACE.to_string().as_str(), \"üòû\");"]
#[doc="```"]
pub static DISAPPOINTED_FACE :  Emoji = Emoji::new("disappointed face", Version(0, 6), "üòû"); // disappointed face
		
		#[doc="downcast face with sweat üòì"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOWNCAST_FACE_WITH_SWEAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOWNCAST_FACE_WITH_SWEAT); // üòì (`U+1F613`)"] #[doc="# assert_eq!(DOWNCAST_FACE_WITH_SWEAT.to_string().as_str(), \"üòì\");"]
#[doc="```"]
pub static DOWNCAST_FACE_WITH_SWEAT :  Emoji = Emoji::new("downcast face with sweat", Version(0, 6), "üòì"); // downcast face with sweat
		
		#[doc="face screaming in fear üò±"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_SCREAMING_IN_FEAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_SCREAMING_IN_FEAR); // üò± (`U+1F631`)"] #[doc="# assert_eq!(FACE_SCREAMING_IN_FEAR.to_string().as_str(), \"üò±\");"]
#[doc="```"]
pub static FACE_SCREAMING_IN_FEAR :  Emoji = Emoji::new("face screaming in fear", Version(0, 6), "üò±"); // face screaming in fear
		
		#[doc="face with open mouth üòÆ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITH_OPEN_MOUTH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITH_OPEN_MOUTH); // üòÆ (`U+1F62E`)"] #[doc="# assert_eq!(FACE_WITH_OPEN_MOUTH.to_string().as_str(), \"üòÆ\");"]
#[doc="```"]
pub static FACE_WITH_OPEN_MOUTH :  Emoji = Emoji::new("face with open mouth", Version(1, 0), "üòÆ"); // face with open mouth
		
		#[doc="fearful face üò®"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FEARFUL_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FEARFUL_FACE); // üò® (`U+1F628`)"] #[doc="# assert_eq!(FEARFUL_FACE.to_string().as_str(), \"üò®\");"]
#[doc="```"]
pub static FEARFUL_FACE :  Emoji = Emoji::new("fearful face", Version(0, 6), "üò®"); // fearful face
		
		#[doc="flushed face üò≥"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLUSHED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLUSHED_FACE); // üò≥ (`U+1F633`)"] #[doc="# assert_eq!(FLUSHED_FACE.to_string().as_str(), \"üò≥\");"]
#[doc="```"]
pub static FLUSHED_FACE :  Emoji = Emoji::new("flushed face", Version(0, 6), "üò≥"); // flushed face
		
		#[doc="frowning face ‚òπÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FROWNING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FROWNING_FACE); // ‚òπÔ∏è (`U+2639 U+FE0F`)"] #[doc="# assert_eq!(FROWNING_FACE.to_string().as_str(), \"‚òπÔ∏è\");"]
#[doc="```"]
pub static FROWNING_FACE :  Emoji = Emoji::new("frowning face", Version(0, 7), "‚òπÔ∏è"); // frowning face
		
		#[doc="frowning face with open mouth üò¶"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FROWNING_FACE_WITH_OPEN_MOUTH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FROWNING_FACE_WITH_OPEN_MOUTH); // üò¶ (`U+1F626`)"] #[doc="# assert_eq!(FROWNING_FACE_WITH_OPEN_MOUTH.to_string().as_str(), \"üò¶\");"]
#[doc="```"]
pub static FROWNING_FACE_WITH_OPEN_MOUTH :  Emoji = Emoji::new("frowning face with open mouth", Version(1, 0), "üò¶"); // frowning face with open mouth
		
		#[doc="hushed face üòØ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HUSHED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HUSHED_FACE); // üòØ (`U+1F62F`)"] #[doc="# assert_eq!(HUSHED_FACE.to_string().as_str(), \"üòØ\");"]
#[doc="```"]
pub static HUSHED_FACE :  Emoji = Emoji::new("hushed face", Version(1, 0), "üòØ"); // hushed face
		
		#[doc="loudly crying face üò≠"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LOUDLY_CRYING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LOUDLY_CRYING_FACE); // üò≠ (`U+1F62D`)"] #[doc="# assert_eq!(LOUDLY_CRYING_FACE.to_string().as_str(), \"üò≠\");"]
#[doc="```"]
pub static LOUDLY_CRYING_FACE :  Emoji = Emoji::new("loudly crying face", Version(0, 6), "üò≠"); // loudly crying face
		
		#[doc="persevering face üò£"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSEVERING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSEVERING_FACE); // üò£ (`U+1F623`)"] #[doc="# assert_eq!(PERSEVERING_FACE.to_string().as_str(), \"üò£\");"]
#[doc="```"]
pub static PERSEVERING_FACE :  Emoji = Emoji::new("persevering face", Version(0, 6), "üò£"); // persevering face
		
		#[doc="pleading face ü•∫"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PLEADING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PLEADING_FACE); // ü•∫ (`U+1F97A`)"] #[doc="# assert_eq!(PLEADING_FACE.to_string().as_str(), \"ü•∫\");"]
#[doc="```"]
pub static PLEADING_FACE :  Emoji = Emoji::new("pleading face", Version(11, 0), "ü•∫"); // pleading face
		
		#[doc="sad but relieved face üò•"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SAD_BUT_RELIEVED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SAD_BUT_RELIEVED_FACE); // üò• (`U+1F625`)"] #[doc="# assert_eq!(SAD_BUT_RELIEVED_FACE.to_string().as_str(), \"üò•\");"]
#[doc="```"]
pub static SAD_BUT_RELIEVED_FACE :  Emoji = Emoji::new("sad but relieved face", Version(0, 6), "üò•"); // sad but relieved face
		
		#[doc="slightly frowning face üôÅ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SLIGHTLY_FROWNING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SLIGHTLY_FROWNING_FACE); // üôÅ (`U+1F641`)"] #[doc="# assert_eq!(SLIGHTLY_FROWNING_FACE.to_string().as_str(), \"üôÅ\");"]
#[doc="```"]
pub static SLIGHTLY_FROWNING_FACE :  Emoji = Emoji::new("slightly frowning face", Version(1, 0), "üôÅ"); // slightly frowning face
		
		#[doc="tired face üò´"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TIRED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TIRED_FACE); // üò´ (`U+1F62B`)"] #[doc="# assert_eq!(TIRED_FACE.to_string().as_str(), \"üò´\");"]
#[doc="```"]
pub static TIRED_FACE :  Emoji = Emoji::new("tired face", Version(0, 6), "üò´"); // tired face
		
		#[doc="weary face üò©"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WEARY_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WEARY_FACE); // üò© (`U+1F629`)"] #[doc="# assert_eq!(WEARY_FACE.to_string().as_str(), \"üò©\");"]
#[doc="```"]
pub static WEARY_FACE :  Emoji = Emoji::new("weary face", Version(0, 6), "üò©"); // weary face
		
		#[doc="worried face üòü"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WORRIED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WORRIED_FACE); // üòü (`U+1F61F`)"] #[doc="# assert_eq!(WORRIED_FACE.to_string().as_str(), \"üòü\");"]
#[doc="```"]
pub static WORRIED_FACE :  Emoji = Emoji::new("worried face", Version(1, 0), "üòü"); // worried face
		
		#[doc="yawning face ü•±"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::YAWNING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", YAWNING_FACE); // ü•± (`U+1F971`)"] #[doc="# assert_eq!(YAWNING_FACE.to_string().as_str(), \"ü•±\");"]
#[doc="```"]
pub static YAWNING_FACE :  Emoji = Emoji::new("yawning face", Version(12, 0), "ü•±"); // yawning face
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // ANGUISHED_FACE
				
				&ANGUISHED_FACE,
				
			],
			
			&[ // ANXIOUS_FACE_WITH_SWEAT
				
				&ANXIOUS_FACE_WITH_SWEAT,
				
			],
			
			&[ // ASTONISHED_FACE
				
				&ASTONISHED_FACE,
				
			],
			
			&[ // CONFOUNDED_FACE
				
				&CONFOUNDED_FACE,
				
			],
			
			&[ // CONFUSED_FACE
				
				&CONFUSED_FACE,
				
			],
			
			&[ // CRYING_FACE
				
				&CRYING_FACE,
				
			],
			
			&[ // DISAPPOINTED_FACE
				
				&DISAPPOINTED_FACE,
				
			],
			
			&[ // DOWNCAST_FACE_WITH_SWEAT
				
				&DOWNCAST_FACE_WITH_SWEAT,
				
			],
			
			&[ // FACE_SCREAMING_IN_FEAR
				
				&FACE_SCREAMING_IN_FEAR,
				
			],
			
			&[ // FACE_WITH_OPEN_MOUTH
				
				&FACE_WITH_OPEN_MOUTH,
				
			],
			
			&[ // FEARFUL_FACE
				
				&FEARFUL_FACE,
				
			],
			
			&[ // FLUSHED_FACE
				
				&FLUSHED_FACE,
				
			],
			
			&[ // FROWNING_FACE
				
				&FROWNING_FACE,
				
			],
			
			&[ // FROWNING_FACE_WITH_OPEN_MOUTH
				
				&FROWNING_FACE_WITH_OPEN_MOUTH,
				
			],
			
			&[ // HUSHED_FACE
				
				&HUSHED_FACE,
				
			],
			
			&[ // LOUDLY_CRYING_FACE
				
				&LOUDLY_CRYING_FACE,
				
			],
			
			&[ // PERSEVERING_FACE
				
				&PERSEVERING_FACE,
				
			],
			
			&[ // PLEADING_FACE
				
				&PLEADING_FACE,
				
			],
			
			&[ // SAD_BUT_RELIEVED_FACE
				
				&SAD_BUT_RELIEVED_FACE,
				
			],
			
			&[ // SLIGHTLY_FROWNING_FACE
				
				&SLIGHTLY_FROWNING_FACE,
				
			],
			
			&[ // TIRED_FACE
				
				&TIRED_FACE,
				
			],
			
			&[ // WEARY_FACE
				
				&WEARY_FACE,
				
			],
			
			&[ // WORRIED_FACE
				
				&WORRIED_FACE,
				
			],
			
			&[ // YAWNING_FACE
				
				&YAWNING_FACE,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&ANGUISHED_FACE, // ANGUISHED_FACE
				
			
				
				&ANXIOUS_FACE_WITH_SWEAT, // ANXIOUS_FACE_WITH_SWEAT
				
			
				
				&ASTONISHED_FACE, // ASTONISHED_FACE
				
			
				
				&CONFOUNDED_FACE, // CONFOUNDED_FACE
				
			
				
				&CONFUSED_FACE, // CONFUSED_FACE
				
			
				
				&CRYING_FACE, // CRYING_FACE
				
			
				
				&DISAPPOINTED_FACE, // DISAPPOINTED_FACE
				
			
				
				&DOWNCAST_FACE_WITH_SWEAT, // DOWNCAST_FACE_WITH_SWEAT
				
			
				
				&FACE_SCREAMING_IN_FEAR, // FACE_SCREAMING_IN_FEAR
				
			
				
				&FACE_WITH_OPEN_MOUTH, // FACE_WITH_OPEN_MOUTH
				
			
				
				&FEARFUL_FACE, // FEARFUL_FACE
				
			
				
				&FLUSHED_FACE, // FLUSHED_FACE
				
			
				
				&FROWNING_FACE, // FROWNING_FACE
				
			
				
				&FROWNING_FACE_WITH_OPEN_MOUTH, // FROWNING_FACE_WITH_OPEN_MOUTH
				
			
				
				&HUSHED_FACE, // HUSHED_FACE
				
			
				
				&LOUDLY_CRYING_FACE, // LOUDLY_CRYING_FACE
				
			
				
				&PERSEVERING_FACE, // PERSEVERING_FACE
				
			
				
				&PLEADING_FACE, // PLEADING_FACE
				
			
				
				&SAD_BUT_RELIEVED_FACE, // SAD_BUT_RELIEVED_FACE
				
			
				
				&SLIGHTLY_FROWNING_FACE, // SLIGHTLY_FROWNING_FACE
				
			
				
				&TIRED_FACE, // TIRED_FACE
				
			
				
				&WEARY_FACE, // WEARY_FACE
				
			
				
				&WORRIED_FACE, // WORRIED_FACE
				
			
				
				&YAWNING_FACE, // YAWNING_FACE
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // face_concerned
	
	/// face_costume üëΩüëæü§°
	pub mod face_costume {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="alien üëΩ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ALIEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ALIEN); // üëΩ (`U+1F47D`)"] #[doc="# assert_eq!(ALIEN.to_string().as_str(), \"üëΩ\");"]
#[doc="```"]
pub static ALIEN :  Emoji = Emoji::new("alien", Version(0, 6), "üëΩ"); // alien
		
		#[doc="alien monster üëæ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ALIEN_MONSTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ALIEN_MONSTER); // üëæ (`U+1F47E`)"] #[doc="# assert_eq!(ALIEN_MONSTER.to_string().as_str(), \"üëæ\");"]
#[doc="```"]
pub static ALIEN_MONSTER :  Emoji = Emoji::new("alien monster", Version(0, 6), "üëæ"); // alien monster
		
		#[doc="clown face ü§°"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLOWN_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLOWN_FACE); // ü§° (`U+1F921`)"] #[doc="# assert_eq!(CLOWN_FACE.to_string().as_str(), \"ü§°\");"]
#[doc="```"]
pub static CLOWN_FACE :  Emoji = Emoji::new("clown face", Version(3, 0), "ü§°"); // clown face
		
		#[doc="ghost üëª"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GHOST;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GHOST); // üëª (`U+1F47B`)"] #[doc="# assert_eq!(GHOST.to_string().as_str(), \"üëª\");"]
#[doc="```"]
pub static GHOST :  Emoji = Emoji::new("ghost", Version(0, 6), "üëª"); // ghost
		
		#[doc="goblin üë∫"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GOBLIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GOBLIN); // üë∫ (`U+1F47A`)"] #[doc="# assert_eq!(GOBLIN.to_string().as_str(), \"üë∫\");"]
#[doc="```"]
pub static GOBLIN :  Emoji = Emoji::new("goblin", Version(0, 6), "üë∫"); // goblin
		
		#[doc="ogre üëπ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OGRE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OGRE); // üëπ (`U+1F479`)"] #[doc="# assert_eq!(OGRE.to_string().as_str(), \"üëπ\");"]
#[doc="```"]
pub static OGRE :  Emoji = Emoji::new("ogre", Version(0, 6), "üëπ"); // ogre
		
		#[doc="pile of poo üí©"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PILE_OF_POO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PILE_OF_POO); // üí© (`U+1F4A9`)"] #[doc="# assert_eq!(PILE_OF_POO.to_string().as_str(), \"üí©\");"]
#[doc="```"]
pub static PILE_OF_POO :  Emoji = Emoji::new("pile of poo", Version(0, 6), "üí©"); // pile of poo
		
		#[doc="robot ü§ñ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ROBOT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ROBOT); // ü§ñ (`U+1F916`)"] #[doc="# assert_eq!(ROBOT.to_string().as_str(), \"ü§ñ\");"]
#[doc="```"]
pub static ROBOT :  Emoji = Emoji::new("robot", Version(1, 0), "ü§ñ"); // robot
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // ALIEN
				
				&ALIEN,
				
			],
			
			&[ // ALIEN_MONSTER
				
				&ALIEN_MONSTER,
				
			],
			
			&[ // CLOWN_FACE
				
				&CLOWN_FACE,
				
			],
			
			&[ // GHOST
				
				&GHOST,
				
			],
			
			&[ // GOBLIN
				
				&GOBLIN,
				
			],
			
			&[ // OGRE
				
				&OGRE,
				
			],
			
			&[ // PILE_OF_POO
				
				&PILE_OF_POO,
				
			],
			
			&[ // ROBOT
				
				&ROBOT,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&ALIEN, // ALIEN
				
			
				
				&ALIEN_MONSTER, // ALIEN_MONSTER
				
			
				
				&CLOWN_FACE, // CLOWN_FACE
				
			
				
				&GHOST, // GHOST
				
			
				
				&GOBLIN, // GOBLIN
				
			
				
				&OGRE, // OGRE
				
			
				
				&PILE_OF_POO, // PILE_OF_POO
				
			
				
				&ROBOT, // ROBOT
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // face_costume
	
	/// face_glasses üßêü§ìüòé
	pub mod face_glasses {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="face with monocle üßê"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITH_MONOCLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITH_MONOCLE); // üßê (`U+1F9D0`)"] #[doc="# assert_eq!(FACE_WITH_MONOCLE.to_string().as_str(), \"üßê\");"]
#[doc="```"]
pub static FACE_WITH_MONOCLE :  Emoji = Emoji::new("face with monocle", Version(5, 0), "üßê"); // face with monocle
		
		#[doc="nerd face ü§ì"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NERD_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NERD_FACE); // ü§ì (`U+1F913`)"] #[doc="# assert_eq!(NERD_FACE.to_string().as_str(), \"ü§ì\");"]
#[doc="```"]
pub static NERD_FACE :  Emoji = Emoji::new("nerd face", Version(1, 0), "ü§ì"); // nerd face
		
		#[doc="smiling face with sunglasses üòé"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SMILING_FACE_WITH_SUNGLASSES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SMILING_FACE_WITH_SUNGLASSES); // üòé (`U+1F60E`)"] #[doc="# assert_eq!(SMILING_FACE_WITH_SUNGLASSES.to_string().as_str(), \"üòé\");"]
#[doc="```"]
pub static SMILING_FACE_WITH_SUNGLASSES :  Emoji = Emoji::new("smiling face with sunglasses", Version(1, 0), "üòé"); // smiling face with sunglasses
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // FACE_WITH_MONOCLE
				
				&FACE_WITH_MONOCLE,
				
			],
			
			&[ // NERD_FACE
				
				&NERD_FACE,
				
			],
			
			&[ // SMILING_FACE_WITH_SUNGLASSES
				
				&SMILING_FACE_WITH_SUNGLASSES,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&FACE_WITH_MONOCLE, // FACE_WITH_MONOCLE
				
			
				
				&NERD_FACE, // NERD_FACE
				
			
				
				&SMILING_FACE_WITH_SUNGLASSES, // SMILING_FACE_WITH_SUNGLASSES
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // face_glasses
	
	/// face_hand ü§≠ü§óü§´
	pub mod face_hand {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="face with hand over mouth ü§≠"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITH_HAND_OVER_MOUTH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITH_HAND_OVER_MOUTH); // ü§≠ (`U+1F92D`)"] #[doc="# assert_eq!(FACE_WITH_HAND_OVER_MOUTH.to_string().as_str(), \"ü§≠\");"]
#[doc="```"]
pub static FACE_WITH_HAND_OVER_MOUTH :  Emoji = Emoji::new("face with hand over mouth", Version(5, 0), "ü§≠"); // face with hand over mouth
		
		#[doc="hugging face ü§ó"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HUGGING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HUGGING_FACE); // ü§ó (`U+1F917`)"] #[doc="# assert_eq!(HUGGING_FACE.to_string().as_str(), \"ü§ó\");"]
#[doc="```"]
pub static HUGGING_FACE :  Emoji = Emoji::new("hugging face", Version(1, 0), "ü§ó"); // hugging face
		
		#[doc="shushing face ü§´"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHUSHING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHUSHING_FACE); // ü§´ (`U+1F92B`)"] #[doc="# assert_eq!(SHUSHING_FACE.to_string().as_str(), \"ü§´\");"]
#[doc="```"]
pub static SHUSHING_FACE :  Emoji = Emoji::new("shushing face", Version(5, 0), "ü§´"); // shushing face
		
		#[doc="thinking face ü§î"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::THINKING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", THINKING_FACE); // ü§î (`U+1F914`)"] #[doc="# assert_eq!(THINKING_FACE.to_string().as_str(), \"ü§î\");"]
#[doc="```"]
pub static THINKING_FACE :  Emoji = Emoji::new("thinking face", Version(1, 0), "ü§î"); // thinking face
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // FACE_WITH_HAND_OVER_MOUTH
				
				&FACE_WITH_HAND_OVER_MOUTH,
				
			],
			
			&[ // HUGGING_FACE
				
				&HUGGING_FACE,
				
			],
			
			&[ // SHUSHING_FACE
				
				&SHUSHING_FACE,
				
			],
			
			&[ // THINKING_FACE
				
				&THINKING_FACE,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&FACE_WITH_HAND_OVER_MOUTH, // FACE_WITH_HAND_OVER_MOUTH
				
			
				
				&HUGGING_FACE, // HUGGING_FACE
				
			
				
				&SHUSHING_FACE, // SHUSHING_FACE
				
			
				
				&THINKING_FACE, // THINKING_FACE
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // face_hand
	
	/// face_hat ü§†ü•∏ü•≥
	pub mod face_hat {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="cowboy hat face ü§†"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COWBOY_HAT_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COWBOY_HAT_FACE); // ü§† (`U+1F920`)"] #[doc="# assert_eq!(COWBOY_HAT_FACE.to_string().as_str(), \"ü§†\");"]
#[doc="```"]
pub static COWBOY_HAT_FACE :  Emoji = Emoji::new("cowboy hat face", Version(3, 0), "ü§†"); // cowboy hat face
		
		#[doc="disguised face ü•∏"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DISGUISED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DISGUISED_FACE); // ü•∏ (`U+1F978`)"] #[doc="# assert_eq!(DISGUISED_FACE.to_string().as_str(), \"ü•∏\");"]
#[doc="```"]
pub static DISGUISED_FACE :  Emoji = Emoji::new("disguised face", Version(13, 0), "ü•∏"); // disguised face
		
		#[doc="partying face ü•≥"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PARTYING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PARTYING_FACE); // ü•≥ (`U+1F973`)"] #[doc="# assert_eq!(PARTYING_FACE.to_string().as_str(), \"ü•≥\");"]
#[doc="```"]
pub static PARTYING_FACE :  Emoji = Emoji::new("partying face", Version(11, 0), "ü•≥"); // partying face
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // COWBOY_HAT_FACE
				
				&COWBOY_HAT_FACE,
				
			],
			
			&[ // DISGUISED_FACE
				
				&DISGUISED_FACE,
				
			],
			
			&[ // PARTYING_FACE
				
				&PARTYING_FACE,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&COWBOY_HAT_FACE, // COWBOY_HAT_FACE
				
			
				
				&DISGUISED_FACE, // DISGUISED_FACE
				
			
				
				&PARTYING_FACE, // PARTYING_FACE
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // face_hat
	
	/// face_negative üò†üëøüò§
	pub mod face_negative {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="angry face üò†"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ANGRY_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ANGRY_FACE); // üò† (`U+1F620`)"] #[doc="# assert_eq!(ANGRY_FACE.to_string().as_str(), \"üò†\");"]
#[doc="```"]
pub static ANGRY_FACE :  Emoji = Emoji::new("angry face", Version(0, 6), "üò†"); // angry face
		
		#[doc="angry face with horns üëø"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ANGRY_FACE_WITH_HORNS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ANGRY_FACE_WITH_HORNS); // üëø (`U+1F47F`)"] #[doc="# assert_eq!(ANGRY_FACE_WITH_HORNS.to_string().as_str(), \"üëø\");"]
#[doc="```"]
pub static ANGRY_FACE_WITH_HORNS :  Emoji = Emoji::new("angry face with horns", Version(0, 6), "üëø"); // angry face with horns
		
		#[doc="face with steam from nose üò§"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITH_STEAM_FROM_NOSE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITH_STEAM_FROM_NOSE); // üò§ (`U+1F624`)"] #[doc="# assert_eq!(FACE_WITH_STEAM_FROM_NOSE.to_string().as_str(), \"üò§\");"]
#[doc="```"]
pub static FACE_WITH_STEAM_FROM_NOSE :  Emoji = Emoji::new("face with steam from nose", Version(0, 6), "üò§"); // face with steam from nose
		
		#[doc="face with symbols on mouth ü§¨"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITH_SYMBOLS_ON_MOUTH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITH_SYMBOLS_ON_MOUTH); // ü§¨ (`U+1F92C`)"] #[doc="# assert_eq!(FACE_WITH_SYMBOLS_ON_MOUTH.to_string().as_str(), \"ü§¨\");"]
#[doc="```"]
pub static FACE_WITH_SYMBOLS_ON_MOUTH :  Emoji = Emoji::new("face with symbols on mouth", Version(5, 0), "ü§¨"); // face with symbols on mouth
		
		#[doc="pouting face üò°"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POUTING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POUTING_FACE); // üò° (`U+1F621`)"] #[doc="# assert_eq!(POUTING_FACE.to_string().as_str(), \"üò°\");"]
#[doc="```"]
pub static POUTING_FACE :  Emoji = Emoji::new("pouting face", Version(0, 6), "üò°"); // pouting face
		
		#[doc="skull üíÄ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SKULL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SKULL); // üíÄ (`U+1F480`)"] #[doc="# assert_eq!(SKULL.to_string().as_str(), \"üíÄ\");"]
#[doc="```"]
pub static SKULL :  Emoji = Emoji::new("skull", Version(0, 6), "üíÄ"); // skull
		
		#[doc="skull and crossbones ‚ò†Ô∏è"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SKULL_AND_CROSSBONES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SKULL_AND_CROSSBONES); // ‚ò†Ô∏è (`U+2620 U+FE0F`)"] #[doc="# assert_eq!(SKULL_AND_CROSSBONES.to_string().as_str(), \"‚ò†Ô∏è\");"]
#[doc="```"]
pub static SKULL_AND_CROSSBONES :  Emoji = Emoji::new("skull and crossbones", Version(1, 0), "‚ò†Ô∏è"); // skull and crossbones
		
		#[doc="smiling face with horns üòà"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SMILING_FACE_WITH_HORNS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SMILING_FACE_WITH_HORNS); // üòà (`U+1F608`)"] #[doc="# assert_eq!(SMILING_FACE_WITH_HORNS.to_string().as_str(), \"üòà\");"]
#[doc="```"]
pub static SMILING_FACE_WITH_HORNS :  Emoji = Emoji::new("smiling face with horns", Version(1, 0), "üòà"); // smiling face with horns
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // ANGRY_FACE
				
				&ANGRY_FACE,
				
			],
			
			&[ // ANGRY_FACE_WITH_HORNS
				
				&ANGRY_FACE_WITH_HORNS,
				
			],
			
			&[ // FACE_WITH_STEAM_FROM_NOSE
				
				&FACE_WITH_STEAM_FROM_NOSE,
				
			],
			
			&[ // FACE_WITH_SYMBOLS_ON_MOUTH
				
				&FACE_WITH_SYMBOLS_ON_MOUTH,
				
			],
			
			&[ // POUTING_FACE
				
				&POUTING_FACE,
				
			],
			
			&[ // SKULL
				
				&SKULL,
				
			],
			
			&[ // SKULL_AND_CROSSBONES
				
				&SKULL_AND_CROSSBONES,
				
			],
			
			&[ // SMILING_FACE_WITH_HORNS
				
				&SMILING_FACE_WITH_HORNS,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&ANGRY_FACE, // ANGRY_FACE
				
			
				
				&ANGRY_FACE_WITH_HORNS, // ANGRY_FACE_WITH_HORNS
				
			
				
				&FACE_WITH_STEAM_FROM_NOSE, // FACE_WITH_STEAM_FROM_NOSE
				
			
				
				&FACE_WITH_SYMBOLS_ON_MOUTH, // FACE_WITH_SYMBOLS_ON_MOUTH
				
			
				
				&POUTING_FACE, // POUTING_FACE
				
			
				
				&SKULL, // SKULL
				
			
				
				&SKULL_AND_CROSSBONES, // SKULL_AND_CROSSBONES
				
			
				
				&SMILING_FACE_WITH_HORNS, // SMILING_FACE_WITH_HORNS
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // face_negative
	
	/// face_neutral_skeptical üòëüòÆ‚Äçüí®üò∂‚Äçüå´Ô∏è
	pub mod face_neutral_skeptical {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="expressionless face üòë"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EXPRESSIONLESS_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EXPRESSIONLESS_FACE); // üòë (`U+1F611`)"] #[doc="# assert_eq!(EXPRESSIONLESS_FACE.to_string().as_str(), \"üòë\");"]
#[doc="```"]
pub static EXPRESSIONLESS_FACE :  Emoji = Emoji::new("expressionless face", Version(1, 0), "üòë"); // expressionless face
		
		#[doc="face exhaling üòÆ‚Äçüí®"]#[doc=""]#[doc="Since E13.1"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_EXHALING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_EXHALING); // üòÆ‚Äçüí® (`U+1F62E U+200D U+1F4A8`)"] #[doc="# assert_eq!(FACE_EXHALING.to_string().as_str(), \"üòÆ‚Äçüí®\");"]
#[doc="```"]
pub static FACE_EXHALING :  Emoji = Emoji::new("face exhaling", Version(13, 1), "üòÆ‚Äçüí®"); // face exhaling
		
		#[doc="face in clouds üò∂‚Äçüå´Ô∏è"]#[doc=""]#[doc="Since E13.1"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_IN_CLOUDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_IN_CLOUDS); // üò∂‚Äçüå´Ô∏è (`U+1F636 U+200D U+1F32B U+FE0F`)"] #[doc="# assert_eq!(FACE_IN_CLOUDS.to_string().as_str(), \"üò∂‚Äçüå´Ô∏è\");"]
#[doc="```"]
pub static FACE_IN_CLOUDS :  Emoji = Emoji::new("face in clouds", Version(13, 1), "üò∂‚Äçüå´Ô∏è"); // face in clouds
		
		#[doc="face without mouth üò∂"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITHOUT_MOUTH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITHOUT_MOUTH); // üò∂ (`U+1F636`)"] #[doc="# assert_eq!(FACE_WITHOUT_MOUTH.to_string().as_str(), \"üò∂\");"]
#[doc="```"]
pub static FACE_WITHOUT_MOUTH :  Emoji = Emoji::new("face without mouth", Version(1, 0), "üò∂"); // face without mouth
		
		#[doc="face with raised eyebrow ü§®"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITH_RAISED_EYEBROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITH_RAISED_EYEBROW); // ü§® (`U+1F928`)"] #[doc="# assert_eq!(FACE_WITH_RAISED_EYEBROW.to_string().as_str(), \"ü§®\");"]
#[doc="```"]
pub static FACE_WITH_RAISED_EYEBROW :  Emoji = Emoji::new("face with raised eyebrow", Version(5, 0), "ü§®"); // face with raised eyebrow
		
		#[doc="face with rolling eyes üôÑ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITH_ROLLING_EYES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITH_ROLLING_EYES); // üôÑ (`U+1F644`)"] #[doc="# assert_eq!(FACE_WITH_ROLLING_EYES.to_string().as_str(), \"üôÑ\");"]
#[doc="```"]
pub static FACE_WITH_ROLLING_EYES :  Emoji = Emoji::new("face with rolling eyes", Version(1, 0), "üôÑ"); // face with rolling eyes
		
		#[doc="grimacing face üò¨"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GRIMACING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GRIMACING_FACE); // üò¨ (`U+1F62C`)"] #[doc="# assert_eq!(GRIMACING_FACE.to_string().as_str(), \"üò¨\");"]
#[doc="```"]
pub static GRIMACING_FACE :  Emoji = Emoji::new("grimacing face", Version(1, 0), "üò¨"); // grimacing face
		
		#[doc="lying face ü§•"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LYING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LYING_FACE); // ü§• (`U+1F925`)"] #[doc="# assert_eq!(LYING_FACE.to_string().as_str(), \"ü§•\");"]
#[doc="```"]
pub static LYING_FACE :  Emoji = Emoji::new("lying face", Version(3, 0), "ü§•"); // lying face
		
		#[doc="neutral face üòê"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NEUTRAL_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NEUTRAL_FACE); // üòê (`U+1F610`)"] #[doc="# assert_eq!(NEUTRAL_FACE.to_string().as_str(), \"üòê\");"]
#[doc="```"]
pub static NEUTRAL_FACE :  Emoji = Emoji::new("neutral face", Version(0, 7), "üòê"); // neutral face
		
		#[doc="smirking face üòè"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SMIRKING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SMIRKING_FACE); // üòè (`U+1F60F`)"] #[doc="# assert_eq!(SMIRKING_FACE.to_string().as_str(), \"üòè\");"]
#[doc="```"]
pub static SMIRKING_FACE :  Emoji = Emoji::new("smirking face", Version(0, 6), "üòè"); // smirking face
		
		#[doc="unamused face üòí"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::UNAMUSED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", UNAMUSED_FACE); // üòí (`U+1F612`)"] #[doc="# assert_eq!(UNAMUSED_FACE.to_string().as_str(), \"üòí\");"]
#[doc="```"]
pub static UNAMUSED_FACE :  Emoji = Emoji::new("unamused face", Version(0, 6), "üòí"); // unamused face
		
		#[doc="zipper-mouth face ü§ê"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ZIPPER_MOUTH_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ZIPPER_MOUTH_FACE); // ü§ê (`U+1F910`)"] #[doc="# assert_eq!(ZIPPER_MOUTH_FACE.to_string().as_str(), \"ü§ê\");"]
#[doc="```"]
pub static ZIPPER_MOUTH_FACE :  Emoji = Emoji::new("zipper-mouth face", Version(1, 0), "ü§ê"); // zipper-mouth face
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // EXPRESSIONLESS_FACE
				
				&EXPRESSIONLESS_FACE,
				
			],
			
			&[ // FACE_EXHALING
				
				&FACE_EXHALING,
				
			],
			
			&[ // FACE_IN_CLOUDS
				
				&FACE_IN_CLOUDS,
				
			],
			
			&[ // FACE_WITHOUT_MOUTH
				
				&FACE_WITHOUT_MOUTH,
				
			],
			
			&[ // FACE_WITH_RAISED_EYEBROW
				
				&FACE_WITH_RAISED_EYEBROW,
				
			],
			
			&[ // FACE_WITH_ROLLING_EYES
				
				&FACE_WITH_ROLLING_EYES,
				
			],
			
			&[ // GRIMACING_FACE
				
				&GRIMACING_FACE,
				
			],
			
			&[ // LYING_FACE
				
				&LYING_FACE,
				
			],
			
			&[ // NEUTRAL_FACE
				
				&NEUTRAL_FACE,
				
			],
			
			&[ // SMIRKING_FACE
				
				&SMIRKING_FACE,
				
			],
			
			&[ // UNAMUSED_FACE
				
				&UNAMUSED_FACE,
				
			],
			
			&[ // ZIPPER_MOUTH_FACE
				
				&ZIPPER_MOUTH_FACE,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&EXPRESSIONLESS_FACE, // EXPRESSIONLESS_FACE
				
			
				
				&FACE_EXHALING, // FACE_EXHALING
				
			
				
				&FACE_IN_CLOUDS, // FACE_IN_CLOUDS
				
			
				
				&FACE_WITHOUT_MOUTH, // FACE_WITHOUT_MOUTH
				
			
				
				&FACE_WITH_RAISED_EYEBROW, // FACE_WITH_RAISED_EYEBROW
				
			
				
				&FACE_WITH_ROLLING_EYES, // FACE_WITH_ROLLING_EYES
				
			
				
				&GRIMACING_FACE, // GRIMACING_FACE
				
			
				
				&LYING_FACE, // LYING_FACE
				
			
				
				&NEUTRAL_FACE, // NEUTRAL_FACE
				
			
				
				&SMIRKING_FACE, // SMIRKING_FACE
				
			
				
				&UNAMUSED_FACE, // UNAMUSED_FACE
				
			
				
				&ZIPPER_MOUTH_FACE, // ZIPPER_MOUTH_FACE
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // face_neutral_skeptical
	
	/// face_sleepy ü§§üòîüòå
	pub mod face_sleepy {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="drooling face ü§§"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DROOLING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DROOLING_FACE); // ü§§ (`U+1F924`)"] #[doc="# assert_eq!(DROOLING_FACE.to_string().as_str(), \"ü§§\");"]
#[doc="```"]
pub static DROOLING_FACE :  Emoji = Emoji::new("drooling face", Version(3, 0), "ü§§"); // drooling face
		
		#[doc="pensive face üòî"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PENSIVE_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PENSIVE_FACE); // üòî (`U+1F614`)"] #[doc="# assert_eq!(PENSIVE_FACE.to_string().as_str(), \"üòî\");"]
#[doc="```"]
pub static PENSIVE_FACE :  Emoji = Emoji::new("pensive face", Version(0, 6), "üòî"); // pensive face
		
		#[doc="relieved face üòå"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RELIEVED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RELIEVED_FACE); // üòå (`U+1F60C`)"] #[doc="# assert_eq!(RELIEVED_FACE.to_string().as_str(), \"üòå\");"]
#[doc="```"]
pub static RELIEVED_FACE :  Emoji = Emoji::new("relieved face", Version(0, 6), "üòå"); // relieved face
		
		#[doc="sleeping face üò¥"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SLEEPING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SLEEPING_FACE); // üò¥ (`U+1F634`)"] #[doc="# assert_eq!(SLEEPING_FACE.to_string().as_str(), \"üò¥\");"]
#[doc="```"]
pub static SLEEPING_FACE :  Emoji = Emoji::new("sleeping face", Version(1, 0), "üò¥"); // sleeping face
		
		#[doc="sleepy face üò™"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SLEEPY_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SLEEPY_FACE); // üò™ (`U+1F62A`)"] #[doc="# assert_eq!(SLEEPY_FACE.to_string().as_str(), \"üò™\");"]
#[doc="```"]
pub static SLEEPY_FACE :  Emoji = Emoji::new("sleepy face", Version(0, 6), "üò™"); // sleepy face
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // DROOLING_FACE
				
				&DROOLING_FACE,
				
			],
			
			&[ // PENSIVE_FACE
				
				&PENSIVE_FACE,
				
			],
			
			&[ // RELIEVED_FACE
				
				&RELIEVED_FACE,
				
			],
			
			&[ // SLEEPING_FACE
				
				&SLEEPING_FACE,
				
			],
			
			&[ // SLEEPY_FACE
				
				&SLEEPY_FACE,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&DROOLING_FACE, // DROOLING_FACE
				
			
				
				&PENSIVE_FACE, // PENSIVE_FACE
				
			
				
				&RELIEVED_FACE, // RELIEVED_FACE
				
			
				
				&SLEEPING_FACE, // SLEEPING_FACE
				
			
				
				&SLEEPY_FACE, // SLEEPY_FACE
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // face_sleepy
	
	/// face_smiling üòÅüòÇüòÄ
	pub mod face_smiling {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="beaming face with smiling eyes üòÅ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BEAMING_FACE_WITH_SMILING_EYES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BEAMING_FACE_WITH_SMILING_EYES); // üòÅ (`U+1F601`)"] #[doc="# assert_eq!(BEAMING_FACE_WITH_SMILING_EYES.to_string().as_str(), \"üòÅ\");"]
#[doc="```"]
pub static BEAMING_FACE_WITH_SMILING_EYES :  Emoji = Emoji::new("beaming face with smiling eyes", Version(0, 6), "üòÅ"); // beaming face with smiling eyes
		
		#[doc="face with tears of joy üòÇ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITH_TEARS_OF_JOY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITH_TEARS_OF_JOY); // üòÇ (`U+1F602`)"] #[doc="# assert_eq!(FACE_WITH_TEARS_OF_JOY.to_string().as_str(), \"üòÇ\");"]
#[doc="```"]
pub static FACE_WITH_TEARS_OF_JOY :  Emoji = Emoji::new("face with tears of joy", Version(0, 6), "üòÇ"); // face with tears of joy
		
		#[doc="grinning face üòÄ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GRINNING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GRINNING_FACE); // üòÄ (`U+1F600`)"] #[doc="# assert_eq!(GRINNING_FACE.to_string().as_str(), \"üòÄ\");"]
#[doc="```"]
pub static GRINNING_FACE :  Emoji = Emoji::new("grinning face", Version(1, 0), "üòÄ"); // grinning face
		
		#[doc="grinning face with big eyes üòÉ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GRINNING_FACE_WITH_BIG_EYES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GRINNING_FACE_WITH_BIG_EYES); // üòÉ (`U+1F603`)"] #[doc="# assert_eq!(GRINNING_FACE_WITH_BIG_EYES.to_string().as_str(), \"üòÉ\");"]
#[doc="```"]
pub static GRINNING_FACE_WITH_BIG_EYES :  Emoji = Emoji::new("grinning face with big eyes", Version(0, 6), "üòÉ"); // grinning face with big eyes
		
		#[doc="grinning face with smiling eyes üòÑ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GRINNING_FACE_WITH_SMILING_EYES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GRINNING_FACE_WITH_SMILING_EYES); // üòÑ (`U+1F604`)"] #[doc="# assert_eq!(GRINNING_FACE_WITH_SMILING_EYES.to_string().as_str(), \"üòÑ\");"]
#[doc="```"]
pub static GRINNING_FACE_WITH_SMILING_EYES :  Emoji = Emoji::new("grinning face with smiling eyes", Version(0, 6), "üòÑ"); // grinning face with smiling eyes
		
		#[doc="grinning face with sweat üòÖ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GRINNING_FACE_WITH_SWEAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GRINNING_FACE_WITH_SWEAT); // üòÖ (`U+1F605`)"] #[doc="# assert_eq!(GRINNING_FACE_WITH_SWEAT.to_string().as_str(), \"üòÖ\");"]
#[doc="```"]
pub static GRINNING_FACE_WITH_SWEAT :  Emoji = Emoji::new("grinning face with sweat", Version(0, 6), "üòÖ"); // grinning face with sweat
		
		#[doc="grinning squinting face üòÜ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GRINNING_SQUINTING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GRINNING_SQUINTING_FACE); // üòÜ (`U+1F606`)"] #[doc="# assert_eq!(GRINNING_SQUINTING_FACE.to_string().as_str(), \"üòÜ\");"]
#[doc="```"]
pub static GRINNING_SQUINTING_FACE :  Emoji = Emoji::new("grinning squinting face", Version(0, 6), "üòÜ"); // grinning squinting face
		
		#[doc="rolling on the floor laughing ü§£"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ROLLING_ON_THE_FLOOR_LAUGHING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ROLLING_ON_THE_FLOOR_LAUGHING); // ü§£ (`U+1F923`)"] #[doc="# assert_eq!(ROLLING_ON_THE_FLOOR_LAUGHING.to_string().as_str(), \"ü§£\");"]
#[doc="```"]
pub static ROLLING_ON_THE_FLOOR_LAUGHING :  Emoji = Emoji::new("rolling on the floor laughing", Version(3, 0), "ü§£"); // rolling on the floor laughing
		
		#[doc="slightly smiling face üôÇ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SLIGHTLY_SMILING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SLIGHTLY_SMILING_FACE); // üôÇ (`U+1F642`)"] #[doc="# assert_eq!(SLIGHTLY_SMILING_FACE.to_string().as_str(), \"üôÇ\");"]
#[doc="```"]
pub static SLIGHTLY_SMILING_FACE :  Emoji = Emoji::new("slightly smiling face", Version(1, 0), "üôÇ"); // slightly smiling face
		
		#[doc="smiling face with halo üòá"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SMILING_FACE_WITH_HALO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SMILING_FACE_WITH_HALO); // üòá (`U+1F607`)"] #[doc="# assert_eq!(SMILING_FACE_WITH_HALO.to_string().as_str(), \"üòá\");"]
#[doc="```"]
pub static SMILING_FACE_WITH_HALO :  Emoji = Emoji::new("smiling face with halo", Version(1, 0), "üòá"); // smiling face with halo
		
		#[doc="smiling face with smiling eyes üòä"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SMILING_FACE_WITH_SMILING_EYES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SMILING_FACE_WITH_SMILING_EYES); // üòä (`U+1F60A`)"] #[doc="# assert_eq!(SMILING_FACE_WITH_SMILING_EYES.to_string().as_str(), \"üòä\");"]
#[doc="```"]
pub static SMILING_FACE_WITH_SMILING_EYES :  Emoji = Emoji::new("smiling face with smiling eyes", Version(0, 6), "üòä"); // smiling face with smiling eyes
		
		#[doc="upside-down face üôÉ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::UPSIDE_DOWN_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", UPSIDE_DOWN_FACE); // üôÉ (`U+1F643`)"] #[doc="# assert_eq!(UPSIDE_DOWN_FACE.to_string().as_str(), \"üôÉ\");"]
#[doc="```"]
pub static UPSIDE_DOWN_FACE :  Emoji = Emoji::new("upside-down face", Version(1, 0), "üôÉ"); // upside-down face
		
		#[doc="winking face üòâ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WINKING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WINKING_FACE); // üòâ (`U+1F609`)"] #[doc="# assert_eq!(WINKING_FACE.to_string().as_str(), \"üòâ\");"]
#[doc="```"]
pub static WINKING_FACE :  Emoji = Emoji::new("winking face", Version(0, 6), "üòâ"); // winking face
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BEAMING_FACE_WITH_SMILING_EYES
				
				&BEAMING_FACE_WITH_SMILING_EYES,
				
			],
			
			&[ // FACE_WITH_TEARS_OF_JOY
				
				&FACE_WITH_TEARS_OF_JOY,
				
			],
			
			&[ // GRINNING_FACE
				
				&GRINNING_FACE,
				
			],
			
			&[ // GRINNING_FACE_WITH_BIG_EYES
				
				&GRINNING_FACE_WITH_BIG_EYES,
				
			],
			
			&[ // GRINNING_FACE_WITH_SMILING_EYES
				
				&GRINNING_FACE_WITH_SMILING_EYES,
				
			],
			
			&[ // GRINNING_FACE_WITH_SWEAT
				
				&GRINNING_FACE_WITH_SWEAT,
				
			],
			
			&[ // GRINNING_SQUINTING_FACE
				
				&GRINNING_SQUINTING_FACE,
				
			],
			
			&[ // ROLLING_ON_THE_FLOOR_LAUGHING
				
				&ROLLING_ON_THE_FLOOR_LAUGHING,
				
			],
			
			&[ // SLIGHTLY_SMILING_FACE
				
				&SLIGHTLY_SMILING_FACE,
				
			],
			
			&[ // SMILING_FACE_WITH_HALO
				
				&SMILING_FACE_WITH_HALO,
				
			],
			
			&[ // SMILING_FACE_WITH_SMILING_EYES
				
				&SMILING_FACE_WITH_SMILING_EYES,
				
			],
			
			&[ // UPSIDE_DOWN_FACE
				
				&UPSIDE_DOWN_FACE,
				
			],
			
			&[ // WINKING_FACE
				
				&WINKING_FACE,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BEAMING_FACE_WITH_SMILING_EYES, // BEAMING_FACE_WITH_SMILING_EYES
				
			
				
				&FACE_WITH_TEARS_OF_JOY, // FACE_WITH_TEARS_OF_JOY
				
			
				
				&GRINNING_FACE, // GRINNING_FACE
				
			
				
				&GRINNING_FACE_WITH_BIG_EYES, // GRINNING_FACE_WITH_BIG_EYES
				
			
				
				&GRINNING_FACE_WITH_SMILING_EYES, // GRINNING_FACE_WITH_SMILING_EYES
				
			
				
				&GRINNING_FACE_WITH_SWEAT, // GRINNING_FACE_WITH_SWEAT
				
			
				
				&GRINNING_SQUINTING_FACE, // GRINNING_SQUINTING_FACE
				
			
				
				&ROLLING_ON_THE_FLOOR_LAUGHING, // ROLLING_ON_THE_FLOOR_LAUGHING
				
			
				
				&SLIGHTLY_SMILING_FACE, // SLIGHTLY_SMILING_FACE
				
			
				
				&SMILING_FACE_WITH_HALO, // SMILING_FACE_WITH_HALO
				
			
				
				&SMILING_FACE_WITH_SMILING_EYES, // SMILING_FACE_WITH_SMILING_EYES
				
			
				
				&UPSIDE_DOWN_FACE, // UPSIDE_DOWN_FACE
				
			
				
				&WINKING_FACE, // WINKING_FACE
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // face_smiling
	
	/// face_tongue üòãüòõü§ë
	pub mod face_tongue {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="face savoring food üòã"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_SAVORING_FOOD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_SAVORING_FOOD); // üòã (`U+1F60B`)"] #[doc="# assert_eq!(FACE_SAVORING_FOOD.to_string().as_str(), \"üòã\");"]
#[doc="```"]
pub static FACE_SAVORING_FOOD :  Emoji = Emoji::new("face savoring food", Version(0, 6), "üòã"); // face savoring food
		
		#[doc="face with tongue üòõ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITH_TONGUE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITH_TONGUE); // üòõ (`U+1F61B`)"] #[doc="# assert_eq!(FACE_WITH_TONGUE.to_string().as_str(), \"üòõ\");"]
#[doc="```"]
pub static FACE_WITH_TONGUE :  Emoji = Emoji::new("face with tongue", Version(1, 0), "üòõ"); // face with tongue
		
		#[doc="money-mouth face ü§ë"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MONEY_MOUTH_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MONEY_MOUTH_FACE); // ü§ë (`U+1F911`)"] #[doc="# assert_eq!(MONEY_MOUTH_FACE.to_string().as_str(), \"ü§ë\");"]
#[doc="```"]
pub static MONEY_MOUTH_FACE :  Emoji = Emoji::new("money-mouth face", Version(1, 0), "ü§ë"); // money-mouth face
		
		#[doc="squinting face with tongue üòù"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SQUINTING_FACE_WITH_TONGUE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SQUINTING_FACE_WITH_TONGUE); // üòù (`U+1F61D`)"] #[doc="# assert_eq!(SQUINTING_FACE_WITH_TONGUE.to_string().as_str(), \"üòù\");"]
#[doc="```"]
pub static SQUINTING_FACE_WITH_TONGUE :  Emoji = Emoji::new("squinting face with tongue", Version(0, 6), "üòù"); // squinting face with tongue
		
		#[doc="winking face with tongue üòú"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WINKING_FACE_WITH_TONGUE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WINKING_FACE_WITH_TONGUE); // üòú (`U+1F61C`)"] #[doc="# assert_eq!(WINKING_FACE_WITH_TONGUE.to_string().as_str(), \"üòú\");"]
#[doc="```"]
pub static WINKING_FACE_WITH_TONGUE :  Emoji = Emoji::new("winking face with tongue", Version(0, 6), "üòú"); // winking face with tongue
		
		#[doc="zany face ü§™"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ZANY_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ZANY_FACE); // ü§™ (`U+1F92A`)"] #[doc="# assert_eq!(ZANY_FACE.to_string().as_str(), \"ü§™\");"]
#[doc="```"]
pub static ZANY_FACE :  Emoji = Emoji::new("zany face", Version(5, 0), "ü§™"); // zany face
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // FACE_SAVORING_FOOD
				
				&FACE_SAVORING_FOOD,
				
			],
			
			&[ // FACE_WITH_TONGUE
				
				&FACE_WITH_TONGUE,
				
			],
			
			&[ // MONEY_MOUTH_FACE
				
				&MONEY_MOUTH_FACE,
				
			],
			
			&[ // SQUINTING_FACE_WITH_TONGUE
				
				&SQUINTING_FACE_WITH_TONGUE,
				
			],
			
			&[ // WINKING_FACE_WITH_TONGUE
				
				&WINKING_FACE_WITH_TONGUE,
				
			],
			
			&[ // ZANY_FACE
				
				&ZANY_FACE,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&FACE_SAVORING_FOOD, // FACE_SAVORING_FOOD
				
			
				
				&FACE_WITH_TONGUE, // FACE_WITH_TONGUE
				
			
				
				&MONEY_MOUTH_FACE, // MONEY_MOUTH_FACE
				
			
				
				&SQUINTING_FACE_WITH_TONGUE, // SQUINTING_FACE_WITH_TONGUE
				
			
				
				&WINKING_FACE_WITH_TONGUE, // WINKING_FACE_WITH_TONGUE
				
			
				
				&ZANY_FACE, // ZANY_FACE
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // face_tongue
	
	/// face_unwell ü•∂ü§Øü§Æ
	pub mod face_unwell {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="cold face ü•∂"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COLD_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COLD_FACE); // ü•∂ (`U+1F976`)"] #[doc="# assert_eq!(COLD_FACE.to_string().as_str(), \"ü•∂\");"]
#[doc="```"]
pub static COLD_FACE :  Emoji = Emoji::new("cold face", Version(11, 0), "ü•∂"); // cold face
		
		#[doc="exploding head ü§Ø"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EXPLODING_HEAD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EXPLODING_HEAD); // ü§Ø (`U+1F92F`)"] #[doc="# assert_eq!(EXPLODING_HEAD.to_string().as_str(), \"ü§Ø\");"]
#[doc="```"]
pub static EXPLODING_HEAD :  Emoji = Emoji::new("exploding head", Version(5, 0), "ü§Ø"); // exploding head
		
		#[doc="face vomiting ü§Æ"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_VOMITING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_VOMITING); // ü§Æ (`U+1F92E`)"] #[doc="# assert_eq!(FACE_VOMITING.to_string().as_str(), \"ü§Æ\");"]
#[doc="```"]
pub static FACE_VOMITING :  Emoji = Emoji::new("face vomiting", Version(5, 0), "ü§Æ"); // face vomiting
		
		#[doc="face with head-bandage ü§ï"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITH_HEAD_BANDAGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITH_HEAD_BANDAGE); // ü§ï (`U+1F915`)"] #[doc="# assert_eq!(FACE_WITH_HEAD_BANDAGE.to_string().as_str(), \"ü§ï\");"]
#[doc="```"]
pub static FACE_WITH_HEAD_BANDAGE :  Emoji = Emoji::new("face with head-bandage", Version(1, 0), "ü§ï"); // face with head-bandage
		
		#[doc="face with medical mask üò∑"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITH_MEDICAL_MASK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITH_MEDICAL_MASK); // üò∑ (`U+1F637`)"] #[doc="# assert_eq!(FACE_WITH_MEDICAL_MASK.to_string().as_str(), \"üò∑\");"]
#[doc="```"]
pub static FACE_WITH_MEDICAL_MASK :  Emoji = Emoji::new("face with medical mask", Version(0, 6), "üò∑"); // face with medical mask
		
		#[doc="face with spiral eyes üòµ‚Äçüí´"]#[doc=""]#[doc="Since E13.1"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITH_SPIRAL_EYES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITH_SPIRAL_EYES); // üòµ‚Äçüí´ (`U+1F635 U+200D U+1F4AB`)"] #[doc="# assert_eq!(FACE_WITH_SPIRAL_EYES.to_string().as_str(), \"üòµ‚Äçüí´\");"]
#[doc="```"]
pub static FACE_WITH_SPIRAL_EYES :  Emoji = Emoji::new("face with spiral eyes", Version(13, 1), "üòµ‚Äçüí´"); // face with spiral eyes
		
		#[doc="face with thermometer ü§í"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITH_THERMOMETER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITH_THERMOMETER); // ü§í (`U+1F912`)"] #[doc="# assert_eq!(FACE_WITH_THERMOMETER.to_string().as_str(), \"ü§í\");"]
#[doc="```"]
pub static FACE_WITH_THERMOMETER :  Emoji = Emoji::new("face with thermometer", Version(1, 0), "ü§í"); // face with thermometer
		
		#[doc="hot face ü•µ"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOT_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOT_FACE); // ü•µ (`U+1F975`)"] #[doc="# assert_eq!(HOT_FACE.to_string().as_str(), \"ü•µ\");"]
#[doc="```"]
pub static HOT_FACE :  Emoji = Emoji::new("hot face", Version(11, 0), "ü•µ"); // hot face
		
		#[doc="knocked-out face üòµ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KNOCKED_OUT_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KNOCKED_OUT_FACE); // üòµ (`U+1F635`)"] #[doc="# assert_eq!(KNOCKED_OUT_FACE.to_string().as_str(), \"üòµ\");"]
#[doc="```"]
pub static KNOCKED_OUT_FACE :  Emoji = Emoji::new("knocked-out face", Version(0, 6), "üòµ"); // knocked-out face
		
		#[doc="nauseated face ü§¢"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NAUSEATED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NAUSEATED_FACE); // ü§¢ (`U+1F922`)"] #[doc="# assert_eq!(NAUSEATED_FACE.to_string().as_str(), \"ü§¢\");"]
#[doc="```"]
pub static NAUSEATED_FACE :  Emoji = Emoji::new("nauseated face", Version(3, 0), "ü§¢"); // nauseated face
		
		#[doc="sneezing face ü§ß"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SNEEZING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SNEEZING_FACE); // ü§ß (`U+1F927`)"] #[doc="# assert_eq!(SNEEZING_FACE.to_string().as_str(), \"ü§ß\");"]
#[doc="```"]
pub static SNEEZING_FACE :  Emoji = Emoji::new("sneezing face", Version(3, 0), "ü§ß"); // sneezing face
		
		#[doc="woozy face ü•¥"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WOOZY_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WOOZY_FACE); // ü•¥ (`U+1F974`)"] #[doc="# assert_eq!(WOOZY_FACE.to_string().as_str(), \"ü•¥\");"]
#[doc="```"]
pub static WOOZY_FACE :  Emoji = Emoji::new("woozy face", Version(11, 0), "ü•¥"); // woozy face
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // COLD_FACE
				
				&COLD_FACE,
				
			],
			
			&[ // EXPLODING_HEAD
				
				&EXPLODING_HEAD,
				
			],
			
			&[ // FACE_VOMITING
				
				&FACE_VOMITING,
				
			],
			
			&[ // FACE_WITH_HEAD_BANDAGE
				
				&FACE_WITH_HEAD_BANDAGE,
				
			],
			
			&[ // FACE_WITH_MEDICAL_MASK
				
				&FACE_WITH_MEDICAL_MASK,
				
			],
			
			&[ // FACE_WITH_SPIRAL_EYES
				
				&FACE_WITH_SPIRAL_EYES,
				
			],
			
			&[ // FACE_WITH_THERMOMETER
				
				&FACE_WITH_THERMOMETER,
				
			],
			
			&[ // HOT_FACE
				
				&HOT_FACE,
				
			],
			
			&[ // KNOCKED_OUT_FACE
				
				&KNOCKED_OUT_FACE,
				
			],
			
			&[ // NAUSEATED_FACE
				
				&NAUSEATED_FACE,
				
			],
			
			&[ // SNEEZING_FACE
				
				&SNEEZING_FACE,
				
			],
			
			&[ // WOOZY_FACE
				
				&WOOZY_FACE,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&COLD_FACE, // COLD_FACE
				
			
				
				&EXPLODING_HEAD, // EXPLODING_HEAD
				
			
				
				&FACE_VOMITING, // FACE_VOMITING
				
			
				
				&FACE_WITH_HEAD_BANDAGE, // FACE_WITH_HEAD_BANDAGE
				
			
				
				&FACE_WITH_MEDICAL_MASK, // FACE_WITH_MEDICAL_MASK
				
			
				
				&FACE_WITH_SPIRAL_EYES, // FACE_WITH_SPIRAL_EYES
				
			
				
				&FACE_WITH_THERMOMETER, // FACE_WITH_THERMOMETER
				
			
				
				&HOT_FACE, // HOT_FACE
				
			
				
				&KNOCKED_OUT_FACE, // KNOCKED_OUT_FACE
				
			
				
				&NAUSEATED_FACE, // NAUSEATED_FACE
				
			
				
				&SNEEZING_FACE, // SNEEZING_FACE
				
			
				
				&WOOZY_FACE, // WOOZY_FACE
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // face_unwell
	
	/// monkey_face üôâüôàüôä
	pub mod monkey_face {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="hear-no-evil monkey üôâ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HEAR_NO_EVIL_MONKEY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HEAR_NO_EVIL_MONKEY); // üôâ (`U+1F649`)"] #[doc="# assert_eq!(HEAR_NO_EVIL_MONKEY.to_string().as_str(), \"üôâ\");"]
#[doc="```"]
pub static HEAR_NO_EVIL_MONKEY :  Emoji = Emoji::new("hear-no-evil monkey", Version(0, 6), "üôâ"); // hear-no-evil monkey
		
		#[doc="see-no-evil monkey üôà"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SEE_NO_EVIL_MONKEY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SEE_NO_EVIL_MONKEY); // üôà (`U+1F648`)"] #[doc="# assert_eq!(SEE_NO_EVIL_MONKEY.to_string().as_str(), \"üôà\");"]
#[doc="```"]
pub static SEE_NO_EVIL_MONKEY :  Emoji = Emoji::new("see-no-evil monkey", Version(0, 6), "üôà"); // see-no-evil monkey
		
		#[doc="speak-no-evil monkey üôä"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPEAK_NO_EVIL_MONKEY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPEAK_NO_EVIL_MONKEY); // üôä (`U+1F64A`)"] #[doc="# assert_eq!(SPEAK_NO_EVIL_MONKEY.to_string().as_str(), \"üôä\");"]
#[doc="```"]
pub static SPEAK_NO_EVIL_MONKEY :  Emoji = Emoji::new("speak-no-evil monkey", Version(0, 6), "üôä"); // speak-no-evil monkey
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // HEAR_NO_EVIL_MONKEY
				
				&HEAR_NO_EVIL_MONKEY,
				
			],
			
			&[ // SEE_NO_EVIL_MONKEY
				
				&SEE_NO_EVIL_MONKEY,
				
			],
			
			&[ // SPEAK_NO_EVIL_MONKEY
				
				&SPEAK_NO_EVIL_MONKEY,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&HEAR_NO_EVIL_MONKEY, // HEAR_NO_EVIL_MONKEY
				
			
				
				&SEE_NO_EVIL_MONKEY, // SEE_NO_EVIL_MONKEY
				
			
				
				&SPEAK_NO_EVIL_MONKEY, // SPEAK_NO_EVIL_MONKEY
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // monkey_face
	


	// Emoji iterators

	/// Returns an iterator over all emoji variants of these subgroups grouped by base emojis
	pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
		core::iter::empty()
		
			.chain(cat_face::all_variants())
		
			.chain(emotion::all_variants())
		
			.chain(face_affection::all_variants())
		
			.chain(face_concerned::all_variants())
		
			.chain(face_costume::all_variants())
		
			.chain(face_glasses::all_variants())
		
			.chain(face_hand::all_variants())
		
			.chain(face_hat::all_variants())
		
			.chain(face_negative::all_variants())
		
			.chain(face_neutral_skeptical::all_variants())
		
			.chain(face_sleepy::all_variants())
		
			.chain(face_smiling::all_variants())
		
			.chain(face_tongue::all_variants())
		
			.chain(face_unwell::all_variants())
		
			.chain(monkey_face::all_variants())
		
	}

	/// Returns an iterator over all base emojis of these subgroups (i.e. one for each static)
	pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
		core::iter::empty()
		
			.chain(cat_face::base_emojis())
		
			.chain(emotion::base_emojis())
		
			.chain(face_affection::base_emojis())
		
			.chain(face_concerned::base_emojis())
		
			.chain(face_costume::base_emojis())
		
			.chain(face_glasses::base_emojis())
		
			.chain(face_hand::base_emojis())
		
			.chain(face_hat::base_emojis())
		
			.chain(face_negative::base_emojis())
		
			.chain(face_neutral_skeptical::base_emojis())
		
			.chain(face_sleepy::base_emojis())
		
			.chain(face_smiling::base_emojis())
		
			.chain(face_tongue::base_emojis())
		
			.chain(face_unwell::base_emojis())
		
			.chain(monkey_face::base_emojis())
		
	}

} // smileys_and_emotion

/// symbols üÜéüîôüì∂
pub mod symbols {
	use crate::emojis::Emoji;

	
	/// alphanum üÜéüÖ∞Ô∏èüÖ±Ô∏è
	pub mod alphanum {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="AB button (blood type) üÜé"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::AB_BUTTON_BLOOD_TYPE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", AB_BUTTON_BLOOD_TYPE); // üÜé (`U+1F18E`)"] #[doc="# assert_eq!(AB_BUTTON_BLOOD_TYPE.to_string().as_str(), \"üÜé\");"]
#[doc="```"]
pub static AB_BUTTON_BLOOD_TYPE :  Emoji = Emoji::new("AB button (blood type)", Version(0, 6), "üÜé"); // AB button (blood type)
		
		#[doc="A button (blood type) üÖ∞Ô∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::A_BUTTON_BLOOD_TYPE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", A_BUTTON_BLOOD_TYPE); // üÖ∞Ô∏è (`U+1F170 U+FE0F`)"] #[doc="# assert_eq!(A_BUTTON_BLOOD_TYPE.to_string().as_str(), \"üÖ∞Ô∏è\");"]
#[doc="```"]
pub static A_BUTTON_BLOOD_TYPE :  Emoji = Emoji::new("A button (blood type)", Version(0, 6), "üÖ∞Ô∏è"); // A button (blood type)
		
		#[doc="B button (blood type) üÖ±Ô∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::B_BUTTON_BLOOD_TYPE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", B_BUTTON_BLOOD_TYPE); // üÖ±Ô∏è (`U+1F171 U+FE0F`)"] #[doc="# assert_eq!(B_BUTTON_BLOOD_TYPE.to_string().as_str(), \"üÖ±Ô∏è\");"]
#[doc="```"]
pub static B_BUTTON_BLOOD_TYPE :  Emoji = Emoji::new("B button (blood type)", Version(0, 6), "üÖ±Ô∏è"); // B button (blood type)
		
		#[doc="circled M ‚ìÇÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CIRCLED_M;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CIRCLED_M); // ‚ìÇÔ∏è (`U+24C2 U+FE0F`)"] #[doc="# assert_eq!(CIRCLED_M.to_string().as_str(), \"‚ìÇÔ∏è\");"]
#[doc="```"]
pub static CIRCLED_M :  Emoji = Emoji::new("circled M", Version(0, 6), "‚ìÇÔ∏è"); // circled M
		
		#[doc="CL button üÜë"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CL_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CL_BUTTON); // üÜë (`U+1F191`)"] #[doc="# assert_eq!(CL_BUTTON.to_string().as_str(), \"üÜë\");"]
#[doc="```"]
pub static CL_BUTTON :  Emoji = Emoji::new("CL button", Version(0, 6), "üÜë"); // CL button
		
		#[doc="COOL button üÜí"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COOL_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COOL_BUTTON); // üÜí (`U+1F192`)"] #[doc="# assert_eq!(COOL_BUTTON.to_string().as_str(), \"üÜí\");"]
#[doc="```"]
pub static COOL_BUTTON :  Emoji = Emoji::new("COOL button", Version(0, 6), "üÜí"); // COOL button
		
		#[doc="FREE button üÜì"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FREE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FREE_BUTTON); // üÜì (`U+1F193`)"] #[doc="# assert_eq!(FREE_BUTTON.to_string().as_str(), \"üÜì\");"]
#[doc="```"]
pub static FREE_BUTTON :  Emoji = Emoji::new("FREE button", Version(0, 6), "üÜì"); // FREE button
		
		#[doc="ID button üÜî"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ID_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ID_BUTTON); // üÜî (`U+1F194`)"] #[doc="# assert_eq!(ID_BUTTON.to_string().as_str(), \"üÜî\");"]
#[doc="```"]
pub static ID_BUTTON :  Emoji = Emoji::new("ID button", Version(0, 6), "üÜî"); // ID button
		
		#[doc="information ‚ÑπÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::INFORMATION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", INFORMATION); // ‚ÑπÔ∏è (`U+2139 U+FE0F`)"] #[doc="# assert_eq!(INFORMATION.to_string().as_str(), \"‚ÑπÔ∏è\");"]
#[doc="```"]
pub static INFORMATION :  Emoji = Emoji::new("information", Version(0, 6), "‚ÑπÔ∏è"); // information
		
		#[doc="input latin letters üî§"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::INPUT_LATIN_LETTERS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", INPUT_LATIN_LETTERS); // üî§ (`U+1F524`)"] #[doc="# assert_eq!(INPUT_LATIN_LETTERS.to_string().as_str(), \"üî§\");"]
#[doc="```"]
pub static INPUT_LATIN_LETTERS :  Emoji = Emoji::new("input latin letters", Version(0, 6), "üî§"); // input latin letters
		
		#[doc="input latin lowercase üî°"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::INPUT_LATIN_LOWERCASE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", INPUT_LATIN_LOWERCASE); // üî° (`U+1F521`)"] #[doc="# assert_eq!(INPUT_LATIN_LOWERCASE.to_string().as_str(), \"üî°\");"]
#[doc="```"]
pub static INPUT_LATIN_LOWERCASE :  Emoji = Emoji::new("input latin lowercase", Version(0, 6), "üî°"); // input latin lowercase
		
		#[doc="input latin uppercase üî†"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::INPUT_LATIN_UPPERCASE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", INPUT_LATIN_UPPERCASE); // üî† (`U+1F520`)"] #[doc="# assert_eq!(INPUT_LATIN_UPPERCASE.to_string().as_str(), \"üî†\");"]
#[doc="```"]
pub static INPUT_LATIN_UPPERCASE :  Emoji = Emoji::new("input latin uppercase", Version(0, 6), "üî†"); // input latin uppercase
		
		#[doc="input numbers üî¢"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::INPUT_NUMBERS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", INPUT_NUMBERS); // üî¢ (`U+1F522`)"] #[doc="# assert_eq!(INPUT_NUMBERS.to_string().as_str(), \"üî¢\");"]
#[doc="```"]
pub static INPUT_NUMBERS :  Emoji = Emoji::new("input numbers", Version(0, 6), "üî¢"); // input numbers
		
		#[doc="input symbols üî£"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::INPUT_SYMBOLS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", INPUT_SYMBOLS); // üî£ (`U+1F523`)"] #[doc="# assert_eq!(INPUT_SYMBOLS.to_string().as_str(), \"üî£\");"]
#[doc="```"]
pub static INPUT_SYMBOLS :  Emoji = Emoji::new("input symbols", Version(0, 6), "üî£"); // input symbols
		
		#[doc="Japanese ‚Äúacceptable‚Äù button üâë"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_ACCEPTABLE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_ACCEPTABLE_BUTTON); // üâë (`U+1F251`)"] #[doc="# assert_eq!(JAPANESE_ACCEPTABLE_BUTTON.to_string().as_str(), \"üâë\");"]
#[doc="```"]
pub static JAPANESE_ACCEPTABLE_BUTTON :  Emoji = Emoji::new("Japanese ‚Äúacceptable‚Äù button", Version(0, 6), "üâë"); // Japanese ‚Äúacceptable‚Äù button
		
		#[doc="Japanese ‚Äúapplication‚Äù button üà∏"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_APPLICATION_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_APPLICATION_BUTTON); // üà∏ (`U+1F238`)"] #[doc="# assert_eq!(JAPANESE_APPLICATION_BUTTON.to_string().as_str(), \"üà∏\");"]
#[doc="```"]
pub static JAPANESE_APPLICATION_BUTTON :  Emoji = Emoji::new("Japanese ‚Äúapplication‚Äù button", Version(0, 6), "üà∏"); // Japanese ‚Äúapplication‚Äù button
		
		#[doc="Japanese ‚Äúbargain‚Äù button üâê"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_BARGAIN_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_BARGAIN_BUTTON); // üâê (`U+1F250`)"] #[doc="# assert_eq!(JAPANESE_BARGAIN_BUTTON.to_string().as_str(), \"üâê\");"]
#[doc="```"]
pub static JAPANESE_BARGAIN_BUTTON :  Emoji = Emoji::new("Japanese ‚Äúbargain‚Äù button", Version(0, 6), "üâê"); // Japanese ‚Äúbargain‚Äù button
		
		#[doc="Japanese ‚Äúcongratulations‚Äù button „äóÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_CONGRATULATIONS_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_CONGRATULATIONS_BUTTON); // „äóÔ∏è (`U+3297 U+FE0F`)"] #[doc="# assert_eq!(JAPANESE_CONGRATULATIONS_BUTTON.to_string().as_str(), \"„äóÔ∏è\");"]
#[doc="```"]
pub static JAPANESE_CONGRATULATIONS_BUTTON :  Emoji = Emoji::new("Japanese ‚Äúcongratulations‚Äù button", Version(0, 6), "„äóÔ∏è"); // Japanese ‚Äúcongratulations‚Äù button
		
		#[doc="Japanese ‚Äúdiscount‚Äù button üàπ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_DISCOUNT_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_DISCOUNT_BUTTON); // üàπ (`U+1F239`)"] #[doc="# assert_eq!(JAPANESE_DISCOUNT_BUTTON.to_string().as_str(), \"üàπ\");"]
#[doc="```"]
pub static JAPANESE_DISCOUNT_BUTTON :  Emoji = Emoji::new("Japanese ‚Äúdiscount‚Äù button", Version(0, 6), "üàπ"); // Japanese ‚Äúdiscount‚Äù button
		
		#[doc="Japanese ‚Äúfree of charge‚Äù button üàö"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_FREE_OF_CHARGE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_FREE_OF_CHARGE_BUTTON); // üàö (`U+1F21A`)"] #[doc="# assert_eq!(JAPANESE_FREE_OF_CHARGE_BUTTON.to_string().as_str(), \"üàö\");"]
#[doc="```"]
pub static JAPANESE_FREE_OF_CHARGE_BUTTON :  Emoji = Emoji::new("Japanese ‚Äúfree of charge‚Äù button", Version(0, 6), "üàö"); // Japanese ‚Äúfree of charge‚Äù button
		
		#[doc="Japanese ‚Äúhere‚Äù button üàÅ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_HERE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_HERE_BUTTON); // üàÅ (`U+1F201`)"] #[doc="# assert_eq!(JAPANESE_HERE_BUTTON.to_string().as_str(), \"üàÅ\");"]
#[doc="```"]
pub static JAPANESE_HERE_BUTTON :  Emoji = Emoji::new("Japanese ‚Äúhere‚Äù button", Version(0, 6), "üàÅ"); // Japanese ‚Äúhere‚Äù button
		
		#[doc="Japanese ‚Äúmonthly amount‚Äù button üà∑Ô∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_MONTHLY_AMOUNT_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_MONTHLY_AMOUNT_BUTTON); // üà∑Ô∏è (`U+1F237 U+FE0F`)"] #[doc="# assert_eq!(JAPANESE_MONTHLY_AMOUNT_BUTTON.to_string().as_str(), \"üà∑Ô∏è\");"]
#[doc="```"]
pub static JAPANESE_MONTHLY_AMOUNT_BUTTON :  Emoji = Emoji::new("Japanese ‚Äúmonthly amount‚Äù button", Version(0, 6), "üà∑Ô∏è"); // Japanese ‚Äúmonthly amount‚Äù button
		
		#[doc="Japanese ‚Äúnot free of charge‚Äù button üà∂"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_NOT_FREE_OF_CHARGE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_NOT_FREE_OF_CHARGE_BUTTON); // üà∂ (`U+1F236`)"] #[doc="# assert_eq!(JAPANESE_NOT_FREE_OF_CHARGE_BUTTON.to_string().as_str(), \"üà∂\");"]
#[doc="```"]
pub static JAPANESE_NOT_FREE_OF_CHARGE_BUTTON :  Emoji = Emoji::new("Japanese ‚Äúnot free of charge‚Äù button", Version(0, 6), "üà∂"); // Japanese ‚Äúnot free of charge‚Äù button
		
		#[doc="Japanese ‚Äúno vacancy‚Äù button üàµ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_NO_VACANCY_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_NO_VACANCY_BUTTON); // üàµ (`U+1F235`)"] #[doc="# assert_eq!(JAPANESE_NO_VACANCY_BUTTON.to_string().as_str(), \"üàµ\");"]
#[doc="```"]
pub static JAPANESE_NO_VACANCY_BUTTON :  Emoji = Emoji::new("Japanese ‚Äúno vacancy‚Äù button", Version(0, 6), "üàµ"); // Japanese ‚Äúno vacancy‚Äù button
		
		#[doc="Japanese ‚Äúopen for business‚Äù button üà∫"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_OPEN_FOR_BUSINESS_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_OPEN_FOR_BUSINESS_BUTTON); // üà∫ (`U+1F23A`)"] #[doc="# assert_eq!(JAPANESE_OPEN_FOR_BUSINESS_BUTTON.to_string().as_str(), \"üà∫\");"]
#[doc="```"]
pub static JAPANESE_OPEN_FOR_BUSINESS_BUTTON :  Emoji = Emoji::new("Japanese ‚Äúopen for business‚Äù button", Version(0, 6), "üà∫"); // Japanese ‚Äúopen for business‚Äù button
		
		#[doc="Japanese ‚Äúpassing grade‚Äù button üà¥"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_PASSING_GRADE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_PASSING_GRADE_BUTTON); // üà¥ (`U+1F234`)"] #[doc="# assert_eq!(JAPANESE_PASSING_GRADE_BUTTON.to_string().as_str(), \"üà¥\");"]
#[doc="```"]
pub static JAPANESE_PASSING_GRADE_BUTTON :  Emoji = Emoji::new("Japanese ‚Äúpassing grade‚Äù button", Version(0, 6), "üà¥"); // Japanese ‚Äúpassing grade‚Äù button
		
		#[doc="Japanese ‚Äúprohibited‚Äù button üà≤"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_PROHIBITED_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_PROHIBITED_BUTTON); // üà≤ (`U+1F232`)"] #[doc="# assert_eq!(JAPANESE_PROHIBITED_BUTTON.to_string().as_str(), \"üà≤\");"]
#[doc="```"]
pub static JAPANESE_PROHIBITED_BUTTON :  Emoji = Emoji::new("Japanese ‚Äúprohibited‚Äù button", Version(0, 6), "üà≤"); // Japanese ‚Äúprohibited‚Äù button
		
		#[doc="Japanese ‚Äúreserved‚Äù button üàØ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_RESERVED_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_RESERVED_BUTTON); // üàØ (`U+1F22F`)"] #[doc="# assert_eq!(JAPANESE_RESERVED_BUTTON.to_string().as_str(), \"üàØ\");"]
#[doc="```"]
pub static JAPANESE_RESERVED_BUTTON :  Emoji = Emoji::new("Japanese ‚Äúreserved‚Äù button", Version(0, 6), "üàØ"); // Japanese ‚Äúreserved‚Äù button
		
		#[doc="Japanese ‚Äúsecret‚Äù button „äôÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_SECRET_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_SECRET_BUTTON); // „äôÔ∏è (`U+3299 U+FE0F`)"] #[doc="# assert_eq!(JAPANESE_SECRET_BUTTON.to_string().as_str(), \"„äôÔ∏è\");"]
#[doc="```"]
pub static JAPANESE_SECRET_BUTTON :  Emoji = Emoji::new("Japanese ‚Äúsecret‚Äù button", Version(0, 6), "„äôÔ∏è"); // Japanese ‚Äúsecret‚Äù button
		
		#[doc="Japanese ‚Äúservice charge‚Äù button üàÇÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_SERVICE_CHARGE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_SERVICE_CHARGE_BUTTON); // üàÇÔ∏è (`U+1F202 U+FE0F`)"] #[doc="# assert_eq!(JAPANESE_SERVICE_CHARGE_BUTTON.to_string().as_str(), \"üàÇÔ∏è\");"]
#[doc="```"]
pub static JAPANESE_SERVICE_CHARGE_BUTTON :  Emoji = Emoji::new("Japanese ‚Äúservice charge‚Äù button", Version(0, 6), "üàÇÔ∏è"); // Japanese ‚Äúservice charge‚Äù button
		
		#[doc="Japanese ‚Äúvacancy‚Äù button üà≥"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_VACANCY_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_VACANCY_BUTTON); // üà≥ (`U+1F233`)"] #[doc="# assert_eq!(JAPANESE_VACANCY_BUTTON.to_string().as_str(), \"üà≥\");"]
#[doc="```"]
pub static JAPANESE_VACANCY_BUTTON :  Emoji = Emoji::new("Japanese ‚Äúvacancy‚Äù button", Version(0, 6), "üà≥"); // Japanese ‚Äúvacancy‚Äù button
		
		#[doc="NEW button üÜï"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NEW_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NEW_BUTTON); // üÜï (`U+1F195`)"] #[doc="# assert_eq!(NEW_BUTTON.to_string().as_str(), \"üÜï\");"]
#[doc="```"]
pub static NEW_BUTTON :  Emoji = Emoji::new("NEW button", Version(0, 6), "üÜï"); // NEW button
		
		#[doc="NG button üÜñ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NG_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NG_BUTTON); // üÜñ (`U+1F196`)"] #[doc="# assert_eq!(NG_BUTTON.to_string().as_str(), \"üÜñ\");"]
#[doc="```"]
pub static NG_BUTTON :  Emoji = Emoji::new("NG button", Version(0, 6), "üÜñ"); // NG button
		
		#[doc="OK button üÜó"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OK_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OK_BUTTON); // üÜó (`U+1F197`)"] #[doc="# assert_eq!(OK_BUTTON.to_string().as_str(), \"üÜó\");"]
#[doc="```"]
pub static OK_BUTTON :  Emoji = Emoji::new("OK button", Version(0, 6), "üÜó"); // OK button
		
		#[doc="O button (blood type) üÖæÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::O_BUTTON_BLOOD_TYPE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", O_BUTTON_BLOOD_TYPE); // üÖæÔ∏è (`U+1F17E U+FE0F`)"] #[doc="# assert_eq!(O_BUTTON_BLOOD_TYPE.to_string().as_str(), \"üÖæÔ∏è\");"]
#[doc="```"]
pub static O_BUTTON_BLOOD_TYPE :  Emoji = Emoji::new("O button (blood type)", Version(0, 6), "üÖæÔ∏è"); // O button (blood type)
		
		#[doc="P button üÖøÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::P_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", P_BUTTON); // üÖøÔ∏è (`U+1F17F U+FE0F`)"] #[doc="# assert_eq!(P_BUTTON.to_string().as_str(), \"üÖøÔ∏è\");"]
#[doc="```"]
pub static P_BUTTON :  Emoji = Emoji::new("P button", Version(0, 6), "üÖøÔ∏è"); // P button
		
		#[doc="SOS button üÜò"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SOS_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SOS_BUTTON); // üÜò (`U+1F198`)"] #[doc="# assert_eq!(SOS_BUTTON.to_string().as_str(), \"üÜò\");"]
#[doc="```"]
pub static SOS_BUTTON :  Emoji = Emoji::new("SOS button", Version(0, 6), "üÜò"); // SOS button
		
		#[doc="UP! button üÜô"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::UP_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", UP_BUTTON); // üÜô (`U+1F199`)"] #[doc="# assert_eq!(UP_BUTTON.to_string().as_str(), \"üÜô\");"]
#[doc="```"]
pub static UP_BUTTON :  Emoji = Emoji::new("UP! button", Version(0, 6), "üÜô"); // UP! button
		
		#[doc="VS button üÜö"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::VS_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", VS_BUTTON); // üÜö (`U+1F19A`)"] #[doc="# assert_eq!(VS_BUTTON.to_string().as_str(), \"üÜö\");"]
#[doc="```"]
pub static VS_BUTTON :  Emoji = Emoji::new("VS button", Version(0, 6), "üÜö"); // VS button
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // AB_BUTTON_BLOOD_TYPE
				
				&AB_BUTTON_BLOOD_TYPE,
				
			],
			
			&[ // A_BUTTON_BLOOD_TYPE
				
				&A_BUTTON_BLOOD_TYPE,
				
			],
			
			&[ // B_BUTTON_BLOOD_TYPE
				
				&B_BUTTON_BLOOD_TYPE,
				
			],
			
			&[ // CIRCLED_M
				
				&CIRCLED_M,
				
			],
			
			&[ // CL_BUTTON
				
				&CL_BUTTON,
				
			],
			
			&[ // COOL_BUTTON
				
				&COOL_BUTTON,
				
			],
			
			&[ // FREE_BUTTON
				
				&FREE_BUTTON,
				
			],
			
			&[ // ID_BUTTON
				
				&ID_BUTTON,
				
			],
			
			&[ // INFORMATION
				
				&INFORMATION,
				
			],
			
			&[ // INPUT_LATIN_LETTERS
				
				&INPUT_LATIN_LETTERS,
				
			],
			
			&[ // INPUT_LATIN_LOWERCASE
				
				&INPUT_LATIN_LOWERCASE,
				
			],
			
			&[ // INPUT_LATIN_UPPERCASE
				
				&INPUT_LATIN_UPPERCASE,
				
			],
			
			&[ // INPUT_NUMBERS
				
				&INPUT_NUMBERS,
				
			],
			
			&[ // INPUT_SYMBOLS
				
				&INPUT_SYMBOLS,
				
			],
			
			&[ // JAPANESE_ACCEPTABLE_BUTTON
				
				&JAPANESE_ACCEPTABLE_BUTTON,
				
			],
			
			&[ // JAPANESE_APPLICATION_BUTTON
				
				&JAPANESE_APPLICATION_BUTTON,
				
			],
			
			&[ // JAPANESE_BARGAIN_BUTTON
				
				&JAPANESE_BARGAIN_BUTTON,
				
			],
			
			&[ // JAPANESE_CONGRATULATIONS_BUTTON
				
				&JAPANESE_CONGRATULATIONS_BUTTON,
				
			],
			
			&[ // JAPANESE_DISCOUNT_BUTTON
				
				&JAPANESE_DISCOUNT_BUTTON,
				
			],
			
			&[ // JAPANESE_FREE_OF_CHARGE_BUTTON
				
				&JAPANESE_FREE_OF_CHARGE_BUTTON,
				
			],
			
			&[ // JAPANESE_HERE_BUTTON
				
				&JAPANESE_HERE_BUTTON,
				
			],
			
			&[ // JAPANESE_MONTHLY_AMOUNT_BUTTON
				
				&JAPANESE_MONTHLY_AMOUNT_BUTTON,
				
			],
			
			&[ // JAPANESE_NOT_FREE_OF_CHARGE_BUTTON
				
				&JAPANESE_NOT_FREE_OF_CHARGE_BUTTON,
				
			],
			
			&[ // JAPANESE_NO_VACANCY_BUTTON
				
				&JAPANESE_NO_VACANCY_BUTTON,
				
			],
			
			&[ // JAPANESE_OPEN_FOR_BUSINESS_BUTTON
				
				&JAPANESE_OPEN_FOR_BUSINESS_BUTTON,
				
			],
			
			&[ // JAPANESE_PASSING_GRADE_BUTTON
				
				&JAPANESE_PASSING_GRADE_BUTTON,
				
			],
			
			&[ // JAPANESE_PROHIBITED_BUTTON
				
				&JAPANESE_PROHIBITED_BUTTON,
				
			],
			
			&[ // JAPANESE_RESERVED_BUTTON
				
				&JAPANESE_RESERVED_BUTTON,
				
			],
			
			&[ // JAPANESE_SECRET_BUTTON
				
				&JAPANESE_SECRET_BUTTON,
				
			],
			
			&[ // JAPANESE_SERVICE_CHARGE_BUTTON
				
				&JAPANESE_SERVICE_CHARGE_BUTTON,
				
			],
			
			&[ // JAPANESE_VACANCY_BUTTON
				
				&JAPANESE_VACANCY_BUTTON,
				
			],
			
			&[ // NEW_BUTTON
				
				&NEW_BUTTON,
				
			],
			
			&[ // NG_BUTTON
				
				&NG_BUTTON,
				
			],
			
			&[ // OK_BUTTON
				
				&OK_BUTTON,
				
			],
			
			&[ // O_BUTTON_BLOOD_TYPE
				
				&O_BUTTON_BLOOD_TYPE,
				
			],
			
			&[ // P_BUTTON
				
				&P_BUTTON,
				
			],
			
			&[ // SOS_BUTTON
				
				&SOS_BUTTON,
				
			],
			
			&[ // UP_BUTTON
				
				&UP_BUTTON,
				
			],
			
			&[ // VS_BUTTON
				
				&VS_BUTTON,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&AB_BUTTON_BLOOD_TYPE, // AB_BUTTON_BLOOD_TYPE
				
			
				
				&A_BUTTON_BLOOD_TYPE, // A_BUTTON_BLOOD_TYPE
				
			
				
				&B_BUTTON_BLOOD_TYPE, // B_BUTTON_BLOOD_TYPE
				
			
				
				&CIRCLED_M, // CIRCLED_M
				
			
				
				&CL_BUTTON, // CL_BUTTON
				
			
				
				&COOL_BUTTON, // COOL_BUTTON
				
			
				
				&FREE_BUTTON, // FREE_BUTTON
				
			
				
				&ID_BUTTON, // ID_BUTTON
				
			
				
				&INFORMATION, // INFORMATION
				
			
				
				&INPUT_LATIN_LETTERS, // INPUT_LATIN_LETTERS
				
			
				
				&INPUT_LATIN_LOWERCASE, // INPUT_LATIN_LOWERCASE
				
			
				
				&INPUT_LATIN_UPPERCASE, // INPUT_LATIN_UPPERCASE
				
			
				
				&INPUT_NUMBERS, // INPUT_NUMBERS
				
			
				
				&INPUT_SYMBOLS, // INPUT_SYMBOLS
				
			
				
				&JAPANESE_ACCEPTABLE_BUTTON, // JAPANESE_ACCEPTABLE_BUTTON
				
			
				
				&JAPANESE_APPLICATION_BUTTON, // JAPANESE_APPLICATION_BUTTON
				
			
				
				&JAPANESE_BARGAIN_BUTTON, // JAPANESE_BARGAIN_BUTTON
				
			
				
				&JAPANESE_CONGRATULATIONS_BUTTON, // JAPANESE_CONGRATULATIONS_BUTTON
				
			
				
				&JAPANESE_DISCOUNT_BUTTON, // JAPANESE_DISCOUNT_BUTTON
				
			
				
				&JAPANESE_FREE_OF_CHARGE_BUTTON, // JAPANESE_FREE_OF_CHARGE_BUTTON
				
			
				
				&JAPANESE_HERE_BUTTON, // JAPANESE_HERE_BUTTON
				
			
				
				&JAPANESE_MONTHLY_AMOUNT_BUTTON, // JAPANESE_MONTHLY_AMOUNT_BUTTON
				
			
				
				&JAPANESE_NOT_FREE_OF_CHARGE_BUTTON, // JAPANESE_NOT_FREE_OF_CHARGE_BUTTON
				
			
				
				&JAPANESE_NO_VACANCY_BUTTON, // JAPANESE_NO_VACANCY_BUTTON
				
			
				
				&JAPANESE_OPEN_FOR_BUSINESS_BUTTON, // JAPANESE_OPEN_FOR_BUSINESS_BUTTON
				
			
				
				&JAPANESE_PASSING_GRADE_BUTTON, // JAPANESE_PASSING_GRADE_BUTTON
				
			
				
				&JAPANESE_PROHIBITED_BUTTON, // JAPANESE_PROHIBITED_BUTTON
				
			
				
				&JAPANESE_RESERVED_BUTTON, // JAPANESE_RESERVED_BUTTON
				
			
				
				&JAPANESE_SECRET_BUTTON, // JAPANESE_SECRET_BUTTON
				
			
				
				&JAPANESE_SERVICE_CHARGE_BUTTON, // JAPANESE_SERVICE_CHARGE_BUTTON
				
			
				
				&JAPANESE_VACANCY_BUTTON, // JAPANESE_VACANCY_BUTTON
				
			
				
				&NEW_BUTTON, // NEW_BUTTON
				
			
				
				&NG_BUTTON, // NG_BUTTON
				
			
				
				&OK_BUTTON, // OK_BUTTON
				
			
				
				&O_BUTTON_BLOOD_TYPE, // O_BUTTON_BLOOD_TYPE
				
			
				
				&P_BUTTON, // P_BUTTON
				
			
				
				&SOS_BUTTON, // SOS_BUTTON
				
			
				
				&UP_BUTTON, // UP_BUTTON
				
			
				
				&VS_BUTTON, // VS_BUTTON
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // alphanum
	
	/// arrow üîôüîÉüîÑ
	pub mod arrow {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="BACK arrow üîô"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BACK_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BACK_ARROW); // üîô (`U+1F519`)"] #[doc="# assert_eq!(BACK_ARROW.to_string().as_str(), \"üîô\");"]
#[doc="```"]
pub static BACK_ARROW :  Emoji = Emoji::new("BACK arrow", Version(0, 6), "üîô"); // BACK arrow
		
		#[doc="clockwise vertical arrows üîÉ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLOCKWISE_VERTICAL_ARROWS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLOCKWISE_VERTICAL_ARROWS); // üîÉ (`U+1F503`)"] #[doc="# assert_eq!(CLOCKWISE_VERTICAL_ARROWS.to_string().as_str(), \"üîÉ\");"]
#[doc="```"]
pub static CLOCKWISE_VERTICAL_ARROWS :  Emoji = Emoji::new("clockwise vertical arrows", Version(0, 6), "üîÉ"); // clockwise vertical arrows
		
		#[doc="counterclockwise arrows button üîÑ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COUNTERCLOCKWISE_ARROWS_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COUNTERCLOCKWISE_ARROWS_BUTTON); // üîÑ (`U+1F504`)"] #[doc="# assert_eq!(COUNTERCLOCKWISE_ARROWS_BUTTON.to_string().as_str(), \"üîÑ\");"]
#[doc="```"]
pub static COUNTERCLOCKWISE_ARROWS_BUTTON :  Emoji = Emoji::new("counterclockwise arrows button", Version(1, 0), "üîÑ"); // counterclockwise arrows button
		
		#[doc="down arrow ‚¨áÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOWN_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOWN_ARROW); // ‚¨áÔ∏è (`U+2B07 U+FE0F`)"] #[doc="# assert_eq!(DOWN_ARROW.to_string().as_str(), \"‚¨áÔ∏è\");"]
#[doc="```"]
pub static DOWN_ARROW :  Emoji = Emoji::new("down arrow", Version(0, 6), "‚¨áÔ∏è"); // down arrow
		
		#[doc="down-left arrow ‚ÜôÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOWN_LEFT_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOWN_LEFT_ARROW); // ‚ÜôÔ∏è (`U+2199 U+FE0F`)"] #[doc="# assert_eq!(DOWN_LEFT_ARROW.to_string().as_str(), \"‚ÜôÔ∏è\");"]
#[doc="```"]
pub static DOWN_LEFT_ARROW :  Emoji = Emoji::new("down-left arrow", Version(0, 6), "‚ÜôÔ∏è"); // down-left arrow
		
		#[doc="down-right arrow ‚ÜòÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOWN_RIGHT_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOWN_RIGHT_ARROW); // ‚ÜòÔ∏è (`U+2198 U+FE0F`)"] #[doc="# assert_eq!(DOWN_RIGHT_ARROW.to_string().as_str(), \"‚ÜòÔ∏è\");"]
#[doc="```"]
pub static DOWN_RIGHT_ARROW :  Emoji = Emoji::new("down-right arrow", Version(0, 6), "‚ÜòÔ∏è"); // down-right arrow
		
		#[doc="END arrow üîö"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::END_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", END_ARROW); // üîö (`U+1F51A`)"] #[doc="# assert_eq!(END_ARROW.to_string().as_str(), \"üîö\");"]
#[doc="```"]
pub static END_ARROW :  Emoji = Emoji::new("END arrow", Version(0, 6), "üîö"); // END arrow
		
		#[doc="left arrow ‚¨ÖÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEFT_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEFT_ARROW); // ‚¨ÖÔ∏è (`U+2B05 U+FE0F`)"] #[doc="# assert_eq!(LEFT_ARROW.to_string().as_str(), \"‚¨ÖÔ∏è\");"]
#[doc="```"]
pub static LEFT_ARROW :  Emoji = Emoji::new("left arrow", Version(0, 6), "‚¨ÖÔ∏è"); // left arrow
		
		#[doc="left arrow curving right ‚Ü™Ô∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEFT_ARROW_CURVING_RIGHT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEFT_ARROW_CURVING_RIGHT); // ‚Ü™Ô∏è (`U+21AA U+FE0F`)"] #[doc="# assert_eq!(LEFT_ARROW_CURVING_RIGHT.to_string().as_str(), \"‚Ü™Ô∏è\");"]
#[doc="```"]
pub static LEFT_ARROW_CURVING_RIGHT :  Emoji = Emoji::new("left arrow curving right", Version(0, 6), "‚Ü™Ô∏è"); // left arrow curving right
		
		#[doc="left-right arrow ‚ÜîÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEFT_RIGHT_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEFT_RIGHT_ARROW); // ‚ÜîÔ∏è (`U+2194 U+FE0F`)"] #[doc="# assert_eq!(LEFT_RIGHT_ARROW.to_string().as_str(), \"‚ÜîÔ∏è\");"]
#[doc="```"]
pub static LEFT_RIGHT_ARROW :  Emoji = Emoji::new("left-right arrow", Version(0, 6), "‚ÜîÔ∏è"); // left-right arrow
		
		#[doc="ON! arrow üîõ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ON_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ON_ARROW); // üîõ (`U+1F51B`)"] #[doc="# assert_eq!(ON_ARROW.to_string().as_str(), \"üîõ\");"]
#[doc="```"]
pub static ON_ARROW :  Emoji = Emoji::new("ON! arrow", Version(0, 6), "üîõ"); // ON! arrow
		
		#[doc="right arrow ‚û°Ô∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RIGHT_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RIGHT_ARROW); // ‚û°Ô∏è (`U+27A1 U+FE0F`)"] #[doc="# assert_eq!(RIGHT_ARROW.to_string().as_str(), \"‚û°Ô∏è\");"]
#[doc="```"]
pub static RIGHT_ARROW :  Emoji = Emoji::new("right arrow", Version(0, 6), "‚û°Ô∏è"); // right arrow
		
		#[doc="right arrow curving down ‚§µÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RIGHT_ARROW_CURVING_DOWN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RIGHT_ARROW_CURVING_DOWN); // ‚§µÔ∏è (`U+2935 U+FE0F`)"] #[doc="# assert_eq!(RIGHT_ARROW_CURVING_DOWN.to_string().as_str(), \"‚§µÔ∏è\");"]
#[doc="```"]
pub static RIGHT_ARROW_CURVING_DOWN :  Emoji = Emoji::new("right arrow curving down", Version(0, 6), "‚§µÔ∏è"); // right arrow curving down
		
		#[doc="right arrow curving left ‚Ü©Ô∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RIGHT_ARROW_CURVING_LEFT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RIGHT_ARROW_CURVING_LEFT); // ‚Ü©Ô∏è (`U+21A9 U+FE0F`)"] #[doc="# assert_eq!(RIGHT_ARROW_CURVING_LEFT.to_string().as_str(), \"‚Ü©Ô∏è\");"]
#[doc="```"]
pub static RIGHT_ARROW_CURVING_LEFT :  Emoji = Emoji::new("right arrow curving left", Version(0, 6), "‚Ü©Ô∏è"); // right arrow curving left
		
		#[doc="right arrow curving up ‚§¥Ô∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RIGHT_ARROW_CURVING_UP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RIGHT_ARROW_CURVING_UP); // ‚§¥Ô∏è (`U+2934 U+FE0F`)"] #[doc="# assert_eq!(RIGHT_ARROW_CURVING_UP.to_string().as_str(), \"‚§¥Ô∏è\");"]
#[doc="```"]
pub static RIGHT_ARROW_CURVING_UP :  Emoji = Emoji::new("right arrow curving up", Version(0, 6), "‚§¥Ô∏è"); // right arrow curving up
		
		#[doc="SOON arrow üîú"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SOON_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SOON_ARROW); // üîú (`U+1F51C`)"] #[doc="# assert_eq!(SOON_ARROW.to_string().as_str(), \"üîú\");"]
#[doc="```"]
pub static SOON_ARROW :  Emoji = Emoji::new("SOON arrow", Version(0, 6), "üîú"); // SOON arrow
		
		#[doc="TOP arrow üîù"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TOP_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TOP_ARROW); // üîù (`U+1F51D`)"] #[doc="# assert_eq!(TOP_ARROW.to_string().as_str(), \"üîù\");"]
#[doc="```"]
pub static TOP_ARROW :  Emoji = Emoji::new("TOP arrow", Version(0, 6), "üîù"); // TOP arrow
		
		#[doc="up arrow ‚¨ÜÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::UP_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", UP_ARROW); // ‚¨ÜÔ∏è (`U+2B06 U+FE0F`)"] #[doc="# assert_eq!(UP_ARROW.to_string().as_str(), \"‚¨ÜÔ∏è\");"]
#[doc="```"]
pub static UP_ARROW :  Emoji = Emoji::new("up arrow", Version(0, 6), "‚¨ÜÔ∏è"); // up arrow
		
		#[doc="up-down arrow ‚ÜïÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::UP_DOWN_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", UP_DOWN_ARROW); // ‚ÜïÔ∏è (`U+2195 U+FE0F`)"] #[doc="# assert_eq!(UP_DOWN_ARROW.to_string().as_str(), \"‚ÜïÔ∏è\");"]
#[doc="```"]
pub static UP_DOWN_ARROW :  Emoji = Emoji::new("up-down arrow", Version(0, 6), "‚ÜïÔ∏è"); // up-down arrow
		
		#[doc="up-left arrow ‚ÜñÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::UP_LEFT_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", UP_LEFT_ARROW); // ‚ÜñÔ∏è (`U+2196 U+FE0F`)"] #[doc="# assert_eq!(UP_LEFT_ARROW.to_string().as_str(), \"‚ÜñÔ∏è\");"]
#[doc="```"]
pub static UP_LEFT_ARROW :  Emoji = Emoji::new("up-left arrow", Version(0, 6), "‚ÜñÔ∏è"); // up-left arrow
		
		#[doc="up-right arrow ‚ÜóÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::UP_RIGHT_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", UP_RIGHT_ARROW); // ‚ÜóÔ∏è (`U+2197 U+FE0F`)"] #[doc="# assert_eq!(UP_RIGHT_ARROW.to_string().as_str(), \"‚ÜóÔ∏è\");"]
#[doc="```"]
pub static UP_RIGHT_ARROW :  Emoji = Emoji::new("up-right arrow", Version(0, 6), "‚ÜóÔ∏è"); // up-right arrow
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BACK_ARROW
				
				&BACK_ARROW,
				
			],
			
			&[ // CLOCKWISE_VERTICAL_ARROWS
				
				&CLOCKWISE_VERTICAL_ARROWS,
				
			],
			
			&[ // COUNTERCLOCKWISE_ARROWS_BUTTON
				
				&COUNTERCLOCKWISE_ARROWS_BUTTON,
				
			],
			
			&[ // DOWN_ARROW
				
				&DOWN_ARROW,
				
			],
			
			&[ // DOWN_LEFT_ARROW
				
				&DOWN_LEFT_ARROW,
				
			],
			
			&[ // DOWN_RIGHT_ARROW
				
				&DOWN_RIGHT_ARROW,
				
			],
			
			&[ // END_ARROW
				
				&END_ARROW,
				
			],
			
			&[ // LEFT_ARROW
				
				&LEFT_ARROW,
				
			],
			
			&[ // LEFT_ARROW_CURVING_RIGHT
				
				&LEFT_ARROW_CURVING_RIGHT,
				
			],
			
			&[ // LEFT_RIGHT_ARROW
				
				&LEFT_RIGHT_ARROW,
				
			],
			
			&[ // ON_ARROW
				
				&ON_ARROW,
				
			],
			
			&[ // RIGHT_ARROW
				
				&RIGHT_ARROW,
				
			],
			
			&[ // RIGHT_ARROW_CURVING_DOWN
				
				&RIGHT_ARROW_CURVING_DOWN,
				
			],
			
			&[ // RIGHT_ARROW_CURVING_LEFT
				
				&RIGHT_ARROW_CURVING_LEFT,
				
			],
			
			&[ // RIGHT_ARROW_CURVING_UP
				
				&RIGHT_ARROW_CURVING_UP,
				
			],
			
			&[ // SOON_ARROW
				
				&SOON_ARROW,
				
			],
			
			&[ // TOP_ARROW
				
				&TOP_ARROW,
				
			],
			
			&[ // UP_ARROW
				
				&UP_ARROW,
				
			],
			
			&[ // UP_DOWN_ARROW
				
				&UP_DOWN_ARROW,
				
			],
			
			&[ // UP_LEFT_ARROW
				
				&UP_LEFT_ARROW,
				
			],
			
			&[ // UP_RIGHT_ARROW
				
				&UP_RIGHT_ARROW,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BACK_ARROW, // BACK_ARROW
				
			
				
				&CLOCKWISE_VERTICAL_ARROWS, // CLOCKWISE_VERTICAL_ARROWS
				
			
				
				&COUNTERCLOCKWISE_ARROWS_BUTTON, // COUNTERCLOCKWISE_ARROWS_BUTTON
				
			
				
				&DOWN_ARROW, // DOWN_ARROW
				
			
				
				&DOWN_LEFT_ARROW, // DOWN_LEFT_ARROW
				
			
				
				&DOWN_RIGHT_ARROW, // DOWN_RIGHT_ARROW
				
			
				
				&END_ARROW, // END_ARROW
				
			
				
				&LEFT_ARROW, // LEFT_ARROW
				
			
				
				&LEFT_ARROW_CURVING_RIGHT, // LEFT_ARROW_CURVING_RIGHT
				
			
				
				&LEFT_RIGHT_ARROW, // LEFT_RIGHT_ARROW
				
			
				
				&ON_ARROW, // ON_ARROW
				
			
				
				&RIGHT_ARROW, // RIGHT_ARROW
				
			
				
				&RIGHT_ARROW_CURVING_DOWN, // RIGHT_ARROW_CURVING_DOWN
				
			
				
				&RIGHT_ARROW_CURVING_LEFT, // RIGHT_ARROW_CURVING_LEFT
				
			
				
				&RIGHT_ARROW_CURVING_UP, // RIGHT_ARROW_CURVING_UP
				
			
				
				&SOON_ARROW, // SOON_ARROW
				
			
				
				&TOP_ARROW, // TOP_ARROW
				
			
				
				&UP_ARROW, // UP_ARROW
				
			
				
				&UP_DOWN_ARROW, // UP_DOWN_ARROW
				
			
				
				&UP_LEFT_ARROW, // UP_LEFT_ARROW
				
			
				
				&UP_RIGHT_ARROW, // UP_RIGHT_ARROW
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // arrow
	
	/// av_symbol üì∂üîÜüé¶
	pub mod av_symbol {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="antenna bars üì∂"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ANTENNA_BARS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ANTENNA_BARS); // üì∂ (`U+1F4F6`)"] #[doc="# assert_eq!(ANTENNA_BARS.to_string().as_str(), \"üì∂\");"]
#[doc="```"]
pub static ANTENNA_BARS :  Emoji = Emoji::new("antenna bars", Version(0, 6), "üì∂"); // antenna bars
		
		#[doc="bright button üîÜ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BRIGHT_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BRIGHT_BUTTON); // üîÜ (`U+1F506`)"] #[doc="# assert_eq!(BRIGHT_BUTTON.to_string().as_str(), \"üîÜ\");"]
#[doc="```"]
pub static BRIGHT_BUTTON :  Emoji = Emoji::new("bright button", Version(1, 0), "üîÜ"); // bright button
		
		#[doc="cinema üé¶"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CINEMA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CINEMA); // üé¶ (`U+1F3A6`)"] #[doc="# assert_eq!(CINEMA.to_string().as_str(), \"üé¶\");"]
#[doc="```"]
pub static CINEMA :  Emoji = Emoji::new("cinema", Version(0, 6), "üé¶"); // cinema
		
		#[doc="dim button üîÖ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DIM_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DIM_BUTTON); // üîÖ (`U+1F505`)"] #[doc="# assert_eq!(DIM_BUTTON.to_string().as_str(), \"üîÖ\");"]
#[doc="```"]
pub static DIM_BUTTON :  Emoji = Emoji::new("dim button", Version(1, 0), "üîÖ"); // dim button
		
		#[doc="downwards button üîΩ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOWNWARDS_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOWNWARDS_BUTTON); // üîΩ (`U+1F53D`)"] #[doc="# assert_eq!(DOWNWARDS_BUTTON.to_string().as_str(), \"üîΩ\");"]
#[doc="```"]
pub static DOWNWARDS_BUTTON :  Emoji = Emoji::new("downwards button", Version(0, 6), "üîΩ"); // downwards button
		
		#[doc="eject button ‚èèÔ∏è"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EJECT_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EJECT_BUTTON); // ‚èèÔ∏è (`U+23CF U+FE0F`)"] #[doc="# assert_eq!(EJECT_BUTTON.to_string().as_str(), \"‚èèÔ∏è\");"]
#[doc="```"]
pub static EJECT_BUTTON :  Emoji = Emoji::new("eject button", Version(1, 0), "‚èèÔ∏è"); // eject button
		
		#[doc="fast down button ‚è¨"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FAST_DOWN_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FAST_DOWN_BUTTON); // ‚è¨ (`U+23EC`)"] #[doc="# assert_eq!(FAST_DOWN_BUTTON.to_string().as_str(), \"‚è¨\");"]
#[doc="```"]
pub static FAST_DOWN_BUTTON :  Emoji = Emoji::new("fast down button", Version(0, 6), "‚è¨"); // fast down button
		
		#[doc="fast-forward button ‚è©"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FAST_FORWARD_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FAST_FORWARD_BUTTON); // ‚è© (`U+23E9`)"] #[doc="# assert_eq!(FAST_FORWARD_BUTTON.to_string().as_str(), \"‚è©\");"]
#[doc="```"]
pub static FAST_FORWARD_BUTTON :  Emoji = Emoji::new("fast-forward button", Version(0, 6), "‚è©"); // fast-forward button
		
		#[doc="fast reverse button ‚è™"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FAST_REVERSE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FAST_REVERSE_BUTTON); // ‚è™ (`U+23EA`)"] #[doc="# assert_eq!(FAST_REVERSE_BUTTON.to_string().as_str(), \"‚è™\");"]
#[doc="```"]
pub static FAST_REVERSE_BUTTON :  Emoji = Emoji::new("fast reverse button", Version(0, 6), "‚è™"); // fast reverse button
		
		#[doc="fast up button ‚è´"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FAST_UP_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FAST_UP_BUTTON); // ‚è´ (`U+23EB`)"] #[doc="# assert_eq!(FAST_UP_BUTTON.to_string().as_str(), \"‚è´\");"]
#[doc="```"]
pub static FAST_UP_BUTTON :  Emoji = Emoji::new("fast up button", Version(0, 6), "‚è´"); // fast up button
		
		#[doc="last track button ‚èÆÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LAST_TRACK_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LAST_TRACK_BUTTON); // ‚èÆÔ∏è (`U+23EE U+FE0F`)"] #[doc="# assert_eq!(LAST_TRACK_BUTTON.to_string().as_str(), \"‚èÆÔ∏è\");"]
#[doc="```"]
pub static LAST_TRACK_BUTTON :  Emoji = Emoji::new("last track button", Version(0, 7), "‚èÆÔ∏è"); // last track button
		
		#[doc="mobile phone off üì¥"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOBILE_PHONE_OFF;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOBILE_PHONE_OFF); // üì¥ (`U+1F4F4`)"] #[doc="# assert_eq!(MOBILE_PHONE_OFF.to_string().as_str(), \"üì¥\");"]
#[doc="```"]
pub static MOBILE_PHONE_OFF :  Emoji = Emoji::new("mobile phone off", Version(0, 6), "üì¥"); // mobile phone off
		
		#[doc="next track button ‚è≠Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NEXT_TRACK_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NEXT_TRACK_BUTTON); // ‚è≠Ô∏è (`U+23ED U+FE0F`)"] #[doc="# assert_eq!(NEXT_TRACK_BUTTON.to_string().as_str(), \"‚è≠Ô∏è\");"]
#[doc="```"]
pub static NEXT_TRACK_BUTTON :  Emoji = Emoji::new("next track button", Version(0, 7), "‚è≠Ô∏è"); // next track button
		
		#[doc="pause button ‚è∏Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PAUSE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PAUSE_BUTTON); // ‚è∏Ô∏è (`U+23F8 U+FE0F`)"] #[doc="# assert_eq!(PAUSE_BUTTON.to_string().as_str(), \"‚è∏Ô∏è\");"]
#[doc="```"]
pub static PAUSE_BUTTON :  Emoji = Emoji::new("pause button", Version(0, 7), "‚è∏Ô∏è"); // pause button
		
		#[doc="play button ‚ñ∂Ô∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PLAY_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PLAY_BUTTON); // ‚ñ∂Ô∏è (`U+25B6 U+FE0F`)"] #[doc="# assert_eq!(PLAY_BUTTON.to_string().as_str(), \"‚ñ∂Ô∏è\");"]
#[doc="```"]
pub static PLAY_BUTTON :  Emoji = Emoji::new("play button", Version(0, 6), "‚ñ∂Ô∏è"); // play button
		
		#[doc="play or pause button ‚èØÔ∏è"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PLAY_OR_PAUSE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PLAY_OR_PAUSE_BUTTON); // ‚èØÔ∏è (`U+23EF U+FE0F`)"] #[doc="# assert_eq!(PLAY_OR_PAUSE_BUTTON.to_string().as_str(), \"‚èØÔ∏è\");"]
#[doc="```"]
pub static PLAY_OR_PAUSE_BUTTON :  Emoji = Emoji::new("play or pause button", Version(1, 0), "‚èØÔ∏è"); // play or pause button
		
		#[doc="record button ‚è∫Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RECORD_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RECORD_BUTTON); // ‚è∫Ô∏è (`U+23FA U+FE0F`)"] #[doc="# assert_eq!(RECORD_BUTTON.to_string().as_str(), \"‚è∫Ô∏è\");"]
#[doc="```"]
pub static RECORD_BUTTON :  Emoji = Emoji::new("record button", Version(0, 7), "‚è∫Ô∏è"); // record button
		
		#[doc="repeat button üîÅ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::REPEAT_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", REPEAT_BUTTON); // üîÅ (`U+1F501`)"] #[doc="# assert_eq!(REPEAT_BUTTON.to_string().as_str(), \"üîÅ\");"]
#[doc="```"]
pub static REPEAT_BUTTON :  Emoji = Emoji::new("repeat button", Version(1, 0), "üîÅ"); // repeat button
		
		#[doc="repeat single button üîÇ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::REPEAT_SINGLE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", REPEAT_SINGLE_BUTTON); // üîÇ (`U+1F502`)"] #[doc="# assert_eq!(REPEAT_SINGLE_BUTTON.to_string().as_str(), \"üîÇ\");"]
#[doc="```"]
pub static REPEAT_SINGLE_BUTTON :  Emoji = Emoji::new("repeat single button", Version(1, 0), "üîÇ"); // repeat single button
		
		#[doc="reverse button ‚óÄÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::REVERSE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", REVERSE_BUTTON); // ‚óÄÔ∏è (`U+25C0 U+FE0F`)"] #[doc="# assert_eq!(REVERSE_BUTTON.to_string().as_str(), \"‚óÄÔ∏è\");"]
#[doc="```"]
pub static REVERSE_BUTTON :  Emoji = Emoji::new("reverse button", Version(0, 6), "‚óÄÔ∏è"); // reverse button
		
		#[doc="shuffle tracks button üîÄ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHUFFLE_TRACKS_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHUFFLE_TRACKS_BUTTON); // üîÄ (`U+1F500`)"] #[doc="# assert_eq!(SHUFFLE_TRACKS_BUTTON.to_string().as_str(), \"üîÄ\");"]
#[doc="```"]
pub static SHUFFLE_TRACKS_BUTTON :  Emoji = Emoji::new("shuffle tracks button", Version(1, 0), "üîÄ"); // shuffle tracks button
		
		#[doc="stop button ‚èπÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STOP_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STOP_BUTTON); // ‚èπÔ∏è (`U+23F9 U+FE0F`)"] #[doc="# assert_eq!(STOP_BUTTON.to_string().as_str(), \"‚èπÔ∏è\");"]
#[doc="```"]
pub static STOP_BUTTON :  Emoji = Emoji::new("stop button", Version(0, 7), "‚èπÔ∏è"); // stop button
		
		#[doc="upwards button üîº"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::UPWARDS_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", UPWARDS_BUTTON); // üîº (`U+1F53C`)"] #[doc="# assert_eq!(UPWARDS_BUTTON.to_string().as_str(), \"üîº\");"]
#[doc="```"]
pub static UPWARDS_BUTTON :  Emoji = Emoji::new("upwards button", Version(0, 6), "üîº"); // upwards button
		
		#[doc="vibration mode üì≥"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::VIBRATION_MODE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", VIBRATION_MODE); // üì≥ (`U+1F4F3`)"] #[doc="# assert_eq!(VIBRATION_MODE.to_string().as_str(), \"üì≥\");"]
#[doc="```"]
pub static VIBRATION_MODE :  Emoji = Emoji::new("vibration mode", Version(0, 6), "üì≥"); // vibration mode
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // ANTENNA_BARS
				
				&ANTENNA_BARS,
				
			],
			
			&[ // BRIGHT_BUTTON
				
				&BRIGHT_BUTTON,
				
			],
			
			&[ // CINEMA
				
				&CINEMA,
				
			],
			
			&[ // DIM_BUTTON
				
				&DIM_BUTTON,
				
			],
			
			&[ // DOWNWARDS_BUTTON
				
				&DOWNWARDS_BUTTON,
				
			],
			
			&[ // EJECT_BUTTON
				
				&EJECT_BUTTON,
				
			],
			
			&[ // FAST_DOWN_BUTTON
				
				&FAST_DOWN_BUTTON,
				
			],
			
			&[ // FAST_FORWARD_BUTTON
				
				&FAST_FORWARD_BUTTON,
				
			],
			
			&[ // FAST_REVERSE_BUTTON
				
				&FAST_REVERSE_BUTTON,
				
			],
			
			&[ // FAST_UP_BUTTON
				
				&FAST_UP_BUTTON,
				
			],
			
			&[ // LAST_TRACK_BUTTON
				
				&LAST_TRACK_BUTTON,
				
			],
			
			&[ // MOBILE_PHONE_OFF
				
				&MOBILE_PHONE_OFF,
				
			],
			
			&[ // NEXT_TRACK_BUTTON
				
				&NEXT_TRACK_BUTTON,
				
			],
			
			&[ // PAUSE_BUTTON
				
				&PAUSE_BUTTON,
				
			],
			
			&[ // PLAY_BUTTON
				
				&PLAY_BUTTON,
				
			],
			
			&[ // PLAY_OR_PAUSE_BUTTON
				
				&PLAY_OR_PAUSE_BUTTON,
				
			],
			
			&[ // RECORD_BUTTON
				
				&RECORD_BUTTON,
				
			],
			
			&[ // REPEAT_BUTTON
				
				&REPEAT_BUTTON,
				
			],
			
			&[ // REPEAT_SINGLE_BUTTON
				
				&REPEAT_SINGLE_BUTTON,
				
			],
			
			&[ // REVERSE_BUTTON
				
				&REVERSE_BUTTON,
				
			],
			
			&[ // SHUFFLE_TRACKS_BUTTON
				
				&SHUFFLE_TRACKS_BUTTON,
				
			],
			
			&[ // STOP_BUTTON
				
				&STOP_BUTTON,
				
			],
			
			&[ // UPWARDS_BUTTON
				
				&UPWARDS_BUTTON,
				
			],
			
			&[ // VIBRATION_MODE
				
				&VIBRATION_MODE,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&ANTENNA_BARS, // ANTENNA_BARS
				
			
				
				&BRIGHT_BUTTON, // BRIGHT_BUTTON
				
			
				
				&CINEMA, // CINEMA
				
			
				
				&DIM_BUTTON, // DIM_BUTTON
				
			
				
				&DOWNWARDS_BUTTON, // DOWNWARDS_BUTTON
				
			
				
				&EJECT_BUTTON, // EJECT_BUTTON
				
			
				
				&FAST_DOWN_BUTTON, // FAST_DOWN_BUTTON
				
			
				
				&FAST_FORWARD_BUTTON, // FAST_FORWARD_BUTTON
				
			
				
				&FAST_REVERSE_BUTTON, // FAST_REVERSE_BUTTON
				
			
				
				&FAST_UP_BUTTON, // FAST_UP_BUTTON
				
			
				
				&LAST_TRACK_BUTTON, // LAST_TRACK_BUTTON
				
			
				
				&MOBILE_PHONE_OFF, // MOBILE_PHONE_OFF
				
			
				
				&NEXT_TRACK_BUTTON, // NEXT_TRACK_BUTTON
				
			
				
				&PAUSE_BUTTON, // PAUSE_BUTTON
				
			
				
				&PLAY_BUTTON, // PLAY_BUTTON
				
			
				
				&PLAY_OR_PAUSE_BUTTON, // PLAY_OR_PAUSE_BUTTON
				
			
				
				&RECORD_BUTTON, // RECORD_BUTTON
				
			
				
				&REPEAT_BUTTON, // REPEAT_BUTTON
				
			
				
				&REPEAT_SINGLE_BUTTON, // REPEAT_SINGLE_BUTTON
				
			
				
				&REVERSE_BUTTON, // REVERSE_BUTTON
				
			
				
				&SHUFFLE_TRACKS_BUTTON, // SHUFFLE_TRACKS_BUTTON
				
			
				
				&STOP_BUTTON, // STOP_BUTTON
				
			
				
				&UPWARDS_BUTTON, // UPWARDS_BUTTON
				
			
				
				&VIBRATION_MODE, // VIBRATION_MODE
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // av_symbol
	
	/// currency üí±üí≤
	pub mod currency {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="currency exchange üí±"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CURRENCY_EXCHANGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CURRENCY_EXCHANGE); // üí± (`U+1F4B1`)"] #[doc="# assert_eq!(CURRENCY_EXCHANGE.to_string().as_str(), \"üí±\");"]
#[doc="```"]
pub static CURRENCY_EXCHANGE :  Emoji = Emoji::new("currency exchange", Version(0, 6), "üí±"); // currency exchange
		
		#[doc="heavy dollar sign üí≤"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HEAVY_DOLLAR_SIGN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HEAVY_DOLLAR_SIGN); // üí≤ (`U+1F4B2`)"] #[doc="# assert_eq!(HEAVY_DOLLAR_SIGN.to_string().as_str(), \"üí≤\");"]
#[doc="```"]
pub static HEAVY_DOLLAR_SIGN :  Emoji = Emoji::new("heavy dollar sign", Version(0, 6), "üí≤"); // heavy dollar sign
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // CURRENCY_EXCHANGE
				
				&CURRENCY_EXCHANGE,
				
			],
			
			&[ // HEAVY_DOLLAR_SIGN
				
				&HEAVY_DOLLAR_SIGN,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&CURRENCY_EXCHANGE, // CURRENCY_EXCHANGE
				
			
				
				&HEAVY_DOLLAR_SIGN, // HEAVY_DOLLAR_SIGN
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // currency
	
	/// gender ‚ôÄÔ∏è‚ôÇÔ∏è‚ößÔ∏è
	pub mod gender {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="female sign ‚ôÄÔ∏è"]#[doc=""]#[doc="Since E4.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FEMALE_SIGN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FEMALE_SIGN); // ‚ôÄÔ∏è (`U+2640 U+FE0F`)"] #[doc="# assert_eq!(FEMALE_SIGN.to_string().as_str(), \"‚ôÄÔ∏è\");"]
#[doc="```"]
pub static FEMALE_SIGN :  Emoji = Emoji::new("female sign", Version(4, 0), "‚ôÄÔ∏è"); // female sign
		
		#[doc="male sign ‚ôÇÔ∏è"]#[doc=""]#[doc="Since E4.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MALE_SIGN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MALE_SIGN); // ‚ôÇÔ∏è (`U+2642 U+FE0F`)"] #[doc="# assert_eq!(MALE_SIGN.to_string().as_str(), \"‚ôÇÔ∏è\");"]
#[doc="```"]
pub static MALE_SIGN :  Emoji = Emoji::new("male sign", Version(4, 0), "‚ôÇÔ∏è"); // male sign
		
		#[doc="transgender symbol ‚ößÔ∏è"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TRANSGENDER_SYMBOL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TRANSGENDER_SYMBOL); // ‚ößÔ∏è (`U+26A7 U+FE0F`)"] #[doc="# assert_eq!(TRANSGENDER_SYMBOL.to_string().as_str(), \"‚ößÔ∏è\");"]
#[doc="```"]
pub static TRANSGENDER_SYMBOL :  Emoji = Emoji::new("transgender symbol", Version(13, 0), "‚ößÔ∏è"); // transgender symbol
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // FEMALE_SIGN
				
				&FEMALE_SIGN,
				
			],
			
			&[ // MALE_SIGN
				
				&MALE_SIGN,
				
			],
			
			&[ // TRANSGENDER_SYMBOL
				
				&TRANSGENDER_SYMBOL,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&FEMALE_SIGN, // FEMALE_SIGN
				
			
				
				&MALE_SIGN, // MALE_SIGN
				
			
				
				&TRANSGENDER_SYMBOL, // TRANSGENDER_SYMBOL
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // gender
	
	/// geometric ‚ö´‚¨õ‚óæ
	pub mod geometric {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="black circle ‚ö´"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLACK_CIRCLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLACK_CIRCLE); // ‚ö´ (`U+26AB`)"] #[doc="# assert_eq!(BLACK_CIRCLE.to_string().as_str(), \"‚ö´\");"]
#[doc="```"]
pub static BLACK_CIRCLE :  Emoji = Emoji::new("black circle", Version(0, 6), "‚ö´"); // black circle
		
		#[doc="black large square ‚¨õ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLACK_LARGE_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLACK_LARGE_SQUARE); // ‚¨õ (`U+2B1B`)"] #[doc="# assert_eq!(BLACK_LARGE_SQUARE.to_string().as_str(), \"‚¨õ\");"]
#[doc="```"]
pub static BLACK_LARGE_SQUARE :  Emoji = Emoji::new("black large square", Version(0, 6), "‚¨õ"); // black large square
		
		#[doc="black medium-small square ‚óæ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLACK_MEDIUM_SMALL_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLACK_MEDIUM_SMALL_SQUARE); // ‚óæ (`U+25FE`)"] #[doc="# assert_eq!(BLACK_MEDIUM_SMALL_SQUARE.to_string().as_str(), \"‚óæ\");"]
#[doc="```"]
pub static BLACK_MEDIUM_SMALL_SQUARE :  Emoji = Emoji::new("black medium-small square", Version(0, 6), "‚óæ"); // black medium-small square
		
		#[doc="black medium square ‚óºÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLACK_MEDIUM_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLACK_MEDIUM_SQUARE); // ‚óºÔ∏è (`U+25FC U+FE0F`)"] #[doc="# assert_eq!(BLACK_MEDIUM_SQUARE.to_string().as_str(), \"‚óºÔ∏è\");"]
#[doc="```"]
pub static BLACK_MEDIUM_SQUARE :  Emoji = Emoji::new("black medium square", Version(0, 6), "‚óºÔ∏è"); // black medium square
		
		#[doc="black small square ‚ñ™Ô∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLACK_SMALL_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLACK_SMALL_SQUARE); // ‚ñ™Ô∏è (`U+25AA U+FE0F`)"] #[doc="# assert_eq!(BLACK_SMALL_SQUARE.to_string().as_str(), \"‚ñ™Ô∏è\");"]
#[doc="```"]
pub static BLACK_SMALL_SQUARE :  Emoji = Emoji::new("black small square", Version(0, 6), "‚ñ™Ô∏è"); // black small square
		
		#[doc="black square button üî≤"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLACK_SQUARE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLACK_SQUARE_BUTTON); // üî≤ (`U+1F532`)"] #[doc="# assert_eq!(BLACK_SQUARE_BUTTON.to_string().as_str(), \"üî≤\");"]
#[doc="```"]
pub static BLACK_SQUARE_BUTTON :  Emoji = Emoji::new("black square button", Version(0, 6), "üî≤"); // black square button
		
		#[doc="blue circle üîµ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLUE_CIRCLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLUE_CIRCLE); // üîµ (`U+1F535`)"] #[doc="# assert_eq!(BLUE_CIRCLE.to_string().as_str(), \"üîµ\");"]
#[doc="```"]
pub static BLUE_CIRCLE :  Emoji = Emoji::new("blue circle", Version(0, 6), "üîµ"); // blue circle
		
		#[doc="blue square üü¶"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLUE_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLUE_SQUARE); // üü¶ (`U+1F7E6`)"] #[doc="# assert_eq!(BLUE_SQUARE.to_string().as_str(), \"üü¶\");"]
#[doc="```"]
pub static BLUE_SQUARE :  Emoji = Emoji::new("blue square", Version(12, 0), "üü¶"); // blue square
		
		#[doc="brown circle üü§"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BROWN_CIRCLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BROWN_CIRCLE); // üü§ (`U+1F7E4`)"] #[doc="# assert_eq!(BROWN_CIRCLE.to_string().as_str(), \"üü§\");"]
#[doc="```"]
pub static BROWN_CIRCLE :  Emoji = Emoji::new("brown circle", Version(12, 0), "üü§"); // brown circle
		
		#[doc="brown square üü´"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BROWN_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BROWN_SQUARE); // üü´ (`U+1F7EB`)"] #[doc="# assert_eq!(BROWN_SQUARE.to_string().as_str(), \"üü´\");"]
#[doc="```"]
pub static BROWN_SQUARE :  Emoji = Emoji::new("brown square", Version(12, 0), "üü´"); // brown square
		
		#[doc="diamond with a dot üí†"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DIAMOND_WITH_A_DOT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DIAMOND_WITH_A_DOT); // üí† (`U+1F4A0`)"] #[doc="# assert_eq!(DIAMOND_WITH_A_DOT.to_string().as_str(), \"üí†\");"]
#[doc="```"]
pub static DIAMOND_WITH_A_DOT :  Emoji = Emoji::new("diamond with a dot", Version(0, 6), "üí†"); // diamond with a dot
		
		#[doc="green circle üü¢"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GREEN_CIRCLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GREEN_CIRCLE); // üü¢ (`U+1F7E2`)"] #[doc="# assert_eq!(GREEN_CIRCLE.to_string().as_str(), \"üü¢\");"]
#[doc="```"]
pub static GREEN_CIRCLE :  Emoji = Emoji::new("green circle", Version(12, 0), "üü¢"); // green circle
		
		#[doc="green square üü©"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GREEN_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GREEN_SQUARE); // üü© (`U+1F7E9`)"] #[doc="# assert_eq!(GREEN_SQUARE.to_string().as_str(), \"üü©\");"]
#[doc="```"]
pub static GREEN_SQUARE :  Emoji = Emoji::new("green square", Version(12, 0), "üü©"); // green square
		
		#[doc="large blue diamond üî∑"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LARGE_BLUE_DIAMOND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LARGE_BLUE_DIAMOND); // üî∑ (`U+1F537`)"] #[doc="# assert_eq!(LARGE_BLUE_DIAMOND.to_string().as_str(), \"üî∑\");"]
#[doc="```"]
pub static LARGE_BLUE_DIAMOND :  Emoji = Emoji::new("large blue diamond", Version(0, 6), "üî∑"); // large blue diamond
		
		#[doc="large orange diamond üî∂"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LARGE_ORANGE_DIAMOND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LARGE_ORANGE_DIAMOND); // üî∂ (`U+1F536`)"] #[doc="# assert_eq!(LARGE_ORANGE_DIAMOND.to_string().as_str(), \"üî∂\");"]
#[doc="```"]
pub static LARGE_ORANGE_DIAMOND :  Emoji = Emoji::new("large orange diamond", Version(0, 6), "üî∂"); // large orange diamond
		
		#[doc="orange circle üü†"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ORANGE_CIRCLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ORANGE_CIRCLE); // üü† (`U+1F7E0`)"] #[doc="# assert_eq!(ORANGE_CIRCLE.to_string().as_str(), \"üü†\");"]
#[doc="```"]
pub static ORANGE_CIRCLE :  Emoji = Emoji::new("orange circle", Version(12, 0), "üü†"); // orange circle
		
		#[doc="orange square üüß"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ORANGE_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ORANGE_SQUARE); // üüß (`U+1F7E7`)"] #[doc="# assert_eq!(ORANGE_SQUARE.to_string().as_str(), \"üüß\");"]
#[doc="```"]
pub static ORANGE_SQUARE :  Emoji = Emoji::new("orange square", Version(12, 0), "üüß"); // orange square
		
		#[doc="purple circle üü£"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PURPLE_CIRCLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PURPLE_CIRCLE); // üü£ (`U+1F7E3`)"] #[doc="# assert_eq!(PURPLE_CIRCLE.to_string().as_str(), \"üü£\");"]
#[doc="```"]
pub static PURPLE_CIRCLE :  Emoji = Emoji::new("purple circle", Version(12, 0), "üü£"); // purple circle
		
		#[doc="purple square üü™"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PURPLE_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PURPLE_SQUARE); // üü™ (`U+1F7EA`)"] #[doc="# assert_eq!(PURPLE_SQUARE.to_string().as_str(), \"üü™\");"]
#[doc="```"]
pub static PURPLE_SQUARE :  Emoji = Emoji::new("purple square", Version(12, 0), "üü™"); // purple square
		
		#[doc="radio button üîò"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RADIO_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RADIO_BUTTON); // üîò (`U+1F518`)"] #[doc="# assert_eq!(RADIO_BUTTON.to_string().as_str(), \"üîò\");"]
#[doc="```"]
pub static RADIO_BUTTON :  Emoji = Emoji::new("radio button", Version(0, 6), "üîò"); // radio button
		
		#[doc="red circle üî¥"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RED_CIRCLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RED_CIRCLE); // üî¥ (`U+1F534`)"] #[doc="# assert_eq!(RED_CIRCLE.to_string().as_str(), \"üî¥\");"]
#[doc="```"]
pub static RED_CIRCLE :  Emoji = Emoji::new("red circle", Version(0, 6), "üî¥"); // red circle
		
		#[doc="red square üü•"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RED_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RED_SQUARE); // üü• (`U+1F7E5`)"] #[doc="# assert_eq!(RED_SQUARE.to_string().as_str(), \"üü•\");"]
#[doc="```"]
pub static RED_SQUARE :  Emoji = Emoji::new("red square", Version(12, 0), "üü•"); // red square
		
		#[doc="red triangle pointed down üîª"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RED_TRIANGLE_POINTED_DOWN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RED_TRIANGLE_POINTED_DOWN); // üîª (`U+1F53B`)"] #[doc="# assert_eq!(RED_TRIANGLE_POINTED_DOWN.to_string().as_str(), \"üîª\");"]
#[doc="```"]
pub static RED_TRIANGLE_POINTED_DOWN :  Emoji = Emoji::new("red triangle pointed down", Version(0, 6), "üîª"); // red triangle pointed down
		
		#[doc="red triangle pointed up üî∫"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RED_TRIANGLE_POINTED_UP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RED_TRIANGLE_POINTED_UP); // üî∫ (`U+1F53A`)"] #[doc="# assert_eq!(RED_TRIANGLE_POINTED_UP.to_string().as_str(), \"üî∫\");"]
#[doc="```"]
pub static RED_TRIANGLE_POINTED_UP :  Emoji = Emoji::new("red triangle pointed up", Version(0, 6), "üî∫"); // red triangle pointed up
		
		#[doc="small blue diamond üîπ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SMALL_BLUE_DIAMOND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SMALL_BLUE_DIAMOND); // üîπ (`U+1F539`)"] #[doc="# assert_eq!(SMALL_BLUE_DIAMOND.to_string().as_str(), \"üîπ\");"]
#[doc="```"]
pub static SMALL_BLUE_DIAMOND :  Emoji = Emoji::new("small blue diamond", Version(0, 6), "üîπ"); // small blue diamond
		
		#[doc="small orange diamond üî∏"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SMALL_ORANGE_DIAMOND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SMALL_ORANGE_DIAMOND); // üî∏ (`U+1F538`)"] #[doc="# assert_eq!(SMALL_ORANGE_DIAMOND.to_string().as_str(), \"üî∏\");"]
#[doc="```"]
pub static SMALL_ORANGE_DIAMOND :  Emoji = Emoji::new("small orange diamond", Version(0, 6), "üî∏"); // small orange diamond
		
		#[doc="white circle ‚ö™"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHITE_CIRCLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHITE_CIRCLE); // ‚ö™ (`U+26AA`)"] #[doc="# assert_eq!(WHITE_CIRCLE.to_string().as_str(), \"‚ö™\");"]
#[doc="```"]
pub static WHITE_CIRCLE :  Emoji = Emoji::new("white circle", Version(0, 6), "‚ö™"); // white circle
		
		#[doc="white large square ‚¨ú"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHITE_LARGE_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHITE_LARGE_SQUARE); // ‚¨ú (`U+2B1C`)"] #[doc="# assert_eq!(WHITE_LARGE_SQUARE.to_string().as_str(), \"‚¨ú\");"]
#[doc="```"]
pub static WHITE_LARGE_SQUARE :  Emoji = Emoji::new("white large square", Version(0, 6), "‚¨ú"); // white large square
		
		#[doc="white medium-small square ‚óΩ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHITE_MEDIUM_SMALL_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHITE_MEDIUM_SMALL_SQUARE); // ‚óΩ (`U+25FD`)"] #[doc="# assert_eq!(WHITE_MEDIUM_SMALL_SQUARE.to_string().as_str(), \"‚óΩ\");"]
#[doc="```"]
pub static WHITE_MEDIUM_SMALL_SQUARE :  Emoji = Emoji::new("white medium-small square", Version(0, 6), "‚óΩ"); // white medium-small square
		
		#[doc="white medium square ‚óªÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHITE_MEDIUM_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHITE_MEDIUM_SQUARE); // ‚óªÔ∏è (`U+25FB U+FE0F`)"] #[doc="# assert_eq!(WHITE_MEDIUM_SQUARE.to_string().as_str(), \"‚óªÔ∏è\");"]
#[doc="```"]
pub static WHITE_MEDIUM_SQUARE :  Emoji = Emoji::new("white medium square", Version(0, 6), "‚óªÔ∏è"); // white medium square
		
		#[doc="white small square ‚ñ´Ô∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHITE_SMALL_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHITE_SMALL_SQUARE); // ‚ñ´Ô∏è (`U+25AB U+FE0F`)"] #[doc="# assert_eq!(WHITE_SMALL_SQUARE.to_string().as_str(), \"‚ñ´Ô∏è\");"]
#[doc="```"]
pub static WHITE_SMALL_SQUARE :  Emoji = Emoji::new("white small square", Version(0, 6), "‚ñ´Ô∏è"); // white small square
		
		#[doc="white square button üî≥"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHITE_SQUARE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHITE_SQUARE_BUTTON); // üî≥ (`U+1F533`)"] #[doc="# assert_eq!(WHITE_SQUARE_BUTTON.to_string().as_str(), \"üî≥\");"]
#[doc="```"]
pub static WHITE_SQUARE_BUTTON :  Emoji = Emoji::new("white square button", Version(0, 6), "üî≥"); // white square button
		
		#[doc="yellow circle üü°"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::YELLOW_CIRCLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", YELLOW_CIRCLE); // üü° (`U+1F7E1`)"] #[doc="# assert_eq!(YELLOW_CIRCLE.to_string().as_str(), \"üü°\");"]
#[doc="```"]
pub static YELLOW_CIRCLE :  Emoji = Emoji::new("yellow circle", Version(12, 0), "üü°"); // yellow circle
		
		#[doc="yellow square üü®"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::YELLOW_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", YELLOW_SQUARE); // üü® (`U+1F7E8`)"] #[doc="# assert_eq!(YELLOW_SQUARE.to_string().as_str(), \"üü®\");"]
#[doc="```"]
pub static YELLOW_SQUARE :  Emoji = Emoji::new("yellow square", Version(12, 0), "üü®"); // yellow square
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BLACK_CIRCLE
				
				&BLACK_CIRCLE,
				
			],
			
			&[ // BLACK_LARGE_SQUARE
				
				&BLACK_LARGE_SQUARE,
				
			],
			
			&[ // BLACK_MEDIUM_SMALL_SQUARE
				
				&BLACK_MEDIUM_SMALL_SQUARE,
				
			],
			
			&[ // BLACK_MEDIUM_SQUARE
				
				&BLACK_MEDIUM_SQUARE,
				
			],
			
			&[ // BLACK_SMALL_SQUARE
				
				&BLACK_SMALL_SQUARE,
				
			],
			
			&[ // BLACK_SQUARE_BUTTON
				
				&BLACK_SQUARE_BUTTON,
				
			],
			
			&[ // BLUE_CIRCLE
				
				&BLUE_CIRCLE,
				
			],
			
			&[ // BLUE_SQUARE
				
				&BLUE_SQUARE,
				
			],
			
			&[ // BROWN_CIRCLE
				
				&BROWN_CIRCLE,
				
			],
			
			&[ // BROWN_SQUARE
				
				&BROWN_SQUARE,
				
			],
			
			&[ // DIAMOND_WITH_A_DOT
				
				&DIAMOND_WITH_A_DOT,
				
			],
			
			&[ // GREEN_CIRCLE
				
				&GREEN_CIRCLE,
				
			],
			
			&[ // GREEN_SQUARE
				
				&GREEN_SQUARE,
				
			],
			
			&[ // LARGE_BLUE_DIAMOND
				
				&LARGE_BLUE_DIAMOND,
				
			],
			
			&[ // LARGE_ORANGE_DIAMOND
				
				&LARGE_ORANGE_DIAMOND,
				
			],
			
			&[ // ORANGE_CIRCLE
				
				&ORANGE_CIRCLE,
				
			],
			
			&[ // ORANGE_SQUARE
				
				&ORANGE_SQUARE,
				
			],
			
			&[ // PURPLE_CIRCLE
				
				&PURPLE_CIRCLE,
				
			],
			
			&[ // PURPLE_SQUARE
				
				&PURPLE_SQUARE,
				
			],
			
			&[ // RADIO_BUTTON
				
				&RADIO_BUTTON,
				
			],
			
			&[ // RED_CIRCLE
				
				&RED_CIRCLE,
				
			],
			
			&[ // RED_SQUARE
				
				&RED_SQUARE,
				
			],
			
			&[ // RED_TRIANGLE_POINTED_DOWN
				
				&RED_TRIANGLE_POINTED_DOWN,
				
			],
			
			&[ // RED_TRIANGLE_POINTED_UP
				
				&RED_TRIANGLE_POINTED_UP,
				
			],
			
			&[ // SMALL_BLUE_DIAMOND
				
				&SMALL_BLUE_DIAMOND,
				
			],
			
			&[ // SMALL_ORANGE_DIAMOND
				
				&SMALL_ORANGE_DIAMOND,
				
			],
			
			&[ // WHITE_CIRCLE
				
				&WHITE_CIRCLE,
				
			],
			
			&[ // WHITE_LARGE_SQUARE
				
				&WHITE_LARGE_SQUARE,
				
			],
			
			&[ // WHITE_MEDIUM_SMALL_SQUARE
				
				&WHITE_MEDIUM_SMALL_SQUARE,
				
			],
			
			&[ // WHITE_MEDIUM_SQUARE
				
				&WHITE_MEDIUM_SQUARE,
				
			],
			
			&[ // WHITE_SMALL_SQUARE
				
				&WHITE_SMALL_SQUARE,
				
			],
			
			&[ // WHITE_SQUARE_BUTTON
				
				&WHITE_SQUARE_BUTTON,
				
			],
			
			&[ // YELLOW_CIRCLE
				
				&YELLOW_CIRCLE,
				
			],
			
			&[ // YELLOW_SQUARE
				
				&YELLOW_SQUARE,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BLACK_CIRCLE, // BLACK_CIRCLE
				
			
				
				&BLACK_LARGE_SQUARE, // BLACK_LARGE_SQUARE
				
			
				
				&BLACK_MEDIUM_SMALL_SQUARE, // BLACK_MEDIUM_SMALL_SQUARE
				
			
				
				&BLACK_MEDIUM_SQUARE, // BLACK_MEDIUM_SQUARE
				
			
				
				&BLACK_SMALL_SQUARE, // BLACK_SMALL_SQUARE
				
			
				
				&BLACK_SQUARE_BUTTON, // BLACK_SQUARE_BUTTON
				
			
				
				&BLUE_CIRCLE, // BLUE_CIRCLE
				
			
				
				&BLUE_SQUARE, // BLUE_SQUARE
				
			
				
				&BROWN_CIRCLE, // BROWN_CIRCLE
				
			
				
				&BROWN_SQUARE, // BROWN_SQUARE
				
			
				
				&DIAMOND_WITH_A_DOT, // DIAMOND_WITH_A_DOT
				
			
				
				&GREEN_CIRCLE, // GREEN_CIRCLE
				
			
				
				&GREEN_SQUARE, // GREEN_SQUARE
				
			
				
				&LARGE_BLUE_DIAMOND, // LARGE_BLUE_DIAMOND
				
			
				
				&LARGE_ORANGE_DIAMOND, // LARGE_ORANGE_DIAMOND
				
			
				
				&ORANGE_CIRCLE, // ORANGE_CIRCLE
				
			
				
				&ORANGE_SQUARE, // ORANGE_SQUARE
				
			
				
				&PURPLE_CIRCLE, // PURPLE_CIRCLE
				
			
				
				&PURPLE_SQUARE, // PURPLE_SQUARE
				
			
				
				&RADIO_BUTTON, // RADIO_BUTTON
				
			
				
				&RED_CIRCLE, // RED_CIRCLE
				
			
				
				&RED_SQUARE, // RED_SQUARE
				
			
				
				&RED_TRIANGLE_POINTED_DOWN, // RED_TRIANGLE_POINTED_DOWN
				
			
				
				&RED_TRIANGLE_POINTED_UP, // RED_TRIANGLE_POINTED_UP
				
			
				
				&SMALL_BLUE_DIAMOND, // SMALL_BLUE_DIAMOND
				
			
				
				&SMALL_ORANGE_DIAMOND, // SMALL_ORANGE_DIAMOND
				
			
				
				&WHITE_CIRCLE, // WHITE_CIRCLE
				
			
				
				&WHITE_LARGE_SQUARE, // WHITE_LARGE_SQUARE
				
			
				
				&WHITE_MEDIUM_SMALL_SQUARE, // WHITE_MEDIUM_SMALL_SQUARE
				
			
				
				&WHITE_MEDIUM_SQUARE, // WHITE_MEDIUM_SQUARE
				
			
				
				&WHITE_SMALL_SQUARE, // WHITE_SMALL_SQUARE
				
			
				
				&WHITE_SQUARE_BUTTON, // WHITE_SQUARE_BUTTON
				
			
				
				&YELLOW_CIRCLE, // YELLOW_CIRCLE
				
			
				
				&YELLOW_SQUARE, // YELLOW_SQUARE
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // geometric
	
	/// keycap 0Ô∏è‚É£1Ô∏è‚É£üîü
	pub mod keycap {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="keycap: 0 0Ô∏è‚É£"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYCAP_0;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYCAP_0); // 0Ô∏è‚É£ (`U+0030 U+FE0F U+20E3`)"] #[doc="# assert_eq!(KEYCAP_0.to_string().as_str(), \"0Ô∏è‚É£\");"]
#[doc="```"]
pub static KEYCAP_0 :  Emoji = Emoji::new("keycap: 0", Version(0, 6), "0Ô∏è‚É£"); // keycap: 0
		
		#[doc="keycap: 1 1Ô∏è‚É£"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYCAP_1;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYCAP_1); // 1Ô∏è‚É£ (`U+0031 U+FE0F U+20E3`)"] #[doc="# assert_eq!(KEYCAP_1.to_string().as_str(), \"1Ô∏è‚É£\");"]
#[doc="```"]
pub static KEYCAP_1 :  Emoji = Emoji::new("keycap: 1", Version(0, 6), "1Ô∏è‚É£"); // keycap: 1
		
		#[doc="keycap: 10 üîü"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYCAP_10;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYCAP_10); // üîü (`U+1F51F`)"] #[doc="# assert_eq!(KEYCAP_10.to_string().as_str(), \"üîü\");"]
#[doc="```"]
pub static KEYCAP_10 :  Emoji = Emoji::new("keycap: 10", Version(0, 6), "üîü"); // keycap: 10
		
		#[doc="keycap: 2 2Ô∏è‚É£"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYCAP_2;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYCAP_2); // 2Ô∏è‚É£ (`U+0032 U+FE0F U+20E3`)"] #[doc="# assert_eq!(KEYCAP_2.to_string().as_str(), \"2Ô∏è‚É£\");"]
#[doc="```"]
pub static KEYCAP_2 :  Emoji = Emoji::new("keycap: 2", Version(0, 6), "2Ô∏è‚É£"); // keycap: 2
		
		#[doc="keycap: 3 3Ô∏è‚É£"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYCAP_3;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYCAP_3); // 3Ô∏è‚É£ (`U+0033 U+FE0F U+20E3`)"] #[doc="# assert_eq!(KEYCAP_3.to_string().as_str(), \"3Ô∏è‚É£\");"]
#[doc="```"]
pub static KEYCAP_3 :  Emoji = Emoji::new("keycap: 3", Version(0, 6), "3Ô∏è‚É£"); // keycap: 3
		
		#[doc="keycap: 4 4Ô∏è‚É£"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYCAP_4;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYCAP_4); // 4Ô∏è‚É£ (`U+0034 U+FE0F U+20E3`)"] #[doc="# assert_eq!(KEYCAP_4.to_string().as_str(), \"4Ô∏è‚É£\");"]
#[doc="```"]
pub static KEYCAP_4 :  Emoji = Emoji::new("keycap: 4", Version(0, 6), "4Ô∏è‚É£"); // keycap: 4
		
		#[doc="keycap: 5 5Ô∏è‚É£"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYCAP_5;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYCAP_5); // 5Ô∏è‚É£ (`U+0035 U+FE0F U+20E3`)"] #[doc="# assert_eq!(KEYCAP_5.to_string().as_str(), \"5Ô∏è‚É£\");"]
#[doc="```"]
pub static KEYCAP_5 :  Emoji = Emoji::new("keycap: 5", Version(0, 6), "5Ô∏è‚É£"); // keycap: 5
		
		#[doc="keycap: 6 6Ô∏è‚É£"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYCAP_6;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYCAP_6); // 6Ô∏è‚É£ (`U+0036 U+FE0F U+20E3`)"] #[doc="# assert_eq!(KEYCAP_6.to_string().as_str(), \"6Ô∏è‚É£\");"]
#[doc="```"]
pub static KEYCAP_6 :  Emoji = Emoji::new("keycap: 6", Version(0, 6), "6Ô∏è‚É£"); // keycap: 6
		
		#[doc="keycap: 7 7Ô∏è‚É£"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYCAP_7;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYCAP_7); // 7Ô∏è‚É£ (`U+0037 U+FE0F U+20E3`)"] #[doc="# assert_eq!(KEYCAP_7.to_string().as_str(), \"7Ô∏è‚É£\");"]
#[doc="```"]
pub static KEYCAP_7 :  Emoji = Emoji::new("keycap: 7", Version(0, 6), "7Ô∏è‚É£"); // keycap: 7
		
		#[doc="keycap: 8 8Ô∏è‚É£"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYCAP_8;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYCAP_8); // 8Ô∏è‚É£ (`U+0038 U+FE0F U+20E3`)"] #[doc="# assert_eq!(KEYCAP_8.to_string().as_str(), \"8Ô∏è‚É£\");"]
#[doc="```"]
pub static KEYCAP_8 :  Emoji = Emoji::new("keycap: 8", Version(0, 6), "8Ô∏è‚É£"); // keycap: 8
		
		#[doc="keycap: 9 9Ô∏è‚É£"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYCAP_9;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYCAP_9); // 9Ô∏è‚É£ (`U+0039 U+FE0F U+20E3`)"] #[doc="# assert_eq!(KEYCAP_9.to_string().as_str(), \"9Ô∏è‚É£\");"]
#[doc="```"]
pub static KEYCAP_9 :  Emoji = Emoji::new("keycap: 9", Version(0, 6), "9Ô∏è‚É£"); // keycap: 9
		
		#[doc="keycap: * *Ô∏è‚É£"]#[doc=""]#[doc="Since E2.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYCAP_ASTERISK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYCAP_ASTERISK); // *Ô∏è‚É£ (`U+002A U+FE0F U+20E3`)"] #[doc="# assert_eq!(KEYCAP_ASTERISK.to_string().as_str(), \"*Ô∏è‚É£\");"]
#[doc="```"]
pub static KEYCAP_ASTERISK :  Emoji = Emoji::new("keycap: *", Version(2, 0), "*Ô∏è‚É£"); // keycap: *
		
		#[doc="keycap: # #Ô∏è‚É£"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYCAP_HASH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYCAP_HASH); // #Ô∏è‚É£ (`U+0023 U+FE0F U+20E3`)"] #[doc="# assert_eq!(KEYCAP_HASH.to_string().as_str(), \"#Ô∏è‚É£\");"]
#[doc="```"]
pub static KEYCAP_HASH :  Emoji = Emoji::new("keycap: #", Version(0, 6), "#Ô∏è‚É£"); // keycap: #
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // KEYCAP_0
				
				&KEYCAP_0,
				
			],
			
			&[ // KEYCAP_1
				
				&KEYCAP_1,
				
			],
			
			&[ // KEYCAP_10
				
				&KEYCAP_10,
				
			],
			
			&[ // KEYCAP_2
				
				&KEYCAP_2,
				
			],
			
			&[ // KEYCAP_3
				
				&KEYCAP_3,
				
			],
			
			&[ // KEYCAP_4
				
				&KEYCAP_4,
				
			],
			
			&[ // KEYCAP_5
				
				&KEYCAP_5,
				
			],
			
			&[ // KEYCAP_6
				
				&KEYCAP_6,
				
			],
			
			&[ // KEYCAP_7
				
				&KEYCAP_7,
				
			],
			
			&[ // KEYCAP_8
				
				&KEYCAP_8,
				
			],
			
			&[ // KEYCAP_9
				
				&KEYCAP_9,
				
			],
			
			&[ // KEYCAP_ASTERISK
				
				&KEYCAP_ASTERISK,
				
			],
			
			&[ // KEYCAP_HASH
				
				&KEYCAP_HASH,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&KEYCAP_0, // KEYCAP_0
				
			
				
				&KEYCAP_1, // KEYCAP_1
				
			
				
				&KEYCAP_10, // KEYCAP_10
				
			
				
				&KEYCAP_2, // KEYCAP_2
				
			
				
				&KEYCAP_3, // KEYCAP_3
				
			
				
				&KEYCAP_4, // KEYCAP_4
				
			
				
				&KEYCAP_5, // KEYCAP_5
				
			
				
				&KEYCAP_6, // KEYCAP_6
				
			
				
				&KEYCAP_7, // KEYCAP_7
				
			
				
				&KEYCAP_8, // KEYCAP_8
				
			
				
				&KEYCAP_9, // KEYCAP_9
				
			
				
				&KEYCAP_ASTERISK, // KEYCAP_ASTERISK
				
			
				
				&KEYCAP_HASH, // KEYCAP_HASH
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // keycap
	
	/// math ‚ûó‚ôæÔ∏è‚ûñ
	pub mod math {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="divide ‚ûó"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DIVIDE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DIVIDE); // ‚ûó (`U+2797`)"] #[doc="# assert_eq!(DIVIDE.to_string().as_str(), \"‚ûó\");"]
#[doc="```"]
pub static DIVIDE :  Emoji = Emoji::new("divide", Version(0, 6), "‚ûó"); // divide
		
		#[doc="infinity ‚ôæÔ∏è"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::INFINITY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", INFINITY); // ‚ôæÔ∏è (`U+267E U+FE0F`)"] #[doc="# assert_eq!(INFINITY.to_string().as_str(), \"‚ôæÔ∏è\");"]
#[doc="```"]
pub static INFINITY :  Emoji = Emoji::new("infinity", Version(11, 0), "‚ôæÔ∏è"); // infinity
		
		#[doc="minus ‚ûñ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MINUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MINUS); // ‚ûñ (`U+2796`)"] #[doc="# assert_eq!(MINUS.to_string().as_str(), \"‚ûñ\");"]
#[doc="```"]
pub static MINUS :  Emoji = Emoji::new("minus", Version(0, 6), "‚ûñ"); // minus
		
		#[doc="multiply ‚úñÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MULTIPLY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MULTIPLY); // ‚úñÔ∏è (`U+2716 U+FE0F`)"] #[doc="# assert_eq!(MULTIPLY.to_string().as_str(), \"‚úñÔ∏è\");"]
#[doc="```"]
pub static MULTIPLY :  Emoji = Emoji::new("multiply", Version(0, 6), "‚úñÔ∏è"); // multiply
		
		#[doc="plus ‚ûï"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PLUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PLUS); // ‚ûï (`U+2795`)"] #[doc="# assert_eq!(PLUS.to_string().as_str(), \"‚ûï\");"]
#[doc="```"]
pub static PLUS :  Emoji = Emoji::new("plus", Version(0, 6), "‚ûï"); // plus
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // DIVIDE
				
				&DIVIDE,
				
			],
			
			&[ // INFINITY
				
				&INFINITY,
				
			],
			
			&[ // MINUS
				
				&MINUS,
				
			],
			
			&[ // MULTIPLY
				
				&MULTIPLY,
				
			],
			
			&[ // PLUS
				
				&PLUS,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&DIVIDE, // DIVIDE
				
			
				
				&INFINITY, // INFINITY
				
			
				
				&MINUS, // MINUS
				
			
				
				&MULTIPLY, // MULTIPLY
				
			
				
				&PLUS, // PLUS
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // math
	
	/// other_symbol ‚òëÔ∏è‚úîÔ∏è‚úÖ
	pub mod other_symbol {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="check box with check ‚òëÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHECK_BOX_WITH_CHECK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHECK_BOX_WITH_CHECK); // ‚òëÔ∏è (`U+2611 U+FE0F`)"] #[doc="# assert_eq!(CHECK_BOX_WITH_CHECK.to_string().as_str(), \"‚òëÔ∏è\");"]
#[doc="```"]
pub static CHECK_BOX_WITH_CHECK :  Emoji = Emoji::new("check box with check", Version(0, 6), "‚òëÔ∏è"); // check box with check
		
		#[doc="check mark ‚úîÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHECK_MARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHECK_MARK); // ‚úîÔ∏è (`U+2714 U+FE0F`)"] #[doc="# assert_eq!(CHECK_MARK.to_string().as_str(), \"‚úîÔ∏è\");"]
#[doc="```"]
pub static CHECK_MARK :  Emoji = Emoji::new("check mark", Version(0, 6), "‚úîÔ∏è"); // check mark
		
		#[doc="check mark button ‚úÖ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHECK_MARK_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHECK_MARK_BUTTON); // ‚úÖ (`U+2705`)"] #[doc="# assert_eq!(CHECK_MARK_BUTTON.to_string().as_str(), \"‚úÖ\");"]
#[doc="```"]
pub static CHECK_MARK_BUTTON :  Emoji = Emoji::new("check mark button", Version(0, 6), "‚úÖ"); // check mark button
		
		#[doc="copyright ¬©Ô∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COPYRIGHT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COPYRIGHT); // ¬©Ô∏è (`U+00A9 U+FE0F`)"] #[doc="# assert_eq!(COPYRIGHT.to_string().as_str(), \"¬©Ô∏è\");"]
#[doc="```"]
pub static COPYRIGHT :  Emoji = Emoji::new("copyright", Version(0, 6), "¬©Ô∏è"); // copyright
		
		#[doc="cross mark ‚ùå"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CROSS_MARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CROSS_MARK); // ‚ùå (`U+274C`)"] #[doc="# assert_eq!(CROSS_MARK.to_string().as_str(), \"‚ùå\");"]
#[doc="```"]
pub static CROSS_MARK :  Emoji = Emoji::new("cross mark", Version(0, 6), "‚ùå"); // cross mark
		
		#[doc="cross mark button ‚ùé"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CROSS_MARK_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CROSS_MARK_BUTTON); // ‚ùé (`U+274E`)"] #[doc="# assert_eq!(CROSS_MARK_BUTTON.to_string().as_str(), \"‚ùé\");"]
#[doc="```"]
pub static CROSS_MARK_BUTTON :  Emoji = Emoji::new("cross mark button", Version(0, 6), "‚ùé"); // cross mark button
		
		#[doc="curly loop ‚û∞"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CURLY_LOOP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CURLY_LOOP); // ‚û∞ (`U+27B0`)"] #[doc="# assert_eq!(CURLY_LOOP.to_string().as_str(), \"‚û∞\");"]
#[doc="```"]
pub static CURLY_LOOP :  Emoji = Emoji::new("curly loop", Version(0, 6), "‚û∞"); // curly loop
		
		#[doc="double curly loop ‚ûø"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOUBLE_CURLY_LOOP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOUBLE_CURLY_LOOP); // ‚ûø (`U+27BF`)"] #[doc="# assert_eq!(DOUBLE_CURLY_LOOP.to_string().as_str(), \"‚ûø\");"]
#[doc="```"]
pub static DOUBLE_CURLY_LOOP :  Emoji = Emoji::new("double curly loop", Version(1, 0), "‚ûø"); // double curly loop
		
		#[doc="eight-pointed star ‚ú¥Ô∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EIGHT_POINTED_STAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EIGHT_POINTED_STAR); // ‚ú¥Ô∏è (`U+2734 U+FE0F`)"] #[doc="# assert_eq!(EIGHT_POINTED_STAR.to_string().as_str(), \"‚ú¥Ô∏è\");"]
#[doc="```"]
pub static EIGHT_POINTED_STAR :  Emoji = Emoji::new("eight-pointed star", Version(0, 6), "‚ú¥Ô∏è"); // eight-pointed star
		
		#[doc="eight-spoked asterisk ‚ú≥Ô∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EIGHT_SPOKED_ASTERISK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EIGHT_SPOKED_ASTERISK); // ‚ú≥Ô∏è (`U+2733 U+FE0F`)"] #[doc="# assert_eq!(EIGHT_SPOKED_ASTERISK.to_string().as_str(), \"‚ú≥Ô∏è\");"]
#[doc="```"]
pub static EIGHT_SPOKED_ASTERISK :  Emoji = Emoji::new("eight-spoked asterisk", Version(0, 6), "‚ú≥Ô∏è"); // eight-spoked asterisk
		
		#[doc="fleur-de-lis ‚öúÔ∏è"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLEUR_DE_LIS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLEUR_DE_LIS); // ‚öúÔ∏è (`U+269C U+FE0F`)"] #[doc="# assert_eq!(FLEUR_DE_LIS.to_string().as_str(), \"‚öúÔ∏è\");"]
#[doc="```"]
pub static FLEUR_DE_LIS :  Emoji = Emoji::new("fleur-de-lis", Version(1, 0), "‚öúÔ∏è"); // fleur-de-lis
		
		#[doc="hollow red circle ‚≠ï"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOLLOW_RED_CIRCLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOLLOW_RED_CIRCLE); // ‚≠ï (`U+2B55`)"] #[doc="# assert_eq!(HOLLOW_RED_CIRCLE.to_string().as_str(), \"‚≠ï\");"]
#[doc="```"]
pub static HOLLOW_RED_CIRCLE :  Emoji = Emoji::new("hollow red circle", Version(0, 6), "‚≠ï"); // hollow red circle
		
		#[doc="Japanese symbol for beginner üî∞"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_SYMBOL_FOR_BEGINNER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_SYMBOL_FOR_BEGINNER); // üî∞ (`U+1F530`)"] #[doc="# assert_eq!(JAPANESE_SYMBOL_FOR_BEGINNER.to_string().as_str(), \"üî∞\");"]
#[doc="```"]
pub static JAPANESE_SYMBOL_FOR_BEGINNER :  Emoji = Emoji::new("Japanese symbol for beginner", Version(0, 6), "üî∞"); // Japanese symbol for beginner
		
		#[doc="medical symbol ‚öïÔ∏è"]#[doc=""]#[doc="Since E4.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MEDICAL_SYMBOL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MEDICAL_SYMBOL); // ‚öïÔ∏è (`U+2695 U+FE0F`)"] #[doc="# assert_eq!(MEDICAL_SYMBOL.to_string().as_str(), \"‚öïÔ∏è\");"]
#[doc="```"]
pub static MEDICAL_SYMBOL :  Emoji = Emoji::new("medical symbol", Version(4, 0), "‚öïÔ∏è"); // medical symbol
		
		#[doc="name badge üìõ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NAME_BADGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NAME_BADGE); // üìõ (`U+1F4DB`)"] #[doc="# assert_eq!(NAME_BADGE.to_string().as_str(), \"üìõ\");"]
#[doc="```"]
pub static NAME_BADGE :  Emoji = Emoji::new("name badge", Version(0, 6), "üìõ"); // name badge
		
		#[doc="part alternation mark „ÄΩÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PART_ALTERNATION_MARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PART_ALTERNATION_MARK); // „ÄΩÔ∏è (`U+303D U+FE0F`)"] #[doc="# assert_eq!(PART_ALTERNATION_MARK.to_string().as_str(), \"„ÄΩÔ∏è\");"]
#[doc="```"]
pub static PART_ALTERNATION_MARK :  Emoji = Emoji::new("part alternation mark", Version(0, 6), "„ÄΩÔ∏è"); // part alternation mark
		
		#[doc="recycling symbol ‚ôªÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RECYCLING_SYMBOL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RECYCLING_SYMBOL); // ‚ôªÔ∏è (`U+267B U+FE0F`)"] #[doc="# assert_eq!(RECYCLING_SYMBOL.to_string().as_str(), \"‚ôªÔ∏è\");"]
#[doc="```"]
pub static RECYCLING_SYMBOL :  Emoji = Emoji::new("recycling symbol", Version(0, 6), "‚ôªÔ∏è"); // recycling symbol
		
		#[doc="registered ¬ÆÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::REGISTERED;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", REGISTERED); // ¬ÆÔ∏è (`U+00AE U+FE0F`)"] #[doc="# assert_eq!(REGISTERED.to_string().as_str(), \"¬ÆÔ∏è\");"]
#[doc="```"]
pub static REGISTERED :  Emoji = Emoji::new("registered", Version(0, 6), "¬ÆÔ∏è"); // registered
		
		#[doc="sparkle ‚ùáÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPARKLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPARKLE); // ‚ùáÔ∏è (`U+2747 U+FE0F`)"] #[doc="# assert_eq!(SPARKLE.to_string().as_str(), \"‚ùáÔ∏è\");"]
#[doc="```"]
pub static SPARKLE :  Emoji = Emoji::new("sparkle", Version(0, 6), "‚ùáÔ∏è"); // sparkle
		
		#[doc="trade mark ‚Ñ¢Ô∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TRADE_MARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TRADE_MARK); // ‚Ñ¢Ô∏è (`U+2122 U+FE0F`)"] #[doc="# assert_eq!(TRADE_MARK.to_string().as_str(), \"‚Ñ¢Ô∏è\");"]
#[doc="```"]
pub static TRADE_MARK :  Emoji = Emoji::new("trade mark", Version(0, 6), "‚Ñ¢Ô∏è"); // trade mark
		
		#[doc="trident emblem üî±"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TRIDENT_EMBLEM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TRIDENT_EMBLEM); // üî± (`U+1F531`)"] #[doc="# assert_eq!(TRIDENT_EMBLEM.to_string().as_str(), \"üî±\");"]
#[doc="```"]
pub static TRIDENT_EMBLEM :  Emoji = Emoji::new("trident emblem", Version(0, 6), "üî±"); // trident emblem
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // CHECK_BOX_WITH_CHECK
				
				&CHECK_BOX_WITH_CHECK,
				
			],
			
			&[ // CHECK_MARK
				
				&CHECK_MARK,
				
			],
			
			&[ // CHECK_MARK_BUTTON
				
				&CHECK_MARK_BUTTON,
				
			],
			
			&[ // COPYRIGHT
				
				&COPYRIGHT,
				
			],
			
			&[ // CROSS_MARK
				
				&CROSS_MARK,
				
			],
			
			&[ // CROSS_MARK_BUTTON
				
				&CROSS_MARK_BUTTON,
				
			],
			
			&[ // CURLY_LOOP
				
				&CURLY_LOOP,
				
			],
			
			&[ // DOUBLE_CURLY_LOOP
				
				&DOUBLE_CURLY_LOOP,
				
			],
			
			&[ // EIGHT_POINTED_STAR
				
				&EIGHT_POINTED_STAR,
				
			],
			
			&[ // EIGHT_SPOKED_ASTERISK
				
				&EIGHT_SPOKED_ASTERISK,
				
			],
			
			&[ // FLEUR_DE_LIS
				
				&FLEUR_DE_LIS,
				
			],
			
			&[ // HOLLOW_RED_CIRCLE
				
				&HOLLOW_RED_CIRCLE,
				
			],
			
			&[ // JAPANESE_SYMBOL_FOR_BEGINNER
				
				&JAPANESE_SYMBOL_FOR_BEGINNER,
				
			],
			
			&[ // MEDICAL_SYMBOL
				
				&MEDICAL_SYMBOL,
				
			],
			
			&[ // NAME_BADGE
				
				&NAME_BADGE,
				
			],
			
			&[ // PART_ALTERNATION_MARK
				
				&PART_ALTERNATION_MARK,
				
			],
			
			&[ // RECYCLING_SYMBOL
				
				&RECYCLING_SYMBOL,
				
			],
			
			&[ // REGISTERED
				
				&REGISTERED,
				
			],
			
			&[ // SPARKLE
				
				&SPARKLE,
				
			],
			
			&[ // TRADE_MARK
				
				&TRADE_MARK,
				
			],
			
			&[ // TRIDENT_EMBLEM
				
				&TRIDENT_EMBLEM,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&CHECK_BOX_WITH_CHECK, // CHECK_BOX_WITH_CHECK
				
			
				
				&CHECK_MARK, // CHECK_MARK
				
			
				
				&CHECK_MARK_BUTTON, // CHECK_MARK_BUTTON
				
			
				
				&COPYRIGHT, // COPYRIGHT
				
			
				
				&CROSS_MARK, // CROSS_MARK
				
			
				
				&CROSS_MARK_BUTTON, // CROSS_MARK_BUTTON
				
			
				
				&CURLY_LOOP, // CURLY_LOOP
				
			
				
				&DOUBLE_CURLY_LOOP, // DOUBLE_CURLY_LOOP
				
			
				
				&EIGHT_POINTED_STAR, // EIGHT_POINTED_STAR
				
			
				
				&EIGHT_SPOKED_ASTERISK, // EIGHT_SPOKED_ASTERISK
				
			
				
				&FLEUR_DE_LIS, // FLEUR_DE_LIS
				
			
				
				&HOLLOW_RED_CIRCLE, // HOLLOW_RED_CIRCLE
				
			
				
				&JAPANESE_SYMBOL_FOR_BEGINNER, // JAPANESE_SYMBOL_FOR_BEGINNER
				
			
				
				&MEDICAL_SYMBOL, // MEDICAL_SYMBOL
				
			
				
				&NAME_BADGE, // NAME_BADGE
				
			
				
				&PART_ALTERNATION_MARK, // PART_ALTERNATION_MARK
				
			
				
				&RECYCLING_SYMBOL, // RECYCLING_SYMBOL
				
			
				
				&REGISTERED, // REGISTERED
				
			
				
				&SPARKLE, // SPARKLE
				
			
				
				&TRADE_MARK, // TRADE_MARK
				
			
				
				&TRIDENT_EMBLEM, // TRIDENT_EMBLEM
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // other_symbol
	
	/// punctuation ‚ÄºÔ∏è‚ÅâÔ∏è‚ùó
	pub mod punctuation {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="double exclamation mark ‚ÄºÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOUBLE_EXCLAMATION_MARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOUBLE_EXCLAMATION_MARK); // ‚ÄºÔ∏è (`U+203C U+FE0F`)"] #[doc="# assert_eq!(DOUBLE_EXCLAMATION_MARK.to_string().as_str(), \"‚ÄºÔ∏è\");"]
#[doc="```"]
pub static DOUBLE_EXCLAMATION_MARK :  Emoji = Emoji::new("double exclamation mark", Version(0, 6), "‚ÄºÔ∏è"); // double exclamation mark
		
		#[doc="exclamation question mark ‚ÅâÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EXCLAMATION_QUESTION_MARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EXCLAMATION_QUESTION_MARK); // ‚ÅâÔ∏è (`U+2049 U+FE0F`)"] #[doc="# assert_eq!(EXCLAMATION_QUESTION_MARK.to_string().as_str(), \"‚ÅâÔ∏è\");"]
#[doc="```"]
pub static EXCLAMATION_QUESTION_MARK :  Emoji = Emoji::new("exclamation question mark", Version(0, 6), "‚ÅâÔ∏è"); // exclamation question mark
		
		#[doc="red exclamation mark ‚ùó"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RED_EXCLAMATION_MARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RED_EXCLAMATION_MARK); // ‚ùó (`U+2757`)"] #[doc="# assert_eq!(RED_EXCLAMATION_MARK.to_string().as_str(), \"‚ùó\");"]
#[doc="```"]
pub static RED_EXCLAMATION_MARK :  Emoji = Emoji::new("red exclamation mark", Version(0, 6), "‚ùó"); // red exclamation mark
		
		#[doc="red question mark ‚ùì"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RED_QUESTION_MARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RED_QUESTION_MARK); // ‚ùì (`U+2753`)"] #[doc="# assert_eq!(RED_QUESTION_MARK.to_string().as_str(), \"‚ùì\");"]
#[doc="```"]
pub static RED_QUESTION_MARK :  Emoji = Emoji::new("red question mark", Version(0, 6), "‚ùì"); // red question mark
		
		#[doc="wavy dash „Ä∞Ô∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WAVY_DASH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WAVY_DASH); // „Ä∞Ô∏è (`U+3030 U+FE0F`)"] #[doc="# assert_eq!(WAVY_DASH.to_string().as_str(), \"„Ä∞Ô∏è\");"]
#[doc="```"]
pub static WAVY_DASH :  Emoji = Emoji::new("wavy dash", Version(0, 6), "„Ä∞Ô∏è"); // wavy dash
		
		#[doc="white exclamation mark ‚ùï"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHITE_EXCLAMATION_MARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHITE_EXCLAMATION_MARK); // ‚ùï (`U+2755`)"] #[doc="# assert_eq!(WHITE_EXCLAMATION_MARK.to_string().as_str(), \"‚ùï\");"]
#[doc="```"]
pub static WHITE_EXCLAMATION_MARK :  Emoji = Emoji::new("white exclamation mark", Version(0, 6), "‚ùï"); // white exclamation mark
		
		#[doc="white question mark ‚ùî"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHITE_QUESTION_MARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHITE_QUESTION_MARK); // ‚ùî (`U+2754`)"] #[doc="# assert_eq!(WHITE_QUESTION_MARK.to_string().as_str(), \"‚ùî\");"]
#[doc="```"]
pub static WHITE_QUESTION_MARK :  Emoji = Emoji::new("white question mark", Version(0, 6), "‚ùî"); // white question mark
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // DOUBLE_EXCLAMATION_MARK
				
				&DOUBLE_EXCLAMATION_MARK,
				
			],
			
			&[ // EXCLAMATION_QUESTION_MARK
				
				&EXCLAMATION_QUESTION_MARK,
				
			],
			
			&[ // RED_EXCLAMATION_MARK
				
				&RED_EXCLAMATION_MARK,
				
			],
			
			&[ // RED_QUESTION_MARK
				
				&RED_QUESTION_MARK,
				
			],
			
			&[ // WAVY_DASH
				
				&WAVY_DASH,
				
			],
			
			&[ // WHITE_EXCLAMATION_MARK
				
				&WHITE_EXCLAMATION_MARK,
				
			],
			
			&[ // WHITE_QUESTION_MARK
				
				&WHITE_QUESTION_MARK,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&DOUBLE_EXCLAMATION_MARK, // DOUBLE_EXCLAMATION_MARK
				
			
				
				&EXCLAMATION_QUESTION_MARK, // EXCLAMATION_QUESTION_MARK
				
			
				
				&RED_EXCLAMATION_MARK, // RED_EXCLAMATION_MARK
				
			
				
				&RED_QUESTION_MARK, // RED_QUESTION_MARK
				
			
				
				&WAVY_DASH, // WAVY_DASH
				
			
				
				&WHITE_EXCLAMATION_MARK, // WHITE_EXCLAMATION_MARK
				
			
				
				&WHITE_QUESTION_MARK, // WHITE_QUESTION_MARK
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // punctuation
	
	/// religion ‚öõÔ∏èüîØ‚úùÔ∏è
	pub mod religion {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="atom symbol ‚öõÔ∏è"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ATOM_SYMBOL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ATOM_SYMBOL); // ‚öõÔ∏è (`U+269B U+FE0F`)"] #[doc="# assert_eq!(ATOM_SYMBOL.to_string().as_str(), \"‚öõÔ∏è\");"]
#[doc="```"]
pub static ATOM_SYMBOL :  Emoji = Emoji::new("atom symbol", Version(1, 0), "‚öõÔ∏è"); // atom symbol
		
		#[doc="dotted six-pointed star üîØ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOTTED_SIX_POINTED_STAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOTTED_SIX_POINTED_STAR); // üîØ (`U+1F52F`)"] #[doc="# assert_eq!(DOTTED_SIX_POINTED_STAR.to_string().as_str(), \"üîØ\");"]
#[doc="```"]
pub static DOTTED_SIX_POINTED_STAR :  Emoji = Emoji::new("dotted six-pointed star", Version(0, 6), "üîØ"); // dotted six-pointed star
		
		#[doc="latin cross ‚úùÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LATIN_CROSS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LATIN_CROSS); // ‚úùÔ∏è (`U+271D U+FE0F`)"] #[doc="# assert_eq!(LATIN_CROSS.to_string().as_str(), \"‚úùÔ∏è\");"]
#[doc="```"]
pub static LATIN_CROSS :  Emoji = Emoji::new("latin cross", Version(0, 7), "‚úùÔ∏è"); // latin cross
		
		#[doc="menorah üïé"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MENORAH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MENORAH); // üïé (`U+1F54E`)"] #[doc="# assert_eq!(MENORAH.to_string().as_str(), \"üïé\");"]
#[doc="```"]
pub static MENORAH :  Emoji = Emoji::new("menorah", Version(1, 0), "üïé"); // menorah
		
		#[doc="om üïâÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OM); // üïâÔ∏è (`U+1F549 U+FE0F`)"] #[doc="# assert_eq!(OM.to_string().as_str(), \"üïâÔ∏è\");"]
#[doc="```"]
pub static OM :  Emoji = Emoji::new("om", Version(0, 7), "üïâÔ∏è"); // om
		
		#[doc="orthodox cross ‚ò¶Ô∏è"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ORTHODOX_CROSS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ORTHODOX_CROSS); // ‚ò¶Ô∏è (`U+2626 U+FE0F`)"] #[doc="# assert_eq!(ORTHODOX_CROSS.to_string().as_str(), \"‚ò¶Ô∏è\");"]
#[doc="```"]
pub static ORTHODOX_CROSS :  Emoji = Emoji::new("orthodox cross", Version(1, 0), "‚ò¶Ô∏è"); // orthodox cross
		
		#[doc="peace symbol ‚òÆÔ∏è"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PEACE_SYMBOL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PEACE_SYMBOL); // ‚òÆÔ∏è (`U+262E U+FE0F`)"] #[doc="# assert_eq!(PEACE_SYMBOL.to_string().as_str(), \"‚òÆÔ∏è\");"]
#[doc="```"]
pub static PEACE_SYMBOL :  Emoji = Emoji::new("peace symbol", Version(1, 0), "‚òÆÔ∏è"); // peace symbol
		
		#[doc="place of worship üõê"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PLACE_OF_WORSHIP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PLACE_OF_WORSHIP); // üõê (`U+1F6D0`)"] #[doc="# assert_eq!(PLACE_OF_WORSHIP.to_string().as_str(), \"üõê\");"]
#[doc="```"]
pub static PLACE_OF_WORSHIP :  Emoji = Emoji::new("place of worship", Version(1, 0), "üõê"); // place of worship
		
		#[doc="star and crescent ‚ò™Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STAR_AND_CRESCENT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STAR_AND_CRESCENT); // ‚ò™Ô∏è (`U+262A U+FE0F`)"] #[doc="# assert_eq!(STAR_AND_CRESCENT.to_string().as_str(), \"‚ò™Ô∏è\");"]
#[doc="```"]
pub static STAR_AND_CRESCENT :  Emoji = Emoji::new("star and crescent", Version(0, 7), "‚ò™Ô∏è"); // star and crescent
		
		#[doc="star of David ‚ú°Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STAR_OF_DAVID;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STAR_OF_DAVID); // ‚ú°Ô∏è (`U+2721 U+FE0F`)"] #[doc="# assert_eq!(STAR_OF_DAVID.to_string().as_str(), \"‚ú°Ô∏è\");"]
#[doc="```"]
pub static STAR_OF_DAVID :  Emoji = Emoji::new("star of David", Version(0, 7), "‚ú°Ô∏è"); // star of David
		
		#[doc="wheel of dharma ‚ò∏Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHEEL_OF_DHARMA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHEEL_OF_DHARMA); // ‚ò∏Ô∏è (`U+2638 U+FE0F`)"] #[doc="# assert_eq!(WHEEL_OF_DHARMA.to_string().as_str(), \"‚ò∏Ô∏è\");"]
#[doc="```"]
pub static WHEEL_OF_DHARMA :  Emoji = Emoji::new("wheel of dharma", Version(0, 7), "‚ò∏Ô∏è"); // wheel of dharma
		
		#[doc="yin yang ‚òØÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::YIN_YANG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", YIN_YANG); // ‚òØÔ∏è (`U+262F U+FE0F`)"] #[doc="# assert_eq!(YIN_YANG.to_string().as_str(), \"‚òØÔ∏è\");"]
#[doc="```"]
pub static YIN_YANG :  Emoji = Emoji::new("yin yang", Version(0, 7), "‚òØÔ∏è"); // yin yang
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // ATOM_SYMBOL
				
				&ATOM_SYMBOL,
				
			],
			
			&[ // DOTTED_SIX_POINTED_STAR
				
				&DOTTED_SIX_POINTED_STAR,
				
			],
			
			&[ // LATIN_CROSS
				
				&LATIN_CROSS,
				
			],
			
			&[ // MENORAH
				
				&MENORAH,
				
			],
			
			&[ // OM
				
				&OM,
				
			],
			
			&[ // ORTHODOX_CROSS
				
				&ORTHODOX_CROSS,
				
			],
			
			&[ // PEACE_SYMBOL
				
				&PEACE_SYMBOL,
				
			],
			
			&[ // PLACE_OF_WORSHIP
				
				&PLACE_OF_WORSHIP,
				
			],
			
			&[ // STAR_AND_CRESCENT
				
				&STAR_AND_CRESCENT,
				
			],
			
			&[ // STAR_OF_DAVID
				
				&STAR_OF_DAVID,
				
			],
			
			&[ // WHEEL_OF_DHARMA
				
				&WHEEL_OF_DHARMA,
				
			],
			
			&[ // YIN_YANG
				
				&YIN_YANG,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&ATOM_SYMBOL, // ATOM_SYMBOL
				
			
				
				&DOTTED_SIX_POINTED_STAR, // DOTTED_SIX_POINTED_STAR
				
			
				
				&LATIN_CROSS, // LATIN_CROSS
				
			
				
				&MENORAH, // MENORAH
				
			
				
				&OM, // OM
				
			
				
				&ORTHODOX_CROSS, // ORTHODOX_CROSS
				
			
				
				&PEACE_SYMBOL, // PEACE_SYMBOL
				
			
				
				&PLACE_OF_WORSHIP, // PLACE_OF_WORSHIP
				
			
				
				&STAR_AND_CRESCENT, // STAR_AND_CRESCENT
				
			
				
				&STAR_OF_DAVID, // STAR_OF_DAVID
				
			
				
				&WHEEL_OF_DHARMA, // WHEEL_OF_DHARMA
				
			
				
				&YIN_YANG, // YIN_YANG
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // religion
	
	/// transport_sign üèßüöºüõÑ
	pub mod transport_sign {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="ATM sign üèß"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ATM_SIGN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ATM_SIGN); // üèß (`U+1F3E7`)"] #[doc="# assert_eq!(ATM_SIGN.to_string().as_str(), \"üèß\");"]
#[doc="```"]
pub static ATM_SIGN :  Emoji = Emoji::new("ATM sign", Version(0, 6), "üèß"); // ATM sign
		
		#[doc="baby symbol üöº"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BABY_SYMBOL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BABY_SYMBOL); // üöº (`U+1F6BC`)"] #[doc="# assert_eq!(BABY_SYMBOL.to_string().as_str(), \"üöº\");"]
#[doc="```"]
pub static BABY_SYMBOL :  Emoji = Emoji::new("baby symbol", Version(0, 6), "üöº"); // baby symbol
		
		#[doc="baggage claim üõÑ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BAGGAGE_CLAIM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BAGGAGE_CLAIM); // üõÑ (`U+1F6C4`)"] #[doc="# assert_eq!(BAGGAGE_CLAIM.to_string().as_str(), \"üõÑ\");"]
#[doc="```"]
pub static BAGGAGE_CLAIM :  Emoji = Emoji::new("baggage claim", Version(1, 0), "üõÑ"); // baggage claim
		
		#[doc="customs üõÉ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CUSTOMS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CUSTOMS); // üõÉ (`U+1F6C3`)"] #[doc="# assert_eq!(CUSTOMS.to_string().as_str(), \"üõÉ\");"]
#[doc="```"]
pub static CUSTOMS :  Emoji = Emoji::new("customs", Version(1, 0), "üõÉ"); // customs
		
		#[doc="left luggage üõÖ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEFT_LUGGAGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEFT_LUGGAGE); // üõÖ (`U+1F6C5`)"] #[doc="# assert_eq!(LEFT_LUGGAGE.to_string().as_str(), \"üõÖ\");"]
#[doc="```"]
pub static LEFT_LUGGAGE :  Emoji = Emoji::new("left luggage", Version(1, 0), "üõÖ"); // left luggage
		
		#[doc="litter in bin sign üöÆ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LITTER_IN_BIN_SIGN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LITTER_IN_BIN_SIGN); // üöÆ (`U+1F6AE`)"] #[doc="# assert_eq!(LITTER_IN_BIN_SIGN.to_string().as_str(), \"üöÆ\");"]
#[doc="```"]
pub static LITTER_IN_BIN_SIGN :  Emoji = Emoji::new("litter in bin sign", Version(1, 0), "üöÆ"); // litter in bin sign
		
		#[doc="men‚Äôs room üöπ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MEN_S_ROOM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MEN_S_ROOM); // üöπ (`U+1F6B9`)"] #[doc="# assert_eq!(MEN_S_ROOM.to_string().as_str(), \"üöπ\");"]
#[doc="```"]
pub static MEN_S_ROOM :  Emoji = Emoji::new("men‚Äôs room", Version(0, 6), "üöπ"); // men‚Äôs room
		
		#[doc="passport control üõÇ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PASSPORT_CONTROL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PASSPORT_CONTROL); // üõÇ (`U+1F6C2`)"] #[doc="# assert_eq!(PASSPORT_CONTROL.to_string().as_str(), \"üõÇ\");"]
#[doc="```"]
pub static PASSPORT_CONTROL :  Emoji = Emoji::new("passport control", Version(1, 0), "üõÇ"); // passport control
		
		#[doc="potable water üö∞"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POTABLE_WATER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POTABLE_WATER); // üö∞ (`U+1F6B0`)"] #[doc="# assert_eq!(POTABLE_WATER.to_string().as_str(), \"üö∞\");"]
#[doc="```"]
pub static POTABLE_WATER :  Emoji = Emoji::new("potable water", Version(1, 0), "üö∞"); // potable water
		
		#[doc="restroom üöª"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RESTROOM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RESTROOM); // üöª (`U+1F6BB`)"] #[doc="# assert_eq!(RESTROOM.to_string().as_str(), \"üöª\");"]
#[doc="```"]
pub static RESTROOM :  Emoji = Emoji::new("restroom", Version(0, 6), "üöª"); // restroom
		
		#[doc="water closet üöæ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WATER_CLOSET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WATER_CLOSET); // üöæ (`U+1F6BE`)"] #[doc="# assert_eq!(WATER_CLOSET.to_string().as_str(), \"üöæ\");"]
#[doc="```"]
pub static WATER_CLOSET :  Emoji = Emoji::new("water closet", Version(0, 6), "üöæ"); // water closet
		
		#[doc="wheelchair symbol ‚ôø"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHEELCHAIR_SYMBOL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHEELCHAIR_SYMBOL); // ‚ôø (`U+267F`)"] #[doc="# assert_eq!(WHEELCHAIR_SYMBOL.to_string().as_str(), \"‚ôø\");"]
#[doc="```"]
pub static WHEELCHAIR_SYMBOL :  Emoji = Emoji::new("wheelchair symbol", Version(0, 6), "‚ôø"); // wheelchair symbol
		
		#[doc="women‚Äôs room üö∫"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WOMEN_S_ROOM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WOMEN_S_ROOM); // üö∫ (`U+1F6BA`)"] #[doc="# assert_eq!(WOMEN_S_ROOM.to_string().as_str(), \"üö∫\");"]
#[doc="```"]
pub static WOMEN_S_ROOM :  Emoji = Emoji::new("women‚Äôs room", Version(0, 6), "üö∫"); // women‚Äôs room
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // ATM_SIGN
				
				&ATM_SIGN,
				
			],
			
			&[ // BABY_SYMBOL
				
				&BABY_SYMBOL,
				
			],
			
			&[ // BAGGAGE_CLAIM
				
				&BAGGAGE_CLAIM,
				
			],
			
			&[ // CUSTOMS
				
				&CUSTOMS,
				
			],
			
			&[ // LEFT_LUGGAGE
				
				&LEFT_LUGGAGE,
				
			],
			
			&[ // LITTER_IN_BIN_SIGN
				
				&LITTER_IN_BIN_SIGN,
				
			],
			
			&[ // MEN_S_ROOM
				
				&MEN_S_ROOM,
				
			],
			
			&[ // PASSPORT_CONTROL
				
				&PASSPORT_CONTROL,
				
			],
			
			&[ // POTABLE_WATER
				
				&POTABLE_WATER,
				
			],
			
			&[ // RESTROOM
				
				&RESTROOM,
				
			],
			
			&[ // WATER_CLOSET
				
				&WATER_CLOSET,
				
			],
			
			&[ // WHEELCHAIR_SYMBOL
				
				&WHEELCHAIR_SYMBOL,
				
			],
			
			&[ // WOMEN_S_ROOM
				
				&WOMEN_S_ROOM,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&ATM_SIGN, // ATM_SIGN
				
			
				
				&BABY_SYMBOL, // BABY_SYMBOL
				
			
				
				&BAGGAGE_CLAIM, // BAGGAGE_CLAIM
				
			
				
				&CUSTOMS, // CUSTOMS
				
			
				
				&LEFT_LUGGAGE, // LEFT_LUGGAGE
				
			
				
				&LITTER_IN_BIN_SIGN, // LITTER_IN_BIN_SIGN
				
			
				
				&MEN_S_ROOM, // MEN_S_ROOM
				
			
				
				&PASSPORT_CONTROL, // PASSPORT_CONTROL
				
			
				
				&POTABLE_WATER, // POTABLE_WATER
				
			
				
				&RESTROOM, // RESTROOM
				
			
				
				&WATER_CLOSET, // WATER_CLOSET
				
			
				
				&WHEELCHAIR_SYMBOL, // WHEELCHAIR_SYMBOL
				
			
				
				&WOMEN_S_ROOM, // WOMEN_S_ROOM
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // transport_sign
	
	/// warning ‚ò£Ô∏èüö∏üö±
	pub mod warning {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="biohazard ‚ò£Ô∏è"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BIOHAZARD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BIOHAZARD); // ‚ò£Ô∏è (`U+2623 U+FE0F`)"] #[doc="# assert_eq!(BIOHAZARD.to_string().as_str(), \"‚ò£Ô∏è\");"]
#[doc="```"]
pub static BIOHAZARD :  Emoji = Emoji::new("biohazard", Version(1, 0), "‚ò£Ô∏è"); // biohazard
		
		#[doc="children crossing üö∏"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHILDREN_CROSSING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHILDREN_CROSSING); // üö∏ (`U+1F6B8`)"] #[doc="# assert_eq!(CHILDREN_CROSSING.to_string().as_str(), \"üö∏\");"]
#[doc="```"]
pub static CHILDREN_CROSSING :  Emoji = Emoji::new("children crossing", Version(1, 0), "üö∏"); // children crossing
		
		#[doc="non-potable water üö±"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NON_POTABLE_WATER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NON_POTABLE_WATER); // üö± (`U+1F6B1`)"] #[doc="# assert_eq!(NON_POTABLE_WATER.to_string().as_str(), \"üö±\");"]
#[doc="```"]
pub static NON_POTABLE_WATER :  Emoji = Emoji::new("non-potable water", Version(1, 0), "üö±"); // non-potable water
		
		#[doc="no bicycles üö≥"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NO_BICYCLES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NO_BICYCLES); // üö≥ (`U+1F6B3`)"] #[doc="# assert_eq!(NO_BICYCLES.to_string().as_str(), \"üö≥\");"]
#[doc="```"]
pub static NO_BICYCLES :  Emoji = Emoji::new("no bicycles", Version(1, 0), "üö≥"); // no bicycles
		
		#[doc="no entry ‚õî"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NO_ENTRY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NO_ENTRY); // ‚õî (`U+26D4`)"] #[doc="# assert_eq!(NO_ENTRY.to_string().as_str(), \"‚õî\");"]
#[doc="```"]
pub static NO_ENTRY :  Emoji = Emoji::new("no entry", Version(0, 6), "‚õî"); // no entry
		
		#[doc="no littering üöØ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NO_LITTERING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NO_LITTERING); // üöØ (`U+1F6AF`)"] #[doc="# assert_eq!(NO_LITTERING.to_string().as_str(), \"üöØ\");"]
#[doc="```"]
pub static NO_LITTERING :  Emoji = Emoji::new("no littering", Version(1, 0), "üöØ"); // no littering
		
		#[doc="no mobile phones üìµ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NO_MOBILE_PHONES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NO_MOBILE_PHONES); // üìµ (`U+1F4F5`)"] #[doc="# assert_eq!(NO_MOBILE_PHONES.to_string().as_str(), \"üìµ\");"]
#[doc="```"]
pub static NO_MOBILE_PHONES :  Emoji = Emoji::new("no mobile phones", Version(1, 0), "üìµ"); // no mobile phones
		
		#[doc="no one under eighteen üîû"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NO_ONE_UNDER_EIGHTEEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NO_ONE_UNDER_EIGHTEEN); // üîû (`U+1F51E`)"] #[doc="# assert_eq!(NO_ONE_UNDER_EIGHTEEN.to_string().as_str(), \"üîû\");"]
#[doc="```"]
pub static NO_ONE_UNDER_EIGHTEEN :  Emoji = Emoji::new("no one under eighteen", Version(0, 6), "üîû"); // no one under eighteen
		
		#[doc="no pedestrians üö∑"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NO_PEDESTRIANS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NO_PEDESTRIANS); // üö∑ (`U+1F6B7`)"] #[doc="# assert_eq!(NO_PEDESTRIANS.to_string().as_str(), \"üö∑\");"]
#[doc="```"]
pub static NO_PEDESTRIANS :  Emoji = Emoji::new("no pedestrians", Version(1, 0), "üö∑"); // no pedestrians
		
		#[doc="no smoking üö≠"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NO_SMOKING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NO_SMOKING); // üö≠ (`U+1F6AD`)"] #[doc="# assert_eq!(NO_SMOKING.to_string().as_str(), \"üö≠\");"]
#[doc="```"]
pub static NO_SMOKING :  Emoji = Emoji::new("no smoking", Version(0, 6), "üö≠"); // no smoking
		
		#[doc="prohibited üö´"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PROHIBITED;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PROHIBITED); // üö´ (`U+1F6AB`)"] #[doc="# assert_eq!(PROHIBITED.to_string().as_str(), \"üö´\");"]
#[doc="```"]
pub static PROHIBITED :  Emoji = Emoji::new("prohibited", Version(0, 6), "üö´"); // prohibited
		
		#[doc="radioactive ‚ò¢Ô∏è"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RADIOACTIVE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RADIOACTIVE); // ‚ò¢Ô∏è (`U+2622 U+FE0F`)"] #[doc="# assert_eq!(RADIOACTIVE.to_string().as_str(), \"‚ò¢Ô∏è\");"]
#[doc="```"]
pub static RADIOACTIVE :  Emoji = Emoji::new("radioactive", Version(1, 0), "‚ò¢Ô∏è"); // radioactive
		
		#[doc="warning ‚ö†Ô∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WARNING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WARNING); // ‚ö†Ô∏è (`U+26A0 U+FE0F`)"] #[doc="# assert_eq!(WARNING.to_string().as_str(), \"‚ö†Ô∏è\");"]
#[doc="```"]
pub static WARNING :  Emoji = Emoji::new("warning", Version(0, 6), "‚ö†Ô∏è"); // warning
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BIOHAZARD
				
				&BIOHAZARD,
				
			],
			
			&[ // CHILDREN_CROSSING
				
				&CHILDREN_CROSSING,
				
			],
			
			&[ // NON_POTABLE_WATER
				
				&NON_POTABLE_WATER,
				
			],
			
			&[ // NO_BICYCLES
				
				&NO_BICYCLES,
				
			],
			
			&[ // NO_ENTRY
				
				&NO_ENTRY,
				
			],
			
			&[ // NO_LITTERING
				
				&NO_LITTERING,
				
			],
			
			&[ // NO_MOBILE_PHONES
				
				&NO_MOBILE_PHONES,
				
			],
			
			&[ // NO_ONE_UNDER_EIGHTEEN
				
				&NO_ONE_UNDER_EIGHTEEN,
				
			],
			
			&[ // NO_PEDESTRIANS
				
				&NO_PEDESTRIANS,
				
			],
			
			&[ // NO_SMOKING
				
				&NO_SMOKING,
				
			],
			
			&[ // PROHIBITED
				
				&PROHIBITED,
				
			],
			
			&[ // RADIOACTIVE
				
				&RADIOACTIVE,
				
			],
			
			&[ // WARNING
				
				&WARNING,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BIOHAZARD, // BIOHAZARD
				
			
				
				&CHILDREN_CROSSING, // CHILDREN_CROSSING
				
			
				
				&NON_POTABLE_WATER, // NON_POTABLE_WATER
				
			
				
				&NO_BICYCLES, // NO_BICYCLES
				
			
				
				&NO_ENTRY, // NO_ENTRY
				
			
				
				&NO_LITTERING, // NO_LITTERING
				
			
				
				&NO_MOBILE_PHONES, // NO_MOBILE_PHONES
				
			
				
				&NO_ONE_UNDER_EIGHTEEN, // NO_ONE_UNDER_EIGHTEEN
				
			
				
				&NO_PEDESTRIANS, // NO_PEDESTRIANS
				
			
				
				&NO_SMOKING, // NO_SMOKING
				
			
				
				&PROHIBITED, // PROHIBITED
				
			
				
				&RADIOACTIVE, // RADIOACTIVE
				
			
				
				&WARNING, // WARNING
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // warning
	
	/// zodiac ‚ôí‚ôà‚ôã
	pub mod zodiac {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="Aquarius ‚ôí"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::AQUARIUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", AQUARIUS); // ‚ôí (`U+2652`)"] #[doc="# assert_eq!(AQUARIUS.to_string().as_str(), \"‚ôí\");"]
#[doc="```"]
pub static AQUARIUS :  Emoji = Emoji::new("Aquarius", Version(0, 6), "‚ôí"); // Aquarius
		
		#[doc="Aries ‚ôà"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ARIES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ARIES); // ‚ôà (`U+2648`)"] #[doc="# assert_eq!(ARIES.to_string().as_str(), \"‚ôà\");"]
#[doc="```"]
pub static ARIES :  Emoji = Emoji::new("Aries", Version(0, 6), "‚ôà"); // Aries
		
		#[doc="Cancer ‚ôã"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CANCER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CANCER); // ‚ôã (`U+264B`)"] #[doc="# assert_eq!(CANCER.to_string().as_str(), \"‚ôã\");"]
#[doc="```"]
pub static CANCER :  Emoji = Emoji::new("Cancer", Version(0, 6), "‚ôã"); // Cancer
		
		#[doc="Capricorn ‚ôë"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CAPRICORN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CAPRICORN); // ‚ôë (`U+2651`)"] #[doc="# assert_eq!(CAPRICORN.to_string().as_str(), \"‚ôë\");"]
#[doc="```"]
pub static CAPRICORN :  Emoji = Emoji::new("Capricorn", Version(0, 6), "‚ôë"); // Capricorn
		
		#[doc="Gemini ‚ôä"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GEMINI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GEMINI); // ‚ôä (`U+264A`)"] #[doc="# assert_eq!(GEMINI.to_string().as_str(), \"‚ôä\");"]
#[doc="```"]
pub static GEMINI :  Emoji = Emoji::new("Gemini", Version(0, 6), "‚ôä"); // Gemini
		
		#[doc="Leo ‚ôå"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEO); // ‚ôå (`U+264C`)"] #[doc="# assert_eq!(LEO.to_string().as_str(), \"‚ôå\");"]
#[doc="```"]
pub static LEO :  Emoji = Emoji::new("Leo", Version(0, 6), "‚ôå"); // Leo
		
		#[doc="Libra ‚ôé"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LIBRA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LIBRA); // ‚ôé (`U+264E`)"] #[doc="# assert_eq!(LIBRA.to_string().as_str(), \"‚ôé\");"]
#[doc="```"]
pub static LIBRA :  Emoji = Emoji::new("Libra", Version(0, 6), "‚ôé"); // Libra
		
		#[doc="Ophiuchus ‚õé"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OPHIUCHUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OPHIUCHUS); // ‚õé (`U+26CE`)"] #[doc="# assert_eq!(OPHIUCHUS.to_string().as_str(), \"‚õé\");"]
#[doc="```"]
pub static OPHIUCHUS :  Emoji = Emoji::new("Ophiuchus", Version(0, 6), "‚õé"); // Ophiuchus
		
		#[doc="Pisces ‚ôì"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PISCES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PISCES); // ‚ôì (`U+2653`)"] #[doc="# assert_eq!(PISCES.to_string().as_str(), \"‚ôì\");"]
#[doc="```"]
pub static PISCES :  Emoji = Emoji::new("Pisces", Version(0, 6), "‚ôì"); // Pisces
		
		#[doc="Sagittarius ‚ôê"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SAGITTARIUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SAGITTARIUS); // ‚ôê (`U+2650`)"] #[doc="# assert_eq!(SAGITTARIUS.to_string().as_str(), \"‚ôê\");"]
#[doc="```"]
pub static SAGITTARIUS :  Emoji = Emoji::new("Sagittarius", Version(0, 6), "‚ôê"); // Sagittarius
		
		#[doc="Scorpio ‚ôè"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SCORPIO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SCORPIO); // ‚ôè (`U+264F`)"] #[doc="# assert_eq!(SCORPIO.to_string().as_str(), \"‚ôè\");"]
#[doc="```"]
pub static SCORPIO :  Emoji = Emoji::new("Scorpio", Version(0, 6), "‚ôè"); // Scorpio
		
		#[doc="Taurus ‚ôâ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TAURUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TAURUS); // ‚ôâ (`U+2649`)"] #[doc="# assert_eq!(TAURUS.to_string().as_str(), \"‚ôâ\");"]
#[doc="```"]
pub static TAURUS :  Emoji = Emoji::new("Taurus", Version(0, 6), "‚ôâ"); // Taurus
		
		#[doc="Virgo ‚ôç"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::VIRGO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", VIRGO); // ‚ôç (`U+264D`)"] #[doc="# assert_eq!(VIRGO.to_string().as_str(), \"‚ôç\");"]
#[doc="```"]
pub static VIRGO :  Emoji = Emoji::new("Virgo", Version(0, 6), "‚ôç"); // Virgo
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // AQUARIUS
				
				&AQUARIUS,
				
			],
			
			&[ // ARIES
				
				&ARIES,
				
			],
			
			&[ // CANCER
				
				&CANCER,
				
			],
			
			&[ // CAPRICORN
				
				&CAPRICORN,
				
			],
			
			&[ // GEMINI
				
				&GEMINI,
				
			],
			
			&[ // LEO
				
				&LEO,
				
			],
			
			&[ // LIBRA
				
				&LIBRA,
				
			],
			
			&[ // OPHIUCHUS
				
				&OPHIUCHUS,
				
			],
			
			&[ // PISCES
				
				&PISCES,
				
			],
			
			&[ // SAGITTARIUS
				
				&SAGITTARIUS,
				
			],
			
			&[ // SCORPIO
				
				&SCORPIO,
				
			],
			
			&[ // TAURUS
				
				&TAURUS,
				
			],
			
			&[ // VIRGO
				
				&VIRGO,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&AQUARIUS, // AQUARIUS
				
			
				
				&ARIES, // ARIES
				
			
				
				&CANCER, // CANCER
				
			
				
				&CAPRICORN, // CAPRICORN
				
			
				
				&GEMINI, // GEMINI
				
			
				
				&LEO, // LEO
				
			
				
				&LIBRA, // LIBRA
				
			
				
				&OPHIUCHUS, // OPHIUCHUS
				
			
				
				&PISCES, // PISCES
				
			
				
				&SAGITTARIUS, // SAGITTARIUS
				
			
				
				&SCORPIO, // SCORPIO
				
			
				
				&TAURUS, // TAURUS
				
			
				
				&VIRGO, // VIRGO
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // zodiac
	


	// Emoji iterators

	/// Returns an iterator over all emoji variants of these subgroups grouped by base emojis
	pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
		core::iter::empty()
		
			.chain(alphanum::all_variants())
		
			.chain(arrow::all_variants())
		
			.chain(av_symbol::all_variants())
		
			.chain(currency::all_variants())
		
			.chain(gender::all_variants())
		
			.chain(geometric::all_variants())
		
			.chain(keycap::all_variants())
		
			.chain(math::all_variants())
		
			.chain(other_symbol::all_variants())
		
			.chain(punctuation::all_variants())
		
			.chain(religion::all_variants())
		
			.chain(transport_sign::all_variants())
		
			.chain(warning::all_variants())
		
			.chain(zodiac::all_variants())
		
	}

	/// Returns an iterator over all base emojis of these subgroups (i.e. one for each static)
	pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
		core::iter::empty()
		
			.chain(alphanum::base_emojis())
		
			.chain(arrow::base_emojis())
		
			.chain(av_symbol::base_emojis())
		
			.chain(currency::base_emojis())
		
			.chain(gender::base_emojis())
		
			.chain(geometric::base_emojis())
		
			.chain(keycap::base_emojis())
		
			.chain(math::base_emojis())
		
			.chain(other_symbol::base_emojis())
		
			.chain(punctuation::base_emojis())
		
			.chain(religion::base_emojis())
		
			.chain(transport_sign::base_emojis())
		
			.chain(warning::base_emojis())
		
			.chain(zodiac::base_emojis())
		
	}

} // symbols

/// travel_and_places üõéÔ∏èüè¶üèñÔ∏è
pub mod travel_and_places {
	use crate::emojis::Emoji;

	
	/// hotel üõéÔ∏èüß≥
	pub mod hotel {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="bellhop bell üõéÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BELLHOP_BELL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BELLHOP_BELL); // üõéÔ∏è (`U+1F6CE U+FE0F`)"] #[doc="# assert_eq!(BELLHOP_BELL.to_string().as_str(), \"üõéÔ∏è\");"]
#[doc="```"]
pub static BELLHOP_BELL :  Emoji = Emoji::new("bellhop bell", Version(0, 7), "üõéÔ∏è"); // bellhop bell
		
		#[doc="luggage üß≥"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LUGGAGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LUGGAGE); // üß≥ (`U+1F9F3`)"] #[doc="# assert_eq!(LUGGAGE.to_string().as_str(), \"üß≥\");"]
#[doc="```"]
pub static LUGGAGE :  Emoji = Emoji::new("luggage", Version(11, 0), "üß≥"); // luggage
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BELLHOP_BELL
				
				&BELLHOP_BELL,
				
			],
			
			&[ // LUGGAGE
				
				&LUGGAGE,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BELLHOP_BELL, // BELLHOP_BELL
				
			
				
				&LUGGAGE, // LUGGAGE
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // hotel
	
	/// place_building üè¶üß±üèóÔ∏è
	pub mod place_building {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="bank üè¶"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BANK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BANK); // üè¶ (`U+1F3E6`)"] #[doc="# assert_eq!(BANK.to_string().as_str(), \"üè¶\");"]
#[doc="```"]
pub static BANK :  Emoji = Emoji::new("bank", Version(0, 6), "üè¶"); // bank
		
		#[doc="brick üß±"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BRICK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BRICK); // üß± (`U+1F9F1`)"] #[doc="# assert_eq!(BRICK.to_string().as_str(), \"üß±\");"]
#[doc="```"]
pub static BRICK :  Emoji = Emoji::new("brick", Version(11, 0), "üß±"); // brick
		
		#[doc="building construction üèóÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BUILDING_CONSTRUCTION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BUILDING_CONSTRUCTION); // üèóÔ∏è (`U+1F3D7 U+FE0F`)"] #[doc="# assert_eq!(BUILDING_CONSTRUCTION.to_string().as_str(), \"üèóÔ∏è\");"]
#[doc="```"]
pub static BUILDING_CONSTRUCTION :  Emoji = Emoji::new("building construction", Version(0, 7), "üèóÔ∏è"); // building construction
		
		#[doc="castle üè∞"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CASTLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CASTLE); // üè∞ (`U+1F3F0`)"] #[doc="# assert_eq!(CASTLE.to_string().as_str(), \"üè∞\");"]
#[doc="```"]
pub static CASTLE :  Emoji = Emoji::new("castle", Version(0, 6), "üè∞"); // castle
		
		#[doc="classical building üèõÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLASSICAL_BUILDING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLASSICAL_BUILDING); // üèõÔ∏è (`U+1F3DB U+FE0F`)"] #[doc="# assert_eq!(CLASSICAL_BUILDING.to_string().as_str(), \"üèõÔ∏è\");"]
#[doc="```"]
pub static CLASSICAL_BUILDING :  Emoji = Emoji::new("classical building", Version(0, 7), "üèõÔ∏è"); // classical building
		
		#[doc="convenience store üè™"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CONVENIENCE_STORE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CONVENIENCE_STORE); // üè™ (`U+1F3EA`)"] #[doc="# assert_eq!(CONVENIENCE_STORE.to_string().as_str(), \"üè™\");"]
#[doc="```"]
pub static CONVENIENCE_STORE :  Emoji = Emoji::new("convenience store", Version(0, 6), "üè™"); // convenience store
		
		#[doc="department store üè¨"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DEPARTMENT_STORE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DEPARTMENT_STORE); // üè¨ (`U+1F3EC`)"] #[doc="# assert_eq!(DEPARTMENT_STORE.to_string().as_str(), \"üè¨\");"]
#[doc="```"]
pub static DEPARTMENT_STORE :  Emoji = Emoji::new("department store", Version(0, 6), "üè¨"); // department store
		
		#[doc="derelict house üèöÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DERELICT_HOUSE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DERELICT_HOUSE); // üèöÔ∏è (`U+1F3DA U+FE0F`)"] #[doc="# assert_eq!(DERELICT_HOUSE.to_string().as_str(), \"üèöÔ∏è\");"]
#[doc="```"]
pub static DERELICT_HOUSE :  Emoji = Emoji::new("derelict house", Version(0, 7), "üèöÔ∏è"); // derelict house
		
		#[doc="factory üè≠"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACTORY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACTORY); // üè≠ (`U+1F3ED`)"] #[doc="# assert_eq!(FACTORY.to_string().as_str(), \"üè≠\");"]
#[doc="```"]
pub static FACTORY :  Emoji = Emoji::new("factory", Version(0, 6), "üè≠"); // factory
		
		#[doc="hospital üè•"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOSPITAL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOSPITAL); // üè• (`U+1F3E5`)"] #[doc="# assert_eq!(HOSPITAL.to_string().as_str(), \"üè•\");"]
#[doc="```"]
pub static HOSPITAL :  Emoji = Emoji::new("hospital", Version(0, 6), "üè•"); // hospital
		
		#[doc="hotel üè®"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOTEL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOTEL); // üè® (`U+1F3E8`)"] #[doc="# assert_eq!(HOTEL.to_string().as_str(), \"üè®\");"]
#[doc="```"]
pub static HOTEL :  Emoji = Emoji::new("hotel", Version(0, 6), "üè®"); // hotel
		
		#[doc="house üè†"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOUSE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOUSE); // üè† (`U+1F3E0`)"] #[doc="# assert_eq!(HOUSE.to_string().as_str(), \"üè†\");"]
#[doc="```"]
pub static HOUSE :  Emoji = Emoji::new("house", Version(0, 6), "üè†"); // house
		
		#[doc="houses üèòÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOUSES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOUSES); // üèòÔ∏è (`U+1F3D8 U+FE0F`)"] #[doc="# assert_eq!(HOUSES.to_string().as_str(), \"üèòÔ∏è\");"]
#[doc="```"]
pub static HOUSES :  Emoji = Emoji::new("houses", Version(0, 7), "üèòÔ∏è"); // houses
		
		#[doc="house with garden üè°"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOUSE_WITH_GARDEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOUSE_WITH_GARDEN); // üè° (`U+1F3E1`)"] #[doc="# assert_eq!(HOUSE_WITH_GARDEN.to_string().as_str(), \"üè°\");"]
#[doc="```"]
pub static HOUSE_WITH_GARDEN :  Emoji = Emoji::new("house with garden", Version(0, 6), "üè°"); // house with garden
		
		#[doc="hut üõñ"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HUT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HUT); // üõñ (`U+1F6D6`)"] #[doc="# assert_eq!(HUT.to_string().as_str(), \"üõñ\");"]
#[doc="```"]
pub static HUT :  Emoji = Emoji::new("hut", Version(13, 0), "üõñ"); // hut
		
		#[doc="Japanese castle üèØ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_CASTLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_CASTLE); // üèØ (`U+1F3EF`)"] #[doc="# assert_eq!(JAPANESE_CASTLE.to_string().as_str(), \"üèØ\");"]
#[doc="```"]
pub static JAPANESE_CASTLE :  Emoji = Emoji::new("Japanese castle", Version(0, 6), "üèØ"); // Japanese castle
		
		#[doc="Japanese post office üè£"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_POST_OFFICE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_POST_OFFICE); // üè£ (`U+1F3E3`)"] #[doc="# assert_eq!(JAPANESE_POST_OFFICE.to_string().as_str(), \"üè£\");"]
#[doc="```"]
pub static JAPANESE_POST_OFFICE :  Emoji = Emoji::new("Japanese post office", Version(0, 6), "üè£"); // Japanese post office
		
		#[doc="love hotel üè©"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LOVE_HOTEL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LOVE_HOTEL); // üè© (`U+1F3E9`)"] #[doc="# assert_eq!(LOVE_HOTEL.to_string().as_str(), \"üè©\");"]
#[doc="```"]
pub static LOVE_HOTEL :  Emoji = Emoji::new("love hotel", Version(0, 6), "üè©"); // love hotel
		
		#[doc="office building üè¢"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OFFICE_BUILDING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OFFICE_BUILDING); // üè¢ (`U+1F3E2`)"] #[doc="# assert_eq!(OFFICE_BUILDING.to_string().as_str(), \"üè¢\");"]
#[doc="```"]
pub static OFFICE_BUILDING :  Emoji = Emoji::new("office building", Version(0, 6), "üè¢"); // office building
		
		#[doc="post office üè§"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POST_OFFICE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POST_OFFICE); // üè§ (`U+1F3E4`)"] #[doc="# assert_eq!(POST_OFFICE.to_string().as_str(), \"üè§\");"]
#[doc="```"]
pub static POST_OFFICE :  Emoji = Emoji::new("post office", Version(1, 0), "üè§"); // post office
		
		#[doc="rock ü™®"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ROCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ROCK); // ü™® (`U+1FAA8`)"] #[doc="# assert_eq!(ROCK.to_string().as_str(), \"ü™®\");"]
#[doc="```"]
pub static ROCK :  Emoji = Emoji::new("rock", Version(13, 0), "ü™®"); // rock
		
		#[doc="school üè´"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SCHOOL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SCHOOL); // üè´ (`U+1F3EB`)"] #[doc="# assert_eq!(SCHOOL.to_string().as_str(), \"üè´\");"]
#[doc="```"]
pub static SCHOOL :  Emoji = Emoji::new("school", Version(0, 6), "üè´"); // school
		
		#[doc="stadium üèüÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STADIUM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STADIUM); // üèüÔ∏è (`U+1F3DF U+FE0F`)"] #[doc="# assert_eq!(STADIUM.to_string().as_str(), \"üèüÔ∏è\");"]
#[doc="```"]
pub static STADIUM :  Emoji = Emoji::new("stadium", Version(0, 7), "üèüÔ∏è"); // stadium
		
		#[doc="Statue of Liberty üóΩ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STATUE_OF_LIBERTY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STATUE_OF_LIBERTY); // üóΩ (`U+1F5FD`)"] #[doc="# assert_eq!(STATUE_OF_LIBERTY.to_string().as_str(), \"üóΩ\");"]
#[doc="```"]
pub static STATUE_OF_LIBERTY :  Emoji = Emoji::new("Statue of Liberty", Version(0, 6), "üóΩ"); // Statue of Liberty
		
		#[doc="Tokyo tower üóº"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TOKYO_TOWER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TOKYO_TOWER); // üóº (`U+1F5FC`)"] #[doc="# assert_eq!(TOKYO_TOWER.to_string().as_str(), \"üóº\");"]
#[doc="```"]
pub static TOKYO_TOWER :  Emoji = Emoji::new("Tokyo tower", Version(0, 6), "üóº"); // Tokyo tower
		
		#[doc="wedding üíí"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WEDDING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WEDDING); // üíí (`U+1F492`)"] #[doc="# assert_eq!(WEDDING.to_string().as_str(), \"üíí\");"]
#[doc="```"]
pub static WEDDING :  Emoji = Emoji::new("wedding", Version(0, 6), "üíí"); // wedding
		
		#[doc="wood ü™µ"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WOOD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WOOD); // ü™µ (`U+1FAB5`)"] #[doc="# assert_eq!(WOOD.to_string().as_str(), \"ü™µ\");"]
#[doc="```"]
pub static WOOD :  Emoji = Emoji::new("wood", Version(13, 0), "ü™µ"); // wood
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BANK
				
				&BANK,
				
			],
			
			&[ // BRICK
				
				&BRICK,
				
			],
			
			&[ // BUILDING_CONSTRUCTION
				
				&BUILDING_CONSTRUCTION,
				
			],
			
			&[ // CASTLE
				
				&CASTLE,
				
			],
			
			&[ // CLASSICAL_BUILDING
				
				&CLASSICAL_BUILDING,
				
			],
			
			&[ // CONVENIENCE_STORE
				
				&CONVENIENCE_STORE,
				
			],
			
			&[ // DEPARTMENT_STORE
				
				&DEPARTMENT_STORE,
				
			],
			
			&[ // DERELICT_HOUSE
				
				&DERELICT_HOUSE,
				
			],
			
			&[ // FACTORY
				
				&FACTORY,
				
			],
			
			&[ // HOSPITAL
				
				&HOSPITAL,
				
			],
			
			&[ // HOTEL
				
				&HOTEL,
				
			],
			
			&[ // HOUSE
				
				&HOUSE,
				
			],
			
			&[ // HOUSES
				
				&HOUSES,
				
			],
			
			&[ // HOUSE_WITH_GARDEN
				
				&HOUSE_WITH_GARDEN,
				
			],
			
			&[ // HUT
				
				&HUT,
				
			],
			
			&[ // JAPANESE_CASTLE
				
				&JAPANESE_CASTLE,
				
			],
			
			&[ // JAPANESE_POST_OFFICE
				
				&JAPANESE_POST_OFFICE,
				
			],
			
			&[ // LOVE_HOTEL
				
				&LOVE_HOTEL,
				
			],
			
			&[ // OFFICE_BUILDING
				
				&OFFICE_BUILDING,
				
			],
			
			&[ // POST_OFFICE
				
				&POST_OFFICE,
				
			],
			
			&[ // ROCK
				
				&ROCK,
				
			],
			
			&[ // SCHOOL
				
				&SCHOOL,
				
			],
			
			&[ // STADIUM
				
				&STADIUM,
				
			],
			
			&[ // STATUE_OF_LIBERTY
				
				&STATUE_OF_LIBERTY,
				
			],
			
			&[ // TOKYO_TOWER
				
				&TOKYO_TOWER,
				
			],
			
			&[ // WEDDING
				
				&WEDDING,
				
			],
			
			&[ // WOOD
				
				&WOOD,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BANK, // BANK
				
			
				
				&BRICK, // BRICK
				
			
				
				&BUILDING_CONSTRUCTION, // BUILDING_CONSTRUCTION
				
			
				
				&CASTLE, // CASTLE
				
			
				
				&CLASSICAL_BUILDING, // CLASSICAL_BUILDING
				
			
				
				&CONVENIENCE_STORE, // CONVENIENCE_STORE
				
			
				
				&DEPARTMENT_STORE, // DEPARTMENT_STORE
				
			
				
				&DERELICT_HOUSE, // DERELICT_HOUSE
				
			
				
				&FACTORY, // FACTORY
				
			
				
				&HOSPITAL, // HOSPITAL
				
			
				
				&HOTEL, // HOTEL
				
			
				
				&HOUSE, // HOUSE
				
			
				
				&HOUSES, // HOUSES
				
			
				
				&HOUSE_WITH_GARDEN, // HOUSE_WITH_GARDEN
				
			
				
				&HUT, // HUT
				
			
				
				&JAPANESE_CASTLE, // JAPANESE_CASTLE
				
			
				
				&JAPANESE_POST_OFFICE, // JAPANESE_POST_OFFICE
				
			
				
				&LOVE_HOTEL, // LOVE_HOTEL
				
			
				
				&OFFICE_BUILDING, // OFFICE_BUILDING
				
			
				
				&POST_OFFICE, // POST_OFFICE
				
			
				
				&ROCK, // ROCK
				
			
				
				&SCHOOL, // SCHOOL
				
			
				
				&STADIUM, // STADIUM
				
			
				
				&STATUE_OF_LIBERTY, // STATUE_OF_LIBERTY
				
			
				
				&TOKYO_TOWER, // TOKYO_TOWER
				
			
				
				&WEDDING, // WEDDING
				
			
				
				&WOOD, // WOOD
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // place_building
	
	/// place_geographic üèñÔ∏èüèïÔ∏èüèúÔ∏è
	pub mod place_geographic {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="beach with umbrella üèñÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BEACH_WITH_UMBRELLA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BEACH_WITH_UMBRELLA); // üèñÔ∏è (`U+1F3D6 U+FE0F`)"] #[doc="# assert_eq!(BEACH_WITH_UMBRELLA.to_string().as_str(), \"üèñÔ∏è\");"]
#[doc="```"]
pub static BEACH_WITH_UMBRELLA :  Emoji = Emoji::new("beach with umbrella", Version(0, 7), "üèñÔ∏è"); // beach with umbrella
		
		#[doc="camping üèïÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CAMPING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CAMPING); // üèïÔ∏è (`U+1F3D5 U+FE0F`)"] #[doc="# assert_eq!(CAMPING.to_string().as_str(), \"üèïÔ∏è\");"]
#[doc="```"]
pub static CAMPING :  Emoji = Emoji::new("camping", Version(0, 7), "üèïÔ∏è"); // camping
		
		#[doc="desert üèúÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DESERT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DESERT); // üèúÔ∏è (`U+1F3DC U+FE0F`)"] #[doc="# assert_eq!(DESERT.to_string().as_str(), \"üèúÔ∏è\");"]
#[doc="```"]
pub static DESERT :  Emoji = Emoji::new("desert", Version(0, 7), "üèúÔ∏è"); // desert
		
		#[doc="desert island üèùÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DESERT_ISLAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DESERT_ISLAND); // üèùÔ∏è (`U+1F3DD U+FE0F`)"] #[doc="# assert_eq!(DESERT_ISLAND.to_string().as_str(), \"üèùÔ∏è\");"]
#[doc="```"]
pub static DESERT_ISLAND :  Emoji = Emoji::new("desert island", Version(0, 7), "üèùÔ∏è"); // desert island
		
		#[doc="mountain ‚õ∞Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOUNTAIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOUNTAIN); // ‚õ∞Ô∏è (`U+26F0 U+FE0F`)"] #[doc="# assert_eq!(MOUNTAIN.to_string().as_str(), \"‚õ∞Ô∏è\");"]
#[doc="```"]
pub static MOUNTAIN :  Emoji = Emoji::new("mountain", Version(0, 7), "‚õ∞Ô∏è"); // mountain
		
		#[doc="mount fuji üóª"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOUNT_FUJI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOUNT_FUJI); // üóª (`U+1F5FB`)"] #[doc="# assert_eq!(MOUNT_FUJI.to_string().as_str(), \"üóª\");"]
#[doc="```"]
pub static MOUNT_FUJI :  Emoji = Emoji::new("mount fuji", Version(0, 6), "üóª"); // mount fuji
		
		#[doc="national park üèûÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NATIONAL_PARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NATIONAL_PARK); // üèûÔ∏è (`U+1F3DE U+FE0F`)"] #[doc="# assert_eq!(NATIONAL_PARK.to_string().as_str(), \"üèûÔ∏è\");"]
#[doc="```"]
pub static NATIONAL_PARK :  Emoji = Emoji::new("national park", Version(0, 7), "üèûÔ∏è"); // national park
		
		#[doc="snow-capped mountain üèîÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SNOW_CAPPED_MOUNTAIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SNOW_CAPPED_MOUNTAIN); // üèîÔ∏è (`U+1F3D4 U+FE0F`)"] #[doc="# assert_eq!(SNOW_CAPPED_MOUNTAIN.to_string().as_str(), \"üèîÔ∏è\");"]
#[doc="```"]
pub static SNOW_CAPPED_MOUNTAIN :  Emoji = Emoji::new("snow-capped mountain", Version(0, 7), "üèîÔ∏è"); // snow-capped mountain
		
		#[doc="volcano üåã"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::VOLCANO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", VOLCANO); // üåã (`U+1F30B`)"] #[doc="# assert_eq!(VOLCANO.to_string().as_str(), \"üåã\");"]
#[doc="```"]
pub static VOLCANO :  Emoji = Emoji::new("volcano", Version(0, 6), "üåã"); // volcano
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BEACH_WITH_UMBRELLA
				
				&BEACH_WITH_UMBRELLA,
				
			],
			
			&[ // CAMPING
				
				&CAMPING,
				
			],
			
			&[ // DESERT
				
				&DESERT,
				
			],
			
			&[ // DESERT_ISLAND
				
				&DESERT_ISLAND,
				
			],
			
			&[ // MOUNTAIN
				
				&MOUNTAIN,
				
			],
			
			&[ // MOUNT_FUJI
				
				&MOUNT_FUJI,
				
			],
			
			&[ // NATIONAL_PARK
				
				&NATIONAL_PARK,
				
			],
			
			&[ // SNOW_CAPPED_MOUNTAIN
				
				&SNOW_CAPPED_MOUNTAIN,
				
			],
			
			&[ // VOLCANO
				
				&VOLCANO,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BEACH_WITH_UMBRELLA, // BEACH_WITH_UMBRELLA
				
			
				
				&CAMPING, // CAMPING
				
			
				
				&DESERT, // DESERT
				
			
				
				&DESERT_ISLAND, // DESERT_ISLAND
				
			
				
				&MOUNTAIN, // MOUNTAIN
				
			
				
				&MOUNT_FUJI, // MOUNT_FUJI
				
			
				
				&NATIONAL_PARK, // NATIONAL_PARK
				
			
				
				&SNOW_CAPPED_MOUNTAIN, // SNOW_CAPPED_MOUNTAIN
				
			
				
				&VOLCANO, // VOLCANO
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // place_geographic
	
	/// place_map üß≠üåéüåè
	pub mod place_map {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="compass üß≠"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COMPASS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COMPASS); // üß≠ (`U+1F9ED`)"] #[doc="# assert_eq!(COMPASS.to_string().as_str(), \"üß≠\");"]
#[doc="```"]
pub static COMPASS :  Emoji = Emoji::new("compass", Version(11, 0), "üß≠"); // compass
		
		#[doc="globe showing Americas üåé"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GLOBE_SHOWING_AMERICAS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GLOBE_SHOWING_AMERICAS); // üåé (`U+1F30E`)"] #[doc="# assert_eq!(GLOBE_SHOWING_AMERICAS.to_string().as_str(), \"üåé\");"]
#[doc="```"]
pub static GLOBE_SHOWING_AMERICAS :  Emoji = Emoji::new("globe showing Americas", Version(0, 7), "üåé"); // globe showing Americas
		
		#[doc="globe showing Asia-Australia üåè"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GLOBE_SHOWING_ASIA_AUSTRALIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GLOBE_SHOWING_ASIA_AUSTRALIA); // üåè (`U+1F30F`)"] #[doc="# assert_eq!(GLOBE_SHOWING_ASIA_AUSTRALIA.to_string().as_str(), \"üåè\");"]
#[doc="```"]
pub static GLOBE_SHOWING_ASIA_AUSTRALIA :  Emoji = Emoji::new("globe showing Asia-Australia", Version(0, 6), "üåè"); // globe showing Asia-Australia
		
		#[doc="globe showing Europe-Africa üåç"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GLOBE_SHOWING_EUROPE_AFRICA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GLOBE_SHOWING_EUROPE_AFRICA); // üåç (`U+1F30D`)"] #[doc="# assert_eq!(GLOBE_SHOWING_EUROPE_AFRICA.to_string().as_str(), \"üåç\");"]
#[doc="```"]
pub static GLOBE_SHOWING_EUROPE_AFRICA :  Emoji = Emoji::new("globe showing Europe-Africa", Version(0, 7), "üåç"); // globe showing Europe-Africa
		
		#[doc="globe with meridians üåê"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GLOBE_WITH_MERIDIANS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GLOBE_WITH_MERIDIANS); // üåê (`U+1F310`)"] #[doc="# assert_eq!(GLOBE_WITH_MERIDIANS.to_string().as_str(), \"üåê\");"]
#[doc="```"]
pub static GLOBE_WITH_MERIDIANS :  Emoji = Emoji::new("globe with meridians", Version(1, 0), "üåê"); // globe with meridians
		
		#[doc="map of Japan üóæ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MAP_OF_JAPAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MAP_OF_JAPAN); // üóæ (`U+1F5FE`)"] #[doc="# assert_eq!(MAP_OF_JAPAN.to_string().as_str(), \"üóæ\");"]
#[doc="```"]
pub static MAP_OF_JAPAN :  Emoji = Emoji::new("map of Japan", Version(0, 6), "üóæ"); // map of Japan
		
		#[doc="world map üó∫Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WORLD_MAP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WORLD_MAP); // üó∫Ô∏è (`U+1F5FA U+FE0F`)"] #[doc="# assert_eq!(WORLD_MAP.to_string().as_str(), \"üó∫Ô∏è\");"]
#[doc="```"]
pub static WORLD_MAP :  Emoji = Emoji::new("world map", Version(0, 7), "üó∫Ô∏è"); // world map
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // COMPASS
				
				&COMPASS,
				
			],
			
			&[ // GLOBE_SHOWING_AMERICAS
				
				&GLOBE_SHOWING_AMERICAS,
				
			],
			
			&[ // GLOBE_SHOWING_ASIA_AUSTRALIA
				
				&GLOBE_SHOWING_ASIA_AUSTRALIA,
				
			],
			
			&[ // GLOBE_SHOWING_EUROPE_AFRICA
				
				&GLOBE_SHOWING_EUROPE_AFRICA,
				
			],
			
			&[ // GLOBE_WITH_MERIDIANS
				
				&GLOBE_WITH_MERIDIANS,
				
			],
			
			&[ // MAP_OF_JAPAN
				
				&MAP_OF_JAPAN,
				
			],
			
			&[ // WORLD_MAP
				
				&WORLD_MAP,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&COMPASS, // COMPASS
				
			
				
				&GLOBE_SHOWING_AMERICAS, // GLOBE_SHOWING_AMERICAS
				
			
				
				&GLOBE_SHOWING_ASIA_AUSTRALIA, // GLOBE_SHOWING_ASIA_AUSTRALIA
				
			
				
				&GLOBE_SHOWING_EUROPE_AFRICA, // GLOBE_SHOWING_EUROPE_AFRICA
				
			
				
				&GLOBE_WITH_MERIDIANS, // GLOBE_WITH_MERIDIANS
				
			
				
				&MAP_OF_JAPAN, // MAP_OF_JAPAN
				
			
				
				&WORLD_MAP, // WORLD_MAP
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // place_map
	
	/// place_other üíàüåâüé†
	pub mod place_other {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="barber pole üíà"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BARBER_POLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BARBER_POLE); // üíà (`U+1F488`)"] #[doc="# assert_eq!(BARBER_POLE.to_string().as_str(), \"üíà\");"]
#[doc="```"]
pub static BARBER_POLE :  Emoji = Emoji::new("barber pole", Version(0, 6), "üíà"); // barber pole
		
		#[doc="bridge at night üåâ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BRIDGE_AT_NIGHT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BRIDGE_AT_NIGHT); // üåâ (`U+1F309`)"] #[doc="# assert_eq!(BRIDGE_AT_NIGHT.to_string().as_str(), \"üåâ\");"]
#[doc="```"]
pub static BRIDGE_AT_NIGHT :  Emoji = Emoji::new("bridge at night", Version(0, 6), "üåâ"); // bridge at night
		
		#[doc="carousel horse üé†"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CAROUSEL_HORSE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CAROUSEL_HORSE); // üé† (`U+1F3A0`)"] #[doc="# assert_eq!(CAROUSEL_HORSE.to_string().as_str(), \"üé†\");"]
#[doc="```"]
pub static CAROUSEL_HORSE :  Emoji = Emoji::new("carousel horse", Version(0, 6), "üé†"); // carousel horse
		
		#[doc="circus tent üé™"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CIRCUS_TENT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CIRCUS_TENT); // üé™ (`U+1F3AA`)"] #[doc="# assert_eq!(CIRCUS_TENT.to_string().as_str(), \"üé™\");"]
#[doc="```"]
pub static CIRCUS_TENT :  Emoji = Emoji::new("circus tent", Version(0, 6), "üé™"); // circus tent
		
		#[doc="cityscape üèôÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CITYSCAPE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CITYSCAPE); // üèôÔ∏è (`U+1F3D9 U+FE0F`)"] #[doc="# assert_eq!(CITYSCAPE.to_string().as_str(), \"üèôÔ∏è\");"]
#[doc="```"]
pub static CITYSCAPE :  Emoji = Emoji::new("cityscape", Version(0, 7), "üèôÔ∏è"); // cityscape
		
		#[doc="cityscape at dusk üåÜ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CITYSCAPE_AT_DUSK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CITYSCAPE_AT_DUSK); // üåÜ (`U+1F306`)"] #[doc="# assert_eq!(CITYSCAPE_AT_DUSK.to_string().as_str(), \"üåÜ\");"]
#[doc="```"]
pub static CITYSCAPE_AT_DUSK :  Emoji = Emoji::new("cityscape at dusk", Version(0, 6), "üåÜ"); // cityscape at dusk
		
		#[doc="ferris wheel üé°"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FERRIS_WHEEL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FERRIS_WHEEL); // üé° (`U+1F3A1`)"] #[doc="# assert_eq!(FERRIS_WHEEL.to_string().as_str(), \"üé°\");"]
#[doc="```"]
pub static FERRIS_WHEEL :  Emoji = Emoji::new("ferris wheel", Version(0, 6), "üé°"); // ferris wheel
		
		#[doc="foggy üåÅ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FOGGY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FOGGY); // üåÅ (`U+1F301`)"] #[doc="# assert_eq!(FOGGY.to_string().as_str(), \"üåÅ\");"]
#[doc="```"]
pub static FOGGY :  Emoji = Emoji::new("foggy", Version(0, 6), "üåÅ"); // foggy
		
		#[doc="fountain ‚õ≤"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FOUNTAIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FOUNTAIN); // ‚õ≤ (`U+26F2`)"] #[doc="# assert_eq!(FOUNTAIN.to_string().as_str(), \"‚õ≤\");"]
#[doc="```"]
pub static FOUNTAIN :  Emoji = Emoji::new("fountain", Version(0, 6), "‚õ≤"); // fountain
		
		#[doc="hot springs ‚ô®Ô∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOT_SPRINGS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOT_SPRINGS); // ‚ô®Ô∏è (`U+2668 U+FE0F`)"] #[doc="# assert_eq!(HOT_SPRINGS.to_string().as_str(), \"‚ô®Ô∏è\");"]
#[doc="```"]
pub static HOT_SPRINGS :  Emoji = Emoji::new("hot springs", Version(0, 6), "‚ô®Ô∏è"); // hot springs
		
		#[doc="night with stars üåÉ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NIGHT_WITH_STARS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NIGHT_WITH_STARS); // üåÉ (`U+1F303`)"] #[doc="# assert_eq!(NIGHT_WITH_STARS.to_string().as_str(), \"üåÉ\");"]
#[doc="```"]
pub static NIGHT_WITH_STARS :  Emoji = Emoji::new("night with stars", Version(0, 6), "üåÉ"); // night with stars
		
		#[doc="roller coaster üé¢"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ROLLER_COASTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ROLLER_COASTER); // üé¢ (`U+1F3A2`)"] #[doc="# assert_eq!(ROLLER_COASTER.to_string().as_str(), \"üé¢\");"]
#[doc="```"]
pub static ROLLER_COASTER :  Emoji = Emoji::new("roller coaster", Version(0, 6), "üé¢"); // roller coaster
		
		#[doc="sunrise üåÖ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUNRISE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUNRISE); // üåÖ (`U+1F305`)"] #[doc="# assert_eq!(SUNRISE.to_string().as_str(), \"üåÖ\");"]
#[doc="```"]
pub static SUNRISE :  Emoji = Emoji::new("sunrise", Version(0, 6), "üåÖ"); // sunrise
		
		#[doc="sunrise over mountains üåÑ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUNRISE_OVER_MOUNTAINS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUNRISE_OVER_MOUNTAINS); // üåÑ (`U+1F304`)"] #[doc="# assert_eq!(SUNRISE_OVER_MOUNTAINS.to_string().as_str(), \"üåÑ\");"]
#[doc="```"]
pub static SUNRISE_OVER_MOUNTAINS :  Emoji = Emoji::new("sunrise over mountains", Version(0, 6), "üåÑ"); // sunrise over mountains
		
		#[doc="sunset üåá"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUNSET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUNSET); // üåá (`U+1F307`)"] #[doc="# assert_eq!(SUNSET.to_string().as_str(), \"üåá\");"]
#[doc="```"]
pub static SUNSET :  Emoji = Emoji::new("sunset", Version(0, 6), "üåá"); // sunset
		
		#[doc="tent ‚õ∫"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TENT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TENT); // ‚õ∫ (`U+26FA`)"] #[doc="# assert_eq!(TENT.to_string().as_str(), \"‚õ∫\");"]
#[doc="```"]
pub static TENT :  Emoji = Emoji::new("tent", Version(0, 6), "‚õ∫"); // tent
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // BARBER_POLE
				
				&BARBER_POLE,
				
			],
			
			&[ // BRIDGE_AT_NIGHT
				
				&BRIDGE_AT_NIGHT,
				
			],
			
			&[ // CAROUSEL_HORSE
				
				&CAROUSEL_HORSE,
				
			],
			
			&[ // CIRCUS_TENT
				
				&CIRCUS_TENT,
				
			],
			
			&[ // CITYSCAPE
				
				&CITYSCAPE,
				
			],
			
			&[ // CITYSCAPE_AT_DUSK
				
				&CITYSCAPE_AT_DUSK,
				
			],
			
			&[ // FERRIS_WHEEL
				
				&FERRIS_WHEEL,
				
			],
			
			&[ // FOGGY
				
				&FOGGY,
				
			],
			
			&[ // FOUNTAIN
				
				&FOUNTAIN,
				
			],
			
			&[ // HOT_SPRINGS
				
				&HOT_SPRINGS,
				
			],
			
			&[ // NIGHT_WITH_STARS
				
				&NIGHT_WITH_STARS,
				
			],
			
			&[ // ROLLER_COASTER
				
				&ROLLER_COASTER,
				
			],
			
			&[ // SUNRISE
				
				&SUNRISE,
				
			],
			
			&[ // SUNRISE_OVER_MOUNTAINS
				
				&SUNRISE_OVER_MOUNTAINS,
				
			],
			
			&[ // SUNSET
				
				&SUNSET,
				
			],
			
			&[ // TENT
				
				&TENT,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&BARBER_POLE, // BARBER_POLE
				
			
				
				&BRIDGE_AT_NIGHT, // BRIDGE_AT_NIGHT
				
			
				
				&CAROUSEL_HORSE, // CAROUSEL_HORSE
				
			
				
				&CIRCUS_TENT, // CIRCUS_TENT
				
			
				
				&CITYSCAPE, // CITYSCAPE
				
			
				
				&CITYSCAPE_AT_DUSK, // CITYSCAPE_AT_DUSK
				
			
				
				&FERRIS_WHEEL, // FERRIS_WHEEL
				
			
				
				&FOGGY, // FOGGY
				
			
				
				&FOUNTAIN, // FOUNTAIN
				
			
				
				&HOT_SPRINGS, // HOT_SPRINGS
				
			
				
				&NIGHT_WITH_STARS, // NIGHT_WITH_STARS
				
			
				
				&ROLLER_COASTER, // ROLLER_COASTER
				
			
				
				&SUNRISE, // SUNRISE
				
			
				
				&SUNRISE_OVER_MOUNTAINS, // SUNRISE_OVER_MOUNTAINS
				
			
				
				&SUNSET, // SUNSET
				
			
				
				&TENT, // TENT
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // place_other
	
	/// place_religious ‚õ™üõïüïã
	pub mod place_religious {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="church ‚õ™"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHURCH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHURCH); // ‚õ™ (`U+26EA`)"] #[doc="# assert_eq!(CHURCH.to_string().as_str(), \"‚õ™\");"]
#[doc="```"]
pub static CHURCH :  Emoji = Emoji::new("church", Version(0, 6), "‚õ™"); // church
		
		#[doc="hindu temple üõï"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HINDU_TEMPLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HINDU_TEMPLE); // üõï (`U+1F6D5`)"] #[doc="# assert_eq!(HINDU_TEMPLE.to_string().as_str(), \"üõï\");"]
#[doc="```"]
pub static HINDU_TEMPLE :  Emoji = Emoji::new("hindu temple", Version(12, 0), "üõï"); // hindu temple
		
		#[doc="kaaba üïã"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KAABA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KAABA); // üïã (`U+1F54B`)"] #[doc="# assert_eq!(KAABA.to_string().as_str(), \"üïã\");"]
#[doc="```"]
pub static KAABA :  Emoji = Emoji::new("kaaba", Version(1, 0), "üïã"); // kaaba
		
		#[doc="mosque üïå"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOSQUE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOSQUE); // üïå (`U+1F54C`)"] #[doc="# assert_eq!(MOSQUE.to_string().as_str(), \"üïå\");"]
#[doc="```"]
pub static MOSQUE :  Emoji = Emoji::new("mosque", Version(1, 0), "üïå"); // mosque
		
		#[doc="shinto shrine ‚õ©Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHINTO_SHRINE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHINTO_SHRINE); // ‚õ©Ô∏è (`U+26E9 U+FE0F`)"] #[doc="# assert_eq!(SHINTO_SHRINE.to_string().as_str(), \"‚õ©Ô∏è\");"]
#[doc="```"]
pub static SHINTO_SHRINE :  Emoji = Emoji::new("shinto shrine", Version(0, 7), "‚õ©Ô∏è"); // shinto shrine
		
		#[doc="synagogue üïç"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SYNAGOGUE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SYNAGOGUE); // üïç (`U+1F54D`)"] #[doc="# assert_eq!(SYNAGOGUE.to_string().as_str(), \"üïç\");"]
#[doc="```"]
pub static SYNAGOGUE :  Emoji = Emoji::new("synagogue", Version(1, 0), "üïç"); // synagogue
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // CHURCH
				
				&CHURCH,
				
			],
			
			&[ // HINDU_TEMPLE
				
				&HINDU_TEMPLE,
				
			],
			
			&[ // KAABA
				
				&KAABA,
				
			],
			
			&[ // MOSQUE
				
				&MOSQUE,
				
			],
			
			&[ // SHINTO_SHRINE
				
				&SHINTO_SHRINE,
				
			],
			
			&[ // SYNAGOGUE
				
				&SYNAGOGUE,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&CHURCH, // CHURCH
				
			
				
				&HINDU_TEMPLE, // HINDU_TEMPLE
				
			
				
				&KAABA, // KAABA
				
			
				
				&MOSQUE, // MOSQUE
				
			
				
				&SHINTO_SHRINE, // SHINTO_SHRINE
				
			
				
				&SYNAGOGUE, // SYNAGOGUE
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // place_religious
	
	/// sky_and_weather üåÇ‚òÅÔ∏èüå©Ô∏è
	pub mod sky_and_weather {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="closed umbrella üåÇ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLOSED_UMBRELLA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLOSED_UMBRELLA); // üåÇ (`U+1F302`)"] #[doc="# assert_eq!(CLOSED_UMBRELLA.to_string().as_str(), \"üåÇ\");"]
#[doc="```"]
pub static CLOSED_UMBRELLA :  Emoji = Emoji::new("closed umbrella", Version(0, 6), "üåÇ"); // closed umbrella
		
		#[doc="cloud ‚òÅÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLOUD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLOUD); // ‚òÅÔ∏è (`U+2601 U+FE0F`)"] #[doc="# assert_eq!(CLOUD.to_string().as_str(), \"‚òÅÔ∏è\");"]
#[doc="```"]
pub static CLOUD :  Emoji = Emoji::new("cloud", Version(0, 6), "‚òÅÔ∏è"); // cloud
		
		#[doc="cloud with lightning üå©Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLOUD_WITH_LIGHTNING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLOUD_WITH_LIGHTNING); // üå©Ô∏è (`U+1F329 U+FE0F`)"] #[doc="# assert_eq!(CLOUD_WITH_LIGHTNING.to_string().as_str(), \"üå©Ô∏è\");"]
#[doc="```"]
pub static CLOUD_WITH_LIGHTNING :  Emoji = Emoji::new("cloud with lightning", Version(0, 7), "üå©Ô∏è"); // cloud with lightning
		
		#[doc="cloud with lightning and rain ‚õàÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLOUD_WITH_LIGHTNING_AND_RAIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLOUD_WITH_LIGHTNING_AND_RAIN); // ‚õàÔ∏è (`U+26C8 U+FE0F`)"] #[doc="# assert_eq!(CLOUD_WITH_LIGHTNING_AND_RAIN.to_string().as_str(), \"‚õàÔ∏è\");"]
#[doc="```"]
pub static CLOUD_WITH_LIGHTNING_AND_RAIN :  Emoji = Emoji::new("cloud with lightning and rain", Version(0, 7), "‚õàÔ∏è"); // cloud with lightning and rain
		
		#[doc="cloud with rain üåßÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLOUD_WITH_RAIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLOUD_WITH_RAIN); // üåßÔ∏è (`U+1F327 U+FE0F`)"] #[doc="# assert_eq!(CLOUD_WITH_RAIN.to_string().as_str(), \"üåßÔ∏è\");"]
#[doc="```"]
pub static CLOUD_WITH_RAIN :  Emoji = Emoji::new("cloud with rain", Version(0, 7), "üåßÔ∏è"); // cloud with rain
		
		#[doc="cloud with snow üå®Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLOUD_WITH_SNOW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLOUD_WITH_SNOW); // üå®Ô∏è (`U+1F328 U+FE0F`)"] #[doc="# assert_eq!(CLOUD_WITH_SNOW.to_string().as_str(), \"üå®Ô∏è\");"]
#[doc="```"]
pub static CLOUD_WITH_SNOW :  Emoji = Emoji::new("cloud with snow", Version(0, 7), "üå®Ô∏è"); // cloud with snow
		
		#[doc="comet ‚òÑÔ∏è"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COMET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COMET); // ‚òÑÔ∏è (`U+2604 U+FE0F`)"] #[doc="# assert_eq!(COMET.to_string().as_str(), \"‚òÑÔ∏è\");"]
#[doc="```"]
pub static COMET :  Emoji = Emoji::new("comet", Version(1, 0), "‚òÑÔ∏è"); // comet
		
		#[doc="crescent moon üåô"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CRESCENT_MOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CRESCENT_MOON); // üåô (`U+1F319`)"] #[doc="# assert_eq!(CRESCENT_MOON.to_string().as_str(), \"üåô\");"]
#[doc="```"]
pub static CRESCENT_MOON :  Emoji = Emoji::new("crescent moon", Version(0, 6), "üåô"); // crescent moon
		
		#[doc="cyclone üåÄ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CYCLONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CYCLONE); // üåÄ (`U+1F300`)"] #[doc="# assert_eq!(CYCLONE.to_string().as_str(), \"üåÄ\");"]
#[doc="```"]
pub static CYCLONE :  Emoji = Emoji::new("cyclone", Version(0, 6), "üåÄ"); // cyclone
		
		#[doc="droplet üíß"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DROPLET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DROPLET); // üíß (`U+1F4A7`)"] #[doc="# assert_eq!(DROPLET.to_string().as_str(), \"üíß\");"]
#[doc="```"]
pub static DROPLET :  Emoji = Emoji::new("droplet", Version(0, 6), "üíß"); // droplet
		
		#[doc="fire üî•"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FIRE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FIRE); // üî• (`U+1F525`)"] #[doc="# assert_eq!(FIRE.to_string().as_str(), \"üî•\");"]
#[doc="```"]
pub static FIRE :  Emoji = Emoji::new("fire", Version(0, 6), "üî•"); // fire
		
		#[doc="first quarter moon üåì"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FIRST_QUARTER_MOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FIRST_QUARTER_MOON); // üåì (`U+1F313`)"] #[doc="# assert_eq!(FIRST_QUARTER_MOON.to_string().as_str(), \"üåì\");"]
#[doc="```"]
pub static FIRST_QUARTER_MOON :  Emoji = Emoji::new("first quarter moon", Version(0, 6), "üåì"); // first quarter moon
		
		#[doc="first quarter moon face üåõ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FIRST_QUARTER_MOON_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FIRST_QUARTER_MOON_FACE); // üåõ (`U+1F31B`)"] #[doc="# assert_eq!(FIRST_QUARTER_MOON_FACE.to_string().as_str(), \"üåõ\");"]
#[doc="```"]
pub static FIRST_QUARTER_MOON_FACE :  Emoji = Emoji::new("first quarter moon face", Version(0, 6), "üåõ"); // first quarter moon face
		
		#[doc="fog üå´Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FOG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FOG); // üå´Ô∏è (`U+1F32B U+FE0F`)"] #[doc="# assert_eq!(FOG.to_string().as_str(), \"üå´Ô∏è\");"]
#[doc="```"]
pub static FOG :  Emoji = Emoji::new("fog", Version(0, 7), "üå´Ô∏è"); // fog
		
		#[doc="full moon üåï"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FULL_MOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FULL_MOON); // üåï (`U+1F315`)"] #[doc="# assert_eq!(FULL_MOON.to_string().as_str(), \"üåï\");"]
#[doc="```"]
pub static FULL_MOON :  Emoji = Emoji::new("full moon", Version(0, 6), "üåï"); // full moon
		
		#[doc="full moon face üåù"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FULL_MOON_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FULL_MOON_FACE); // üåù (`U+1F31D`)"] #[doc="# assert_eq!(FULL_MOON_FACE.to_string().as_str(), \"üåù\");"]
#[doc="```"]
pub static FULL_MOON_FACE :  Emoji = Emoji::new("full moon face", Version(1, 0), "üåù"); // full moon face
		
		#[doc="glowing star üåü"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GLOWING_STAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GLOWING_STAR); // üåü (`U+1F31F`)"] #[doc="# assert_eq!(GLOWING_STAR.to_string().as_str(), \"üåü\");"]
#[doc="```"]
pub static GLOWING_STAR :  Emoji = Emoji::new("glowing star", Version(0, 6), "üåü"); // glowing star
		
		#[doc="high voltage ‚ö°"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HIGH_VOLTAGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HIGH_VOLTAGE); // ‚ö° (`U+26A1`)"] #[doc="# assert_eq!(HIGH_VOLTAGE.to_string().as_str(), \"‚ö°\");"]
#[doc="```"]
pub static HIGH_VOLTAGE :  Emoji = Emoji::new("high voltage", Version(0, 6), "‚ö°"); // high voltage
		
		#[doc="last quarter moon üåó"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LAST_QUARTER_MOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LAST_QUARTER_MOON); // üåó (`U+1F317`)"] #[doc="# assert_eq!(LAST_QUARTER_MOON.to_string().as_str(), \"üåó\");"]
#[doc="```"]
pub static LAST_QUARTER_MOON :  Emoji = Emoji::new("last quarter moon", Version(1, 0), "üåó"); // last quarter moon
		
		#[doc="last quarter moon face üåú"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LAST_QUARTER_MOON_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LAST_QUARTER_MOON_FACE); // üåú (`U+1F31C`)"] #[doc="# assert_eq!(LAST_QUARTER_MOON_FACE.to_string().as_str(), \"üåú\");"]
#[doc="```"]
pub static LAST_QUARTER_MOON_FACE :  Emoji = Emoji::new("last quarter moon face", Version(0, 7), "üåú"); // last quarter moon face
		
		#[doc="milky way üåå"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MILKY_WAY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MILKY_WAY); // üåå (`U+1F30C`)"] #[doc="# assert_eq!(MILKY_WAY.to_string().as_str(), \"üåå\");"]
#[doc="```"]
pub static MILKY_WAY :  Emoji = Emoji::new("milky way", Version(0, 6), "üåå"); // milky way
		
		#[doc="new moon üåë"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NEW_MOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NEW_MOON); // üåë (`U+1F311`)"] #[doc="# assert_eq!(NEW_MOON.to_string().as_str(), \"üåë\");"]
#[doc="```"]
pub static NEW_MOON :  Emoji = Emoji::new("new moon", Version(0, 6), "üåë"); // new moon
		
		#[doc="new moon face üåö"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NEW_MOON_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NEW_MOON_FACE); // üåö (`U+1F31A`)"] #[doc="# assert_eq!(NEW_MOON_FACE.to_string().as_str(), \"üåö\");"]
#[doc="```"]
pub static NEW_MOON_FACE :  Emoji = Emoji::new("new moon face", Version(1, 0), "üåö"); // new moon face
		
		#[doc="rainbow üåà"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RAINBOW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RAINBOW); // üåà (`U+1F308`)"] #[doc="# assert_eq!(RAINBOW.to_string().as_str(), \"üåà\");"]
#[doc="```"]
pub static RAINBOW :  Emoji = Emoji::new("rainbow", Version(0, 6), "üåà"); // rainbow
		
		#[doc="ringed planet ü™ê"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RINGED_PLANET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RINGED_PLANET); // ü™ê (`U+1FA90`)"] #[doc="# assert_eq!(RINGED_PLANET.to_string().as_str(), \"ü™ê\");"]
#[doc="```"]
pub static RINGED_PLANET :  Emoji = Emoji::new("ringed planet", Version(12, 0), "ü™ê"); // ringed planet
		
		#[doc="shooting star üå†"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHOOTING_STAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHOOTING_STAR); // üå† (`U+1F320`)"] #[doc="# assert_eq!(SHOOTING_STAR.to_string().as_str(), \"üå†\");"]
#[doc="```"]
pub static SHOOTING_STAR :  Emoji = Emoji::new("shooting star", Version(0, 6), "üå†"); // shooting star
		
		#[doc="snowflake ‚ùÑÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SNOWFLAKE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SNOWFLAKE); // ‚ùÑÔ∏è (`U+2744 U+FE0F`)"] #[doc="# assert_eq!(SNOWFLAKE.to_string().as_str(), \"‚ùÑÔ∏è\");"]
#[doc="```"]
pub static SNOWFLAKE :  Emoji = Emoji::new("snowflake", Version(0, 6), "‚ùÑÔ∏è"); // snowflake
		
		#[doc="snowman ‚òÉÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SNOWMAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SNOWMAN); // ‚òÉÔ∏è (`U+2603 U+FE0F`)"] #[doc="# assert_eq!(SNOWMAN.to_string().as_str(), \"‚òÉÔ∏è\");"]
#[doc="```"]
pub static SNOWMAN :  Emoji = Emoji::new("snowman", Version(0, 7), "‚òÉÔ∏è"); // snowman
		
		#[doc="snowman without snow ‚õÑ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SNOWMAN_WITHOUT_SNOW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SNOWMAN_WITHOUT_SNOW); // ‚õÑ (`U+26C4`)"] #[doc="# assert_eq!(SNOWMAN_WITHOUT_SNOW.to_string().as_str(), \"‚õÑ\");"]
#[doc="```"]
pub static SNOWMAN_WITHOUT_SNOW :  Emoji = Emoji::new("snowman without snow", Version(0, 6), "‚õÑ"); // snowman without snow
		
		#[doc="star ‚≠ê"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STAR); // ‚≠ê (`U+2B50`)"] #[doc="# assert_eq!(STAR.to_string().as_str(), \"‚≠ê\");"]
#[doc="```"]
pub static STAR :  Emoji = Emoji::new("star", Version(0, 6), "‚≠ê"); // star
		
		#[doc="sun ‚òÄÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUN); // ‚òÄÔ∏è (`U+2600 U+FE0F`)"] #[doc="# assert_eq!(SUN.to_string().as_str(), \"‚òÄÔ∏è\");"]
#[doc="```"]
pub static SUN :  Emoji = Emoji::new("sun", Version(0, 6), "‚òÄÔ∏è"); // sun
		
		#[doc="sun behind cloud ‚õÖ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUN_BEHIND_CLOUD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUN_BEHIND_CLOUD); // ‚õÖ (`U+26C5`)"] #[doc="# assert_eq!(SUN_BEHIND_CLOUD.to_string().as_str(), \"‚õÖ\");"]
#[doc="```"]
pub static SUN_BEHIND_CLOUD :  Emoji = Emoji::new("sun behind cloud", Version(0, 6), "‚õÖ"); // sun behind cloud
		
		#[doc="sun behind large cloud üå•Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUN_BEHIND_LARGE_CLOUD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUN_BEHIND_LARGE_CLOUD); // üå•Ô∏è (`U+1F325 U+FE0F`)"] #[doc="# assert_eq!(SUN_BEHIND_LARGE_CLOUD.to_string().as_str(), \"üå•Ô∏è\");"]
#[doc="```"]
pub static SUN_BEHIND_LARGE_CLOUD :  Emoji = Emoji::new("sun behind large cloud", Version(0, 7), "üå•Ô∏è"); // sun behind large cloud
		
		#[doc="sun behind rain cloud üå¶Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUN_BEHIND_RAIN_CLOUD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUN_BEHIND_RAIN_CLOUD); // üå¶Ô∏è (`U+1F326 U+FE0F`)"] #[doc="# assert_eq!(SUN_BEHIND_RAIN_CLOUD.to_string().as_str(), \"üå¶Ô∏è\");"]
#[doc="```"]
pub static SUN_BEHIND_RAIN_CLOUD :  Emoji = Emoji::new("sun behind rain cloud", Version(0, 7), "üå¶Ô∏è"); // sun behind rain cloud
		
		#[doc="sun behind small cloud üå§Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUN_BEHIND_SMALL_CLOUD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUN_BEHIND_SMALL_CLOUD); // üå§Ô∏è (`U+1F324 U+FE0F`)"] #[doc="# assert_eq!(SUN_BEHIND_SMALL_CLOUD.to_string().as_str(), \"üå§Ô∏è\");"]
#[doc="```"]
pub static SUN_BEHIND_SMALL_CLOUD :  Emoji = Emoji::new("sun behind small cloud", Version(0, 7), "üå§Ô∏è"); // sun behind small cloud
		
		#[doc="sun with face üåû"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUN_WITH_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUN_WITH_FACE); // üåû (`U+1F31E`)"] #[doc="# assert_eq!(SUN_WITH_FACE.to_string().as_str(), \"üåû\");"]
#[doc="```"]
pub static SUN_WITH_FACE :  Emoji = Emoji::new("sun with face", Version(1, 0), "üåû"); // sun with face
		
		#[doc="thermometer üå°Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::THERMOMETER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", THERMOMETER); // üå°Ô∏è (`U+1F321 U+FE0F`)"] #[doc="# assert_eq!(THERMOMETER.to_string().as_str(), \"üå°Ô∏è\");"]
#[doc="```"]
pub static THERMOMETER :  Emoji = Emoji::new("thermometer", Version(0, 7), "üå°Ô∏è"); // thermometer
		
		#[doc="tornado üå™Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TORNADO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TORNADO); // üå™Ô∏è (`U+1F32A U+FE0F`)"] #[doc="# assert_eq!(TORNADO.to_string().as_str(), \"üå™Ô∏è\");"]
#[doc="```"]
pub static TORNADO :  Emoji = Emoji::new("tornado", Version(0, 7), "üå™Ô∏è"); // tornado
		
		#[doc="umbrella ‚òÇÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::UMBRELLA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", UMBRELLA); // ‚òÇÔ∏è (`U+2602 U+FE0F`)"] #[doc="# assert_eq!(UMBRELLA.to_string().as_str(), \"‚òÇÔ∏è\");"]
#[doc="```"]
pub static UMBRELLA :  Emoji = Emoji::new("umbrella", Version(0, 7), "‚òÇÔ∏è"); // umbrella
		
		#[doc="umbrella on ground ‚õ±Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::UMBRELLA_ON_GROUND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", UMBRELLA_ON_GROUND); // ‚õ±Ô∏è (`U+26F1 U+FE0F`)"] #[doc="# assert_eq!(UMBRELLA_ON_GROUND.to_string().as_str(), \"‚õ±Ô∏è\");"]
#[doc="```"]
pub static UMBRELLA_ON_GROUND :  Emoji = Emoji::new("umbrella on ground", Version(0, 7), "‚õ±Ô∏è"); // umbrella on ground
		
		#[doc="umbrella with rain drops ‚òî"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::UMBRELLA_WITH_RAIN_DROPS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", UMBRELLA_WITH_RAIN_DROPS); // ‚òî (`U+2614`)"] #[doc="# assert_eq!(UMBRELLA_WITH_RAIN_DROPS.to_string().as_str(), \"‚òî\");"]
#[doc="```"]
pub static UMBRELLA_WITH_RAIN_DROPS :  Emoji = Emoji::new("umbrella with rain drops", Version(0, 6), "‚òî"); // umbrella with rain drops
		
		#[doc="waning crescent moon üåò"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WANING_CRESCENT_MOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WANING_CRESCENT_MOON); // üåò (`U+1F318`)"] #[doc="# assert_eq!(WANING_CRESCENT_MOON.to_string().as_str(), \"üåò\");"]
#[doc="```"]
pub static WANING_CRESCENT_MOON :  Emoji = Emoji::new("waning crescent moon", Version(1, 0), "üåò"); // waning crescent moon
		
		#[doc="waning gibbous moon üåñ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WANING_GIBBOUS_MOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WANING_GIBBOUS_MOON); // üåñ (`U+1F316`)"] #[doc="# assert_eq!(WANING_GIBBOUS_MOON.to_string().as_str(), \"üåñ\");"]
#[doc="```"]
pub static WANING_GIBBOUS_MOON :  Emoji = Emoji::new("waning gibbous moon", Version(1, 0), "üåñ"); // waning gibbous moon
		
		#[doc="water wave üåä"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WATER_WAVE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WATER_WAVE); // üåä (`U+1F30A`)"] #[doc="# assert_eq!(WATER_WAVE.to_string().as_str(), \"üåä\");"]
#[doc="```"]
pub static WATER_WAVE :  Emoji = Emoji::new("water wave", Version(0, 6), "üåä"); // water wave
		
		#[doc="waxing crescent moon üåí"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WAXING_CRESCENT_MOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WAXING_CRESCENT_MOON); // üåí (`U+1F312`)"] #[doc="# assert_eq!(WAXING_CRESCENT_MOON.to_string().as_str(), \"üåí\");"]
#[doc="```"]
pub static WAXING_CRESCENT_MOON :  Emoji = Emoji::new("waxing crescent moon", Version(1, 0), "üåí"); // waxing crescent moon
		
		#[doc="waxing gibbous moon üåî"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WAXING_GIBBOUS_MOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WAXING_GIBBOUS_MOON); // üåî (`U+1F314`)"] #[doc="# assert_eq!(WAXING_GIBBOUS_MOON.to_string().as_str(), \"üåî\");"]
#[doc="```"]
pub static WAXING_GIBBOUS_MOON :  Emoji = Emoji::new("waxing gibbous moon", Version(0, 6), "üåî"); // waxing gibbous moon
		
		#[doc="wind face üå¨Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WIND_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WIND_FACE); // üå¨Ô∏è (`U+1F32C U+FE0F`)"] #[doc="# assert_eq!(WIND_FACE.to_string().as_str(), \"üå¨Ô∏è\");"]
#[doc="```"]
pub static WIND_FACE :  Emoji = Emoji::new("wind face", Version(0, 7), "üå¨Ô∏è"); // wind face
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // CLOSED_UMBRELLA
				
				&CLOSED_UMBRELLA,
				
			],
			
			&[ // CLOUD
				
				&CLOUD,
				
			],
			
			&[ // CLOUD_WITH_LIGHTNING
				
				&CLOUD_WITH_LIGHTNING,
				
			],
			
			&[ // CLOUD_WITH_LIGHTNING_AND_RAIN
				
				&CLOUD_WITH_LIGHTNING_AND_RAIN,
				
			],
			
			&[ // CLOUD_WITH_RAIN
				
				&CLOUD_WITH_RAIN,
				
			],
			
			&[ // CLOUD_WITH_SNOW
				
				&CLOUD_WITH_SNOW,
				
			],
			
			&[ // COMET
				
				&COMET,
				
			],
			
			&[ // CRESCENT_MOON
				
				&CRESCENT_MOON,
				
			],
			
			&[ // CYCLONE
				
				&CYCLONE,
				
			],
			
			&[ // DROPLET
				
				&DROPLET,
				
			],
			
			&[ // FIRE
				
				&FIRE,
				
			],
			
			&[ // FIRST_QUARTER_MOON
				
				&FIRST_QUARTER_MOON,
				
			],
			
			&[ // FIRST_QUARTER_MOON_FACE
				
				&FIRST_QUARTER_MOON_FACE,
				
			],
			
			&[ // FOG
				
				&FOG,
				
			],
			
			&[ // FULL_MOON
				
				&FULL_MOON,
				
			],
			
			&[ // FULL_MOON_FACE
				
				&FULL_MOON_FACE,
				
			],
			
			&[ // GLOWING_STAR
				
				&GLOWING_STAR,
				
			],
			
			&[ // HIGH_VOLTAGE
				
				&HIGH_VOLTAGE,
				
			],
			
			&[ // LAST_QUARTER_MOON
				
				&LAST_QUARTER_MOON,
				
			],
			
			&[ // LAST_QUARTER_MOON_FACE
				
				&LAST_QUARTER_MOON_FACE,
				
			],
			
			&[ // MILKY_WAY
				
				&MILKY_WAY,
				
			],
			
			&[ // NEW_MOON
				
				&NEW_MOON,
				
			],
			
			&[ // NEW_MOON_FACE
				
				&NEW_MOON_FACE,
				
			],
			
			&[ // RAINBOW
				
				&RAINBOW,
				
			],
			
			&[ // RINGED_PLANET
				
				&RINGED_PLANET,
				
			],
			
			&[ // SHOOTING_STAR
				
				&SHOOTING_STAR,
				
			],
			
			&[ // SNOWFLAKE
				
				&SNOWFLAKE,
				
			],
			
			&[ // SNOWMAN
				
				&SNOWMAN,
				
			],
			
			&[ // SNOWMAN_WITHOUT_SNOW
				
				&SNOWMAN_WITHOUT_SNOW,
				
			],
			
			&[ // STAR
				
				&STAR,
				
			],
			
			&[ // SUN
				
				&SUN,
				
			],
			
			&[ // SUN_BEHIND_CLOUD
				
				&SUN_BEHIND_CLOUD,
				
			],
			
			&[ // SUN_BEHIND_LARGE_CLOUD
				
				&SUN_BEHIND_LARGE_CLOUD,
				
			],
			
			&[ // SUN_BEHIND_RAIN_CLOUD
				
				&SUN_BEHIND_RAIN_CLOUD,
				
			],
			
			&[ // SUN_BEHIND_SMALL_CLOUD
				
				&SUN_BEHIND_SMALL_CLOUD,
				
			],
			
			&[ // SUN_WITH_FACE
				
				&SUN_WITH_FACE,
				
			],
			
			&[ // THERMOMETER
				
				&THERMOMETER,
				
			],
			
			&[ // TORNADO
				
				&TORNADO,
				
			],
			
			&[ // UMBRELLA
				
				&UMBRELLA,
				
			],
			
			&[ // UMBRELLA_ON_GROUND
				
				&UMBRELLA_ON_GROUND,
				
			],
			
			&[ // UMBRELLA_WITH_RAIN_DROPS
				
				&UMBRELLA_WITH_RAIN_DROPS,
				
			],
			
			&[ // WANING_CRESCENT_MOON
				
				&WANING_CRESCENT_MOON,
				
			],
			
			&[ // WANING_GIBBOUS_MOON
				
				&WANING_GIBBOUS_MOON,
				
			],
			
			&[ // WATER_WAVE
				
				&WATER_WAVE,
				
			],
			
			&[ // WAXING_CRESCENT_MOON
				
				&WAXING_CRESCENT_MOON,
				
			],
			
			&[ // WAXING_GIBBOUS_MOON
				
				&WAXING_GIBBOUS_MOON,
				
			],
			
			&[ // WIND_FACE
				
				&WIND_FACE,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&CLOSED_UMBRELLA, // CLOSED_UMBRELLA
				
			
				
				&CLOUD, // CLOUD
				
			
				
				&CLOUD_WITH_LIGHTNING, // CLOUD_WITH_LIGHTNING
				
			
				
				&CLOUD_WITH_LIGHTNING_AND_RAIN, // CLOUD_WITH_LIGHTNING_AND_RAIN
				
			
				
				&CLOUD_WITH_RAIN, // CLOUD_WITH_RAIN
				
			
				
				&CLOUD_WITH_SNOW, // CLOUD_WITH_SNOW
				
			
				
				&COMET, // COMET
				
			
				
				&CRESCENT_MOON, // CRESCENT_MOON
				
			
				
				&CYCLONE, // CYCLONE
				
			
				
				&DROPLET, // DROPLET
				
			
				
				&FIRE, // FIRE
				
			
				
				&FIRST_QUARTER_MOON, // FIRST_QUARTER_MOON
				
			
				
				&FIRST_QUARTER_MOON_FACE, // FIRST_QUARTER_MOON_FACE
				
			
				
				&FOG, // FOG
				
			
				
				&FULL_MOON, // FULL_MOON
				
			
				
				&FULL_MOON_FACE, // FULL_MOON_FACE
				
			
				
				&GLOWING_STAR, // GLOWING_STAR
				
			
				
				&HIGH_VOLTAGE, // HIGH_VOLTAGE
				
			
				
				&LAST_QUARTER_MOON, // LAST_QUARTER_MOON
				
			
				
				&LAST_QUARTER_MOON_FACE, // LAST_QUARTER_MOON_FACE
				
			
				
				&MILKY_WAY, // MILKY_WAY
				
			
				
				&NEW_MOON, // NEW_MOON
				
			
				
				&NEW_MOON_FACE, // NEW_MOON_FACE
				
			
				
				&RAINBOW, // RAINBOW
				
			
				
				&RINGED_PLANET, // RINGED_PLANET
				
			
				
				&SHOOTING_STAR, // SHOOTING_STAR
				
			
				
				&SNOWFLAKE, // SNOWFLAKE
				
			
				
				&SNOWMAN, // SNOWMAN
				
			
				
				&SNOWMAN_WITHOUT_SNOW, // SNOWMAN_WITHOUT_SNOW
				
			
				
				&STAR, // STAR
				
			
				
				&SUN, // SUN
				
			
				
				&SUN_BEHIND_CLOUD, // SUN_BEHIND_CLOUD
				
			
				
				&SUN_BEHIND_LARGE_CLOUD, // SUN_BEHIND_LARGE_CLOUD
				
			
				
				&SUN_BEHIND_RAIN_CLOUD, // SUN_BEHIND_RAIN_CLOUD
				
			
				
				&SUN_BEHIND_SMALL_CLOUD, // SUN_BEHIND_SMALL_CLOUD
				
			
				
				&SUN_WITH_FACE, // SUN_WITH_FACE
				
			
				
				&THERMOMETER, // THERMOMETER
				
			
				
				&TORNADO, // TORNADO
				
			
				
				&UMBRELLA, // UMBRELLA
				
			
				
				&UMBRELLA_ON_GROUND, // UMBRELLA_ON_GROUND
				
			
				
				&UMBRELLA_WITH_RAIN_DROPS, // UMBRELLA_WITH_RAIN_DROPS
				
			
				
				&WANING_CRESCENT_MOON, // WANING_CRESCENT_MOON
				
			
				
				&WANING_GIBBOUS_MOON, // WANING_GIBBOUS_MOON
				
			
				
				&WATER_WAVE, // WATER_WAVE
				
			
				
				&WAXING_CRESCENT_MOON, // WAXING_CRESCENT_MOON
				
			
				
				&WAXING_GIBBOUS_MOON, // WAXING_GIBBOUS_MOON
				
			
				
				&WIND_FACE, // WIND_FACE
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // sky_and_weather
	
	/// time ‚è∞üïóüï£
	pub mod time {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="alarm clock ‚è∞"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ALARM_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ALARM_CLOCK); // ‚è∞ (`U+23F0`)"] #[doc="# assert_eq!(ALARM_CLOCK.to_string().as_str(), \"‚è∞\");"]
#[doc="```"]
pub static ALARM_CLOCK :  Emoji = Emoji::new("alarm clock", Version(0, 6), "‚è∞"); // alarm clock
		
		#[doc="eight o‚Äôclock üïó"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EIGHT_O_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EIGHT_O_CLOCK); // üïó (`U+1F557`)"] #[doc="# assert_eq!(EIGHT_O_CLOCK.to_string().as_str(), \"üïó\");"]
#[doc="```"]
pub static EIGHT_O_CLOCK :  Emoji = Emoji::new("eight o‚Äôclock", Version(0, 6), "üïó"); // eight o‚Äôclock
		
		#[doc="eight-thirty üï£"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EIGHT_THIRTY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EIGHT_THIRTY); // üï£ (`U+1F563`)"] #[doc="# assert_eq!(EIGHT_THIRTY.to_string().as_str(), \"üï£\");"]
#[doc="```"]
pub static EIGHT_THIRTY :  Emoji = Emoji::new("eight-thirty", Version(0, 7), "üï£"); // eight-thirty
		
		#[doc="eleven o‚Äôclock üïö"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ELEVEN_O_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ELEVEN_O_CLOCK); // üïö (`U+1F55A`)"] #[doc="# assert_eq!(ELEVEN_O_CLOCK.to_string().as_str(), \"üïö\");"]
#[doc="```"]
pub static ELEVEN_O_CLOCK :  Emoji = Emoji::new("eleven o‚Äôclock", Version(0, 6), "üïö"); // eleven o‚Äôclock
		
		#[doc="eleven-thirty üï¶"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ELEVEN_THIRTY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ELEVEN_THIRTY); // üï¶ (`U+1F566`)"] #[doc="# assert_eq!(ELEVEN_THIRTY.to_string().as_str(), \"üï¶\");"]
#[doc="```"]
pub static ELEVEN_THIRTY :  Emoji = Emoji::new("eleven-thirty", Version(0, 7), "üï¶"); // eleven-thirty
		
		#[doc="five o‚Äôclock üïî"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FIVE_O_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FIVE_O_CLOCK); // üïî (`U+1F554`)"] #[doc="# assert_eq!(FIVE_O_CLOCK.to_string().as_str(), \"üïî\");"]
#[doc="```"]
pub static FIVE_O_CLOCK :  Emoji = Emoji::new("five o‚Äôclock", Version(0, 6), "üïî"); // five o‚Äôclock
		
		#[doc="five-thirty üï†"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FIVE_THIRTY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FIVE_THIRTY); // üï† (`U+1F560`)"] #[doc="# assert_eq!(FIVE_THIRTY.to_string().as_str(), \"üï†\");"]
#[doc="```"]
pub static FIVE_THIRTY :  Emoji = Emoji::new("five-thirty", Version(0, 7), "üï†"); // five-thirty
		
		#[doc="four o‚Äôclock üïì"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FOUR_O_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FOUR_O_CLOCK); // üïì (`U+1F553`)"] #[doc="# assert_eq!(FOUR_O_CLOCK.to_string().as_str(), \"üïì\");"]
#[doc="```"]
pub static FOUR_O_CLOCK :  Emoji = Emoji::new("four o‚Äôclock", Version(0, 6), "üïì"); // four o‚Äôclock
		
		#[doc="four-thirty üïü"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FOUR_THIRTY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FOUR_THIRTY); // üïü (`U+1F55F`)"] #[doc="# assert_eq!(FOUR_THIRTY.to_string().as_str(), \"üïü\");"]
#[doc="```"]
pub static FOUR_THIRTY :  Emoji = Emoji::new("four-thirty", Version(0, 7), "üïü"); // four-thirty
		
		#[doc="hourglass done ‚åõ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOURGLASS_DONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOURGLASS_DONE); // ‚åõ (`U+231B`)"] #[doc="# assert_eq!(HOURGLASS_DONE.to_string().as_str(), \"‚åõ\");"]
#[doc="```"]
pub static HOURGLASS_DONE :  Emoji = Emoji::new("hourglass done", Version(0, 6), "‚åõ"); // hourglass done
		
		#[doc="hourglass not done ‚è≥"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOURGLASS_NOT_DONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOURGLASS_NOT_DONE); // ‚è≥ (`U+23F3`)"] #[doc="# assert_eq!(HOURGLASS_NOT_DONE.to_string().as_str(), \"‚è≥\");"]
#[doc="```"]
pub static HOURGLASS_NOT_DONE :  Emoji = Emoji::new("hourglass not done", Version(0, 6), "‚è≥"); // hourglass not done
		
		#[doc="mantelpiece clock üï∞Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MANTELPIECE_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MANTELPIECE_CLOCK); // üï∞Ô∏è (`U+1F570 U+FE0F`)"] #[doc="# assert_eq!(MANTELPIECE_CLOCK.to_string().as_str(), \"üï∞Ô∏è\");"]
#[doc="```"]
pub static MANTELPIECE_CLOCK :  Emoji = Emoji::new("mantelpiece clock", Version(0, 7), "üï∞Ô∏è"); // mantelpiece clock
		
		#[doc="nine o‚Äôclock üïò"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NINE_O_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NINE_O_CLOCK); // üïò (`U+1F558`)"] #[doc="# assert_eq!(NINE_O_CLOCK.to_string().as_str(), \"üïò\");"]
#[doc="```"]
pub static NINE_O_CLOCK :  Emoji = Emoji::new("nine o‚Äôclock", Version(0, 6), "üïò"); // nine o‚Äôclock
		
		#[doc="nine-thirty üï§"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NINE_THIRTY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NINE_THIRTY); // üï§ (`U+1F564`)"] #[doc="# assert_eq!(NINE_THIRTY.to_string().as_str(), \"üï§\");"]
#[doc="```"]
pub static NINE_THIRTY :  Emoji = Emoji::new("nine-thirty", Version(0, 7), "üï§"); // nine-thirty
		
		#[doc="one o‚Äôclock üïê"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ONE_O_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ONE_O_CLOCK); // üïê (`U+1F550`)"] #[doc="# assert_eq!(ONE_O_CLOCK.to_string().as_str(), \"üïê\");"]
#[doc="```"]
pub static ONE_O_CLOCK :  Emoji = Emoji::new("one o‚Äôclock", Version(0, 6), "üïê"); // one o‚Äôclock
		
		#[doc="one-thirty üïú"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ONE_THIRTY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ONE_THIRTY); // üïú (`U+1F55C`)"] #[doc="# assert_eq!(ONE_THIRTY.to_string().as_str(), \"üïú\");"]
#[doc="```"]
pub static ONE_THIRTY :  Emoji = Emoji::new("one-thirty", Version(0, 7), "üïú"); // one-thirty
		
		#[doc="seven o‚Äôclock üïñ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SEVEN_O_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SEVEN_O_CLOCK); // üïñ (`U+1F556`)"] #[doc="# assert_eq!(SEVEN_O_CLOCK.to_string().as_str(), \"üïñ\");"]
#[doc="```"]
pub static SEVEN_O_CLOCK :  Emoji = Emoji::new("seven o‚Äôclock", Version(0, 6), "üïñ"); // seven o‚Äôclock
		
		#[doc="seven-thirty üï¢"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SEVEN_THIRTY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SEVEN_THIRTY); // üï¢ (`U+1F562`)"] #[doc="# assert_eq!(SEVEN_THIRTY.to_string().as_str(), \"üï¢\");"]
#[doc="```"]
pub static SEVEN_THIRTY :  Emoji = Emoji::new("seven-thirty", Version(0, 7), "üï¢"); // seven-thirty
		
		#[doc="six o‚Äôclock üïï"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SIX_O_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SIX_O_CLOCK); // üïï (`U+1F555`)"] #[doc="# assert_eq!(SIX_O_CLOCK.to_string().as_str(), \"üïï\");"]
#[doc="```"]
pub static SIX_O_CLOCK :  Emoji = Emoji::new("six o‚Äôclock", Version(0, 6), "üïï"); // six o‚Äôclock
		
		#[doc="six-thirty üï°"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SIX_THIRTY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SIX_THIRTY); // üï° (`U+1F561`)"] #[doc="# assert_eq!(SIX_THIRTY.to_string().as_str(), \"üï°\");"]
#[doc="```"]
pub static SIX_THIRTY :  Emoji = Emoji::new("six-thirty", Version(0, 7), "üï°"); // six-thirty
		
		#[doc="stopwatch ‚è±Ô∏è"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STOPWATCH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STOPWATCH); // ‚è±Ô∏è (`U+23F1 U+FE0F`)"] #[doc="# assert_eq!(STOPWATCH.to_string().as_str(), \"‚è±Ô∏è\");"]
#[doc="```"]
pub static STOPWATCH :  Emoji = Emoji::new("stopwatch", Version(1, 0), "‚è±Ô∏è"); // stopwatch
		
		#[doc="ten o‚Äôclock üïô"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TEN_O_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TEN_O_CLOCK); // üïô (`U+1F559`)"] #[doc="# assert_eq!(TEN_O_CLOCK.to_string().as_str(), \"üïô\");"]
#[doc="```"]
pub static TEN_O_CLOCK :  Emoji = Emoji::new("ten o‚Äôclock", Version(0, 6), "üïô"); // ten o‚Äôclock
		
		#[doc="ten-thirty üï•"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TEN_THIRTY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TEN_THIRTY); // üï• (`U+1F565`)"] #[doc="# assert_eq!(TEN_THIRTY.to_string().as_str(), \"üï•\");"]
#[doc="```"]
pub static TEN_THIRTY :  Emoji = Emoji::new("ten-thirty", Version(0, 7), "üï•"); // ten-thirty
		
		#[doc="three o‚Äôclock üïí"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::THREE_O_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", THREE_O_CLOCK); // üïí (`U+1F552`)"] #[doc="# assert_eq!(THREE_O_CLOCK.to_string().as_str(), \"üïí\");"]
#[doc="```"]
pub static THREE_O_CLOCK :  Emoji = Emoji::new("three o‚Äôclock", Version(0, 6), "üïí"); // three o‚Äôclock
		
		#[doc="three-thirty üïû"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::THREE_THIRTY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", THREE_THIRTY); // üïû (`U+1F55E`)"] #[doc="# assert_eq!(THREE_THIRTY.to_string().as_str(), \"üïû\");"]
#[doc="```"]
pub static THREE_THIRTY :  Emoji = Emoji::new("three-thirty", Version(0, 7), "üïû"); // three-thirty
		
		#[doc="timer clock ‚è≤Ô∏è"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TIMER_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TIMER_CLOCK); // ‚è≤Ô∏è (`U+23F2 U+FE0F`)"] #[doc="# assert_eq!(TIMER_CLOCK.to_string().as_str(), \"‚è≤Ô∏è\");"]
#[doc="```"]
pub static TIMER_CLOCK :  Emoji = Emoji::new("timer clock", Version(1, 0), "‚è≤Ô∏è"); // timer clock
		
		#[doc="twelve o‚Äôclock üïõ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TWELVE_O_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TWELVE_O_CLOCK); // üïõ (`U+1F55B`)"] #[doc="# assert_eq!(TWELVE_O_CLOCK.to_string().as_str(), \"üïõ\");"]
#[doc="```"]
pub static TWELVE_O_CLOCK :  Emoji = Emoji::new("twelve o‚Äôclock", Version(0, 6), "üïõ"); // twelve o‚Äôclock
		
		#[doc="twelve-thirty üïß"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TWELVE_THIRTY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TWELVE_THIRTY); // üïß (`U+1F567`)"] #[doc="# assert_eq!(TWELVE_THIRTY.to_string().as_str(), \"üïß\");"]
#[doc="```"]
pub static TWELVE_THIRTY :  Emoji = Emoji::new("twelve-thirty", Version(0, 7), "üïß"); // twelve-thirty
		
		#[doc="two o‚Äôclock üïë"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TWO_O_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TWO_O_CLOCK); // üïë (`U+1F551`)"] #[doc="# assert_eq!(TWO_O_CLOCK.to_string().as_str(), \"üïë\");"]
#[doc="```"]
pub static TWO_O_CLOCK :  Emoji = Emoji::new("two o‚Äôclock", Version(0, 6), "üïë"); // two o‚Äôclock
		
		#[doc="two-thirty üïù"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TWO_THIRTY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TWO_THIRTY); // üïù (`U+1F55D`)"] #[doc="# assert_eq!(TWO_THIRTY.to_string().as_str(), \"üïù\");"]
#[doc="```"]
pub static TWO_THIRTY :  Emoji = Emoji::new("two-thirty", Version(0, 7), "üïù"); // two-thirty
		
		#[doc="watch ‚åö"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WATCH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WATCH); // ‚åö (`U+231A`)"] #[doc="# assert_eq!(WATCH.to_string().as_str(), \"‚åö\");"]
#[doc="```"]
pub static WATCH :  Emoji = Emoji::new("watch", Version(0, 6), "‚åö"); // watch
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // ALARM_CLOCK
				
				&ALARM_CLOCK,
				
			],
			
			&[ // EIGHT_O_CLOCK
				
				&EIGHT_O_CLOCK,
				
			],
			
			&[ // EIGHT_THIRTY
				
				&EIGHT_THIRTY,
				
			],
			
			&[ // ELEVEN_O_CLOCK
				
				&ELEVEN_O_CLOCK,
				
			],
			
			&[ // ELEVEN_THIRTY
				
				&ELEVEN_THIRTY,
				
			],
			
			&[ // FIVE_O_CLOCK
				
				&FIVE_O_CLOCK,
				
			],
			
			&[ // FIVE_THIRTY
				
				&FIVE_THIRTY,
				
			],
			
			&[ // FOUR_O_CLOCK
				
				&FOUR_O_CLOCK,
				
			],
			
			&[ // FOUR_THIRTY
				
				&FOUR_THIRTY,
				
			],
			
			&[ // HOURGLASS_DONE
				
				&HOURGLASS_DONE,
				
			],
			
			&[ // HOURGLASS_NOT_DONE
				
				&HOURGLASS_NOT_DONE,
				
			],
			
			&[ // MANTELPIECE_CLOCK
				
				&MANTELPIECE_CLOCK,
				
			],
			
			&[ // NINE_O_CLOCK
				
				&NINE_O_CLOCK,
				
			],
			
			&[ // NINE_THIRTY
				
				&NINE_THIRTY,
				
			],
			
			&[ // ONE_O_CLOCK
				
				&ONE_O_CLOCK,
				
			],
			
			&[ // ONE_THIRTY
				
				&ONE_THIRTY,
				
			],
			
			&[ // SEVEN_O_CLOCK
				
				&SEVEN_O_CLOCK,
				
			],
			
			&[ // SEVEN_THIRTY
				
				&SEVEN_THIRTY,
				
			],
			
			&[ // SIX_O_CLOCK
				
				&SIX_O_CLOCK,
				
			],
			
			&[ // SIX_THIRTY
				
				&SIX_THIRTY,
				
			],
			
			&[ // STOPWATCH
				
				&STOPWATCH,
				
			],
			
			&[ // TEN_O_CLOCK
				
				&TEN_O_CLOCK,
				
			],
			
			&[ // TEN_THIRTY
				
				&TEN_THIRTY,
				
			],
			
			&[ // THREE_O_CLOCK
				
				&THREE_O_CLOCK,
				
			],
			
			&[ // THREE_THIRTY
				
				&THREE_THIRTY,
				
			],
			
			&[ // TIMER_CLOCK
				
				&TIMER_CLOCK,
				
			],
			
			&[ // TWELVE_O_CLOCK
				
				&TWELVE_O_CLOCK,
				
			],
			
			&[ // TWELVE_THIRTY
				
				&TWELVE_THIRTY,
				
			],
			
			&[ // TWO_O_CLOCK
				
				&TWO_O_CLOCK,
				
			],
			
			&[ // TWO_THIRTY
				
				&TWO_THIRTY,
				
			],
			
			&[ // WATCH
				
				&WATCH,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&ALARM_CLOCK, // ALARM_CLOCK
				
			
				
				&EIGHT_O_CLOCK, // EIGHT_O_CLOCK
				
			
				
				&EIGHT_THIRTY, // EIGHT_THIRTY
				
			
				
				&ELEVEN_O_CLOCK, // ELEVEN_O_CLOCK
				
			
				
				&ELEVEN_THIRTY, // ELEVEN_THIRTY
				
			
				
				&FIVE_O_CLOCK, // FIVE_O_CLOCK
				
			
				
				&FIVE_THIRTY, // FIVE_THIRTY
				
			
				
				&FOUR_O_CLOCK, // FOUR_O_CLOCK
				
			
				
				&FOUR_THIRTY, // FOUR_THIRTY
				
			
				
				&HOURGLASS_DONE, // HOURGLASS_DONE
				
			
				
				&HOURGLASS_NOT_DONE, // HOURGLASS_NOT_DONE
				
			
				
				&MANTELPIECE_CLOCK, // MANTELPIECE_CLOCK
				
			
				
				&NINE_O_CLOCK, // NINE_O_CLOCK
				
			
				
				&NINE_THIRTY, // NINE_THIRTY
				
			
				
				&ONE_O_CLOCK, // ONE_O_CLOCK
				
			
				
				&ONE_THIRTY, // ONE_THIRTY
				
			
				
				&SEVEN_O_CLOCK, // SEVEN_O_CLOCK
				
			
				
				&SEVEN_THIRTY, // SEVEN_THIRTY
				
			
				
				&SIX_O_CLOCK, // SIX_O_CLOCK
				
			
				
				&SIX_THIRTY, // SIX_THIRTY
				
			
				
				&STOPWATCH, // STOPWATCH
				
			
				
				&TEN_O_CLOCK, // TEN_O_CLOCK
				
			
				
				&TEN_THIRTY, // TEN_THIRTY
				
			
				
				&THREE_O_CLOCK, // THREE_O_CLOCK
				
			
				
				&THREE_THIRTY, // THREE_THIRTY
				
			
				
				&TIMER_CLOCK, // TIMER_CLOCK
				
			
				
				&TWELVE_O_CLOCK, // TWELVE_O_CLOCK
				
			
				
				&TWELVE_THIRTY, // TWELVE_THIRTY
				
			
				
				&TWO_O_CLOCK, // TWO_O_CLOCK
				
			
				
				&TWO_THIRTY, // TWO_THIRTY
				
			
				
				&WATCH, // WATCH
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // time
	
	/// transport_air üö°‚úàÔ∏èüõ¨
	pub mod transport_air {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="aerial tramway üö°"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::AERIAL_TRAMWAY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", AERIAL_TRAMWAY); // üö° (`U+1F6A1`)"] #[doc="# assert_eq!(AERIAL_TRAMWAY.to_string().as_str(), \"üö°\");"]
#[doc="```"]
pub static AERIAL_TRAMWAY :  Emoji = Emoji::new("aerial tramway", Version(1, 0), "üö°"); // aerial tramway
		
		#[doc="airplane ‚úàÔ∏è"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::AIRPLANE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", AIRPLANE); // ‚úàÔ∏è (`U+2708 U+FE0F`)"] #[doc="# assert_eq!(AIRPLANE.to_string().as_str(), \"‚úàÔ∏è\");"]
#[doc="```"]
pub static AIRPLANE :  Emoji = Emoji::new("airplane", Version(0, 6), "‚úàÔ∏è"); // airplane
		
		#[doc="airplane arrival üõ¨"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::AIRPLANE_ARRIVAL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", AIRPLANE_ARRIVAL); // üõ¨ (`U+1F6EC`)"] #[doc="# assert_eq!(AIRPLANE_ARRIVAL.to_string().as_str(), \"üõ¨\");"]
#[doc="```"]
pub static AIRPLANE_ARRIVAL :  Emoji = Emoji::new("airplane arrival", Version(1, 0), "üõ¨"); // airplane arrival
		
		#[doc="airplane departure üõ´"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::AIRPLANE_DEPARTURE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", AIRPLANE_DEPARTURE); // üõ´ (`U+1F6EB`)"] #[doc="# assert_eq!(AIRPLANE_DEPARTURE.to_string().as_str(), \"üõ´\");"]
#[doc="```"]
pub static AIRPLANE_DEPARTURE :  Emoji = Emoji::new("airplane departure", Version(1, 0), "üõ´"); // airplane departure
		
		#[doc="flying saucer üõ∏"]#[doc=""]#[doc="Since E5.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLYING_SAUCER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLYING_SAUCER); // üõ∏ (`U+1F6F8`)"] #[doc="# assert_eq!(FLYING_SAUCER.to_string().as_str(), \"üõ∏\");"]
#[doc="```"]
pub static FLYING_SAUCER :  Emoji = Emoji::new("flying saucer", Version(5, 0), "üõ∏"); // flying saucer
		
		#[doc="helicopter üöÅ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HELICOPTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HELICOPTER); // üöÅ (`U+1F681`)"] #[doc="# assert_eq!(HELICOPTER.to_string().as_str(), \"üöÅ\");"]
#[doc="```"]
pub static HELICOPTER :  Emoji = Emoji::new("helicopter", Version(1, 0), "üöÅ"); // helicopter
		
		#[doc="mountain cableway üö†"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOUNTAIN_CABLEWAY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOUNTAIN_CABLEWAY); // üö† (`U+1F6A0`)"] #[doc="# assert_eq!(MOUNTAIN_CABLEWAY.to_string().as_str(), \"üö†\");"]
#[doc="```"]
pub static MOUNTAIN_CABLEWAY :  Emoji = Emoji::new("mountain cableway", Version(1, 0), "üö†"); // mountain cableway
		
		#[doc="parachute ü™Ç"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PARACHUTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PARACHUTE); // ü™Ç (`U+1FA82`)"] #[doc="# assert_eq!(PARACHUTE.to_string().as_str(), \"ü™Ç\");"]
#[doc="```"]
pub static PARACHUTE :  Emoji = Emoji::new("parachute", Version(12, 0), "ü™Ç"); // parachute
		
		#[doc="rocket üöÄ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ROCKET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ROCKET); // üöÄ (`U+1F680`)"] #[doc="# assert_eq!(ROCKET.to_string().as_str(), \"üöÄ\");"]
#[doc="```"]
pub static ROCKET :  Emoji = Emoji::new("rocket", Version(0, 6), "üöÄ"); // rocket
		
		#[doc="satellite üõ∞Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SATELLITE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SATELLITE); // üõ∞Ô∏è (`U+1F6F0 U+FE0F`)"] #[doc="# assert_eq!(SATELLITE.to_string().as_str(), \"üõ∞Ô∏è\");"]
#[doc="```"]
pub static SATELLITE :  Emoji = Emoji::new("satellite", Version(0, 7), "üõ∞Ô∏è"); // satellite
		
		#[doc="seat üí∫"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SEAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SEAT); // üí∫ (`U+1F4BA`)"] #[doc="# assert_eq!(SEAT.to_string().as_str(), \"üí∫\");"]
#[doc="```"]
pub static SEAT :  Emoji = Emoji::new("seat", Version(0, 6), "üí∫"); // seat
		
		#[doc="small airplane üõ©Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SMALL_AIRPLANE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SMALL_AIRPLANE); // üõ©Ô∏è (`U+1F6E9 U+FE0F`)"] #[doc="# assert_eq!(SMALL_AIRPLANE.to_string().as_str(), \"üõ©Ô∏è\");"]
#[doc="```"]
pub static SMALL_AIRPLANE :  Emoji = Emoji::new("small airplane", Version(0, 7), "üõ©Ô∏è"); // small airplane
		
		#[doc="suspension railway üöü"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUSPENSION_RAILWAY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUSPENSION_RAILWAY); // üöü (`U+1F69F`)"] #[doc="# assert_eq!(SUSPENSION_RAILWAY.to_string().as_str(), \"üöü\");"]
#[doc="```"]
pub static SUSPENSION_RAILWAY :  Emoji = Emoji::new("suspension railway", Version(1, 0), "üöü"); // suspension railway
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // AERIAL_TRAMWAY
				
				&AERIAL_TRAMWAY,
				
			],
			
			&[ // AIRPLANE
				
				&AIRPLANE,
				
			],
			
			&[ // AIRPLANE_ARRIVAL
				
				&AIRPLANE_ARRIVAL,
				
			],
			
			&[ // AIRPLANE_DEPARTURE
				
				&AIRPLANE_DEPARTURE,
				
			],
			
			&[ // FLYING_SAUCER
				
				&FLYING_SAUCER,
				
			],
			
			&[ // HELICOPTER
				
				&HELICOPTER,
				
			],
			
			&[ // MOUNTAIN_CABLEWAY
				
				&MOUNTAIN_CABLEWAY,
				
			],
			
			&[ // PARACHUTE
				
				&PARACHUTE,
				
			],
			
			&[ // ROCKET
				
				&ROCKET,
				
			],
			
			&[ // SATELLITE
				
				&SATELLITE,
				
			],
			
			&[ // SEAT
				
				&SEAT,
				
			],
			
			&[ // SMALL_AIRPLANE
				
				&SMALL_AIRPLANE,
				
			],
			
			&[ // SUSPENSION_RAILWAY
				
				&SUSPENSION_RAILWAY,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&AERIAL_TRAMWAY, // AERIAL_TRAMWAY
				
			
				
				&AIRPLANE, // AIRPLANE
				
			
				
				&AIRPLANE_ARRIVAL, // AIRPLANE_ARRIVAL
				
			
				
				&AIRPLANE_DEPARTURE, // AIRPLANE_DEPARTURE
				
			
				
				&FLYING_SAUCER, // FLYING_SAUCER
				
			
				
				&HELICOPTER, // HELICOPTER
				
			
				
				&MOUNTAIN_CABLEWAY, // MOUNTAIN_CABLEWAY
				
			
				
				&PARACHUTE, // PARACHUTE
				
			
				
				&ROCKET, // ROCKET
				
			
				
				&SATELLITE, // SATELLITE
				
			
				
				&SEAT, // SEAT
				
			
				
				&SMALL_AIRPLANE, // SMALL_AIRPLANE
				
			
				
				&SUSPENSION_RAILWAY, // SUSPENSION_RAILWAY
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // transport_air
	
	/// transport_ground üöëüöõüöó
	pub mod transport_ground {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="ambulance üöë"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::AMBULANCE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", AMBULANCE); // üöë (`U+1F691`)"] #[doc="# assert_eq!(AMBULANCE.to_string().as_str(), \"üöë\");"]
#[doc="```"]
pub static AMBULANCE :  Emoji = Emoji::new("ambulance", Version(0, 6), "üöë"); // ambulance
		
		#[doc="articulated lorry üöõ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ARTICULATED_LORRY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ARTICULATED_LORRY); // üöõ (`U+1F69B`)"] #[doc="# assert_eq!(ARTICULATED_LORRY.to_string().as_str(), \"üöõ\");"]
#[doc="```"]
pub static ARTICULATED_LORRY :  Emoji = Emoji::new("articulated lorry", Version(1, 0), "üöõ"); // articulated lorry
		
		#[doc="automobile üöó"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::AUTOMOBILE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", AUTOMOBILE); // üöó (`U+1F697`)"] #[doc="# assert_eq!(AUTOMOBILE.to_string().as_str(), \"üöó\");"]
#[doc="```"]
pub static AUTOMOBILE :  Emoji = Emoji::new("automobile", Version(0, 6), "üöó"); // automobile
		
		#[doc="auto rickshaw üõ∫"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::AUTO_RICKSHAW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", AUTO_RICKSHAW); // üõ∫ (`U+1F6FA`)"] #[doc="# assert_eq!(AUTO_RICKSHAW.to_string().as_str(), \"üõ∫\");"]
#[doc="```"]
pub static AUTO_RICKSHAW :  Emoji = Emoji::new("auto rickshaw", Version(12, 0), "üõ∫"); // auto rickshaw
		
		#[doc="bicycle üö≤"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BICYCLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BICYCLE); // üö≤ (`U+1F6B2`)"] #[doc="# assert_eq!(BICYCLE.to_string().as_str(), \"üö≤\");"]
#[doc="```"]
pub static BICYCLE :  Emoji = Emoji::new("bicycle", Version(0, 6), "üö≤"); // bicycle
		
		#[doc="bullet train üöÖ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BULLET_TRAIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BULLET_TRAIN); // üöÖ (`U+1F685`)"] #[doc="# assert_eq!(BULLET_TRAIN.to_string().as_str(), \"üöÖ\");"]
#[doc="```"]
pub static BULLET_TRAIN :  Emoji = Emoji::new("bullet train", Version(0, 6), "üöÖ"); // bullet train
		
		#[doc="bus üöå"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BUS); // üöå (`U+1F68C`)"] #[doc="# assert_eq!(BUS.to_string().as_str(), \"üöå\");"]
#[doc="```"]
pub static BUS :  Emoji = Emoji::new("bus", Version(0, 6), "üöå"); // bus
		
		#[doc="bus stop üöè"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BUS_STOP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BUS_STOP); // üöè (`U+1F68F`)"] #[doc="# assert_eq!(BUS_STOP.to_string().as_str(), \"üöè\");"]
#[doc="```"]
pub static BUS_STOP :  Emoji = Emoji::new("bus stop", Version(0, 6), "üöè"); // bus stop
		
		#[doc="construction üöß"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CONSTRUCTION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CONSTRUCTION); // üöß (`U+1F6A7`)"] #[doc="# assert_eq!(CONSTRUCTION.to_string().as_str(), \"üöß\");"]
#[doc="```"]
pub static CONSTRUCTION :  Emoji = Emoji::new("construction", Version(0, 6), "üöß"); // construction
		
		#[doc="delivery truck üöö"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DELIVERY_TRUCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DELIVERY_TRUCK); // üöö (`U+1F69A`)"] #[doc="# assert_eq!(DELIVERY_TRUCK.to_string().as_str(), \"üöö\");"]
#[doc="```"]
pub static DELIVERY_TRUCK :  Emoji = Emoji::new("delivery truck", Version(0, 6), "üöö"); // delivery truck
		
		#[doc="fire engine üöí"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FIRE_ENGINE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FIRE_ENGINE); // üöí (`U+1F692`)"] #[doc="# assert_eq!(FIRE_ENGINE.to_string().as_str(), \"üöí\");"]
#[doc="```"]
pub static FIRE_ENGINE :  Emoji = Emoji::new("fire engine", Version(0, 6), "üöí"); // fire engine
		
		#[doc="fuel pump ‚õΩ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FUEL_PUMP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FUEL_PUMP); // ‚õΩ (`U+26FD`)"] #[doc="# assert_eq!(FUEL_PUMP.to_string().as_str(), \"‚õΩ\");"]
#[doc="```"]
pub static FUEL_PUMP :  Emoji = Emoji::new("fuel pump", Version(0, 6), "‚õΩ"); // fuel pump
		
		#[doc="high-speed train üöÑ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HIGH_SPEED_TRAIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HIGH_SPEED_TRAIN); // üöÑ (`U+1F684`)"] #[doc="# assert_eq!(HIGH_SPEED_TRAIN.to_string().as_str(), \"üöÑ\");"]
#[doc="```"]
pub static HIGH_SPEED_TRAIN :  Emoji = Emoji::new("high-speed train", Version(0, 6), "üöÑ"); // high-speed train
		
		#[doc="horizontal traffic light üö•"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HORIZONTAL_TRAFFIC_LIGHT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HORIZONTAL_TRAFFIC_LIGHT); // üö• (`U+1F6A5`)"] #[doc="# assert_eq!(HORIZONTAL_TRAFFIC_LIGHT.to_string().as_str(), \"üö•\");"]
#[doc="```"]
pub static HORIZONTAL_TRAFFIC_LIGHT :  Emoji = Emoji::new("horizontal traffic light", Version(0, 6), "üö•"); // horizontal traffic light
		
		#[doc="kick scooter üõ¥"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KICK_SCOOTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KICK_SCOOTER); // üõ¥ (`U+1F6F4`)"] #[doc="# assert_eq!(KICK_SCOOTER.to_string().as_str(), \"üõ¥\");"]
#[doc="```"]
pub static KICK_SCOOTER :  Emoji = Emoji::new("kick scooter", Version(3, 0), "üõ¥"); // kick scooter
		
		#[doc="light rail üöà"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LIGHT_RAIL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LIGHT_RAIL); // üöà (`U+1F688`)"] #[doc="# assert_eq!(LIGHT_RAIL.to_string().as_str(), \"üöà\");"]
#[doc="```"]
pub static LIGHT_RAIL :  Emoji = Emoji::new("light rail", Version(1, 0), "üöà"); // light rail
		
		#[doc="locomotive üöÇ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LOCOMOTIVE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LOCOMOTIVE); // üöÇ (`U+1F682`)"] #[doc="# assert_eq!(LOCOMOTIVE.to_string().as_str(), \"üöÇ\");"]
#[doc="```"]
pub static LOCOMOTIVE :  Emoji = Emoji::new("locomotive", Version(1, 0), "üöÇ"); // locomotive
		
		#[doc="manual wheelchair ü¶Ω"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MANUAL_WHEELCHAIR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MANUAL_WHEELCHAIR); // ü¶Ω (`U+1F9BD`)"] #[doc="# assert_eq!(MANUAL_WHEELCHAIR.to_string().as_str(), \"ü¶Ω\");"]
#[doc="```"]
pub static MANUAL_WHEELCHAIR :  Emoji = Emoji::new("manual wheelchair", Version(12, 0), "ü¶Ω"); // manual wheelchair
		
		#[doc="metro üöá"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::METRO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", METRO); // üöá (`U+1F687`)"] #[doc="# assert_eq!(METRO.to_string().as_str(), \"üöá\");"]
#[doc="```"]
pub static METRO :  Emoji = Emoji::new("metro", Version(0, 6), "üöá"); // metro
		
		#[doc="minibus üöê"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MINIBUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MINIBUS); // üöê (`U+1F690`)"] #[doc="# assert_eq!(MINIBUS.to_string().as_str(), \"üöê\");"]
#[doc="```"]
pub static MINIBUS :  Emoji = Emoji::new("minibus", Version(1, 0), "üöê"); // minibus
		
		#[doc="monorail üöù"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MONORAIL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MONORAIL); // üöù (`U+1F69D`)"] #[doc="# assert_eq!(MONORAIL.to_string().as_str(), \"üöù\");"]
#[doc="```"]
pub static MONORAIL :  Emoji = Emoji::new("monorail", Version(1, 0), "üöù"); // monorail
		
		#[doc="motorcycle üèçÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOTORCYCLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOTORCYCLE); // üèçÔ∏è (`U+1F3CD U+FE0F`)"] #[doc="# assert_eq!(MOTORCYCLE.to_string().as_str(), \"üèçÔ∏è\");"]
#[doc="```"]
pub static MOTORCYCLE :  Emoji = Emoji::new("motorcycle", Version(0, 7), "üèçÔ∏è"); // motorcycle
		
		#[doc="motorized wheelchair ü¶º"]#[doc=""]#[doc="Since E12.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOTORIZED_WHEELCHAIR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOTORIZED_WHEELCHAIR); // ü¶º (`U+1F9BC`)"] #[doc="# assert_eq!(MOTORIZED_WHEELCHAIR.to_string().as_str(), \"ü¶º\");"]
#[doc="```"]
pub static MOTORIZED_WHEELCHAIR :  Emoji = Emoji::new("motorized wheelchair", Version(12, 0), "ü¶º"); // motorized wheelchair
		
		#[doc="motorway üõ£Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOTORWAY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOTORWAY); // üõ£Ô∏è (`U+1F6E3 U+FE0F`)"] #[doc="# assert_eq!(MOTORWAY.to_string().as_str(), \"üõ£Ô∏è\");"]
#[doc="```"]
pub static MOTORWAY :  Emoji = Emoji::new("motorway", Version(0, 7), "üõ£Ô∏è"); // motorway
		
		#[doc="motor scooter üõµ"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOTOR_SCOOTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOTOR_SCOOTER); // üõµ (`U+1F6F5`)"] #[doc="# assert_eq!(MOTOR_SCOOTER.to_string().as_str(), \"üõµ\");"]
#[doc="```"]
pub static MOTOR_SCOOTER :  Emoji = Emoji::new("motor scooter", Version(3, 0), "üõµ"); // motor scooter
		
		#[doc="mountain railway üöû"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOUNTAIN_RAILWAY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOUNTAIN_RAILWAY); // üöû (`U+1F69E`)"] #[doc="# assert_eq!(MOUNTAIN_RAILWAY.to_string().as_str(), \"üöû\");"]
#[doc="```"]
pub static MOUNTAIN_RAILWAY :  Emoji = Emoji::new("mountain railway", Version(1, 0), "üöû"); // mountain railway
		
		#[doc="oil drum üõ¢Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OIL_DRUM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OIL_DRUM); // üõ¢Ô∏è (`U+1F6E2 U+FE0F`)"] #[doc="# assert_eq!(OIL_DRUM.to_string().as_str(), \"üõ¢Ô∏è\");"]
#[doc="```"]
pub static OIL_DRUM :  Emoji = Emoji::new("oil drum", Version(0, 7), "üõ¢Ô∏è"); // oil drum
		
		#[doc="oncoming automobile üöò"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ONCOMING_AUTOMOBILE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ONCOMING_AUTOMOBILE); // üöò (`U+1F698`)"] #[doc="# assert_eq!(ONCOMING_AUTOMOBILE.to_string().as_str(), \"üöò\");"]
#[doc="```"]
pub static ONCOMING_AUTOMOBILE :  Emoji = Emoji::new("oncoming automobile", Version(0, 7), "üöò"); // oncoming automobile
		
		#[doc="oncoming bus üöç"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ONCOMING_BUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ONCOMING_BUS); // üöç (`U+1F68D`)"] #[doc="# assert_eq!(ONCOMING_BUS.to_string().as_str(), \"üöç\");"]
#[doc="```"]
pub static ONCOMING_BUS :  Emoji = Emoji::new("oncoming bus", Version(0, 7), "üöç"); // oncoming bus
		
		#[doc="oncoming police car üöî"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ONCOMING_POLICE_CAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ONCOMING_POLICE_CAR); // üöî (`U+1F694`)"] #[doc="# assert_eq!(ONCOMING_POLICE_CAR.to_string().as_str(), \"üöî\");"]
#[doc="```"]
pub static ONCOMING_POLICE_CAR :  Emoji = Emoji::new("oncoming police car", Version(0, 7), "üöî"); // oncoming police car
		
		#[doc="oncoming taxi üöñ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ONCOMING_TAXI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ONCOMING_TAXI); // üöñ (`U+1F696`)"] #[doc="# assert_eq!(ONCOMING_TAXI.to_string().as_str(), \"üöñ\");"]
#[doc="```"]
pub static ONCOMING_TAXI :  Emoji = Emoji::new("oncoming taxi", Version(1, 0), "üöñ"); // oncoming taxi
		
		#[doc="pickup truck üõª"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PICKUP_TRUCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PICKUP_TRUCK); // üõª (`U+1F6FB`)"] #[doc="# assert_eq!(PICKUP_TRUCK.to_string().as_str(), \"üõª\");"]
#[doc="```"]
pub static PICKUP_TRUCK :  Emoji = Emoji::new("pickup truck", Version(13, 0), "üõª"); // pickup truck
		
		#[doc="police car üöì"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POLICE_CAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POLICE_CAR); // üöì (`U+1F693`)"] #[doc="# assert_eq!(POLICE_CAR.to_string().as_str(), \"üöì\");"]
#[doc="```"]
pub static POLICE_CAR :  Emoji = Emoji::new("police car", Version(0, 6), "üöì"); // police car
		
		#[doc="police car light üö®"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POLICE_CAR_LIGHT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POLICE_CAR_LIGHT); // üö® (`U+1F6A8`)"] #[doc="# assert_eq!(POLICE_CAR_LIGHT.to_string().as_str(), \"üö®\");"]
#[doc="```"]
pub static POLICE_CAR_LIGHT :  Emoji = Emoji::new("police car light", Version(0, 6), "üö®"); // police car light
		
		#[doc="racing car üèéÔ∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RACING_CAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RACING_CAR); // üèéÔ∏è (`U+1F3CE U+FE0F`)"] #[doc="# assert_eq!(RACING_CAR.to_string().as_str(), \"üèéÔ∏è\");"]
#[doc="```"]
pub static RACING_CAR :  Emoji = Emoji::new("racing car", Version(0, 7), "üèéÔ∏è"); // racing car
		
		#[doc="railway car üöÉ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RAILWAY_CAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RAILWAY_CAR); // üöÉ (`U+1F683`)"] #[doc="# assert_eq!(RAILWAY_CAR.to_string().as_str(), \"üöÉ\");"]
#[doc="```"]
pub static RAILWAY_CAR :  Emoji = Emoji::new("railway car", Version(0, 6), "üöÉ"); // railway car
		
		#[doc="railway track üõ§Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RAILWAY_TRACK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RAILWAY_TRACK); // üõ§Ô∏è (`U+1F6E4 U+FE0F`)"] #[doc="# assert_eq!(RAILWAY_TRACK.to_string().as_str(), \"üõ§Ô∏è\");"]
#[doc="```"]
pub static RAILWAY_TRACK :  Emoji = Emoji::new("railway track", Version(0, 7), "üõ§Ô∏è"); // railway track
		
		#[doc="roller skate üõº"]#[doc=""]#[doc="Since E13.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ROLLER_SKATE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ROLLER_SKATE); // üõº (`U+1F6FC`)"] #[doc="# assert_eq!(ROLLER_SKATE.to_string().as_str(), \"üõº\");"]
#[doc="```"]
pub static ROLLER_SKATE :  Emoji = Emoji::new("roller skate", Version(13, 0), "üõº"); // roller skate
		
		#[doc="skateboard üõπ"]#[doc=""]#[doc="Since E11.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SKATEBOARD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SKATEBOARD); // üõπ (`U+1F6F9`)"] #[doc="# assert_eq!(SKATEBOARD.to_string().as_str(), \"üõπ\");"]
#[doc="```"]
pub static SKATEBOARD :  Emoji = Emoji::new("skateboard", Version(11, 0), "üõπ"); // skateboard
		
		#[doc="sport utility vehicle üöô"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPORT_UTILITY_VEHICLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPORT_UTILITY_VEHICLE); // üöô (`U+1F699`)"] #[doc="# assert_eq!(SPORT_UTILITY_VEHICLE.to_string().as_str(), \"üöô\");"]
#[doc="```"]
pub static SPORT_UTILITY_VEHICLE :  Emoji = Emoji::new("sport utility vehicle", Version(0, 6), "üöô"); // sport utility vehicle
		
		#[doc="station üöâ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STATION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STATION); // üöâ (`U+1F689`)"] #[doc="# assert_eq!(STATION.to_string().as_str(), \"üöâ\");"]
#[doc="```"]
pub static STATION :  Emoji = Emoji::new("station", Version(0, 6), "üöâ"); // station
		
		#[doc="stop sign üõë"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STOP_SIGN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STOP_SIGN); // üõë (`U+1F6D1`)"] #[doc="# assert_eq!(STOP_SIGN.to_string().as_str(), \"üõë\");"]
#[doc="```"]
pub static STOP_SIGN :  Emoji = Emoji::new("stop sign", Version(3, 0), "üõë"); // stop sign
		
		#[doc="taxi üöï"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TAXI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TAXI); // üöï (`U+1F695`)"] #[doc="# assert_eq!(TAXI.to_string().as_str(), \"üöï\");"]
#[doc="```"]
pub static TAXI :  Emoji = Emoji::new("taxi", Version(0, 6), "üöï"); // taxi
		
		#[doc="tractor üöú"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TRACTOR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TRACTOR); // üöú (`U+1F69C`)"] #[doc="# assert_eq!(TRACTOR.to_string().as_str(), \"üöú\");"]
#[doc="```"]
pub static TRACTOR :  Emoji = Emoji::new("tractor", Version(1, 0), "üöú"); // tractor
		
		#[doc="train üöÜ"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TRAIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TRAIN); // üöÜ (`U+1F686`)"] #[doc="# assert_eq!(TRAIN.to_string().as_str(), \"üöÜ\");"]
#[doc="```"]
pub static TRAIN :  Emoji = Emoji::new("train", Version(1, 0), "üöÜ"); // train
		
		#[doc="tram üöä"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TRAM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TRAM); // üöä (`U+1F68A`)"] #[doc="# assert_eq!(TRAM.to_string().as_str(), \"üöä\");"]
#[doc="```"]
pub static TRAM :  Emoji = Emoji::new("tram", Version(1, 0), "üöä"); // tram
		
		#[doc="tram car üöã"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TRAM_CAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TRAM_CAR); // üöã (`U+1F68B`)"] #[doc="# assert_eq!(TRAM_CAR.to_string().as_str(), \"üöã\");"]
#[doc="```"]
pub static TRAM_CAR :  Emoji = Emoji::new("tram car", Version(1, 0), "üöã"); // tram car
		
		#[doc="trolleybus üöé"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TROLLEYBUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TROLLEYBUS); // üöé (`U+1F68E`)"] #[doc="# assert_eq!(TROLLEYBUS.to_string().as_str(), \"üöé\");"]
#[doc="```"]
pub static TROLLEYBUS :  Emoji = Emoji::new("trolleybus", Version(1, 0), "üöé"); // trolleybus
		
		#[doc="vertical traffic light üö¶"]#[doc=""]#[doc="Since E1.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::VERTICAL_TRAFFIC_LIGHT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", VERTICAL_TRAFFIC_LIGHT); // üö¶ (`U+1F6A6`)"] #[doc="# assert_eq!(VERTICAL_TRAFFIC_LIGHT.to_string().as_str(), \"üö¶\");"]
#[doc="```"]
pub static VERTICAL_TRAFFIC_LIGHT :  Emoji = Emoji::new("vertical traffic light", Version(1, 0), "üö¶"); // vertical traffic light
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // AMBULANCE
				
				&AMBULANCE,
				
			],
			
			&[ // ARTICULATED_LORRY
				
				&ARTICULATED_LORRY,
				
			],
			
			&[ // AUTOMOBILE
				
				&AUTOMOBILE,
				
			],
			
			&[ // AUTO_RICKSHAW
				
				&AUTO_RICKSHAW,
				
			],
			
			&[ // BICYCLE
				
				&BICYCLE,
				
			],
			
			&[ // BULLET_TRAIN
				
				&BULLET_TRAIN,
				
			],
			
			&[ // BUS
				
				&BUS,
				
			],
			
			&[ // BUS_STOP
				
				&BUS_STOP,
				
			],
			
			&[ // CONSTRUCTION
				
				&CONSTRUCTION,
				
			],
			
			&[ // DELIVERY_TRUCK
				
				&DELIVERY_TRUCK,
				
			],
			
			&[ // FIRE_ENGINE
				
				&FIRE_ENGINE,
				
			],
			
			&[ // FUEL_PUMP
				
				&FUEL_PUMP,
				
			],
			
			&[ // HIGH_SPEED_TRAIN
				
				&HIGH_SPEED_TRAIN,
				
			],
			
			&[ // HORIZONTAL_TRAFFIC_LIGHT
				
				&HORIZONTAL_TRAFFIC_LIGHT,
				
			],
			
			&[ // KICK_SCOOTER
				
				&KICK_SCOOTER,
				
			],
			
			&[ // LIGHT_RAIL
				
				&LIGHT_RAIL,
				
			],
			
			&[ // LOCOMOTIVE
				
				&LOCOMOTIVE,
				
			],
			
			&[ // MANUAL_WHEELCHAIR
				
				&MANUAL_WHEELCHAIR,
				
			],
			
			&[ // METRO
				
				&METRO,
				
			],
			
			&[ // MINIBUS
				
				&MINIBUS,
				
			],
			
			&[ // MONORAIL
				
				&MONORAIL,
				
			],
			
			&[ // MOTORCYCLE
				
				&MOTORCYCLE,
				
			],
			
			&[ // MOTORIZED_WHEELCHAIR
				
				&MOTORIZED_WHEELCHAIR,
				
			],
			
			&[ // MOTORWAY
				
				&MOTORWAY,
				
			],
			
			&[ // MOTOR_SCOOTER
				
				&MOTOR_SCOOTER,
				
			],
			
			&[ // MOUNTAIN_RAILWAY
				
				&MOUNTAIN_RAILWAY,
				
			],
			
			&[ // OIL_DRUM
				
				&OIL_DRUM,
				
			],
			
			&[ // ONCOMING_AUTOMOBILE
				
				&ONCOMING_AUTOMOBILE,
				
			],
			
			&[ // ONCOMING_BUS
				
				&ONCOMING_BUS,
				
			],
			
			&[ // ONCOMING_POLICE_CAR
				
				&ONCOMING_POLICE_CAR,
				
			],
			
			&[ // ONCOMING_TAXI
				
				&ONCOMING_TAXI,
				
			],
			
			&[ // PICKUP_TRUCK
				
				&PICKUP_TRUCK,
				
			],
			
			&[ // POLICE_CAR
				
				&POLICE_CAR,
				
			],
			
			&[ // POLICE_CAR_LIGHT
				
				&POLICE_CAR_LIGHT,
				
			],
			
			&[ // RACING_CAR
				
				&RACING_CAR,
				
			],
			
			&[ // RAILWAY_CAR
				
				&RAILWAY_CAR,
				
			],
			
			&[ // RAILWAY_TRACK
				
				&RAILWAY_TRACK,
				
			],
			
			&[ // ROLLER_SKATE
				
				&ROLLER_SKATE,
				
			],
			
			&[ // SKATEBOARD
				
				&SKATEBOARD,
				
			],
			
			&[ // SPORT_UTILITY_VEHICLE
				
				&SPORT_UTILITY_VEHICLE,
				
			],
			
			&[ // STATION
				
				&STATION,
				
			],
			
			&[ // STOP_SIGN
				
				&STOP_SIGN,
				
			],
			
			&[ // TAXI
				
				&TAXI,
				
			],
			
			&[ // TRACTOR
				
				&TRACTOR,
				
			],
			
			&[ // TRAIN
				
				&TRAIN,
				
			],
			
			&[ // TRAM
				
				&TRAM,
				
			],
			
			&[ // TRAM_CAR
				
				&TRAM_CAR,
				
			],
			
			&[ // TROLLEYBUS
				
				&TROLLEYBUS,
				
			],
			
			&[ // VERTICAL_TRAFFIC_LIGHT
				
				&VERTICAL_TRAFFIC_LIGHT,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&AMBULANCE, // AMBULANCE
				
			
				
				&ARTICULATED_LORRY, // ARTICULATED_LORRY
				
			
				
				&AUTOMOBILE, // AUTOMOBILE
				
			
				
				&AUTO_RICKSHAW, // AUTO_RICKSHAW
				
			
				
				&BICYCLE, // BICYCLE
				
			
				
				&BULLET_TRAIN, // BULLET_TRAIN
				
			
				
				&BUS, // BUS
				
			
				
				&BUS_STOP, // BUS_STOP
				
			
				
				&CONSTRUCTION, // CONSTRUCTION
				
			
				
				&DELIVERY_TRUCK, // DELIVERY_TRUCK
				
			
				
				&FIRE_ENGINE, // FIRE_ENGINE
				
			
				
				&FUEL_PUMP, // FUEL_PUMP
				
			
				
				&HIGH_SPEED_TRAIN, // HIGH_SPEED_TRAIN
				
			
				
				&HORIZONTAL_TRAFFIC_LIGHT, // HORIZONTAL_TRAFFIC_LIGHT
				
			
				
				&KICK_SCOOTER, // KICK_SCOOTER
				
			
				
				&LIGHT_RAIL, // LIGHT_RAIL
				
			
				
				&LOCOMOTIVE, // LOCOMOTIVE
				
			
				
				&MANUAL_WHEELCHAIR, // MANUAL_WHEELCHAIR
				
			
				
				&METRO, // METRO
				
			
				
				&MINIBUS, // MINIBUS
				
			
				
				&MONORAIL, // MONORAIL
				
			
				
				&MOTORCYCLE, // MOTORCYCLE
				
			
				
				&MOTORIZED_WHEELCHAIR, // MOTORIZED_WHEELCHAIR
				
			
				
				&MOTORWAY, // MOTORWAY
				
			
				
				&MOTOR_SCOOTER, // MOTOR_SCOOTER
				
			
				
				&MOUNTAIN_RAILWAY, // MOUNTAIN_RAILWAY
				
			
				
				&OIL_DRUM, // OIL_DRUM
				
			
				
				&ONCOMING_AUTOMOBILE, // ONCOMING_AUTOMOBILE
				
			
				
				&ONCOMING_BUS, // ONCOMING_BUS
				
			
				
				&ONCOMING_POLICE_CAR, // ONCOMING_POLICE_CAR
				
			
				
				&ONCOMING_TAXI, // ONCOMING_TAXI
				
			
				
				&PICKUP_TRUCK, // PICKUP_TRUCK
				
			
				
				&POLICE_CAR, // POLICE_CAR
				
			
				
				&POLICE_CAR_LIGHT, // POLICE_CAR_LIGHT
				
			
				
				&RACING_CAR, // RACING_CAR
				
			
				
				&RAILWAY_CAR, // RAILWAY_CAR
				
			
				
				&RAILWAY_TRACK, // RAILWAY_TRACK
				
			
				
				&ROLLER_SKATE, // ROLLER_SKATE
				
			
				
				&SKATEBOARD, // SKATEBOARD
				
			
				
				&SPORT_UTILITY_VEHICLE, // SPORT_UTILITY_VEHICLE
				
			
				
				&STATION, // STATION
				
			
				
				&STOP_SIGN, // STOP_SIGN
				
			
				
				&TAXI, // TAXI
				
			
				
				&TRACTOR, // TRACTOR
				
			
				
				&TRAIN, // TRAIN
				
			
				
				&TRAM, // TRAM
				
			
				
				&TRAM_CAR, // TRAM_CAR
				
			
				
				&TROLLEYBUS, // TROLLEYBUS
				
			
				
				&VERTICAL_TRAFFIC_LIGHT, // VERTICAL_TRAFFIC_LIGHT
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // transport_ground
	
	/// transport_water ‚öìüõ∂‚õ¥Ô∏è
	pub mod transport_water {

		use crate::emojis::Emoji;
		use crate::emojis::Family;
		use crate::emojis::Gender;
		use crate::emojis::Hair;
		use crate::emojis::OneOrTwo;
		use crate::emojis::Pair;
		use crate::emojis::Tone;
		use crate::emojis::TonePair;
		//use crate::emojis::TonePairReduced;
		use crate::emojis::With;
		use crate::emojis::WithNoDef;
		use crate::emojis::Version;

		// List of all emoji statics

		
		#[doc="anchor ‚öì"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ANCHOR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ANCHOR); // ‚öì (`U+2693`)"] #[doc="# assert_eq!(ANCHOR.to_string().as_str(), \"‚öì\");"]
#[doc="```"]
pub static ANCHOR :  Emoji = Emoji::new("anchor", Version(0, 6), "‚öì"); // anchor
		
		#[doc="canoe üõ∂"]#[doc=""]#[doc="Since E3.0"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CANOE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CANOE); // üõ∂ (`U+1F6F6`)"] #[doc="# assert_eq!(CANOE.to_string().as_str(), \"üõ∂\");"]
#[doc="```"]
pub static CANOE :  Emoji = Emoji::new("canoe", Version(3, 0), "üõ∂"); // canoe
		
		#[doc="ferry ‚õ¥Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FERRY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FERRY); // ‚õ¥Ô∏è (`U+26F4 U+FE0F`)"] #[doc="# assert_eq!(FERRY.to_string().as_str(), \"‚õ¥Ô∏è\");"]
#[doc="```"]
pub static FERRY :  Emoji = Emoji::new("ferry", Version(0, 7), "‚õ¥Ô∏è"); // ferry
		
		#[doc="motor boat üõ•Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOTOR_BOAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOTOR_BOAT); // üõ•Ô∏è (`U+1F6E5 U+FE0F`)"] #[doc="# assert_eq!(MOTOR_BOAT.to_string().as_str(), \"üõ•Ô∏è\");"]
#[doc="```"]
pub static MOTOR_BOAT :  Emoji = Emoji::new("motor boat", Version(0, 7), "üõ•Ô∏è"); // motor boat
		
		#[doc="passenger ship üõ≥Ô∏è"]#[doc=""]#[doc="Since E0.7"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PASSENGER_SHIP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PASSENGER_SHIP); // üõ≥Ô∏è (`U+1F6F3 U+FE0F`)"] #[doc="# assert_eq!(PASSENGER_SHIP.to_string().as_str(), \"üõ≥Ô∏è\");"]
#[doc="```"]
pub static PASSENGER_SHIP :  Emoji = Emoji::new("passenger ship", Version(0, 7), "üõ≥Ô∏è"); // passenger ship
		
		#[doc="sailboat ‚õµ"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SAILBOAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SAILBOAT); // ‚õµ (`U+26F5`)"] #[doc="# assert_eq!(SAILBOAT.to_string().as_str(), \"‚õµ\");"]
#[doc="```"]
pub static SAILBOAT :  Emoji = Emoji::new("sailboat", Version(0, 6), "‚õµ"); // sailboat
		
		#[doc="ship üö¢"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHIP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHIP); // üö¢ (`U+1F6A2`)"] #[doc="# assert_eq!(SHIP.to_string().as_str(), \"üö¢\");"]
#[doc="```"]
pub static SHIP :  Emoji = Emoji::new("ship", Version(0, 6), "üö¢"); // ship
		
		#[doc="speedboat üö§"]#[doc=""]#[doc="Since E0.6"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPEEDBOAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPEEDBOAT); // üö§ (`U+1F6A4`)"] #[doc="# assert_eq!(SPEEDBOAT.to_string().as_str(), \"üö§\");"]
#[doc="```"]
pub static SPEEDBOAT :  Emoji = Emoji::new("speedboat", Version(0, 6), "üö§"); // speedboat
		


		// Statics with slice of all emojis

		/// Contains the list of all variants of each emoji.
		static ALL_VARIANTS: &[&[&Emoji]] = &[
			
			&[ // ANCHOR
				
				&ANCHOR,
				
			],
			
			&[ // CANOE
				
				&CANOE,
				
			],
			
			&[ // FERRY
				
				&FERRY,
				
			],
			
			&[ // MOTOR_BOAT
				
				&MOTOR_BOAT,
				
			],
			
			&[ // PASSENGER_SHIP
				
				&PASSENGER_SHIP,
				
			],
			
			&[ // SAILBOAT
				
				&SAILBOAT,
				
			],
			
			&[ // SHIP
				
				&SHIP,
				
			],
			
			&[ // SPEEDBOAT
				
				&SPEEDBOAT,
				
			],
			
		];

		/// Contains the base emoij of each emoji.
		static ALL_BASE_EMOJIS: &[&Emoji] = &[
			
				
				&ANCHOR, // ANCHOR
				
			
				
				&CANOE, // CANOE
				
			
				
				&FERRY, // FERRY
				
			
				
				&MOTOR_BOAT, // MOTOR_BOAT
				
			
				
				&PASSENGER_SHIP, // PASSENGER_SHIP
				
			
				
				&SAILBOAT, // SAILBOAT
				
			
				
				&SHIP, // SHIP
				
			
				
				&SPEEDBOAT, // SPEEDBOAT
				
			
		];


		// Emoji iterators

		/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
		pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
			ALL_VARIANTS.iter().copied()
		}

		/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
		pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
			ALL_BASE_EMOJIS.iter().copied()
		}

	} // transport_water
	


	// Emoji iterators

	/// Returns an iterator over all emoji variants of these subgroups grouped by base emojis
	pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
		core::iter::empty()
		
			.chain(hotel::all_variants())
		
			.chain(place_building::all_variants())
		
			.chain(place_geographic::all_variants())
		
			.chain(place_map::all_variants())
		
			.chain(place_other::all_variants())
		
			.chain(place_religious::all_variants())
		
			.chain(sky_and_weather::all_variants())
		
			.chain(time::all_variants())
		
			.chain(transport_air::all_variants())
		
			.chain(transport_ground::all_variants())
		
			.chain(transport_water::all_variants())
		
	}

	/// Returns an iterator over all base emojis of these subgroups (i.e. one for each static)
	pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
		core::iter::empty()
		
			.chain(hotel::base_emojis())
		
			.chain(place_building::base_emojis())
		
			.chain(place_geographic::base_emojis())
		
			.chain(place_map::base_emojis())
		
			.chain(place_other::base_emojis())
		
			.chain(place_religious::base_emojis())
		
			.chain(sky_and_weather::base_emojis())
		
			.chain(time::base_emojis())
		
			.chain(transport_air::base_emojis())
		
			.chain(transport_ground::base_emojis())
		
			.chain(transport_water::base_emojis())
		
	}

} // travel_and_places



// Emoji iterators

/// Returns an iterator over all emoji variants of all groups together grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
	core::iter::empty()
	
		.chain(activities::all_variants())
	
		.chain(animals_and_nature::all_variants())
	
		.chain(component::all_variants())
	
		.chain(flags::all_variants())
	
		.chain(food_and_drink::all_variants())
	
		.chain(objects::all_variants())
	
		.chain(people_and_body::all_variants())
	
		.chain(smileys_and_emotion::all_variants())
	
		.chain(symbols::all_variants())
	
		.chain(travel_and_places::all_variants())
	
}

/// Returns an iterator over all base emojis of all groups together (i.e. one for each static)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
	core::iter::empty()
	
		.chain(activities::base_emojis())
	
		.chain(animals_and_nature::base_emojis())
	
		.chain(component::base_emojis())
	
		.chain(flags::base_emojis())
	
		.chain(food_and_drink::base_emojis())
	
		.chain(objects::base_emojis())
	
		.chain(people_and_body::base_emojis())
	
		.chain(smileys_and_emotion::base_emojis())
	
		.chain(symbols::base_emojis())
	
		.chain(travel_and_places::base_emojis())
	
}

// EOF